var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/// <reference path="../declarations/DataStore/BadgeCase.d.ts" />
/// <reference path="../declarations/party/Category.d.ts"/>
class App {
    static start() {
        // Hide tooltips that stay on game load
        $('.tooltip').tooltip('hide');
        if (!App.debug) {
            Object.freeze(GameConstants);
        }
        Preload.load(App.debug).then(() => {
            ko.options.deferUpdates = true;
            console.log(`[${GameConstants.formatDate(new Date())}] %cLoading Game Data..`, 'color:#8e44ad;font-weight:900;');
            // Needs to be loaded first so save data can be updated (specifically "player" data)
            const update = new Update();
            const multiplier = new Multiplier();
            player = Save.load();
            App.game = new Game(update, new Profile(), new Breeding(multiplier), new Pokeballs(), new Wallet(multiplier), new KeyItems(), new BadgeCase(), new OakItems([20, 50, 100], multiplier), new OakItemLoadouts(), new PokemonCategories(), new Party(multiplier), new Gems(), new Underground(), new Farming(multiplier), new LogBook(), new RedeemableCodes(), new Statistics(), new Quests(), new SpecialEvents(), new Discord(), new AchievementTracker(), new Challenges(), new BattleFrontier(), multiplier, new SaveReminder(), new BattleCafeSaveObject());
            console.log(`[${GameConstants.formatDate(new Date())}] %cGame loaded`, 'color:#2ecc71;font-weight:900;');
            Notifier.notify({ message: 'Game loaded', type: NotificationConstants.NotificationOption.info });
            console.log(`[${GameConstants.formatDate(new Date())}] %cStarting game..`, 'color:#8e44ad;font-weight:900;');
            GameController.bindToolTips();
            GameController.addKeyListeners();
            PokedexHelper.populateFilters();
            PokedexHelper.updateList();
            App.game.initialize();
            // Fixes custom theme css if Default theme was different from save theme (must be done before bindings)
            document.body.className = 'no-select';
            ko.applyBindings(App.game);
            GameController.applyRouteBindings();
            Preload.hideSplashScreen();
            App.game.start();
        });
    }
}
App.debug = false;
///<reference path="../../../declarations/enums/EvolutionType.d.ts"/>
class Evolution {
    constructor(basePokemon) {
        this.basePokemon = basePokemon;
        this.type = [];
    }
    isSatisfied() {
        // Check that evolution is within reached regions
        return PokemonHelper.calcNativeRegion(this.getEvolvedPokemon()) <= player.highestRegion();
    }
    evolve(notification = false) {
        const evolvedPokemon = this.getEvolvedPokemon();
        // This Pokemon is from a region we haven't reached yet
        if (PokemonHelper.calcNativeRegion(evolvedPokemon) > player.highestRegion()) {
            return false;
        }
        const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_STONE);
        // Notify the player if they haven't already caught the evolution, it's shiny, or notifications are forced
        if (!App.game.party.alreadyCaughtPokemonByName(evolvedPokemon) || shiny || notification) {
            Notifier.notify({
                message: `Your ${this.basePokemon} evolved into ${shiny ? 'a shiny' : GameHelper.anOrA(evolvedPokemon)} ${evolvedPokemon}!`,
                type: NotificationConstants.NotificationOption.success,
                sound: NotificationConstants.NotificationSound.General.new_catch,
                setting: NotificationConstants.NotificationSetting.General.new_catch,
            });
        }
        // Add shiny to logbook
        if (shiny) {
            App.game.logbook.newLog(LogBookTypes.SHINY, `Your ${this.basePokemon} evolved into a shiny ${evolvedPokemon}! ${App.game.party.alreadyCaughtPokemonByName(evolvedPokemon, true) ? '(duplicate)' : ''}`);
        }
        App.game.party.gainPokemonById(PokemonHelper.getPokemonByName(evolvedPokemon).id, shiny, true);
        // EVs
        const evolvedPartyPokemon = App.game.party.getPokemonByName(evolvedPokemon);
        evolvedPartyPokemon.effortPoints += App.game.party.calculateEffortPoints(evolvedPartyPokemon, shiny, GameConstants.STONE_EP_YIELD);
        return shiny;
    }
}
function restrictEvoWith(restrictionTest, type = null) {
    return function (Base) {
        return class extends Base {
            constructor(...args) {
                super(...args);
                if (type !== null) {
                    this.type.push(type);
                }
            }
            isSatisfied() {
                return restrictionTest() && super.isSatisfied();
            }
        };
    };
}
///<reference path="Evolution.ts"/>
class StoneEvolution extends Evolution {
    constructor(basePokemon, evolvedPokemon, stone) {
        super(basePokemon);
        this.evolvedPokemon = evolvedPokemon;
        this.stone = stone;
        this.type.push(EvolutionType.Stone);
    }
    getEvolvedPokemon() {
        return this.evolvedPokemon;
    }
}
///<reference path="Evolution.ts"/>
class LevelEvolution extends Evolution {
    constructor(basePokemon, evolvedPokemon, level) {
        super(basePokemon);
        this.evolvedPokemon = evolvedPokemon;
        this.level = level;
        this.type.push(EvolutionType.Level);
    }
    getEvolvedPokemon() {
        return this.evolvedPokemon;
    }
    isSatisfied() {
        return super.isSatisfied()
            // Check high enough level
            && App.game.party.getPokemon(PokemonHelper.getPokemonByName(this.basePokemon).id).level >= this.level;
    }
    evolve() {
        if (this.triggered) {
            return false;
        }
        this.triggered = true;
        // We have already obtained the evolution
        if (App.game.party.alreadyCaughtPokemonByName(this.getEvolvedPokemon())) {
            return false;
        }
        return super.evolve(true);
    }
}
function LocationRestricted(Base) {
    return class extends Base {
        constructor(...args) {
            super(...args);
        }
        isSatisfied() {
            return this.atLocation()
                && super.isSatisfied();
        }
    };
}
/// <reference path="./LocationRestriction.ts" />
function ByDungeon(Base) {
    return class extends Base {
        constructor(...args) {
            const [dungeon, ...rest] = args;
            super(...rest);
            this.type.push(EvolutionType.Dungeon);
            this.dungeon = dungeon;
        }
        atLocation() {
            return App.game.gameState == GameConstants.GameState.dungeon
                && DungeonRunner.dungeon.name == this.dungeon;
        }
    };
}
function DungeonRestricted(Base) {
    return LocationRestricted(ByDungeon(Base));
}
const AnyDungeonRestricted = restrictEvoWith(() => App.game.gameState == GameConstants.GameState.dungeon, EvolutionType.Dungeon);
/// <reference path="./LocationRestriction.ts" />
function ByGym(Base) {
    return class extends Base {
        constructor(...args) {
            const [town, ...rest] = args;
            super(...rest);
            this.type.push(EvolutionType.Gym);
            this.town = town;
        }
        atLocation() {
            return App.game.gameState == GameConstants.GameState.gym
                && GymRunner.gymObservable().town == this.town;
        }
    };
}
function GymRestricted(Base) {
    return LocationRestricted(ByGym(Base));
}
const AnyGymRestricted = restrictEvoWith(() => App.game.gameState == GameConstants.GameState.gym, EvolutionType.Gym);
function TimeRestricted(start, end, Base) {
    return class extends Base {
        constructor(...args) {
            super(...args);
            this.startHour = start;
            this.endHour = end;
            this.type.push(EvolutionType.Timed);
        }
        isWithinTime() {
            const currentHour = new Date().getHours();
            return this.startHour < this.endHour ?
                // If the start time is before the end time, both need to be true
                currentHour >= this.startHour && currentHour < this.endHour :
                // If the start time is after the end time, only 1 needs to be true
                currentHour >= this.startHour || currentHour < this.endHour;
        }
        isSatisfied() {
            // Check current time within evolution hours
            return this.isWithinTime()
                && super.isSatisfied();
        }
    };
}
function DayTimeRestricted(Base) {
    return TimeRestricted(6, 18, Base);
}
function NightTimeRestricted(Base) {
    return TimeRestricted(18, 6, Base);
}
/// <reference path="../../GameConstants.d.ts" />
function EnvironmentRestricted(Base) {
    const Mixin = class extends Base {
        constructor(...args) {
            const [env, ...rest] = args;
            super(...rest);
            this.environment = env;
            this.type.push(EvolutionType.Environment);
        }
        isSatisfied() {
            return MapHelper.getCurrentEnvironment() == this.environment
                && super.isSatisfied();
        }
    };
    return Mixin;
}
/// <reference path="../../GameConstants.d.ts" />
function QuestlineRestricted(Base) {
    const Mixin = class extends Base {
        constructor(...args) {
            const [questName, ...rest] = args;
            super(...rest);
            this.questName = questName;
            this.type.push(EvolutionType.Questline);
        }
        isSatisfied() {
            return App.game.quests.getQuestLine(this.questName).state() == QuestLineState.ended
                && super.isSatisfied();
        }
    };
    return Mixin;
}
/// <reference path="./StoneEvolution.ts" />
/// <reference path="./LevelEvolution.ts" />
/// <reference path="./DungeonRestriction.ts" />
/// <reference path="./GymRestriction.ts" />
/// <reference path="./TimedRestriction.ts" />
/// <reference path="./EnvironmentRestriction.ts" />
/// <reference path="./QuestlineRestriction.ts" />
// Used for custom time ranges
function TimeRestrictedBase(Base) {
    return function (start, end, ...rest) {
        const tmpClass = TimeRestricted(start, end, Base);
        return new tmpClass(...rest);
    };
}
// new TimeRestrictedLevelEvolution(start: number, end: number, basePokemon: string, evolvedPokemon: string, level: number)
const TimeRestrictedLevelEvolution = TimeRestrictedBase(LevelEvolution);
// new TimeRestrictedStoneEvolution(start: number, end: number, basePokemon: string, evolvedPokemon: string, stone: GameConstants.StoneType
const TimeRestrictedStoneEvolution = TimeRestrictedBase(StoneEvolution);
// new DayTimedLevelEvolution(basePokemon: string, evolvedPokemon: string, level: number)
const DayTimedLevelEvolution = DayTimeRestricted(LevelEvolution);
// new NightTimedLevelEvolution(basePokemon: string, evolvedPokemon: string, level: number)
const NightTimedLevelEvolution = NightTimeRestricted(LevelEvolution);
// new DayTimedStoneEvolution(basePokemon: string, evolvedPokemon: string, stone: GameConstants.StoneType)
const DayTimedStoneEvolution = DayTimeRestricted(StoneEvolution);
// NightTimedStoneEvolution(basePokemon: string, evolvedPokemon: string, stone: GameConstants.StoneType)
const NightTimedStoneEvolution = NightTimeRestricted(StoneEvolution);
// new DungeonRestrictedLevelEvolution(dungeon: string, basePokemon: string, evolvedPokemon: string, level: number)
const DungeonRestrictedLevelEvolution = DungeonRestricted(LevelEvolution);
// new AnyDungeonLevelEvolution(basePokemon: string, evolvedPokemon: string, level: number)
const AnyDungeonLevelEvolution = AnyDungeonRestricted(LevelEvolution);
// new AnyGymLevelEvolution(basePokemon: string, evolvedPokemon: string, level: number)
const AnyGymLevelEvolution = AnyGymRestricted(LevelEvolution);
// new EnvironmentRestrictedLevelEvolution(environment: Environment, basePokemon: string, evolvedPokemon: string, level: number)
// an Environment is any key of GameConstants.Environments, eg 'Cave' or 'PowerPlant'
const EnvironmentRestrictedLevelEvolution = EnvironmentRestricted(LevelEvolution);
// new EnvironmentDungeonLevelEvolution(environment: Environment, basePokemon: string, evolvedPokemon: string, level: number)
const EnvironmentDungeonLevelEvolution = EnvironmentRestricted(AnyDungeonLevelEvolution);
// new EnvironmentGymLevelEvolution(environment: Environment, basePokemon: string, evolvedPokemon: string, level: number)
const EnvironmentGymLevelEvolution = EnvironmentRestricted(AnyGymLevelEvolution);
// RegionStoneEvolution(region: GameConstants.Region, basePokemon: string, evolvedPokemon: string, stone: GameConstants.StoneType)
const RegionStoneEvolution = RegionRestricted(StoneEvolution);
// new RegionLevelEvolution(region: GameConstants.Region, basePokemon: string, evolvedPokemon: string, level: number)
const RegionLevelEvolution = RegionRestricted(LevelEvolution);
// new RegionLevelEvolution(region: GameConstants.Region, basePokemon: string, evolvedPokemon: string, level: number)
const RegionDayTimedLevelEvolution = RegionRestricted(DayTimedLevelEvolution);
// new RegionLevelEvolution(region: GameConstants.Region, basePokemon: string, evolvedPokemon: string, level: number)
const RegionNightTimedLevelEvolution = RegionRestricted(NightTimedLevelEvolution);
// new QuestlineLevelEvolution(region: GameConstants.Region, basePokemon: string, evolvedPokemon: string, level: number)
const QuestlineLevelEvolution = QuestlineRestricted(LevelEvolution);
class WeatherRestrictedLevelEvolution extends LevelEvolution {
    constructor(basePokemon, evolvedPokemon, level, weather) {
        super(basePokemon, evolvedPokemon, level);
        this.weather = weather;
        this.type.push(EvolutionType.Weather);
    }
    isSatisfied() {
        return super.isSatisfied()
            // Check Weather conditions
            && this.weather.includes(Weather.currentWeather());
    }
}
///<reference path="Evolution.ts"/>
class HeldItemLevelEvolution extends LevelEvolution {
    constructor(basePokemon, evolvedPokemon, level, heldItemName) {
        super(basePokemon, evolvedPokemon, level);
        this.heldItemName = heldItemName;
        this.type.push(EvolutionType.Level);
    }
    isSatisfied() {
        if (!super.isSatisfied()) {
            return false;
        }
        const heldItem = App.game.party.getPokemon(PokemonHelper.getPokemonByName(this.basePokemon).id).heldItem();
        return heldItem && heldItem.name == this.heldItemName;
    }
}
/// <reference path="../party/evolutions/EvolutionMethods.ts" />
/// <reference path="../party/evolutions/WeatherRestrictedLevelEvolution.ts" />
/// <reference path="../party/evolutions/HeldItemLevelEvolution.ts" />
/// <reference path="../GameConstants.d.ts" />
/// <reference path="../../declarations/weather/WeatherType.d.ts" />
/// <reference path="../../declarations/enums/PokemonType.d.ts" />
/// <reference path="../../declarations/interfaces/BagItem.d.ts" />
/// <reference path="../../declarations/utilities/Rand.d.ts" />
/// <reference path="../../declarations/enums/BerryType.d.ts"/>
const pokemonBabyPrevolutionMap = {};
//For regional evolutions, so it evolves in the respective region and not with a random chance
const alolaOnly = [GameConstants.Region.alola];
const galarOnly = [GameConstants.Region.galar];
const allButAlola = [
    GameConstants.Region.kanto,
    GameConstants.Region.johto,
    GameConstants.Region.hoenn,
    GameConstants.Region.sinnoh,
    GameConstants.Region.unova,
    GameConstants.Region.kalos,
    GameConstants.Region.galar,
];
const allButGalar = [
    GameConstants.Region.kanto,
    GameConstants.Region.johto,
    GameConstants.Region.hoenn,
    GameConstants.Region.sinnoh,
    GameConstants.Region.unova,
    GameConstants.Region.kalos,
    GameConstants.Region.alola,
];
function createPokemonArray(...args) {
    return args;
}
const pokemonList = createPokemonArray({
    'id': 1,
    'name': 'Bulbasaur',
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Bulbasaur', 'Ivysaur', 16)],
    'base': {
        'hitpoints': 45,
        'attack': 49,
        'specialAttack': 65,
        'defense': 49,
        'specialDefense': 65,
        'speed': 45,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 1.1,
    'name': 'Bulbasaur (Clone)',
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Bulbasaur (Clone)', 'Ivysaur (Clone)', 16)],
    'base': {
        'hitpoints': 45,
        'attack': 49,
        'specialAttack': 65,
        'defense': 49,
        'specialDefense': 65,
        'speed': 45,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 1.2,
    'name': 'Spooky Bulbasaur',
    'catchRate': 25,
    'type': [PokemonType.Grass],
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Spooky Bulbasaur', 'Spooky Ivysaur', 16)],
    'base': {
        'hitpoints': 45,
        'attack': 49,
        'specialAttack': 65,
        'defense': 49,
        'specialDefense': 65,
        'speed': 45,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 1.3,
    'name': 'Bulbasaur (Rose)',
    'catchRate': 25,
    'type': [PokemonType.Grass, PokemonType.Fairy],
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Bulbasaur (Rose)', 'Ivysaur (Rose)', 16)],
    'base': {
        'hitpoints': 45,
        'attack': 49,
        'specialAttack': 65,
        'defense': 49,
        'specialDefense': 65,
        'speed': 45,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 2,
    'name': 'Ivysaur',
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Ivysaur', 'Venusaur', 32)],
    'base': {
        'hitpoints': 60,
        'attack': 62,
        'specialAttack': 80,
        'defense': 63,
        'specialDefense': 80,
        'speed': 60,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 2.1,
    'name': 'Ivysaur (Clone)',
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Ivysaur (Clone)', 'Venusaur (Clone)', 32)],
    'base': {
        'hitpoints': 60,
        'attack': 62,
        'specialAttack': 80,
        'defense': 63,
        'specialDefense': 80,
        'speed': 60,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 2.2,
    'name': 'Spooky Ivysaur',
    'catchRate': 45,
    'type': [PokemonType.Grass],
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Spooky Ivysaur', 'Spooky Venusaur', 32)],
    'base': {
        'hitpoints': 60,
        'attack': 62,
        'specialAttack': 80,
        'defense': 63,
        'specialDefense': 80,
        'speed': 60,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 2.3,
    'name': 'Ivysaur (Rose)',
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Fairy],
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Ivysaur (Rose)', 'Venusaur (Rose)', 32)],
    'base': {
        'hitpoints': 60,
        'attack': 62,
        'specialAttack': 80,
        'defense': 63,
        'specialDefense': 80,
        'speed': 60,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 3,
    'name': 'Venusaur',
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 236,
    'eggCycles': 20,
    'base': {
        'hitpoints': 80,
        'attack': 82,
        'specialAttack': 100,
        'defense': 83,
        'specialDefense': 100,
        'speed': 80,
    },
    'gender': {
        'femaleRatio': 0.125,
        'visualDifference': true,
    },
}, {
    'id': 3.1,
    'name': 'Venusaur (Clone)',
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 236,
    'eggCycles': 20,
    'base': {
        'hitpoints': 80,
        'attack': 82,
        'specialAttack': 100,
        'defense': 83,
        'specialDefense': 100,
        'speed': 80,
    },
    'gender': {
        'femaleRatio': 0.125,
        'visualDifference': true,
    },
}, {
    'id': 3.2,
    'name': 'Spooky Venusaur',
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Dark],
    'levelType': LevelType.mediumslow,
    'exp': 236,
    'eggCycles': 20,
    'base': {
        'hitpoints': 80,
        'attack': 82,
        'specialAttack': 100,
        'defense': 83,
        'specialDefense': 100,
        'speed': 80,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 3.3,
    'name': 'Venusaur (Rose)',
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Fairy],
    'levelType': LevelType.mediumslow,
    'exp': 236,
    'eggCycles': 20,
    'base': {
        'hitpoints': 80,
        'attack': 82,
        'specialAttack': 100,
        'defense': 83,
        'specialDefense': 100,
        'speed': 80,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 3.4,
    'name': 'Gigantamax Venusaur',
    'nativeRegion': GameConstants.Region.none,
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 236,
    'eggCycles': 20,
    'base': {
        'hitpoints': 160,
        'attack': 82,
        'specialAttack': 100,
        'defense': 83,
        'specialDefense': 100,
        'speed': 80,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 4,
    'name': 'Charmander',
    'catchRate': 45,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Charmander', 'Charmeleon', 16)],
    'base': {
        'hitpoints': 39,
        'attack': 52,
        'specialAttack': 60,
        'defense': 43,
        'specialDefense': 50,
        'speed': 65,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 4.1,
    'name': 'Charmander (Clone)',
    'catchRate': 45,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Charmander (Clone)', 'Charmeleon (Clone)', 16)],
    'base': {
        'hitpoints': 39,
        'attack': 52,
        'specialAttack': 60,
        'defense': 43,
        'specialDefense': 50,
        'speed': 65,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 5,
    'name': 'Charmeleon',
    'catchRate': 45,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Charmeleon', 'Charizard', 36)],
    'base': {
        'hitpoints': 58,
        'attack': 64,
        'specialAttack': 80,
        'defense': 58,
        'specialDefense': 65,
        'speed': 80,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 5.1,
    'name': 'Charmeleon (Clone)',
    'catchRate': 45,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Charmeleon (Clone)', 'Charizard (Clone)', 36)],
    'base': {
        'hitpoints': 58,
        'attack': 64,
        'specialAttack': 80,
        'defense': 58,
        'specialDefense': 65,
        'speed': 80,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 6,
    'name': 'Charizard',
    'catchRate': 45,
    'type': [PokemonType.Fire, PokemonType.Flying],
    'levelType': LevelType.mediumslow,
    'exp': 240,
    'eggCycles': 20,
    'base': {
        'hitpoints': 78,
        'attack': 84,
        'specialAttack': 109,
        'defense': 78,
        'specialDefense': 85,
        'speed': 100,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 6.1,
    'name': 'Charizard (Clone)',
    'catchRate': 45,
    'type': [PokemonType.Fire, PokemonType.Flying],
    'levelType': LevelType.mediumslow,
    'exp': 240,
    'eggCycles': 20,
    'base': {
        'hitpoints': 78,
        'attack': 84,
        'specialAttack': 109,
        'defense': 78,
        'specialDefense': 85,
        'speed': 100,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 6.2,
    'name': 'Gigantamax Charizard',
    'nativeRegion': GameConstants.Region.none,
    'catchRate': 45,
    'type': [PokemonType.Fire, PokemonType.Flying],
    'levelType': LevelType.mediumslow,
    'exp': 240,
    'eggCycles': 20,
    'base': {
        'hitpoints': 156,
        'attack': 84,
        'specialAttack': 109,
        'defense': 78,
        'specialDefense': 85,
        'speed': 100,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 7,
    'name': 'Squirtle',
    'catchRate': 45,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 63,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Squirtle', 'Wartortle', 16)],
    'base': {
        'hitpoints': 44,
        'attack': 48,
        'specialAttack': 50,
        'defense': 65,
        'specialDefense': 64,
        'speed': 43,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 7.1,
    'name': 'Squirtle (Clone)',
    'catchRate': 45,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 63,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Squirtle (Clone)', 'Wartortle (Clone)', 16)],
    'base': {
        'hitpoints': 44,
        'attack': 48,
        'specialAttack': 50,
        'defense': 65,
        'specialDefense': 64,
        'speed': 43,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 8,
    'name': 'Wartortle',
    'catchRate': 45,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Wartortle', 'Blastoise', 36)],
    'base': {
        'hitpoints': 59,
        'attack': 63,
        'specialAttack': 65,
        'defense': 80,
        'specialDefense': 80,
        'speed': 58,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 8.1,
    'name': 'Wartortle (Clone)',
    'catchRate': 45,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Wartortle (Clone)', 'Blastoise (Clone)', 36)],
    'base': {
        'hitpoints': 59,
        'attack': 63,
        'specialAttack': 65,
        'defense': 80,
        'specialDefense': 80,
        'speed': 58,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 9,
    'name': 'Blastoise',
    'catchRate': 45,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'eggCycles': 20,
    'base': {
        'hitpoints': 79,
        'attack': 83,
        'specialAttack': 85,
        'defense': 100,
        'specialDefense': 105,
        'speed': 78,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 9.1,
    'name': 'Blastoise (Clone)',
    'catchRate': 45,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'eggCycles': 20,
    'base': {
        'hitpoints': 79,
        'attack': 83,
        'specialAttack': 85,
        'defense': 100,
        'specialDefense': 105,
        'speed': 78,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 9.2,
    'name': 'Gigantamax Blastoise',
    'nativeRegion': GameConstants.Region.none,
    'catchRate': 45,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'eggCycles': 20,
    'base': {
        'hitpoints': 158,
        'attack': 83,
        'specialAttack': 85,
        'defense': 100,
        'specialDefense': 105,
        'speed': 78,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 10,
    'name': 'Caterpie',
    'catchRate': 255,
    'type': [PokemonType.Bug],
    'levelType': LevelType.mediumfast,
    'exp': 39,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Caterpie', 'Metapod', 7)],
    'base': {
        'hitpoints': 45,
        'attack': 30,
        'specialAttack': 20,
        'defense': 35,
        'specialDefense': 20,
        'speed': 45,
    },
}, {
    'id': 10.01,
    'name': 'Pinkan Caterpie',
    'catchRate': 255,
    'type': [PokemonType.Bug],
    'levelType': LevelType.mediumfast,
    'exp': 39,
    'eggCycles': 15,
    'base': {
        'hitpoints': 45,
        'attack': 30,
        'specialAttack': 20,
        'defense': 35,
        'specialDefense': 20,
        'speed': 45,
    },
}, {
    'id': 11,
    'name': 'Metapod',
    'catchRate': 120,
    'type': [PokemonType.Bug],
    'levelType': LevelType.mediumfast,
    'exp': 72,
    'eggCycles': 15,
    'evolutions': [
        new LevelEvolution('Metapod', 'Butterfree', 10),
        new LevelEvolution('Metapod', 'Valencian Butterfree', 10000),
        new LevelEvolution('Metapod', 'Pink Butterfree', 10000),
        new LevelEvolution('Metapod', 'Ash\'s Butterfree', 10000),
    ],
    'base': {
        'hitpoints': 50,
        'attack': 20,
        'specialAttack': 25,
        'defense': 55,
        'specialDefense': 25,
        'speed': 30,
    },
}, {
    'id': 12,
    'name': 'Butterfree',
    'catchRate': 45,
    'type': [PokemonType.Bug, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 178,
    'eggCycles': 15,
    'base': {
        'hitpoints': 60,
        'attack': 45,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 80,
        'speed': 70,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 12.01,
    'name': 'Valencian Butterfree',
    'catchRate': 45,
    'type': [PokemonType.Bug, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 178,
    'eggCycles': 15,
    'base': {
        'hitpoints': 60,
        'attack': 45,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 80,
        'speed': 70,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 12.02,
    'name': 'Pink Butterfree',
    'catchRate': 45,
    'type': [PokemonType.Bug, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 178,
    'eggCycles': 15,
    'base': {
        'hitpoints': 60,
        'attack': 45,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 80,
        'speed': 70,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 12.03,
    'name': 'Ash\'s Butterfree',
    'catchRate': 45,
    'type': [PokemonType.Bug, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 178,
    'eggCycles': 35,
    'base': {
        'hitpoints': 60,
        'attack': 45,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 80,
        'speed': 70,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 12.04,
    'name': 'Gigantamax Butterfree',
    'nativeRegion': GameConstants.Region.none,
    'catchRate': 45,
    'type': [PokemonType.Bug, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 178,
    'eggCycles': 15,
    'base': {
        'hitpoints': 120,
        'attack': 45,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 80,
        'speed': 70,
    },
}, {
    'id': 13,
    'name': 'Weedle',
    'catchRate': 255,
    'type': [PokemonType.Bug, PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 39,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Weedle', 'Kakuna', 7)],
    'base': {
        'hitpoints': 40,
        'attack': 35,
        'specialAttack': 20,
        'defense': 30,
        'specialDefense': 20,
        'speed': 50,
    },
}, {
    'id': 13.01,
    'name': 'Pinkan Weedle',
    'catchRate': 255,
    'type': [PokemonType.Bug, PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 39,
    'eggCycles': 15,
    'base': {
        'hitpoints': 40,
        'attack': 35,
        'specialAttack': 20,
        'defense': 30,
        'specialDefense': 20,
        'speed': 50,
    },
}, {
    'id': 14,
    'name': 'Kakuna',
    'catchRate': 120,
    'type': [PokemonType.Bug, PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 72,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Kakuna', 'Beedrill', 10)],
    'base': {
        'hitpoints': 45,
        'attack': 25,
        'specialAttack': 25,
        'defense': 50,
        'specialDefense': 25,
        'speed': 35,
    },
}, {
    'id': 15,
    'name': 'Beedrill',
    'catchRate': 45,
    'type': [PokemonType.Bug, PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 178,
    'eggCycles': 15,
    'base': {
        'hitpoints': 65,
        'attack': 90,
        'specialAttack': 45,
        'defense': 40,
        'specialDefense': 80,
        'speed': 75,
    },
}, {
    'id': 16,
    'name': 'Pidgey',
    'catchRate': 255,
    'type': [PokemonType.Normal, PokemonType.Flying],
    'levelType': LevelType.mediumslow,
    'exp': 50,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Pidgey', 'Pidgeotto', 18)],
    'base': {
        'hitpoints': 40,
        'attack': 45,
        'specialAttack': 35,
        'defense': 40,
        'specialDefense': 35,
        'speed': 56,
    },
}, {
    'id': 16.01,
    'name': 'Pinkan Pidgey',
    'catchRate': 255,
    'type': [PokemonType.Normal, PokemonType.Flying],
    'levelType': LevelType.mediumslow,
    'exp': 50,
    'eggCycles': 15,
    'evolutions': [new QuestlineLevelEvolution('Team Rocket\'s Pinkan Theme Park', 'Pinkan Pidgey', 'Pinkan Pidgeotto', 18)],
    'base': {
        'hitpoints': 40,
        'attack': 45,
        'specialAttack': 35,
        'defense': 40,
        'specialDefense': 35,
        'speed': 56,
    },
}, {
    'id': 17,
    'name': 'Pidgeotto',
    'catchRate': 120,
    'type': [PokemonType.Normal, PokemonType.Flying],
    'levelType': LevelType.mediumslow,
    'exp': 122,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Pidgeotto', 'Pidgeot', 36)],
    'base': {
        'hitpoints': 63,
        'attack': 60,
        'specialAttack': 50,
        'defense': 55,
        'specialDefense': 50,
        'speed': 71,
    },
}, {
    'id': 17.01,
    'name': 'Pinkan Pidgeotto',
    'catchRate': 120,
    'type': [PokemonType.Normal, PokemonType.Flying],
    'levelType': LevelType.mediumslow,
    'exp': 122,
    'eggCycles': 15,
    'base': {
        'hitpoints': 63,
        'attack': 60,
        'specialAttack': 50,
        'defense': 55,
        'specialDefense': 50,
        'speed': 71,
    },
}, {
    'id': 18,
    'name': 'Pidgeot',
    'catchRate': 45,
    'type': [PokemonType.Normal, PokemonType.Flying],
    'levelType': LevelType.mediumslow,
    'exp': 216,
    'eggCycles': 15,
    'base': {
        'hitpoints': 83,
        'attack': 80,
        'specialAttack': 70,
        'defense': 75,
        'specialDefense': 70,
        'speed': 101,
    },
}, {
    'id': 19,
    'name': 'Rattata',
    'catchRate': 255,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 51,
    'eggCycles': 15,
    'evolutions': [
        new LevelEvolution('Rattata', 'Raticate', 20),
        new LevelEvolution('Rattata', 'Valencian Raticate', 20000),
    ],
    'base': {
        'hitpoints': 30,
        'attack': 56,
        'specialAttack': 25,
        'defense': 35,
        'specialDefense': 35,
        'speed': 72,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 19.01,
    'name': 'Alolan Rattata',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 255,
    'type': [PokemonType.Dark, PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 51,
    'eggCycles': 15,
    'evolutions': [new NightTimedLevelEvolution('Alolan Rattata', 'Alolan Raticate', 20)],
    'base': {
        'hitpoints': 30,
        'attack': 56,
        'specialAttack': 25,
        'defense': 35,
        'specialDefense': 35,
        'speed': 72,
    },
}, {
    'id': 19.02,
    'name': 'Pinkan Rattata',
    'catchRate': 255,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 51,
    'eggCycles': 15,
    'base': {
        'hitpoints': 30,
        'attack': 56,
        'specialAttack': 25,
        'defense': 35,
        'specialDefense': 35,
        'speed': 72,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 20,
    'name': 'Raticate',
    'catchRate': 127,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 145,
    'eggCycles': 15,
    'base': {
        'hitpoints': 55,
        'attack': 81,
        'specialAttack': 50,
        'defense': 60,
        'specialDefense': 70,
        'speed': 97,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 20.01,
    'name': 'Alolan Raticate',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 127,
    'type': [PokemonType.Dark, PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 145,
    'eggCycles': 15,
    'base': {
        'hitpoints': 75,
        'attack': 71,
        'specialAttack': 40,
        'defense': 70,
        'specialDefense': 80,
        'speed': 77,
    },
}, {
    'id': 20.02,
    'name': 'Totem Raticate',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 127,
    'type': [PokemonType.Dark, PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 145,
    'eggCycles': 23,
    'base': {
        'hitpoints': 75,
        'attack': 71,
        'specialAttack': 40,
        'defense': 80,
        'specialDefense': 80,
        'speed': 77,
    },
}, {
    'id': 20.03,
    'name': 'Valencian Raticate',
    'catchRate': 127,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 145,
    'eggCycles': 15,
    'base': {
        'hitpoints': 55,
        'attack': 81,
        'specialAttack': 50,
        'defense': 60,
        'specialDefense': 70,
        'speed': 97,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 21,
    'name': 'Spearow',
    'catchRate': 255,
    'type': [PokemonType.Normal, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 52,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Spearow', 'Fearow', 20)],
    'base': {
        'hitpoints': 40,
        'attack': 60,
        'specialAttack': 31,
        'defense': 30,
        'specialDefense': 31,
        'speed': 70,
    },
}, {
    'id': 21.1,
    'name': 'Red Spearow',
    'catchRate': 255,
    'type': [PokemonType.Normal, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 52,
    'eggCycles': 15,
    'base': {
        'hitpoints': 40,
        'attack': 60,
        'specialAttack': 31,
        'defense': 30,
        'specialDefense': 31,
        'speed': 70,
    },
}, {
    'id': 22,
    'name': 'Fearow',
    'catchRate': 90,
    'type': [PokemonType.Normal, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 155,
    'eggCycles': 15,
    'base': {
        'hitpoints': 65,
        'attack': 90,
        'specialAttack': 61,
        'defense': 65,
        'specialDefense': 61,
        'speed': 100,
    },
}, {
    'id': 23,
    'name': 'Ekans',
    'catchRate': 255,
    'type': [PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 58,
    'eggCycles': 20,
    'evolutions': [
        new LevelEvolution('Ekans', 'Arbok', 22),
        new LevelEvolution('Ekans', 'Pinkan Arbok', 22000),
    ],
    'base': {
        'hitpoints': 35,
        'attack': 60,
        'specialAttack': 40,
        'defense': 44,
        'specialDefense': 54,
        'speed': 55,
    },
}, {
    'id': 24,
    'name': 'Arbok',
    'catchRate': 90,
    'type': [PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 157,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'attack': 95,
        'specialAttack': 65,
        'defense': 69,
        'specialDefense': 79,
        'speed': 80,
    },
}, {
    'id': 24.01,
    'name': 'Pinkan Arbok',
    'catchRate': 90,
    'type': [PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 157,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'attack': 95,
        'specialAttack': 65,
        'defense': 69,
        'specialDefense': 79,
        'speed': 80,
    },
}, {
    'id': 25,
    'name': 'Pikachu',
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 10,
    'evolutions': [
        new RegionStoneEvolution(allButAlola, 'Pikachu', 'Raichu', GameConstants.StoneType.Thunder_stone),
        new RegionStoneEvolution(alolaOnly, 'Pikachu', 'Alolan Raichu', GameConstants.StoneType.Thunder_stone),
    ],
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 25.01,
    'name': 'Pikachu (Original Cap)',
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 10,
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 25.02,
    'name': 'Pikachu (Hoenn Cap)',
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 10,
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 25.03,
    'name': 'Pikachu (Sinnoh Cap)',
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 10,
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 25.04,
    'name': 'Pikachu (Unova Cap)',
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 10,
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 25.05,
    'name': 'Pikachu (Kalos Cap)',
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 10,
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 25.06,
    'name': 'Pikachu (Alola Cap)',
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 10,
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 25.07,
    'name': 'Pikachu (Partner Cap)',
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 10,
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 25.08,
    'name': 'Flying Pikachu',
    'catchRate': 50,
    'type': [PokemonType.Electric, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 10,
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
}, {
    'id': 25.09,
    'name': 'Surfing Pikachu',
    'catchRate': 50,
    'type': [PokemonType.Electric, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 10,
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
}, {
    'id': 25.10,
    'name': 'Pikachu (Gengar)',
    'catchRate': 50,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 10,
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
}, {
    'id': 25.11,
    'name': 'Let\'s Go Pikachu',
    'catchRate': 50,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 10,
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
}, {
    'id': 25.12,
    'name': 'Pikachu (World Cap)',
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 10,
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 25.13,
    'name': 'Pinkan Pikachu',
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 10,
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
}, {
    'id': 25.14,
    'name': 'Gigantamax Pikachu',
    'nativeRegion': GameConstants.Region.none,
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 10,
    'base': {
        'hitpoints': 70,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
}, {
    'id': 25.15,
    'name': 'Detective Pikachu',
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 112,
    'eggCycles': 10,
    'evolutions': [new LevelEvolution('Detective Pikachu', 'Detective Raichu', 1234)],
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 50,
        'speed': 90,
    },
}, {
    'id': 26,
    'name': 'Raichu',
    'catchRate': 75,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 218,
    'eggCycles': 10,
    'base': {
        'hitpoints': 60,
        'attack': 90,
        'specialAttack': 90,
        'defense': 55,
        'specialDefense': 80,
        'speed': 110,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 26.01,
    'name': 'Alolan Raichu',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 75,
    'type': [PokemonType.Electric, PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 218,
    'eggCycles': 10,
    'base': {
        'hitpoints': 60,
        'attack': 85,
        'specialAttack': 95,
        'defense': 50,
        'specialDefense': 85,
        'speed': 110,
    },
}, {
    'id': 26.02,
    'name': 'Detective Raichu',
    'catchRate': 75,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 218,
    'eggCycles': 10,
    'base': {
        'hitpoints': 60,
        'attack': 90,
        'specialAttack': 90,
        'defense': 55,
        'specialDefense': 80,
        'speed': 110,
    },
}, {
    'id': 27,
    'name': 'Sandshrew',
    'catchRate': 255,
    'type': [PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 60,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Sandshrew', 'Sandslash', 22)],
    'base': {
        'hitpoints': 50,
        'attack': 75,
        'specialAttack': 20,
        'defense': 85,
        'specialDefense': 30,
        'speed': 40,
    },
}, {
    'id': 27.01,
    'name': 'Alolan Sandshrew',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 255,
    'type': [PokemonType.Ice, PokemonType.Steel],
    'levelType': LevelType.mediumfast,
    'exp': 60,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Alolan Sandshrew', 'Alolan Sandslash', GameConstants.StoneType.Ice_stone)],
    'base': {
        'hitpoints': 50,
        'attack': 75,
        'specialAttack': 10,
        'defense': 90,
        'specialDefense': 35,
        'speed': 40,
    },
}, {
    'id': 28,
    'name': 'Sandslash',
    'catchRate': 90,
    'type': [PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 158,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'attack': 100,
        'specialAttack': 45,
        'defense': 110,
        'specialDefense': 55,
        'speed': 65,
    },
}, {
    'id': 28.01,
    'name': 'Alolan Sandslash',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 90,
    'type': [PokemonType.Ice, PokemonType.Steel],
    'levelType': LevelType.mediumfast,
    'exp': 158,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'attack': 100,
        'specialAttack': 25,
        'defense': 120,
        'specialDefense': 65,
        'speed': 65,
    },
}, {
    'id': 29,
    'name': 'Nidoran(F)',
    'catchRate': 235,
    'type': [PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 55,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Nidoran(F)', 'Nidorina', 16)],
    'base': {
        'hitpoints': 55,
        'attack': 47,
        'specialAttack': 40,
        'defense': 52,
        'specialDefense': 40,
        'speed': 41,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 29.01,
    'name': 'Pinkan Nidoran(F)',
    'catchRate': 235,
    'type': [PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 55,
    'eggCycles': 20,
    'base': {
        'hitpoints': 55,
        'attack': 47,
        'specialAttack': 40,
        'defense': 52,
        'specialDefense': 40,
        'speed': 41,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 30,
    'name': 'Nidorina',
    'catchRate': 120,
    'type': [PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 128,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Nidorina', 'Nidoqueen', GameConstants.StoneType.Moon_stone)],
    'base': {
        'hitpoints': 70,
        'attack': 62,
        'specialAttack': 55,
        'defense': 67,
        'specialDefense': 55,
        'speed': 56,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 31,
    'name': 'Nidoqueen',
    'catchRate': 45,
    'type': [PokemonType.Poison, PokemonType.Ground],
    'levelType': LevelType.mediumslow,
    'exp': 227,
    'eggCycles': 20,
    'base': {
        'hitpoints': 90,
        'attack': 92,
        'specialAttack': 75,
        'defense': 87,
        'specialDefense': 85,
        'speed': 76,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 32,
    'name': 'Nidoran(M)',
    'catchRate': 235,
    'type': [PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 55,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Nidoran(M)', 'Nidorino', 16)],
    'base': {
        'hitpoints': 46,
        'attack': 57,
        'specialAttack': 40,
        'defense': 40,
        'specialDefense': 40,
        'speed': 50,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 32.01,
    'name': 'Pinkan Nidoran(M)',
    'catchRate': 235,
    'type': [PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 55,
    'eggCycles': 20,
    'base': {
        'hitpoints': 46,
        'attack': 57,
        'specialAttack': 40,
        'defense': 40,
        'specialDefense': 40,
        'speed': 50,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 33,
    'name': 'Nidorino',
    'catchRate': 120,
    'type': [PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 128,
    'eggCycles': 20,
    'evolutions': [
        new StoneEvolution('Nidorino', 'Nidoking', GameConstants.StoneType.Moon_stone),
        new LevelEvolution('Nidorino', 'Pinkan Nidoking', 33000),
    ],
    'base': {
        'hitpoints': 61,
        'attack': 72,
        'specialAttack': 55,
        'defense': 57,
        'specialDefense': 55,
        'speed': 65,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 34,
    'name': 'Nidoking',
    'catchRate': 45,
    'type': [PokemonType.Poison, PokemonType.Ground],
    'levelType': LevelType.mediumslow,
    'exp': 227,
    'eggCycles': 20,
    'base': {
        'hitpoints': 81,
        'attack': 102,
        'specialAttack': 85,
        'defense': 77,
        'specialDefense': 75,
        'speed': 85,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 34.01,
    'name': 'Pinkan Nidoking',
    'catchRate': 45,
    'type': [PokemonType.Poison, PokemonType.Ground],
    'levelType': LevelType.mediumslow,
    'exp': 227,
    'eggCycles': 20,
    'base': {
        'hitpoints': 81,
        'attack': 102,
        'specialAttack': 85,
        'defense': 77,
        'specialDefense': 75,
        'speed': 85,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 35,
    'name': 'Clefairy',
    'catchRate': 150,
    'type': [PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 113,
    'eggCycles': 10,
    'evolutions': [new StoneEvolution('Clefairy', 'Clefable', GameConstants.StoneType.Moon_stone)],
    'base': {
        'hitpoints': 70,
        'attack': 45,
        'specialAttack': 60,
        'defense': 48,
        'specialDefense': 65,
        'speed': 35,
    },
    'heldItem': { type: ItemType.item, id: 'Moon_stone' },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 36,
    'name': 'Clefable',
    'catchRate': 25,
    'type': [PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 217,
    'eggCycles': 10,
    'base': {
        'hitpoints': 95,
        'attack': 70,
        'specialAttack': 95,
        'defense': 73,
        'specialDefense': 90,
        'speed': 60,
    },
    'heldItem': { type: ItemType.item, id: 'Moon_stone' },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 37,
    'name': 'Vulpix',
    'catchRate': 190,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 60,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Vulpix', 'Ninetales', GameConstants.StoneType.Fire_stone)],
    'base': {
        'hitpoints': 38,
        'attack': 41,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 65,
        'speed': 65,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 37.01,
    'name': 'Alolan Vulpix',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 190,
    'type': [PokemonType.Ice],
    'levelType': LevelType.mediumfast,
    'exp': 60,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Alolan Vulpix', 'Alolan Ninetales', GameConstants.StoneType.Ice_stone)],
    'base': {
        'hitpoints': 38,
        'attack': 41,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 65,
        'speed': 65,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 38,
    'name': 'Ninetales',
    'catchRate': 75,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 177,
    'eggCycles': 20,
    'base': {
        'hitpoints': 73,
        'attack': 76,
        'specialAttack': 81,
        'defense': 75,
        'specialDefense': 100,
        'speed': 100,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 38.01,
    'name': 'Alolan Ninetales',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 75,
    'type': [PokemonType.Ice, PokemonType.Fairy],
    'levelType': LevelType.mediumfast,
    'exp': 177,
    'eggCycles': 20,
    'base': {
        'hitpoints': 73,
        'attack': 67,
        'specialAttack': 81,
        'defense': 75,
        'specialDefense': 100,
        'speed': 109,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 39,
    'name': 'Jigglypuff',
    'catchRate': 170,
    'type': [PokemonType.Normal, PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 95,
    'eggCycles': 10,
    'evolutions': [new StoneEvolution('Jigglypuff', 'Wigglytuff', GameConstants.StoneType.Moon_stone)],
    'base': {
        'hitpoints': 115,
        'attack': 45,
        'specialAttack': 45,
        'defense': 20,
        'specialDefense': 25,
        'speed': 20,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 40,
    'name': 'Wigglytuff',
    'catchRate': 50,
    'type': [PokemonType.Normal, PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 196,
    'eggCycles': 10,
    'base': {
        'hitpoints': 140,
        'attack': 70,
        'specialAttack': 85,
        'defense': 45,
        'specialDefense': 50,
        'speed': 45,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 41,
    'name': 'Zubat',
    'catchRate': 255,
    'type': [PokemonType.Poison, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 49,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Zubat', 'Golbat', 22)],
    'base': {
        'hitpoints': 40,
        'attack': 45,
        'specialAttack': 30,
        'defense': 35,
        'specialDefense': 40,
        'speed': 55,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 42,
    'name': 'Golbat',
    'catchRate': 90,
    'type': [PokemonType.Poison, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 159,
    'eggCycles': 15,
    'evolutions': [new StoneEvolution('Golbat', 'Crobat', GameConstants.StoneType.Soothe_bell)],
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 65,
        'defense': 70,
        'specialDefense': 75,
        'speed': 90,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 43,
    'name': 'Oddish',
    'catchRate': 255,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Oddish', 'Gloom', 21)],
    'base': {
        'hitpoints': 45,
        'attack': 50,
        'specialAttack': 75,
        'defense': 55,
        'specialDefense': 65,
        'speed': 30,
    },
}, {
    'id': 43.01,
    'name': 'Pinkan Oddish',
    'catchRate': 255,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'eggCycles': 20,
    'base': {
        'hitpoints': 45,
        'attack': 50,
        'specialAttack': 75,
        'defense': 55,
        'specialDefense': 65,
        'speed': 30,
    },
}, {
    'id': 44,
    'name': 'Gloom',
    'catchRate': 120,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 138,
    'eggCycles': 20,
    'evolutions': [
        new StoneEvolution('Gloom', 'Vileplume', GameConstants.StoneType.Leaf_stone),
        new LevelEvolution('Gloom', 'Valencian Vileplume', 44000),
        new LevelEvolution('Gloom', 'Pinkan Vileplume', 44000),
        new StoneEvolution('Gloom', 'Bellossom', GameConstants.StoneType.Sun_stone),
    ],
    'base': {
        'hitpoints': 60,
        'attack': 65,
        'specialAttack': 85,
        'defense': 70,
        'specialDefense': 75,
        'speed': 40,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 45,
    'name': 'Vileplume',
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 221,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 110,
        'defense': 85,
        'specialDefense': 90,
        'speed': 50,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 45.01,
    'name': 'Valencian Vileplume',
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 221,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 110,
        'defense': 85,
        'specialDefense': 90,
        'speed': 50,
    },
}, {
    'id': 45.02,
    'name': 'Pinkan Vileplume',
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 221,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 110,
        'defense': 85,
        'specialDefense': 90,
        'speed': 50,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 46,
    'name': 'Paras',
    'catchRate': 190,
    'type': [PokemonType.Bug, PokemonType.Grass],
    'levelType': LevelType.mediumfast,
    'exp': 57,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Paras', 'Parasect', 24)],
    'base': {
        'hitpoints': 35,
        'attack': 70,
        'specialAttack': 45,
        'defense': 55,
        'specialDefense': 55,
        'speed': 25,
    },
}, {
    'id': 46.01,
    'name': 'Valencian Paras',
    'catchRate': 190,
    'type': [PokemonType.Bug, PokemonType.Grass],
    'levelType': LevelType.mediumfast,
    'exp': 57,
    'eggCycles': 20,
    'base': {
        'hitpoints': 35,
        'attack': 70,
        'specialAttack': 45,
        'defense': 55,
        'specialDefense': 55,
        'speed': 25,
    },
}, {
    'id': 46.02,
    'name': 'Pinkan Paras',
    'catchRate': 190,
    'type': [PokemonType.Bug, PokemonType.Grass],
    'levelType': LevelType.mediumfast,
    'exp': 57,
    'eggCycles': 20,
    'base': {
        'hitpoints': 35,
        'attack': 70,
        'specialAttack': 45,
        'defense': 55,
        'specialDefense': 55,
        'speed': 25,
    },
}, {
    'id': 47,
    'name': 'Parasect',
    'catchRate': 75,
    'type': [PokemonType.Bug, PokemonType.Grass],
    'levelType': LevelType.mediumfast,
    'exp': 142,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'attack': 95,
        'specialAttack': 60,
        'defense': 80,
        'specialDefense': 80,
        'speed': 30,
    },
}, {
    'id': 48,
    'name': 'Venonat',
    'catchRate': 190,
    'type': [PokemonType.Bug, PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Venonat', 'Venomoth', 31)],
    'base': {
        'hitpoints': 60,
        'attack': 55,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 55,
        'speed': 45,
    },
}, {
    'id': 48.01,
    'name': 'Pinkan Venonat',
    'catchRate': 190,
    'type': [PokemonType.Bug, PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'attack': 55,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 55,
        'speed': 45,
    },
}, {
    'id': 49,
    'name': 'Venomoth',
    'catchRate': 75,
    'type': [PokemonType.Bug, PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 158,
    'eggCycles': 20,
    'base': {
        'hitpoints': 70,
        'attack': 65,
        'specialAttack': 90,
        'defense': 60,
        'specialDefense': 75,
        'speed': 90,
    },
}, {
    'id': 50,
    'name': 'Diglett',
    'catchRate': 255,
    'type': [PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 53,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Diglett', 'Dugtrio', 26)],
    'base': {
        'hitpoints': 10,
        'attack': 55,
        'specialAttack': 35,
        'defense': 25,
        'specialDefense': 45,
        'speed': 95,
    },
}, {
    'id': 50.01,
    'name': 'Alolan Diglett',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 255,
    'type': [PokemonType.Ground, PokemonType.Steel],
    'levelType': LevelType.mediumfast,
    'exp': 53,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Alolan Diglett', 'Alolan Dugtrio', 26)],
    'base': {
        'hitpoints': 10,
        'attack': 55,
        'specialAttack': 35,
        'defense': 30,
        'specialDefense': 45,
        'speed': 90,
    },
}, {
    'id': 50.02,
    'name': 'Pinkan Diglett',
    'catchRate': 255,
    'type': [PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 53,
    'eggCycles': 20,
    'base': {
        'hitpoints': 10,
        'attack': 55,
        'specialAttack': 35,
        'defense': 25,
        'specialDefense': 45,
        'speed': 95,
    },
}, {
    'id': 51,
    'name': 'Dugtrio',
    'catchRate': 50,
    'type': [PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 149,
    'eggCycles': 20,
    'base': {
        'hitpoints': 35,
        'attack': 100,
        'specialAttack': 50,
        'defense': 50,
        'specialDefense': 70,
        'speed': 120,
    },
}, {
    'id': 51.01,
    'name': 'Alolan Dugtrio',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 50,
    'type': [PokemonType.Ground, PokemonType.Steel],
    'levelType': LevelType.mediumfast,
    'exp': 149,
    'eggCycles': 20,
    'base': {
        'hitpoints': 35,
        'attack': 100,
        'specialAttack': 50,
        'defense': 60,
        'specialDefense': 70,
        'speed': 110,
    },
}, {
    'id': 52,
    'name': 'Meowth',
    'catchRate': 255,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 58,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Meowth', 'Persian', 28)],
    'base': {
        'hitpoints': 40,
        'attack': 45,
        'specialAttack': 40,
        'defense': 35,
        'specialDefense': 40,
        'speed': 90,
    },
}, {
    'id': 52.01,
    'name': 'Alolan Meowth',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 255,
    'type': [PokemonType.Dark],
    'levelType': LevelType.mediumfast,
    'exp': 58,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Alolan Meowth', 'Alolan Persian', GameConstants.StoneType.Soothe_bell)],
    'base': {
        'hitpoints': 40,
        'attack': 35,
        'specialAttack': 50,
        'defense': 35,
        'specialDefense': 40,
        'speed': 90,
    },
}, {
    'id': 52.2,
    'name': 'Galarian Meowth',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 255,
    'type': [PokemonType.Steel],
    'levelType': LevelType.mediumfast,
    'exp': 58,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Galarian Meowth', 'Perrserker', 28)],
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 40,
        'defense': 55,
        'specialDefense': 40,
        'speed': 50,
    },
}, {
    'id': 52.3,
    'name': 'Gigantamax Meowth',
    'nativeRegion': GameConstants.Region.none,
    'catchRate': 255,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 58,
    'eggCycles': 20,
    'base': {
        'hitpoints': 80,
        'attack': 45,
        'specialAttack': 40,
        'defense': 35,
        'specialDefense': 40,
        'speed': 90,
    },
}, {
    'id': 53,
    'name': 'Persian',
    'catchRate': 90,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 154,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'attack': 70,
        'specialAttack': 65,
        'defense': 60,
        'specialDefense': 65,
        'speed': 115,
    },
}, {
    'id': 53.01,
    'name': 'Alolan Persian',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 90,
    'type': [PokemonType.Dark],
    'levelType': LevelType.mediumfast,
    'exp': 154,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 75,
        'defense': 60,
        'specialDefense': 65,
        'speed': 115,
    },
}, {
    'id': 54,
    'name': 'Psyduck',
    'catchRate': 190,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 64,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Psyduck', 'Golduck', 33)],
    'base': {
        'hitpoints': 50,
        'attack': 52,
        'specialAttack': 65,
        'defense': 48,
        'specialDefense': 50,
        'speed': 55,
    },
}, {
    'id': 55,
    'name': 'Golduck',
    'catchRate': 75,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'eggCycles': 20,
    'base': {
        'hitpoints': 80,
        'attack': 82,
        'specialAttack': 95,
        'defense': 78,
        'specialDefense': 80,
        'speed': 85,
    },
}, {
    'id': 56,
    'name': 'Mankey',
    'catchRate': 190,
    'type': [PokemonType.Fighting],
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Mankey', 'Primeape', 28)],
    'base': {
        'hitpoints': 40,
        'attack': 80,
        'specialAttack': 35,
        'defense': 35,
        'specialDefense': 45,
        'speed': 70,
    },
}, {
    'id': 56.01,
    'name': 'Pinkan Mankey',
    'catchRate': 190,
    'type': [PokemonType.Fighting],
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Pinkan Mankey', 'Pinkan Primeape', 28)],
    'base': {
        'hitpoints': 40,
        'attack': 80,
        'specialAttack': 35,
        'defense': 35,
        'specialDefense': 45,
        'speed': 70,
    },
}, {
    'id': 57,
    'name': 'Primeape',
    'catchRate': 75,
    'type': [PokemonType.Fighting],
    'levelType': LevelType.mediumfast,
    'exp': 159,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'attack': 105,
        'specialAttack': 60,
        'defense': 60,
        'specialDefense': 70,
        'speed': 95,
    },
}, {
    'id': 57.01,
    'name': 'Pinkan Primeape',
    'catchRate': 75,
    'type': [PokemonType.Fighting],
    'levelType': LevelType.mediumfast,
    'exp': 159,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'attack': 105,
        'specialAttack': 60,
        'defense': 60,
        'specialDefense': 70,
        'speed': 95,
    },
}, {
    'id': 58,
    'name': 'Growlithe',
    'catchRate': 190,
    'type': [PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 70,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Growlithe', 'Arcanine', GameConstants.StoneType.Fire_stone)],
    'base': {
        'hitpoints': 55,
        'attack': 70,
        'specialAttack': 70,
        'defense': 45,
        'specialDefense': 50,
        'speed': 60,
    },
    'gender': {
        'femaleRatio': 0.25,
    },
}, {
    'id': 59,
    'name': 'Arcanine',
    'catchRate': 75,
    'type': [PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 194,
    'eggCycles': 20,
    'base': {
        'hitpoints': 90,
        'attack': 110,
        'specialAttack': 100,
        'defense': 80,
        'specialDefense': 80,
        'speed': 95,
    },
    'gender': {
        'femaleRatio': 0.25,
    },
}, {
    'id': 60,
    'name': 'Poliwag',
    'catchRate': 255,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 60,
    'eggCycles': 20,
    'evolutions': [
        new LevelEvolution('Poliwag', 'Poliwhirl', 25),
        new LevelEvolution('Poliwag', 'Pinkan Poliwhirl', 25000),
    ],
    'base': {
        'hitpoints': 40,
        'attack': 50,
        'specialAttack': 40,
        'defense': 40,
        'specialDefense': 40,
        'speed': 90,
    },
}, {
    'id': 61,
    'name': 'Poliwhirl',
    'catchRate': 120,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 135,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Poliwhirl', 'Poliwrath', GameConstants.StoneType.Water_stone), new StoneEvolution('Poliwhirl', 'Politoed', GameConstants.StoneType.Kings_rock)],
    'base': {
        'hitpoints': 65,
        'attack': 65,
        'specialAttack': 50,
        'defense': 65,
        'specialDefense': 50,
        'speed': 90,
    },
    'heldItem': { type: ItemType.item, id: 'Kings_rock' },
}, {
    'id': 61.01,
    'name': 'Pinkan Poliwhirl',
    'catchRate': 120,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 135,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'attack': 65,
        'specialAttack': 50,
        'defense': 65,
        'specialDefense': 50,
        'speed': 90,
    },
}, {
    'id': 62,
    'name': 'Poliwrath',
    'catchRate': 45,
    'type': [PokemonType.Water, PokemonType.Fighting],
    'levelType': LevelType.mediumslow,
    'exp': 230,
    'eggCycles': 20,
    'base': {
        'hitpoints': 90,
        'attack': 95,
        'specialAttack': 70,
        'defense': 95,
        'specialDefense': 90,
        'speed': 70,
    },
    'heldItem': { type: ItemType.item, id: 'Kings_rock' },
}, {
    'id': 63,
    'name': 'Abra',
    'catchRate': 200,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Abra', 'Kadabra', 16)],
    'base': {
        'hitpoints': 25,
        'attack': 20,
        'specialAttack': 105,
        'defense': 15,
        'specialDefense': 55,
        'speed': 90,
    },
    'gender': {
        'femaleRatio': 0.25,
    },
}, {
    'id': 64,
    'name': 'Kadabra',
    'catchRate': 100,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumslow,
    'exp': 140,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Kadabra', 'Alakazam', GameConstants.StoneType.Linking_cord)],
    'base': {
        'hitpoints': 40,
        'attack': 35,
        'specialAttack': 120,
        'defense': 30,
        'specialDefense': 70,
        'speed': 105,
    },
    'gender': {
        'femaleRatio': 0.25,
        'visualDifference': true,
    },
}, {
    'id': 65,
    'name': 'Alakazam',
    'catchRate': 50,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumslow,
    'exp': 225,
    'eggCycles': 20,
    'base': {
        'hitpoints': 55,
        'attack': 50,
        'specialAttack': 135,
        'defense': 45,
        'specialDefense': 95,
        'speed': 120,
    },
    'gender': {
        'femaleRatio': 0.25,
        'visualDifference': true,
    },
}, {
    'id': 66,
    'name': 'Machop',
    'catchRate': 180,
    'type': [PokemonType.Fighting],
    'levelType': LevelType.mediumslow,
    'exp': 61,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Machop', 'Machoke', 28)],
    'base': {
        'hitpoints': 70,
        'attack': 80,
        'specialAttack': 35,
        'defense': 50,
        'specialDefense': 35,
        'speed': 35,
    },
    'gender': {
        'femaleRatio': 0.25,
    },
}, {
    'id': 67,
    'name': 'Machoke',
    'catchRate': 90,
    'type': [PokemonType.Fighting],
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Machoke', 'Machamp', GameConstants.StoneType.Linking_cord)],
    'base': {
        'hitpoints': 80,
        'attack': 100,
        'specialAttack': 50,
        'defense': 70,
        'specialDefense': 60,
        'speed': 45,
    },
    'gender': {
        'femaleRatio': 0.25,
    },
}, {
    'id': 68,
    'name': 'Machamp',
    'catchRate': 45,
    'type': [PokemonType.Fighting],
    'levelType': LevelType.mediumslow,
    'exp': 227,
    'eggCycles': 20,
    'base': {
        'hitpoints': 90,
        'attack': 130,
        'specialAttack': 65,
        'defense': 80,
        'specialDefense': 85,
        'speed': 55,
    },
    'gender': {
        'femaleRatio': 0.25,
    },
}, {
    'id': 68.1,
    'name': 'Gigantamax Machamp',
    'nativeRegion': GameConstants.Region.none,
    'catchRate': 45,
    'type': [PokemonType.Fighting],
    'levelType': LevelType.mediumslow,
    'exp': 227,
    'eggCycles': 20,
    'base': {
        'hitpoints': 160,
        'attack': 130,
        'specialAttack': 65,
        'defense': 80,
        'specialDefense': 85,
        'speed': 55,
    },
    'gender': {
        'femaleRatio': 0.25,
    },
}, {
    'id': 69,
    'name': 'Bellsprout',
    'catchRate': 255,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 60,
    'eggCycles': 20,
    'evolutions': [
        new LevelEvolution('Bellsprout', 'Weepinbell', 21),
        new LevelEvolution('Bellsprout', 'Valencian Weepinbell', 21000),
    ],
    'base': {
        'hitpoints': 50,
        'attack': 75,
        'specialAttack': 70,
        'defense': 35,
        'specialDefense': 30,
        'speed': 40,
    },
}, {
    'id': 69.01,
    'name': 'Pinkan Bellsprout',
    'catchRate': 255,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 60,
    'eggCycles': 20,
    'base': {
        'hitpoints': 50,
        'attack': 75,
        'specialAttack': 70,
        'defense': 35,
        'specialDefense': 30,
        'speed': 40,
    },
}, {
    'id': 70,
    'name': 'Weepinbell',
    'catchRate': 120,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 137,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Weepinbell', 'Victreebel', GameConstants.StoneType.Leaf_stone)],
    'base': {
        'hitpoints': 65,
        'attack': 90,
        'specialAttack': 85,
        'defense': 50,
        'specialDefense': 45,
        'speed': 55,
    },
}, {
    'id': 70.01,
    'name': 'Valencian Weepinbell',
    'catchRate': 120,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 137,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'attack': 90,
        'specialAttack': 85,
        'defense': 50,
        'specialDefense': 45,
        'speed': 55,
    },
}, {
    'id': 71,
    'name': 'Victreebel',
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 221,
    'eggCycles': 20,
    'base': {
        'hitpoints': 80,
        'attack': 105,
        'specialAttack': 100,
        'defense': 65,
        'specialDefense': 70,
        'speed': 70,
    },
}, {
    'id': 72,
    'name': 'Tentacool',
    'catchRate': 190,
    'type': [PokemonType.Water, PokemonType.Poison],
    'levelType': LevelType.slow,
    'exp': 67,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Tentacool', 'Tentacruel', 30)],
    'base': {
        'hitpoints': 40,
        'attack': 40,
        'specialAttack': 50,
        'defense': 35,
        'specialDefense': 100,
        'speed': 70,
    },
}, {
    'id': 73,
    'name': 'Tentacruel',
    'catchRate': 60,
    'type': [PokemonType.Water, PokemonType.Poison],
    'levelType': LevelType.slow,
    'exp': 180,
    'eggCycles': 20,
    'base': {
        'hitpoints': 80,
        'attack': 70,
        'specialAttack': 80,
        'defense': 65,
        'specialDefense': 120,
        'speed': 100,
    },
}, {
    'id': 74,
    'name': 'Geodude',
    'catchRate': 255,
    'type': [PokemonType.Rock, PokemonType.Ground],
    'levelType': LevelType.mediumslow,
    'exp': 60,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Geodude', 'Graveler', 25)],
    'base': {
        'hitpoints': 40,
        'attack': 80,
        'specialAttack': 30,
        'defense': 100,
        'specialDefense': 30,
        'speed': 20,
    },
    'heldItem': { type: ItemType.underground, id: 'Everstone' },
}, {
    'id': 74.01,
    'name': 'Alolan Geodude',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 255,
    'type': [PokemonType.Rock, PokemonType.Electric],
    'levelType': LevelType.mediumslow,
    'exp': 60,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Alolan Geodude', 'Alolan Graveler', 25)],
    'base': {
        'hitpoints': 40,
        'attack': 80,
        'specialAttack': 30,
        'defense': 100,
        'specialDefense': 30,
        'speed': 20,
    },
}, {
    'id': 74.02,
    'name': 'Pinkan Geodude',
    'catchRate': 255,
    'type': [PokemonType.Rock, PokemonType.Ground],
    'levelType': LevelType.mediumslow,
    'exp': 60,
    'eggCycles': 15,
    'base': {
        'hitpoints': 40,
        'attack': 80,
        'specialAttack': 30,
        'defense': 100,
        'specialDefense': 30,
        'speed': 20,
    },
    'heldItem': { type: ItemType.underground, id: 'Everstone' },
}, {
    'id': 75,
    'name': 'Graveler',
    'catchRate': 120,
    'type': [PokemonType.Rock, PokemonType.Ground],
    'levelType': LevelType.mediumslow,
    'exp': 137,
    'eggCycles': 15,
    'evolutions': [new StoneEvolution('Graveler', 'Golem', GameConstants.StoneType.Linking_cord)],
    'base': {
        'hitpoints': 55,
        'attack': 95,
        'specialAttack': 45,
        'defense': 115,
        'specialDefense': 45,
        'speed': 35,
    },
    'heldItem': { type: ItemType.underground, id: 'Hard Stone' },
}, {
    'id': 75.01,
    'name': 'Alolan Graveler',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 120,
    'type': [PokemonType.Rock, PokemonType.Electric],
    'levelType': LevelType.mediumslow,
    'exp': 137,
    'eggCycles': 15,
    'evolutions': [new StoneEvolution('Alolan Graveler', 'Alolan Golem', GameConstants.StoneType.Linking_cord)],
    'base': {
        'hitpoints': 55,
        'attack': 95,
        'specialAttack': 45,
        'defense': 115,
        'specialDefense': 45,
        'speed': 35,
    },
}, {
    'id': 76,
    'name': 'Golem',
    'catchRate': 45,
    'type': [PokemonType.Rock, PokemonType.Ground],
    'levelType': LevelType.mediumslow,
    'exp': 223,
    'eggCycles': 15,
    'base': {
        'hitpoints': 80,
        'attack': 120,
        'specialAttack': 55,
        'defense': 130,
        'specialDefense': 65,
        'speed': 45,
    },
    'heldItem': { type: ItemType.underground, id: 'Hard Stone' },
}, {
    'id': 76.01,
    'name': 'Alolan Golem',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 45,
    'type': [PokemonType.Rock, PokemonType.Electric],
    'levelType': LevelType.mediumslow,
    'exp': 223,
    'eggCycles': 15,
    'base': {
        'hitpoints': 80,
        'attack': 120,
        'specialAttack': 55,
        'defense': 130,
        'specialDefense': 65,
        'speed': 45,
    },
}, {
    'id': 77,
    'name': 'Ponyta',
    'catchRate': 190,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 82,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Ponyta', 'Rapidash', 40)],
    'base': {
        'hitpoints': 50,
        'attack': 85,
        'specialAttack': 65,
        'defense': 55,
        'specialDefense': 65,
        'speed': 90,
    },
}, {
    'id': 77.1,
    'name': 'Galarian Ponyta',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 190,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 82,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Galarian Ponyta', 'Galarian Rapidash', 40)],
    'base': {
        'hitpoints': 50,
        'attack': 85,
        'specialAttack': 65,
        'defense': 55,
        'specialDefense': 65,
        'speed': 90,
    },
}, {
    'id': 78,
    'name': 'Rapidash',
    'catchRate': 60,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'attack': 100,
        'specialAttack': 80,
        'defense': 70,
        'specialDefense': 80,
        'speed': 105,
    },
}, {
    'id': 78.1,
    'name': 'Galarian Rapidash',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 60,
    'type': [PokemonType.Psychic, PokemonType.Fairy],
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'attack': 100,
        'specialAttack': 80,
        'defense': 70,
        'specialDefense': 80,
        'speed': 105,
    },
}, {
    'id': 79,
    'name': 'Slowpoke',
    'catchRate': 190,
    'type': [PokemonType.Water, PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 63,
    'eggCycles': 20,
    'evolutions': [
        new LevelEvolution('Slowpoke', 'Slowbro', 37),
        new StoneEvolution('Slowpoke', 'Slowking', GameConstants.StoneType.Kings_rock),
    ],
    'base': {
        'hitpoints': 90,
        'attack': 65,
        'specialAttack': 40,
        'defense': 65,
        'specialDefense': 40,
        'speed': 15,
    },
    'heldItem': { type: ItemType.item, id: 'Kings_rock' },
}, {
    'id': 79.1,
    'name': 'Galarian Slowpoke',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 190,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 63,
    'eggCycles': 20,
    'evolutions': [
        new StoneEvolution('Galarian Slowpoke', 'Galarian Slowbro', GameConstants.StoneType.Galarica_cuff),
        new StoneEvolution('Galarian Slowpoke', 'Galarian Slowking', GameConstants.StoneType.Galarica_wreath),
    ],
    'base': {
        'hitpoints': 90,
        'attack': 65,
        'specialAttack': 40,
        'defense': 65,
        'specialDefense': 40,
        'speed': 15,
    },
}, {
    'id': 80,
    'name': 'Slowbro',
    'catchRate': 75,
    'type': [PokemonType.Water, PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'eggCycles': 20,
    'base': {
        'hitpoints': 95,
        'attack': 75,
        'specialAttack': 100,
        'defense': 110,
        'specialDefense': 80,
        'speed': 30,
    },
    'heldItem': { type: ItemType.item, id: 'Kings_rock' },
}, {
    'id': 80.1,
    'name': 'Galarian Slowbro',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 75,
    'type': [PokemonType.Poison, PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'eggCycles': 20,
    'base': {
        'hitpoints': 95,
        'attack': 100,
        'specialAttack': 100,
        'defense': 95,
        'specialDefense': 70,
        'speed': 30,
    },
}, {
    'id': 81,
    'name': 'Magnemite',
    'catchRate': 190,
    'type': [PokemonType.Electric, PokemonType.Steel],
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Magnemite', 'Magneton', 30)],
    'base': {
        'hitpoints': 25,
        'attack': 35,
        'specialAttack': 95,
        'defense': 70,
        'specialDefense': 55,
        'speed': 45,
    },
    'heldItem': { type: ItemType.item, id: 'Metal_coat' },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 82,
    'name': 'Magneton',
    'catchRate': 60,
    'type': [PokemonType.Electric, PokemonType.Steel],
    'levelType': LevelType.mediumfast,
    'exp': 163,
    'eggCycles': 20,
    'evolutions': [
        new DungeonRestrictedLevelEvolution('Mt. Coronet North', 'Magneton', 'Magnezone', 20),
        new DungeonRestrictedLevelEvolution('Mt. Coronet South', 'Magneton', 'Magnezone', 20),
        new DungeonRestrictedLevelEvolution('Chargestone Cave', 'Magneton', 'Magnezone', 20),
        new DungeonRestrictedLevelEvolution('Kalos Power Plant', 'Magneton', 'Magnezone', 20),
        new DungeonRestrictedLevelEvolution('Vast Poni Canyon', 'Magneton', 'Magnezone', 20),
        new RegionStoneEvolution(galarOnly, 'Magneton', 'Magnezone', GameConstants.StoneType.Thunder_stone),
    ],
    'base': {
        'hitpoints': 50,
        'attack': 60,
        'specialAttack': 120,
        'defense': 95,
        'specialDefense': 70,
        'speed': 70,
    },
    'heldItem': { type: ItemType.item, id: 'Metal_coat' },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 83,
    'name': 'Farfetch\'d',
    'catchRate': 45,
    'type': [PokemonType.Normal, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 132,
    'eggCycles': 20,
    'base': {
        'hitpoints': 52,
        'attack': 90,
        'specialAttack': 58,
        'defense': 55,
        'specialDefense': 62,
        'speed': 60,
    },
}, {
    'id': 83.1,
    'name': 'Galarian Farfetch\'d',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 45,
    'type': [PokemonType.Fighting],
    'levelType': LevelType.mediumfast,
    'exp': 132,
    'eggCycles': 20,
    'evolutions': [new HeldItemLevelEvolution('Galarian Farfetch\'d', 'Sirfetch\'d', 20, 'Leek')],
    'base': {
        'hitpoints': 52,
        'attack': 95,
        'specialAttack': 58,
        'defense': 55,
        'specialDefense': 62,
        'speed': 55,
    },
    'heldItem': { type: ItemType.item, id: 'Leek' },
}, {
    'id': 84,
    'name': 'Doduo',
    'catchRate': 190,
    'type': [PokemonType.Normal, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 62,
    'eggCycles': 20,
    'evolutions': [
        new LevelEvolution('Doduo', 'Dodrio', 31),
        new LevelEvolution('Doduo', 'Pinkan Dodrio', 31000),
    ],
    'base': {
        'hitpoints': 35,
        'attack': 85,
        'specialAttack': 35,
        'defense': 45,
        'specialDefense': 35,
        'speed': 75,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 85,
    'name': 'Dodrio',
    'catchRate': 45,
    'type': [PokemonType.Normal, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'attack': 110,
        'specialAttack': 60,
        'defense': 70,
        'specialDefense': 60,
        'speed': 110,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 85.01,
    'name': 'Pinkan Dodrio',
    'catchRate': 45,
    'type': [PokemonType.Normal, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'attack': 110,
        'specialAttack': 60,
        'defense': 70,
        'specialDefense': 60,
        'speed': 110,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 86,
    'name': 'Seel',
    'catchRate': 190,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Seel', 'Dewgong', 34)],
    'base': {
        'hitpoints': 65,
        'attack': 45,
        'specialAttack': 45,
        'defense': 55,
        'specialDefense': 70,
        'speed': 45,
    },
}, {
    'id': 87,
    'name': 'Dewgong',
    'catchRate': 75,
    'type': [PokemonType.Water, PokemonType.Ice],
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'eggCycles': 20,
    'base': {
        'hitpoints': 90,
        'attack': 70,
        'specialAttack': 70,
        'defense': 80,
        'specialDefense': 95,
        'speed': 70,
    },
}, {
    'id': 88,
    'name': 'Grimer',
    'catchRate': 190,
    'type': [PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Grimer', 'Muk', 38)],
    'base': {
        'hitpoints': 80,
        'attack': 80,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 50,
        'speed': 25,
    },
}, {
    'id': 88.01,
    'name': 'Alolan Grimer',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 190,
    'type': [PokemonType.Poison, PokemonType.Dark],
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Alolan Grimer', 'Alolan Muk', 38)],
    'base': {
        'hitpoints': 80,
        'attack': 80,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 50,
        'speed': 25,
    },
}, {
    'id': 89,
    'name': 'Muk',
    'catchRate': 75,
    'type': [PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'eggCycles': 20,
    'base': {
        'hitpoints': 105,
        'attack': 105,
        'specialAttack': 65,
        'defense': 75,
        'specialDefense': 100,
        'speed': 50,
    },
}, {
    'id': 89.01,
    'name': 'Alolan Muk',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 75,
    'type': [PokemonType.Poison, PokemonType.Dark],
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'eggCycles': 20,
    'base': {
        'hitpoints': 105,
        'attack': 105,
        'specialAttack': 65,
        'defense': 75,
        'specialDefense': 100,
        'speed': 50,
    },
}, {
    'id': 90,
    'name': 'Shellder',
    'catchRate': 190,
    'type': [PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 61,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Shellder', 'Cloyster', GameConstants.StoneType.Water_stone)],
    'base': {
        'hitpoints': 30,
        'attack': 65,
        'specialAttack': 45,
        'defense': 100,
        'specialDefense': 25,
        'speed': 40,
    },
}, {
    'id': 91,
    'name': 'Cloyster',
    'catchRate': 60,
    'type': [PokemonType.Water, PokemonType.Ice],
    'levelType': LevelType.slow,
    'exp': 184,
    'eggCycles': 20,
    'base': {
        'hitpoints': 50,
        'attack': 95,
        'specialAttack': 85,
        'defense': 180,
        'specialDefense': 45,
        'speed': 70,
    },
}, {
    'id': 92,
    'name': 'Gastly',
    'catchRate': 190,
    'type': [PokemonType.Ghost, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Gastly', 'Haunter', 25)],
    'base': {
        'hitpoints': 30,
        'attack': 35,
        'specialAttack': 100,
        'defense': 30,
        'specialDefense': 35,
        'speed': 80,
    },
}, {
    'id': 93,
    'name': 'Haunter',
    'catchRate': 90,
    'type': [PokemonType.Ghost, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Haunter', 'Gengar', GameConstants.StoneType.Linking_cord)],
    'base': {
        'hitpoints': 45,
        'attack': 50,
        'specialAttack': 115,
        'defense': 45,
        'specialDefense': 55,
        'speed': 95,
    },
}, {
    'id': 94,
    'name': 'Gengar',
    'catchRate': 45,
    'type': [PokemonType.Ghost, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 225,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'attack': 65,
        'specialAttack': 130,
        'defense': 60,
        'specialDefense': 75,
        'speed': 110,
    },
}, {
    'id': 94.1,
    'name': 'Gigantamax Gengar',
    'nativeRegion': GameConstants.Region.none,
    'catchRate': 45,
    'type': [PokemonType.Ghost, PokemonType.Poison],
    'levelType': LevelType.mediumslow,
    'exp': 225,
    'eggCycles': 20,
    'base': {
        'hitpoints': 120,
        'attack': 65,
        'specialAttack': 130,
        'defense': 60,
        'specialDefense': 75,
        'speed': 110,
    },
}, {
    'id': 95,
    'name': 'Onix',
    'catchRate': 45,
    'type': [PokemonType.Rock, PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 77,
    'eggCycles': 25,
    'evolutions': [new StoneEvolution('Onix', 'Steelix', GameConstants.StoneType.Metal_coat)],
    'base': {
        'hitpoints': 35,
        'attack': 45,
        'specialAttack': 30,
        'defense': 160,
        'specialDefense': 45,
        'speed': 70,
    },
    'heldItem': { type: ItemType.underground, id: 'Hard Stone' },
}, {
    'id': 95.01,
    'name': 'Crystal Onix',
    'catchRate': 45,
    'type': [PokemonType.Rock, PokemonType.Ice],
    'levelType': LevelType.mediumfast,
    'exp': 77,
    'eggCycles': 25,
    'evolutions': [new StoneEvolution('Crystal Onix', 'Crystal Steelix', GameConstants.StoneType.Ice_stone)],
    'base': {
        'hitpoints': 35,
        'attack': 45,
        'specialAttack': 30,
        'defense': 160,
        'specialDefense': 45,
        'speed': 70,
    },
    'heldItem': { type: ItemType.underground, id: 'Hard Stone' },
}, {
    'id': 96,
    'name': 'Drowzee',
    'catchRate': 190,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 66,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Drowzee', 'Hypno', 26)],
    'base': {
        'hitpoints': 60,
        'attack': 48,
        'specialAttack': 43,
        'defense': 45,
        'specialDefense': 90,
        'speed': 42,
    },
}, {
    'id': 97,
    'name': 'Hypno',
    'catchRate': 75,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 169,
    'eggCycles': 20,
    'base': {
        'hitpoints': 85,
        'attack': 73,
        'specialAttack': 73,
        'defense': 70,
        'specialDefense': 115,
        'speed': 67,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 98,
    'name': 'Krabby',
    'catchRate': 225,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Krabby', 'Kingler', 28)],
    'base': {
        'hitpoints': 30,
        'attack': 105,
        'specialAttack': 25,
        'defense': 90,
        'specialDefense': 25,
        'speed': 50,
    },
}, {
    'id': 99,
    'name': 'Kingler',
    'catchRate': 60,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'eggCycles': 20,
    'base': {
        'hitpoints': 55,
        'attack': 130,
        'specialAttack': 50,
        'defense': 115,
        'specialDefense': 50,
        'speed': 75,
    },
}, {
    'id': 99.1,
    'name': 'Gigantamax Kingler',
    'nativeRegion': GameConstants.Region.none,
    'catchRate': 60,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'eggCycles': 20,
    'base': {
        'hitpoints': 110,
        'attack': 130,
        'specialAttack': 50,
        'defense': 115,
        'specialDefense': 50,
        'speed': 75,
    },
}, {
    'id': 100,
    'name': 'Voltorb',
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 66,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Voltorb', 'Electrode', 30)],
    'base': {
        'hitpoints': 40,
        'attack': 30,
        'specialAttack': 55,
        'defense': 50,
        'specialDefense': 55,
        'speed': 100,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 101,
    'name': 'Electrode',
    'catchRate': 60,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'attack': 50,
        'specialAttack': 80,
        'defense': 70,
        'specialDefense': 80,
        'speed': 150,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 102,
    'name': 'Exeggcute',
    'catchRate': 90,
    'type': [PokemonType.Grass, PokemonType.Psychic],
    'levelType': LevelType.slow,
    'exp': 65,
    'eggCycles': 20,
    'evolutions': [
        new RegionStoneEvolution(allButAlola, 'Exeggcute', 'Exeggutor', GameConstants.StoneType.Leaf_stone),
        new RegionStoneEvolution(alolaOnly, 'Exeggcute', 'Alolan Exeggutor', GameConstants.StoneType.Leaf_stone),
        new LevelEvolution('Exeggcute', 'Pinkan Exeggutor', 31000),
    ],
    'base': {
        'hitpoints': 60,
        'attack': 40,
        'specialAttack': 60,
        'defense': 80,
        'specialDefense': 45,
        'speed': 40,
    },
}, {
    'id': 103,
    'name': 'Exeggutor',
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Psychic],
    'levelType': LevelType.slow,
    'exp': 186,
    'eggCycles': 20,
    'base': {
        'hitpoints': 95,
        'attack': 95,
        'specialAttack': 125,
        'defense': 85,
        'specialDefense': 75,
        'speed': 55,
    },
}, {
    'id': 103.01,
    'name': 'Alolan Exeggutor',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Dragon],
    'levelType': LevelType.slow,
    'exp': 186,
    'eggCycles': 20,
    'base': {
        'hitpoints': 95,
        'attack': 105,
        'specialAttack': 125,
        'defense': 85,
        'specialDefense': 75,
        'speed': 45,
    },
}, {
    'id': 103.02,
    'name': 'Pinkan Exeggutor',
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Psychic],
    'levelType': LevelType.slow,
    'exp': 186,
    'eggCycles': 20,
    'base': {
        'hitpoints': 95,
        'attack': 95,
        'specialAttack': 125,
        'defense': 85,
        'specialDefense': 75,
        'speed': 55,
    },
}, {
    'id': 104,
    'name': 'Cubone',
    'catchRate': 190,
    'type': [PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 64,
    'eggCycles': 20,
    'evolutions': [
        new RegionLevelEvolution(allButAlola, 'Cubone', 'Marowak', 28),
        new RegionNightTimedLevelEvolution(alolaOnly, 'Cubone', 'Alolan Marowak', 28),
    ],
    'base': {
        'hitpoints': 50,
        'attack': 50,
        'specialAttack': 40,
        'defense': 95,
        'specialDefense': 50,
        'speed': 35,
    },
    'heldItem': { type: ItemType.underground, id: 'Rare Bone' },
}, {
    'id': 105,
    'name': 'Marowak',
    'catchRate': 75,
    'type': [PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 149,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'attack': 80,
        'specialAttack': 50,
        'defense': 110,
        'specialDefense': 80,
        'speed': 45,
    },
    'heldItem': { type: ItemType.underground, id: 'Rare Bone' },
}, {
    'id': 105.01,
    'name': 'Alolan Marowak',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 75,
    'type': [PokemonType.Fire, PokemonType.Ghost],
    'levelType': LevelType.mediumfast,
    'exp': 149,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'attack': 80,
        'specialAttack': 50,
        'defense': 110,
        'specialDefense': 80,
        'speed': 45,
    },
}, {
    'id': 105.02,
    'name': 'Totem Marowak',
    'nativeRegion': GameConstants.Region.alola,
    'catchRate': 75,
    'type': [PokemonType.Fire, PokemonType.Ghost],
    'levelType': LevelType.mediumfast,
    'exp': 149,
    'eggCycles': 30,
    'base': {
        'hitpoints': 60,
        'attack': 80,
        'specialAttack': 50,
        'defense': 110,
        'specialDefense': 80,
        'speed': 65,
    },
}, {
    'id': 106,
    'name': 'Hitmonlee',
    'catchRate': 45,
    'type': [PokemonType.Fighting],
    'levelType': LevelType.mediumfast,
    'exp': 159,
    'eggCycles': 25,
    'base': {
        'hitpoints': 50,
        'attack': 120,
        'specialAttack': 35,
        'defense': 53,
        'specialDefense': 110,
        'speed': 87,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 107,
    'name': 'Hitmonchan',
    'catchRate': 45,
    'type': [PokemonType.Fighting],
    'levelType': LevelType.mediumfast,
    'exp': 159,
    'eggCycles': 25,
    'base': {
        'hitpoints': 50,
        'attack': 105,
        'specialAttack': 35,
        'defense': 79,
        'specialDefense': 110,
        'speed': 76,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 108,
    'name': 'Lickitung',
    'catchRate': 45,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 77,
    'evolutions': [new LevelEvolution('Lickitung', 'Lickilicky', 33)],
    'eggCycles': 20,
    'base': {
        'hitpoints': 90,
        'attack': 55,
        'specialAttack': 60,
        'defense': 75,
        'specialDefense': 75,
        'speed': 30,
    },
}, {
    'id': 109,
    'name': 'Koffing',
    'catchRate': 190,
    'type': [PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 68,
    'eggCycles': 20,
    'evolutions': [
        new RegionLevelEvolution(allButGalar, 'Koffing', 'Weezing', 35),
        new RegionLevelEvolution(galarOnly, 'Koffing', 'Galarian Weezing', 35),
        new LevelEvolution('Koffing', 'Pinkan Weezing', 35000),
    ],
    'base': {
        'hitpoints': 40,
        'attack': 65,
        'specialAttack': 60,
        'defense': 95,
        'specialDefense': 45,
        'speed': 35,
    },
}, {
    'id': 110,
    'name': 'Weezing',
    'catchRate': 60,
    'type': [PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'attack': 90,
        'specialAttack': 85,
        'defense': 120,
        'specialDefense': 70,
        'speed': 60,
    },
}, {
    'id': 110.01,
    'name': 'Pinkan Weezing',
    'catchRate': 60,
    'type': [PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'attack': 90,
        'specialAttack': 85,
        'defense': 120,
        'specialDefense': 70,
        'speed': 60,
    },
}, {
    'id': 110.1,
    'name': 'Galarian Weezing',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 60,
    'type': [PokemonType.Poison, PokemonType.Fairy],
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'attack': 90,
        'specialAttack': 85,
        'defense': 120,
        'specialDefense': 70,
        'speed': 60,
    },
}, {
    'id': 111,
    'name': 'Rhyhorn',
    'catchRate': 120,
    'type': [PokemonType.Ground, PokemonType.Rock],
    'levelType': LevelType.slow,
    'exp': 69,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Rhyhorn', 'Rhydon', 42)],
    'base': {
        'hitpoints': 80,
        'attack': 85,
        'specialAttack': 30,
        'defense': 95,
        'specialDefense': 30,
        'speed': 25,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 111.01,
    'name': 'Pinkan Rhyhorn',
    'catchRate': 120,
    'type': [PokemonType.Ground, PokemonType.Rock],
    'levelType': LevelType.slow,
    'exp': 69,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Pinkan Rhyhorn', 'Pinkan Rhydon', 42)],
    'base': {
        'hitpoints': 80,
        'attack': 85,
        'specialAttack': 30,
        'defense': 95,
        'specialDefense': 30,
        'speed': 25,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 112,
    'name': 'Rhydon',
    'catchRate': 60,
    'type': [PokemonType.Ground, PokemonType.Rock],
    'levelType': LevelType.slow,
    'exp': 170,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Rhydon', 'Rhyperior', GameConstants.StoneType.Protector)],
    'base': {
        'hitpoints': 105,
        'attack': 130,
        'specialAttack': 45,
        'defense': 120,
        'specialDefense': 45,
        'speed': 40,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 112.01,
    'name': 'Pinkan Rhydon',
    'catchRate': 60,
    'type': [PokemonType.Ground, PokemonType.Rock],
    'levelType': LevelType.slow,
    'exp': 170,
    'eggCycles': 20,
    'base': {
        'hitpoints': 105,
        'attack': 130,
        'specialAttack': 45,
        'defense': 120,
        'specialDefense': 45,
        'speed': 40,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 113,
    'name': 'Chansey',
    'catchRate': 30,
    'type': [PokemonType.Normal],
    'levelType': LevelType.fast,
    'exp': 395,
    'eggCycles': 40,
    'evolutions': [new StoneEvolution('Chansey', 'Blissey', GameConstants.StoneType.Soothe_bell)],
    'base': {
        'hitpoints': 250,
        'attack': 5,
        'specialAttack': 35,
        'defense': 5,
        'specialDefense': 105,
        'speed': 50,
    },
    'heldItem': { type: ItemType.underground, id: 'Oval Stone' },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 114,
    'name': 'Tangela',
    'catchRate': 45,
    'type': [PokemonType.Grass],
    'levelType': LevelType.mediumfast,
    'exp': 87,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Tangela', 'Tangrowth', 33)],
    'base': {
        'hitpoints': 65,
        'attack': 55,
        'specialAttack': 100,
        'defense': 115,
        'specialDefense': 40,
        'speed': 60,
    },
}, {
    'id': 115,
    'name': 'Kangaskhan',
    'catchRate': 45,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'eggCycles': 20,
    'base': {
        'hitpoints': 105,
        'attack': 95,
        'specialAttack': 40,
        'defense': 80,
        'specialDefense': 80,
        'speed': 90,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 116,
    'name': 'Horsea',
    'catchRate': 225,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 59,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Horsea', 'Seadra', 32)],
    'base': {
        'hitpoints': 30,
        'attack': 40,
        'specialAttack': 70,
        'defense': 70,
        'specialDefense': 25,
        'speed': 60,
    },
    'heldItem': { type: ItemType.item, id: 'Dragon_scale' },
}, {
    'id': 117,
    'name': 'Seadra',
    'catchRate': 75,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 154,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Seadra', 'Kingdra', GameConstants.StoneType.Dragon_scale)],
    'base': {
        'hitpoints': 55,
        'attack': 65,
        'specialAttack': 95,
        'defense': 95,
        'specialDefense': 45,
        'speed': 85,
    },
    'heldItem': { type: ItemType.item, id: 'Dragon_scale' },
}, {
    'id': 118,
    'name': 'Goldeen',
    'catchRate': 225,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 64,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Goldeen', 'Seaking', 33)],
    'base': {
        'hitpoints': 45,
        'attack': 67,
        'specialAttack': 35,
        'defense': 60,
        'specialDefense': 50,
        'speed': 63,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 119,
    'name': 'Seaking',
    'catchRate': 60,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 158,
    'eggCycles': 20,
    'base': {
        'hitpoints': 80,
        'attack': 92,
        'specialAttack': 65,
        'defense': 65,
        'specialDefense': 80,
        'speed': 68,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 120,
    'name': 'Staryu',
    'catchRate': 225,
    'type': [PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 68,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Staryu', 'Starmie', GameConstants.StoneType.Water_stone)],
    'base': {
        'hitpoints': 30,
        'attack': 45,
        'specialAttack': 70,
        'defense': 55,
        'specialDefense': 55,
        'speed': 85,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 121,
    'name': 'Starmie',
    'catchRate': 60,
    'type': [PokemonType.Water, PokemonType.Psychic],
    'levelType': LevelType.slow,
    'exp': 182,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'attack': 75,
        'specialAttack': 100,
        'defense': 85,
        'specialDefense': 85,
        'speed': 115,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 122,
    'name': 'Mr. Mime',
    'catchRate': 45,
    'type': [PokemonType.Psychic, PokemonType.Fairy],
    'levelType': LevelType.mediumfast,
    'exp': 161,
    'eggCycles': 25,
    'base': {
        'hitpoints': 40,
        'attack': 45,
        'specialAttack': 100,
        'defense': 65,
        'specialDefense': 120,
        'speed': 90,
    },
}, {
    'id': 122.1,
    'name': 'Galarian Mr. Mime',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 45,
    'type': [PokemonType.Psychic, PokemonType.Ice],
    'levelType': LevelType.mediumfast,
    'exp': 161,
    'eggCycles': 25,
    'evolutions': [new LevelEvolution('Galarian Mr. Mime', 'Mr. Rime', 42)],
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 90,
        'defense': 65,
        'specialDefense': 90,
        'speed': 100,
    },
}, {
    'id': 123,
    'name': 'Scyther',
    'catchRate': 45,
    'type': [PokemonType.Bug, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 100,
    'eggCycles': 25,
    'evolutions': [new StoneEvolution('Scyther', 'Scizor', GameConstants.StoneType.Metal_coat)],
    'base': {
        'hitpoints': 70,
        'attack': 110,
        'specialAttack': 55,
        'defense': 80,
        'specialDefense': 80,
        'speed': 105,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 123.01,
    'name': 'Pinkan Scyther',
    'catchRate': 45,
    'type': [PokemonType.Bug, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 100,
    'eggCycles': 25,
    'base': {
        'hitpoints': 70,
        'attack': 110,
        'specialAttack': 55,
        'defense': 80,
        'specialDefense': 80,
        'speed': 105,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 124,
    'name': 'Jynx',
    'catchRate': 45,
    'type': [PokemonType.Ice, PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 159,
    'eggCycles': 25,
    'base': {
        'hitpoints': 65,
        'attack': 50,
        'specialAttack': 115,
        'defense': 35,
        'specialDefense': 95,
        'speed': 95,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 125,
    'name': 'Electabuzz',
    'catchRate': 45,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'eggCycles': 25,
    'evolutions': [new StoneEvolution('Electabuzz', 'Electivire', GameConstants.StoneType.Electirizer)],
    'base': {
        'hitpoints': 65,
        'attack': 83,
        'specialAttack': 95,
        'defense': 57,
        'specialDefense': 85,
        'speed': 105,
    },
    'heldItem': { type: ItemType.item, id: 'Electirizer' },
    'gender': {
        'femaleRatio': 0.25,
    },
}, {
    'id': 125.01,
    'name': 'Pinkan Electabuzz',
    'catchRate': 45,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'eggCycles': 25,
    'base': {
        'hitpoints': 65,
        'attack': 83,
        'specialAttack': 95,
        'defense': 57,
        'specialDefense': 85,
        'speed': 105,
    },
    'gender': {
        'femaleRatio': 0.25,
    },
}, {
    'id': 126,
    'name': 'Magmar',
    'catchRate': 45,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'eggCycles': 25,
    'evolutions': [new StoneEvolution('Magmar', 'Magmortar', GameConstants.StoneType.Magmarizer)],
    'base': {
        'hitpoints': 65,
        'attack': 95,
        'specialAttack': 100,
        'defense': 57,
        'specialDefense': 85,
        'speed': 93,
    },
    'heldItem': { type: ItemType.item, id: 'Magmarizer' },
    'gender': {
        'femaleRatio': 0.25,
    },
}, {
    'id': 127,
    'name': 'Pinsir',
    'catchRate': 45,
    'type': [PokemonType.Bug],
    'levelType': LevelType.slow,
    'exp': 175,
    'eggCycles': 25,
    'base': {
        'hitpoints': 65,
        'attack': 125,
        'specialAttack': 55,
        'defense': 100,
        'specialDefense': 70,
        'speed': 85,
    },
}, {
    'id': 128,
    'name': 'Tauros',
    'catchRate': 45,
    'type': [PokemonType.Normal],
    'levelType': LevelType.slow,
    'exp': 172,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'attack': 100,
        'specialAttack': 40,
        'defense': 95,
        'specialDefense': 70,
        'speed': 110,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 129,
    'name': 'Magikarp',
    'catchRate': 255,
    'type': [PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 40,
    'eggCycles': 5,
    'evolutions': [new LevelEvolution('Magikarp', 'Gyarados', 20)],
    'base': {
        'hitpoints': 20,
        'attack': 10,
        'specialAttack': 15,
        'defense': 55,
        'specialDefense': 20,
        'speed': 80,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 130,
    'name': 'Gyarados',
    'catchRate': 45,
    'type': [PokemonType.Water, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 189,
    'eggCycles': 5,
    'base': {
        'hitpoints': 95,
        'attack': 125,
        'specialAttack': 60,
        'defense': 79,
        'specialDefense': 100,
        'speed': 81,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 131,
    'name': 'Lapras',
    'catchRate': 45,
    'type': [PokemonType.Water, PokemonType.Ice],
    'levelType': LevelType.slow,
    'exp': 187,
    'eggCycles': 40,
    'base': {
        'hitpoints': 130,
        'attack': 85,
        'specialAttack': 85,
        'defense': 80,
        'specialDefense': 95,
        'speed': 60,
    },
}, {
    'id': 131.1,
    'name': 'Gigantamax Lapras',
    'nativeRegion': GameConstants.Region.none,
    'catchRate': 45,
    'type': [PokemonType.Water, PokemonType.Ice],
    'levelType': LevelType.slow,
    'exp': 187,
    'eggCycles': 40,
    'base': {
        'hitpoints': 260,
        'attack': 85,
        'specialAttack': 85,
        'defense': 80,
        'specialDefense': 95,
        'speed': 60,
    },
}, {
    'id': 132,
    'name': 'Ditto',
    'catchRate': 35,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 101,
    'eggCycles': 20,
    'base': {
        'hitpoints': 48,
        'attack': 48,
        'specialAttack': 48,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 133,
    'name': 'Eevee',
    'catchRate': 255,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'eggCycles': 35,
    'evolutions': [
        new StoneEvolution('Eevee', 'Vaporeon', GameConstants.StoneType.Water_stone),
        new StoneEvolution('Eevee', 'Jolteon', GameConstants.StoneType.Thunder_stone),
        new StoneEvolution('Eevee', 'Flareon', GameConstants.StoneType.Fire_stone),
        new DayTimedStoneEvolution('Eevee', 'Espeon', GameConstants.StoneType.Soothe_bell),
        new NightTimedStoneEvolution('Eevee', 'Umbreon', GameConstants.StoneType.Soothe_bell),
        new DungeonRestrictedLevelEvolution('Eterna Forest', 'Eevee', 'Leafeon', 20),
        new DungeonRestrictedLevelEvolution('Pinwheel Forest', 'Eevee', 'Leafeon', 20),
        new DungeonRestrictedLevelEvolution('Pokémon Village', 'Eevee', 'Leafeon', 20),
        new DungeonRestrictedLevelEvolution('Lush Jungle', 'Eevee', 'Leafeon', 20),
        new DungeonRestrictedLevelEvolution('Lake Acuity', 'Eevee', 'Glaceon', 20),
        new DungeonRestrictedLevelEvolution('Twist Mountain', 'Eevee', 'Glaceon', 20),
        new DungeonRestrictedLevelEvolution('Frost Cavern', 'Eevee', 'Glaceon', 20),
        new DungeonRestrictedLevelEvolution('Mount Lanakila', 'Eevee', 'Glaceon', 20),
        new LevelEvolution('Eevee', 'Sylveon', 29),
        new RegionStoneEvolution(galarOnly, 'Eevee', 'Leafeon', GameConstants.StoneType.Leaf_stone),
        new RegionStoneEvolution(galarOnly, 'Eevee', 'Glaceon', GameConstants.StoneType.Ice_stone),
    ],
    'base': {
        'hitpoints': 55,
        'attack': 55,
        'specialAttack': 45,
        'defense': 50,
        'specialDefense': 65,
        'speed': 55,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 133.1,
    'name': 'Let\'s Go Eevee',
    'catchRate': 50,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'eggCycles': 35,
    'base': {
        'hitpoints': 55,
        'attack': 55,
        'specialAttack': 45,
        'defense': 50,
        'specialDefense': 65,
        'speed': 55,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 133.2,
    'name': 'Gigantamax Eevee',
    'nativeRegion': GameConstants.Region.none,
    'catchRate': 255,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'eggCycles': 35,
    'base': {
        'hitpoints': 110,
        'attack': 55,
        'specialAttack': 45,
        'defense': 50,
        'specialDefense': 65,
        'speed': 55,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 134,
    'name': 'Vaporeon',
    'catchRate': 45,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 184,
    'eggCycles': 35,
    'base': {
        'hitpoints': 130,
        'attack': 65,
        'specialAttack': 110,
        'defense': 60,
        'specialDefense': 95,
        'speed': 65,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 135,
    'name': 'Jolteon',
    'catchRate': 45,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 184,
    'eggCycles': 35,
    'base': {
        'hitpoints': 65,
        'attack': 65,
        'specialAttack': 110,
        'defense': 60,
        'specialDefense': 95,
        'speed': 130,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 136,
    'name': 'Flareon',
    'catchRate': 45,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 184,
    'eggCycles': 35,
    'base': {
        'hitpoints': 65,
        'attack': 130,
        'specialAttack': 95,
        'defense': 60,
        'specialDefense': 110,
        'speed': 65,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 137,
    'name': 'Porygon',
    'catchRate': 45,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 79,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Porygon', 'Porygon2', GameConstants.StoneType.Upgrade)],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 85,
        'defense': 70,
        'specialDefense': 75,
        'speed': 40,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 138,
    'name': 'Omanyte',
    'catchRate': 45,
    'type': [PokemonType.Rock, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 71,
    'eggCycles': 30,
    'evolutions': [new LevelEvolution('Omanyte', 'Omastar', 40)],
    'base': {
        'hitpoints': 35,
        'attack': 40,
        'specialAttack': 90,
        'defense': 100,
        'specialDefense': 55,
        'speed': 35,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 139,
    'name': 'Omastar',
    'catchRate': 45,
    'type': [PokemonType.Rock, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'eggCycles': 30,
    'base': {
        'hitpoints': 70,
        'attack': 60,
        'specialAttack': 115,
        'defense': 125,
        'specialDefense': 70,
        'speed': 55,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 140,
    'name': 'Kabuto',
    'catchRate': 45,
    'type': [PokemonType.Rock, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 71,
    'eggCycles': 30,
    'evolutions': [new LevelEvolution('Kabuto', 'Kabutops', 40)],
    'base': {
        'hitpoints': 30,
        'attack': 80,
        'specialAttack': 55,
        'defense': 90,
        'specialDefense': 45,
        'speed': 55,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 141,
    'name': 'Kabutops',
    'catchRate': 45,
    'type': [PokemonType.Rock, PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'eggCycles': 30,
    'base': {
        'hitpoints': 60,
        'attack': 115,
        'specialAttack': 65,
        'defense': 105,
        'specialDefense': 70,
        'speed': 80,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 142,
    'name': 'Aerodactyl',
    'catchRate': 45,
    'type': [PokemonType.Rock, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 180,
    'eggCycles': 35,
    'base': {
        'hitpoints': 80,
        'attack': 105,
        'specialAttack': 60,
        'defense': 65,
        'specialDefense': 75,
        'speed': 130,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 143,
    'name': 'Snorlax',
    'catchRate': 25,
    'type': [PokemonType.Normal],
    'levelType': LevelType.slow,
    'exp': 189,
    'eggCycles': 40,
    'base': {
        'hitpoints': 160,
        'attack': 110,
        'specialAttack': 65,
        'defense': 65,
        'specialDefense': 110,
        'speed': 30,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 143.1,
    'name': 'Santa Snorlax',
    'catchRate': 25,
    'type': [PokemonType.Normal],
    'levelType': LevelType.slow,
    'exp': 189,
    'eggCycles': 40,
    'base': {
        'hitpoints': 160,
        'attack': 110,
        'specialAttack': 65,
        'defense': 65,
        'specialDefense': 110,
        'speed': 30,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 143.2,
    'name': 'Gigantamax Snorlax',
    'nativeRegion': GameConstants.Region.none,
    'catchRate': 25,
    'type': [PokemonType.Normal],
    'levelType': LevelType.slow,
    'exp': 189,
    'eggCycles': 40,
    'base': {
        'hitpoints': 320,
        'attack': 110,
        'specialAttack': 65,
        'defense': 65,
        'specialDefense': 110,
        'speed': 30,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 144,
    'name': 'Articuno',
    'catchRate': 3,
    'type': [PokemonType.Ice, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 261,
    'eggCycles': 80,
    'base': {
        'hitpoints': 90,
        'attack': 85,
        'specialAttack': 95,
        'defense': 100,
        'specialDefense': 125,
        'speed': 85,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 144.1,
    'name': 'Galarian Articuno',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 3,
    'type': [PokemonType.Psychic, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 261,
    'eggCycles': 80,
    'base': {
        'hitpoints': 90,
        'attack': 85,
        'specialAttack': 125,
        'defense': 85,
        'specialDefense': 100,
        'speed': 95,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 145,
    'name': 'Zapdos',
    'catchRate': 3,
    'type': [PokemonType.Electric, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 261,
    'eggCycles': 80,
    'base': {
        'hitpoints': 90,
        'attack': 90,
        'specialAttack': 125,
        'defense': 85,
        'specialDefense': 90,
        'speed': 100,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 145.1,
    'name': 'Galarian Zapdos',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 3,
    'type': [PokemonType.Fighting, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 261,
    'eggCycles': 80,
    'base': {
        'hitpoints': 90,
        'attack': 125,
        'specialAttack': 85,
        'defense': 90,
        'specialDefense': 90,
        'speed': 100,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 146,
    'name': 'Moltres',
    'catchRate': 3,
    'type': [PokemonType.Fire, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 261,
    'eggCycles': 80,
    'base': {
        'hitpoints': 90,
        'attack': 100,
        'specialAttack': 125,
        'defense': 90,
        'specialDefense': 85,
        'speed': 90,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 146.1,
    'name': 'Galarian Moltres',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 3,
    'type': [PokemonType.Dark, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 261,
    'eggCycles': 80,
    'base': {
        'hitpoints': 90,
        'attack': 85,
        'specialAttack': 100,
        'defense': 90,
        'specialDefense': 125,
        'speed': 90,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 147,
    'name': 'Dratini',
    'catchRate': 45,
    'type': [PokemonType.Dragon],
    'levelType': LevelType.slow,
    'exp': 60,
    'eggCycles': 40,
    'evolutions': [new LevelEvolution('Dratini', 'Dragonair', 30)],
    'base': {
        'hitpoints': 41,
        'attack': 64,
        'specialAttack': 50,
        'defense': 45,
        'specialDefense': 50,
        'speed': 50,
    },
    'heldItem': { type: ItemType.item, id: 'Dragon_scale' },
}, {
    'id': 148,
    'name': 'Dragonair',
    'catchRate': 45,
    'type': [PokemonType.Dragon],
    'levelType': LevelType.slow,
    'exp': 147,
    'eggCycles': 40,
    'evolutions': [new LevelEvolution('Dragonair', 'Dragonite', 55)],
    'base': {
        'hitpoints': 61,
        'attack': 84,
        'specialAttack': 70,
        'defense': 65,
        'specialDefense': 70,
        'speed': 70,
    },
    'heldItem': { type: ItemType.item, id: 'Dragon_scale' },
}, {
    'id': 149,
    'name': 'Dragonite',
    'catchRate': 45,
    'type': [PokemonType.Dragon, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 270,
    'eggCycles': 40,
    'base': {
        'hitpoints': 91,
        'attack': 134,
        'specialAttack': 100,
        'defense': 95,
        'specialDefense': 100,
        'speed': 80,
    },
    'heldItem': { type: ItemType.item, id: 'Dragon_scale' },
}, {
    'id': 150,
    'name': 'Mewtwo',
    'catchRate': 3,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.slow,
    'exp': 306,
    'eggCycles': 120,
    'base': {
        'hitpoints': 106,
        'attack': 110,
        'specialAttack': 154,
        'defense': 90,
        'specialDefense': 90,
        'speed': 130,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 150.1,
    'name': 'Armored Mewtwo',
    'catchRate': 2,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.slow,
    'exp': 306,
    'eggCycles': 120,
    'base': {
        'hitpoints': 106,
        'attack': 110,
        'specialAttack': 154,
        'defense': 100,
        'specialDefense': 100,
        'speed': 130,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 151,
    'name': 'Mew',
    'catchRate': 45,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumslow,
    'exp': 270,
    'eggCycles': 120,
    'base': {
        'hitpoints': 100,
        'attack': 100,
        'specialAttack': 100,
        'defense': 100,
        'specialDefense': 100,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Lum },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 152,
    'name': 'Chikorita',
    'catchRate': 45,
    'type': [PokemonType.Grass],
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Chikorita', 'Bayleef', 16)],
    'base': {
        'hitpoints': 45,
        'attack': 49,
        'specialAttack': 49,
        'defense': 65,
        'specialDefense': 65,
        'speed': 45,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 153,
    'name': 'Bayleef',
    'catchRate': 45,
    'type': [PokemonType.Grass],
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Bayleef', 'Meganium', 32)],
    'base': {
        'hitpoints': 60,
        'attack': 62,
        'specialAttack': 63,
        'defense': 80,
        'specialDefense': 80,
        'speed': 60,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 154,
    'name': 'Meganium',
    'catchRate': 45,
    'type': [PokemonType.Grass],
    'levelType': LevelType.mediumslow,
    'exp': 236,
    'eggCycles': 20,
    'base': {
        'hitpoints': 80,
        'attack': 82,
        'specialAttack': 83,
        'defense': 100,
        'specialDefense': 100,
        'speed': 80,
    },
    'gender': {
        'femaleRatio': 0.125,
        'visualDifference': true,
    },
}, {
    'id': 155,
    'name': 'Cyndaquil',
    'catchRate': 45,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Cyndaquil', 'Quilava', 14)],
    'base': {
        'hitpoints': 39,
        'attack': 52,
        'specialAttack': 60,
        'defense': 43,
        'specialDefense': 50,
        'speed': 65,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 156,
    'name': 'Quilava',
    'catchRate': 45,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Quilava', 'Typhlosion', 36)],
    'base': {
        'hitpoints': 58,
        'attack': 64,
        'specialAttack': 80,
        'defense': 58,
        'specialDefense': 65,
        'speed': 80,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 157,
    'name': 'Typhlosion',
    'catchRate': 45,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumslow,
    'exp': 240,
    'eggCycles': 20,
    'base': {
        'hitpoints': 78,
        'attack': 84,
        'specialAttack': 109,
        'defense': 78,
        'specialDefense': 85,
        'speed': 100,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 158,
    'name': 'Totodile',
    'catchRate': 45,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 63,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Totodile', 'Croconaw', 18)],
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 44,
        'defense': 64,
        'specialDefense': 48,
        'speed': 43,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 159,
    'name': 'Croconaw',
    'catchRate': 45,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Croconaw', 'Feraligatr', 30)],
    'base': {
        'hitpoints': 65,
        'attack': 80,
        'specialAttack': 59,
        'defense': 80,
        'specialDefense': 63,
        'speed': 58,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 160,
    'name': 'Feraligatr',
    'catchRate': 45,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'eggCycles': 20,
    'base': {
        'hitpoints': 85,
        'attack': 105,
        'specialAttack': 79,
        'defense': 100,
        'specialDefense': 83,
        'speed': 78,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 161,
    'name': 'Sentret',
    'catchRate': 255,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 43,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Sentret', 'Furret', 15)],
    'base': {
        'hitpoints': 35,
        'attack': 46,
        'specialAttack': 35,
        'defense': 34,
        'specialDefense': 45,
        'speed': 20,
    },
}, {
    'id': 162,
    'name': 'Furret',
    'catchRate': 90,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 145,
    'eggCycles': 15,
    'base': {
        'hitpoints': 85,
        'attack': 76,
        'specialAttack': 45,
        'defense': 64,
        'specialDefense': 55,
        'speed': 90,
    },
}, {
    'id': 163,
    'name': 'Hoothoot',
    'catchRate': 255,
    'type': [PokemonType.Normal, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 52,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Hoothoot', 'Noctowl', 20)],
    'base': {
        'hitpoints': 60,
        'attack': 30,
        'specialAttack': 36,
        'defense': 30,
        'specialDefense': 56,
        'speed': 50,
    },
}, {
    'id': 164,
    'name': 'Noctowl',
    'catchRate': 90,
    'type': [PokemonType.Normal, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 158,
    'eggCycles': 15,
    'base': {
        'hitpoints': 100,
        'attack': 50,
        'specialAttack': 86,
        'defense': 50,
        'specialDefense': 96,
        'speed': 70,
    },
}, {
    'id': 165,
    'name': 'Ledyba',
    'catchRate': 255,
    'type': [PokemonType.Bug, PokemonType.Flying],
    'levelType': LevelType.fast,
    'exp': 53,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Ledyba', 'Ledian', 18)],
    'base': {
        'hitpoints': 40,
        'attack': 20,
        'specialAttack': 40,
        'defense': 30,
        'specialDefense': 80,
        'speed': 55,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 166,
    'name': 'Ledian',
    'catchRate': 90,
    'type': [PokemonType.Bug, PokemonType.Flying],
    'levelType': LevelType.fast,
    'exp': 137,
    'eggCycles': 15,
    'base': {
        'hitpoints': 55,
        'attack': 35,
        'specialAttack': 55,
        'defense': 50,
        'specialDefense': 110,
        'speed': 85,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 167,
    'name': 'Spinarak',
    'catchRate': 255,
    'type': [PokemonType.Bug, PokemonType.Poison],
    'levelType': LevelType.fast,
    'exp': 50,
    'eggCycles': 15,
    'evolutions': [new LevelEvolution('Spinarak', 'Ariados', 22)],
    'base': {
        'hitpoints': 40,
        'attack': 60,
        'specialAttack': 40,
        'defense': 40,
        'specialDefense': 40,
        'speed': 30,
    },
}, {
    'id': 168,
    'name': 'Ariados',
    'catchRate': 90,
    'type': [PokemonType.Bug, PokemonType.Poison],
    'levelType': LevelType.fast,
    'exp': 140,
    'eggCycles': 15,
    'base': {
        'hitpoints': 70,
        'attack': 90,
        'specialAttack': 60,
        'defense': 70,
        'specialDefense': 70,
        'speed': 40,
    },
}, {
    'id': 169,
    'name': 'Crobat',
    'catchRate': 90,
    'type': [PokemonType.Poison, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 241,
    'eggCycles': 15,
    'base': {
        'hitpoints': 85,
        'attack': 90,
        'specialAttack': 70,
        'defense': 80,
        'specialDefense': 80,
        'speed': 130,
    },
}, {
    'id': 170,
    'name': 'Chinchou',
    'catchRate': 190,
    'type': [PokemonType.Water, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 66,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Chinchou', 'Lanturn', 27)],
    'base': {
        'hitpoints': 75,
        'attack': 38,
        'specialAttack': 56,
        'defense': 38,
        'specialDefense': 56,
        'speed': 67,
    },
    'heldItem': { type: ItemType.item, id: 'Deepsea_scale' },
}, {
    'id': 171,
    'name': 'Lanturn',
    'catchRate': 75,
    'type': [PokemonType.Water, PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 161,
    'eggCycles': 20,
    'base': {
        'hitpoints': 125,
        'attack': 58,
        'specialAttack': 76,
        'defense': 58,
        'specialDefense': 76,
        'speed': 67,
    },
    'heldItem': { type: ItemType.item, id: 'Deepsea_scale' },
}, {
    'id': 172,
    'name': 'Pichu',
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 41,
    'eggCycles': 10,
    'evolutions': [new StoneEvolution('Pichu', 'Pikachu', GameConstants.StoneType.Soothe_bell)],
    'baby': true,
    'base': {
        'hitpoints': 20,
        'attack': 40,
        'specialAttack': 35,
        'defense': 15,
        'specialDefense': 35,
        'speed': 60,
    },
}, {
    'id': 172.1,
    'name': 'Spiky-eared Pichu',
    'catchRate': 190,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 41,
    'eggCycles': 8,
    'base': {
        'hitpoints': 20,
        'attack': 40,
        'specialAttack': 35,
        'defense': 15,
        'specialDefense': 35,
        'speed': 60,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 173,
    'name': 'Cleffa',
    'catchRate': 150,
    'type': [PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 44,
    'eggCycles': 10,
    'evolutions': [new StoneEvolution('Cleffa', 'Clefairy', GameConstants.StoneType.Soothe_bell)],
    'baby': true,
    'base': {
        'hitpoints': 50,
        'attack': 25,
        'specialAttack': 45,
        'defense': 28,
        'specialDefense': 55,
        'speed': 15,
    },
    'heldItem': { type: ItemType.item, id: 'Moon_stone' },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 174,
    'name': 'Igglybuff',
    'catchRate': 170,
    'type': [PokemonType.Normal, PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 42,
    'eggCycles': 10,
    'evolutions': [new StoneEvolution('Igglybuff', 'Jigglypuff', GameConstants.StoneType.Soothe_bell)],
    'baby': true,
    'base': {
        'hitpoints': 90,
        'attack': 30,
        'specialAttack': 40,
        'defense': 15,
        'specialDefense': 20,
        'speed': 15,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 175,
    'name': 'Togepi',
    'catchRate': 190,
    'type': [PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 49,
    'eggCycles': 10,
    'evolutions': [new StoneEvolution('Togepi', 'Togetic', GameConstants.StoneType.Soothe_bell)],
    'baby': true,
    'base': {
        'hitpoints': 35,
        'attack': 20,
        'specialAttack': 40,
        'defense': 65,
        'specialDefense': 65,
        'speed': 20,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 175.1,
    'name': 'Spooky Togepi',
    'catchRate': 30,
    'type': [PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 49,
    'eggCycles': 8,
    'base': {
        'hitpoints': 35,
        'attack': 25,
        'specialAttack': 40,
        'defense': 65,
        'specialDefense': 65,
        'speed': 20,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 175.2,
    'name': 'Surprise Togepi',
    'catchRate': 30,
    'type': [PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 49,
    'eggCycles': 8,
    'base': {
        'hitpoints': 35,
        'attack': 25,
        'specialAttack': 40,
        'defense': 65,
        'specialDefense': 65,
        'speed': 20,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 176,
    'name': 'Togetic',
    'catchRate': 75,
    'type': [PokemonType.Fairy, PokemonType.Flying],
    'levelType': LevelType.fast,
    'exp': 142,
    'eggCycles': 10,
    'evolutions': [new StoneEvolution('Togetic', 'Togekiss', GameConstants.StoneType.Shiny_stone)],
    'base': {
        'hitpoints': 55,
        'attack': 40,
        'specialAttack': 80,
        'defense': 85,
        'specialDefense': 105,
        'speed': 40,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 177,
    'name': 'Natu',
    'catchRate': 190,
    'type': [PokemonType.Psychic, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 64,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Natu', 'Xatu', 25)],
    'base': {
        'hitpoints': 40,
        'attack': 50,
        'specialAttack': 70,
        'defense': 45,
        'specialDefense': 45,
        'speed': 70,
    },
}, {
    'id': 178,
    'name': 'Xatu',
    'catchRate': 75,
    'type': [PokemonType.Psychic, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'attack': 75,
        'specialAttack': 95,
        'defense': 70,
        'specialDefense': 70,
        'speed': 95,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 179,
    'name': 'Mareep',
    'catchRate': 235,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumslow,
    'exp': 56,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Mareep', 'Flaaffy', 15)],
    'base': {
        'hitpoints': 55,
        'attack': 40,
        'specialAttack': 65,
        'defense': 40,
        'specialDefense': 45,
        'speed': 35,
    },
}, {
    'id': 180,
    'name': 'Flaaffy',
    'catchRate': 120,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumslow,
    'exp': 128,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Flaaffy', 'Ampharos', 30)],
    'base': {
        'hitpoints': 70,
        'attack': 55,
        'specialAttack': 80,
        'defense': 55,
        'specialDefense': 60,
        'speed': 45,
    },
}, {
    'id': 181,
    'name': 'Ampharos',
    'catchRate': 45,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumslow,
    'exp': 230,
    'eggCycles': 20,
    'base': {
        'hitpoints': 90,
        'attack': 75,
        'specialAttack': 115,
        'defense': 85,
        'specialDefense': 90,
        'speed': 55,
    },
}, {
    'id': 182,
    'name': 'Bellossom',
    'catchRate': 45,
    'type': [PokemonType.Grass],
    'levelType': LevelType.mediumslow,
    'exp': 221,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 90,
        'defense': 95,
        'specialDefense': 100,
        'speed': 50,
    },
}, {
    'id': 183,
    'name': 'Marill',
    'catchRate': 190,
    'type': [PokemonType.Water, PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 88,
    'eggCycles': 10,
    'evolutions': [new LevelEvolution('Marill', 'Azumarill', 18)],
    'base': {
        'hitpoints': 70,
        'attack': 20,
        'specialAttack': 20,
        'defense': 50,
        'specialDefense': 50,
        'speed': 40,
    },
}, {
    'id': 184,
    'name': 'Azumarill',
    'catchRate': 75,
    'type': [PokemonType.Water, PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 189,
    'eggCycles': 10,
    'base': {
        'hitpoints': 100,
        'attack': 50,
        'specialAttack': 60,
        'defense': 80,
        'specialDefense': 80,
        'speed': 50,
    },
}, {
    'id': 185,
    'name': 'Sudowoodo',
    'catchRate': 65,
    'type': [PokemonType.Rock],
    'levelType': LevelType.mediumfast,
    'exp': 144,
    'eggCycles': 20,
    'base': {
        'hitpoints': 70,
        'attack': 100,
        'specialAttack': 30,
        'defense': 115,
        'specialDefense': 65,
        'speed': 30,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 186,
    'name': 'Politoed',
    'catchRate': 45,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumslow,
    'exp': 225,
    'eggCycles': 20,
    'base': {
        'hitpoints': 90,
        'attack': 75,
        'specialAttack': 90,
        'defense': 75,
        'specialDefense': 100,
        'speed': 70,
    },
    'heldItem': { type: ItemType.item, id: 'Kings_rock' },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 187,
    'name': 'Hoppip',
    'catchRate': 255,
    'type': [PokemonType.Grass, PokemonType.Flying],
    'levelType': LevelType.mediumslow,
    'exp': 50,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Hoppip', 'Skiploom', 18)],
    'base': {
        'hitpoints': 35,
        'attack': 35,
        'specialAttack': 35,
        'defense': 40,
        'specialDefense': 55,
        'speed': 50,
    },
}, {
    'id': 188,
    'name': 'Skiploom',
    'catchRate': 120,
    'type': [PokemonType.Grass, PokemonType.Flying],
    'levelType': LevelType.mediumslow,
    'exp': 119,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Skiploom', 'Jumpluff', 27)],
    'base': {
        'hitpoints': 55,
        'attack': 45,
        'specialAttack': 45,
        'defense': 50,
        'specialDefense': 65,
        'speed': 80,
    },
}, {
    'id': 189,
    'name': 'Jumpluff',
    'catchRate': 45,
    'type': [PokemonType.Grass, PokemonType.Flying],
    'levelType': LevelType.mediumslow,
    'exp': 207,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'attack': 55,
        'specialAttack': 55,
        'defense': 70,
        'specialDefense': 95,
        'speed': 110,
    },
}, {
    'id': 190,
    'name': 'Aipom',
    'catchRate': 45,
    'type': [PokemonType.Normal],
    'levelType': LevelType.fast,
    'evolutions': [new LevelEvolution('Aipom', 'Ambipom', 32)],
    'exp': 72,
    'eggCycles': 20,
    'base': {
        'hitpoints': 55,
        'attack': 70,
        'specialAttack': 40,
        'defense': 55,
        'specialDefense': 55,
        'speed': 85,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 191,
    'name': 'Sunkern',
    'catchRate': 235,
    'type': [PokemonType.Grass],
    'levelType': LevelType.mediumslow,
    'exp': 36,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Sunkern', 'Sunflora', GameConstants.StoneType.Sun_stone)],
    'base': {
        'hitpoints': 30,
        'attack': 30,
        'specialAttack': 30,
        'defense': 30,
        'specialDefense': 30,
        'speed': 30,
    },
}, {
    'id': 192,
    'name': 'Sunflora',
    'catchRate': 120,
    'type': [PokemonType.Grass],
    'levelType': LevelType.mediumslow,
    'exp': 149,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'attack': 75,
        'specialAttack': 105,
        'defense': 55,
        'specialDefense': 85,
        'speed': 30,
    },
}, {
    'id': 193,
    'name': 'Yanma',
    'catchRate': 75,
    'type': [PokemonType.Bug, PokemonType.Flying],
    'levelType': LevelType.mediumfast,
    'exp': 78,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Yanma', 'Yanmega', 33)],
    'base': {
        'hitpoints': 65,
        'attack': 65,
        'specialAttack': 75,
        'defense': 45,
        'specialDefense': 45,
        'speed': 95,
    },
}, {
    'id': 194,
    'name': 'Wooper',
    'catchRate': 255,
    'type': [PokemonType.Water, PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 42,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Wooper', 'Quagsire', 20)],
    'base': {
        'hitpoints': 55,
        'attack': 45,
        'specialAttack': 25,
        'defense': 45,
        'specialDefense': 25,
        'speed': 15,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 195,
    'name': 'Quagsire',
    'catchRate': 90,
    'type': [PokemonType.Water, PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 151,
    'eggCycles': 20,
    'base': {
        'hitpoints': 95,
        'attack': 85,
        'specialAttack': 65,
        'defense': 85,
        'specialDefense': 65,
        'speed': 35,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 196,
    'name': 'Espeon',
    'catchRate': 45,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 184,
    'eggCycles': 35,
    'base': {
        'hitpoints': 65,
        'attack': 65,
        'specialAttack': 130,
        'defense': 60,
        'specialDefense': 95,
        'speed': 110,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 197,
    'name': 'Umbreon',
    'catchRate': 45,
    'type': [PokemonType.Dark],
    'levelType': LevelType.mediumfast,
    'exp': 184,
    'eggCycles': 35,
    'base': {
        'hitpoints': 95,
        'attack': 65,
        'specialAttack': 60,
        'defense': 110,
        'specialDefense': 130,
        'speed': 65,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 198,
    'name': 'Murkrow',
    'catchRate': 30,
    'type': [PokemonType.Dark, PokemonType.Flying],
    'levelType': LevelType.mediumslow,
    'exp': 81,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Murkrow', 'Honchkrow', GameConstants.StoneType.Dusk_stone)],
    'base': {
        'hitpoints': 60,
        'attack': 85,
        'specialAttack': 85,
        'defense': 42,
        'specialDefense': 42,
        'speed': 91,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 199,
    'name': 'Slowking',
    'catchRate': 70,
    'type': [PokemonType.Water, PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'eggCycles': 20,
    'base': {
        'hitpoints': 95,
        'attack': 75,
        'specialAttack': 100,
        'defense': 80,
        'specialDefense': 110,
        'speed': 30,
    },
    'heldItem': { type: ItemType.item, id: 'Kings_rock' },
}, {
    'id': 199.1,
    'name': 'Galarian Slowking',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 70,
    'type': [PokemonType.Poison, PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'eggCycles': 20,
    'base': {
        'hitpoints': 95,
        'attack': 65,
        'specialAttack': 110,
        'defense': 80,
        'specialDefense': 110,
        'speed': 30,
    },
}, {
    'id': 200,
    'name': 'Misdreavus',
    'catchRate': 45,
    'type': [PokemonType.Ghost],
    'levelType': LevelType.fast,
    'exp': 87,
    'eggCycles': 25,
    'evolutions': [new StoneEvolution('Misdreavus', 'Mismagius', GameConstants.StoneType.Dusk_stone)],
    'base': {
        'hitpoints': 60,
        'attack': 60,
        'specialAttack': 85,
        'defense': 60,
        'specialDefense': 85,
        'speed': 85,
    },
}, {
    'id': 201,
    'name': 'Unown (A)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.01,
    'name': 'Unown (B)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.02,
    'name': 'Unown (C)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.03,
    'name': 'Unown (D)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.04,
    'name': 'Unown (E)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.05,
    'name': 'Unown (F)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.06,
    'name': 'Unown (G)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.07,
    'name': 'Unown (H)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.08,
    'name': 'Unown (I)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.09,
    'name': 'Unown (J)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.10,
    'name': 'Unown (K)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.11,
    'name': 'Unown (L)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.12,
    'name': 'Unown (M)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.13,
    'name': 'Unown (N)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.14,
    'name': 'Unown (O)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.15,
    'name': 'Unown (P)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.16,
    'name': 'Unown (Q)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.17,
    'name': 'Unown (R)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.18,
    'name': 'Unown (S)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.19,
    'name': 'Unown (T)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.20,
    'name': 'Unown (U)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.21,
    'name': 'Unown (V)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.22,
    'name': 'Unown (W)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.23,
    'name': 'Unown (X)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.24,
    'name': 'Unown (Y)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.25,
    'name': 'Unown (Z)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.26,
    'name': 'Unown (!)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 201.27,
    'name': 'Unown (?)',
    'catchRate': 225,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 118,
    'eggCycles': 40,
    'base': {
        'hitpoints': 48,
        'attack': 72,
        'specialAttack': 72,
        'defense': 48,
        'specialDefense': 48,
        'speed': 48,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 202,
    'name': 'Wobbuffet',
    'catchRate': 45,
    'type': [PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 142,
    'eggCycles': 20,
    'base': {
        'hitpoints': 190,
        'attack': 33,
        'specialAttack': 33,
        'defense': 58,
        'specialDefense': 58,
        'speed': 33,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 203,
    'name': 'Girafarig',
    'catchRate': 60,
    'type': [PokemonType.Normal, PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 159,
    'eggCycles': 20,
    'base': {
        'hitpoints': 70,
        'attack': 80,
        'specialAttack': 90,
        'defense': 65,
        'specialDefense': 65,
        'speed': 85,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 204,
    'name': 'Pineco',
    'catchRate': 190,
    'type': [PokemonType.Bug],
    'levelType': LevelType.mediumfast,
    'exp': 58,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Pineco', 'Forretress', 31)],
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 35,
        'defense': 90,
        'specialDefense': 35,
        'speed': 15,
    },
}, {
    'id': 205,
    'name': 'Forretress',
    'catchRate': 75,
    'type': [PokemonType.Bug, PokemonType.Steel],
    'levelType': LevelType.mediumfast,
    'exp': 163,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'attack': 90,
        'specialAttack': 60,
        'defense': 140,
        'specialDefense': 60,
        'speed': 40,
    },
}, {
    'id': 206,
    'name': 'Dunsparce',
    'catchRate': 190,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 145,
    'eggCycles': 20,
    'base': {
        'hitpoints': 100,
        'attack': 70,
        'specialAttack': 65,
        'defense': 70,
        'specialDefense': 65,
        'speed': 45,
    },
}, {
    'id': 207,
    'name': 'Gligar',
    'catchRate': 60,
    'type': [PokemonType.Ground, PokemonType.Flying],
    'levelType': LevelType.mediumslow,
    'exp': 86,
    'eggCycles': 20,
    'evolutions': [new NightTimedStoneEvolution('Gligar', 'Gliscor', GameConstants.StoneType.Razor_fang)],
    'base': {
        'hitpoints': 65,
        'attack': 75,
        'specialAttack': 35,
        'defense': 105,
        'specialDefense': 65,
        'speed': 85,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 208,
    'name': 'Steelix',
    'catchRate': 25,
    'type': [PokemonType.Steel, PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 179,
    'eggCycles': 25,
    'base': {
        'hitpoints': 75,
        'attack': 85,
        'specialAttack': 55,
        'defense': 200,
        'specialDefense': 65,
        'speed': 30,
    },
    'heldItem': { type: ItemType.item, id: 'Metal_coat' },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 208.1,
    'name': 'Crystal Steelix',
    'catchRate': 25,
    'type': [PokemonType.Steel, PokemonType.Ice],
    'levelType': LevelType.mediumfast,
    'exp': 179,
    'eggCycles': 25,
    'base': {
        'hitpoints': 75,
        'attack': 85,
        'specialAttack': 55,
        'defense': 200,
        'specialDefense': 65,
        'speed': 30,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 209,
    'name': 'Snubbull',
    'catchRate': 190,
    'type': [PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 60,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Snubbull', 'Granbull', 23)],
    'base': {
        'hitpoints': 60,
        'attack': 80,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 40,
        'speed': 30,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 210,
    'name': 'Granbull',
    'catchRate': 75,
    'type': [PokemonType.Fairy],
    'levelType': LevelType.fast,
    'exp': 158,
    'eggCycles': 20,
    'base': {
        'hitpoints': 90,
        'attack': 120,
        'specialAttack': 60,
        'defense': 75,
        'specialDefense': 60,
        'speed': 45,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 211,
    'name': 'Qwilfish',
    'catchRate': 45,
    'type': [PokemonType.Water, PokemonType.Poison],
    'levelType': LevelType.mediumfast,
    'exp': 88,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'attack': 95,
        'specialAttack': 55,
        'defense': 85,
        'specialDefense': 55,
        'speed': 85,
    },
}, {
    'id': 212,
    'name': 'Scizor',
    'catchRate': 25,
    'type': [PokemonType.Bug, PokemonType.Steel],
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'eggCycles': 25,
    'base': {
        'hitpoints': 70,
        'attack': 130,
        'specialAttack': 55,
        'defense': 100,
        'specialDefense': 80,
        'speed': 65,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 213,
    'name': 'Shuckle',
    'catchRate': 190,
    'type': [PokemonType.Bug, PokemonType.Rock],
    'levelType': LevelType.mediumslow,
    'exp': 177,
    'eggCycles': 20,
    'base': {
        'hitpoints': 20,
        'attack': 10,
        'specialAttack': 10,
        'defense': 230,
        'specialDefense': 230,
        'speed': 5,
    },
}, {
    'id': 214,
    'name': 'Heracross',
    'catchRate': 45,
    'type': [PokemonType.Bug, PokemonType.Fighting],
    'levelType': LevelType.slow,
    'exp': 175,
    'eggCycles': 25,
    'base': {
        'hitpoints': 80,
        'attack': 125,
        'specialAttack': 40,
        'defense': 75,
        'specialDefense': 95,
        'speed': 85,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 215,
    'name': 'Sneasel',
    'catchRate': 60,
    'type': [PokemonType.Dark, PokemonType.Ice],
    'levelType': LevelType.mediumslow,
    'exp': 86,
    'eggCycles': 20,
    'evolutions': [new NightTimedStoneEvolution('Sneasel', 'Weavile', GameConstants.StoneType.Razor_claw)],
    'base': {
        'hitpoints': 55,
        'attack': 95,
        'specialAttack': 35,
        'defense': 55,
        'specialDefense': 75,
        'speed': 115,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 216,
    'name': 'Teddiursa',
    'catchRate': 120,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 66,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Teddiursa', 'Ursaring', 30)],
    'base': {
        'hitpoints': 60,
        'attack': 80,
        'specialAttack': 50,
        'defense': 50,
        'specialDefense': 50,
        'speed': 40,
    },
}, {
    'id': 217,
    'name': 'Ursaring',
    'catchRate': 60,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'eggCycles': 20,
    'base': {
        'hitpoints': 90,
        'attack': 130,
        'specialAttack': 75,
        'defense': 75,
        'specialDefense': 75,
        'speed': 55,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 218,
    'name': 'Slugma',
    'catchRate': 190,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 50,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Slugma', 'Magcargo', 38)],
    'base': {
        'hitpoints': 40,
        'attack': 40,
        'specialAttack': 70,
        'defense': 40,
        'specialDefense': 40,
        'speed': 20,
    },
}, {
    'id': 219,
    'name': 'Magcargo',
    'catchRate': 75,
    'type': [PokemonType.Fire, PokemonType.Rock],
    'levelType': LevelType.mediumfast,
    'exp': 151,
    'eggCycles': 20,
    'base': {
        'hitpoints': 60,
        'attack': 50,
        'specialAttack': 90,
        'defense': 120,
        'specialDefense': 80,
        'speed': 30,
    },
}, {
    'id': 220,
    'name': 'Swinub',
    'catchRate': 225,
    'type': [PokemonType.Ice, PokemonType.Ground],
    'levelType': LevelType.slow,
    'exp': 50,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Swinub', 'Piloswine', 33)],
    'base': {
        'hitpoints': 50,
        'attack': 50,
        'specialAttack': 30,
        'defense': 40,
        'specialDefense': 30,
        'speed': 50,
    },
}, {
    'id': 221,
    'name': 'Piloswine',
    'catchRate': 75,
    'type': [PokemonType.Ice, PokemonType.Ground],
    'levelType': LevelType.slow,
    'exp': 158,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Piloswine', 'Mamoswine', 53)],
    'base': {
        'hitpoints': 100,
        'attack': 100,
        'specialAttack': 60,
        'defense': 80,
        'specialDefense': 60,
        'speed': 50,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 222,
    'name': 'Corsola',
    'catchRate': 60,
    'type': [PokemonType.Water, PokemonType.Rock],
    'levelType': LevelType.fast,
    'exp': 144,
    'eggCycles': 20,
    'base': {
        'hitpoints': 65,
        'attack': 55,
        'specialAttack': 65,
        'defense': 95,
        'specialDefense': 95,
        'speed': 35,
    },
    'heldItem': { type: ItemType.underground, id: 'Hard Stone' },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 222.1,
    'name': 'Galarian Corsola',
    'nativeRegion': GameConstants.Region.galar,
    'catchRate': 60,
    'type': [PokemonType.Ghost],
    'levelType': LevelType.fast,
    'exp': 144,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Galarian Corsola', 'Cursola', 38)],
    'base': {
        'hitpoints': 60,
        'attack': 55,
        'specialAttack': 65,
        'defense': 100,
        'specialDefense': 100,
        'speed': 30,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 223,
    'name': 'Remoraid',
    'catchRate': 190,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 60,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Remoraid', 'Octillery', 25)],
    'base': {
        'hitpoints': 35,
        'attack': 65,
        'specialAttack': 65,
        'defense': 35,
        'specialDefense': 35,
        'speed': 65,
    },
}, {
    'id': 224,
    'name': 'Octillery',
    'catchRate': 75,
    'type': [PokemonType.Water],
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'attack': 105,
        'specialAttack': 105,
        'defense': 75,
        'specialDefense': 75,
        'speed': 45,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 225,
    'name': 'Delibird',
    'catchRate': 45,
    'type': [PokemonType.Ice, PokemonType.Flying],
    'levelType': LevelType.fast,
    'exp': 116,
    'eggCycles': 20,
    'base': {
        'hitpoints': 45,
        'attack': 55,
        'specialAttack': 65,
        'defense': 45,
        'specialDefense': 45,
        'speed': 75,
    },
}, {
    'id': 226,
    'name': 'Mantine',
    'catchRate': 25,
    'type': [PokemonType.Water, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 170,
    'eggCycles': 25,
    'base': {
        'hitpoints': 85,
        'attack': 40,
        'specialAttack': 80,
        'defense': 70,
        'specialDefense': 140,
        'speed': 70,
    },
}, {
    'id': 227,
    'name': 'Skarmory',
    'catchRate': 25,
    'type': [PokemonType.Steel, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 163,
    'eggCycles': 25,
    'base': {
        'hitpoints': 65,
        'attack': 80,
        'specialAttack': 40,
        'defense': 140,
        'specialDefense': 70,
        'speed': 70,
    },
    'heldItem': { type: ItemType.item, id: 'Metal_coat' },
}, {
    'id': 228,
    'name': 'Houndour',
    'catchRate': 120,
    'type': [PokemonType.Dark, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 66,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Houndour', 'Houndoom', 24)],
    'base': {
        'hitpoints': 45,
        'attack': 60,
        'specialAttack': 80,
        'defense': 30,
        'specialDefense': 50,
        'speed': 65,
    },
}, {
    'id': 229,
    'name': 'Houndoom',
    'catchRate': 45,
    'type': [PokemonType.Dark, PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 175,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'attack': 90,
        'specialAttack': 110,
        'defense': 50,
        'specialDefense': 80,
        'speed': 95,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 230,
    'name': 'Kingdra',
    'catchRate': 45,
    'type': [PokemonType.Water, PokemonType.Dragon],
    'levelType': LevelType.mediumfast,
    'exp': 243,
    'eggCycles': 20,
    'base': {
        'hitpoints': 75,
        'attack': 95,
        'specialAttack': 95,
        'defense': 95,
        'specialDefense': 95,
        'speed': 85,
    },
    'heldItem': { type: ItemType.item, id: 'Dragon_scale' },
}, {
    'id': 231,
    'name': 'Phanpy',
    'catchRate': 120,
    'type': [PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 66,
    'eggCycles': 20,
    'evolutions': [new LevelEvolution('Phanpy', 'Donphan', 25)],
    'base': {
        'hitpoints': 90,
        'attack': 60,
        'specialAttack': 40,
        'defense': 60,
        'specialDefense': 40,
        'speed': 40,
    },
}, {
    'id': 232,
    'name': 'Donphan',
    'catchRate': 60,
    'type': [PokemonType.Ground],
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'eggCycles': 20,
    'base': {
        'hitpoints': 90,
        'attack': 120,
        'specialAttack': 60,
        'defense': 120,
        'specialDefense': 60,
        'speed': 50,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 233,
    'name': 'Porygon2',
    'catchRate': 45,
    'type': [PokemonType.Normal],
    'levelType': LevelType.mediumfast,
    'exp': 180,
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Porygon2', 'Porygon-Z', GameConstants.StoneType.Dubious_disc)],
    'base': {
        'hitpoints': 85,
        'attack': 80,
        'specialAttack': 105,
        'defense': 90,
        'specialDefense': 95,
        'speed': 60,
    },
    'heldItem': { type: ItemType.item, id: 'Upgrade' },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 234,
    'name': 'Stantler',
    'catchRate': 45,
    'type': [PokemonType.Normal],
    'levelType': LevelType.slow,
    'exp': 163,
    'eggCycles': 20,
    'base': {
        'hitpoints': 73,
        'attack': 95,
        'specialAttack': 85,
        'defense': 62,
        'specialDefense': 65,
        'speed': 85,
    },
}, {
    'id': 235,
    'name': 'Smeargle',
    'catchRate': 45,
    'type': [PokemonType.Normal],
    'levelType': LevelType.fast,
    'exp': 88,
    'eggCycles': 20,
    'base': {
        'hitpoints': 55,
        'attack': 20,
        'specialAttack': 20,
        'defense': 35,
        'specialDefense': 45,
        'speed': 75,
    },
}, {
    'id': 236,
    'name': 'Tyrogue',
    'catchRate': 75,
    'type': [PokemonType.Fighting],
    'levelType': LevelType.mediumfast,
    'exp': 42,
    'eggCycles': 25,
    'evolutions': [
        new LevelEvolution('Tyrogue', 'Hitmonlee', 20),
        new LevelEvolution('Tyrogue', 'Hitmonchan', 20),
        new LevelEvolution('Tyrogue', 'Hitmontop', 20),
    ],
    'baby': true,
    'base': {
        'hitpoints': 35,
        'attack': 35,
        'specialAttack': 35,
        'defense': 35,
        'specialDefense': 35,
        'speed': 35,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 237,
    'name': 'Hitmontop',
    'catchRate': 45,
    'type': [PokemonType.Fighting],
    'levelType': LevelType.mediumfast,
    'exp': 159,
    'eggCycles': 25,
    'base': {
        'hitpoints': 50,
        'attack': 95,
        'specialAttack': 35,
        'defense': 95,
        'specialDefense': 110,
        'speed': 70,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 238,
    'name': 'Smoochum',
    'catchRate': 45,
    'type': [PokemonType.Ice, PokemonType.Psychic],
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'eggCycles': 25,
    'evolutions': [new LevelEvolution('Smoochum', 'Jynx', 30)],
    'baby': true,
    'base': {
        'hitpoints': 45,
        'attack': 30,
        'specialAttack': 85,
        'defense': 15,
        'specialDefense': 65,
        'speed': 65,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 239,
    'name': 'Elekid',
    'catchRate': 45,
    'type': [PokemonType.Electric],
    'levelType': LevelType.mediumfast,
    'exp': 72,
    'eggCycles': 25,
    'evolutions': [new LevelEvolution('Elekid', 'Electabuzz', 30)],
    'baby': true,
    'base': {
        'hitpoints': 45,
        'attack': 63,
        'specialAttack': 65,
        'defense': 37,
        'specialDefense': 55,
        'speed': 95,
    },
    'heldItem': { type: ItemType.item, id: 'Electirizer' },
    'gender': {
        'femaleRatio': 0.25,
    },
}, {
    'id': 240,
    'name': 'Magby',
    'catchRate': 45,
    'type': [PokemonType.Fire],
    'levelType': LevelType.mediumfast,
    'exp': 73,
    'eggCycles': 25,
    'evolutions': [new LevelEvolution('Magby', 'Magmar', 30)],
    'baby': true,
    'base': {
        'hitpoints': 45,
        'attack': 75,
        'specialAttack': 70,
        'defense': 37,
        'specialDefense': 55,
        'speed': 83,
    },
    'heldItem': { type: ItemType.item, id: 'Magmarizer' },
    'gender': {
        'femaleRatio': 0.25,
    },
}, {
    'id': 241,
    'name': 'Miltank',
    'catchRate': 45,
    'type': [PokemonType.Normal],
    'levelType': LevelType.slow,
    'exp': 172,
    'eggCycles': 20,
    'base': {
        'hitpoints': 95,
        'attack': 80,
        'specialAttack': 40,
        'defense': 105,
        'specialDefense': 70,
        'speed': 100,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 242,
    'name': 'Blissey',
    'catchRate': 30,
    'type': [PokemonType.Normal],
    'levelType': LevelType.fast,
    'exp': 608,
    'eggCycles': 40,
    'base': {
        'hitpoints': 255,
        'attack': 10,
        'specialAttack': 75,
        'defense': 10,
        'specialDefense': 135,
        'speed': 55,
    },
    'heldItem': { type: ItemType.underground, id: 'Oval Stone' },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 243,
    'name': 'Raikou',
    'catchRate': 3,
    'type': [PokemonType.Electric],
    'levelType': LevelType.slow,
    'exp': 261,
    'eggCycles': 80,
    'base': {
        'hitpoints': 90,
        'attack': 85,
        'specialAttack': 115,
        'defense': 75,
        'specialDefense': 100,
        'speed': 115,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 244,
    'name': 'Entei',
    'catchRate': 3,
    'type': [PokemonType.Fire],
    'levelType': LevelType.slow,
    'exp': 261,
    'eggCycles': 80,
    'base': {
        'hitpoints': 115,
        'attack': 115,
        'specialAttack': 90,
        'defense': 85,
        'specialDefense': 75,
        'speed': 100,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 245,
    'name': 'Suicune',
    'catchRate': 3,
    'type': [PokemonType.Water],
    'levelType': LevelType.slow,
    'exp': 261,
    'eggCycles': 80,
    'base': {
        'hitpoints': 100,
        'attack': 75,
        'specialAttack': 90,
        'defense': 115,
        'specialDefense': 115,
        'speed': 85,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 246,
    'name': 'Larvitar',
    'catchRate': 45,
    'type': [PokemonType.Rock, PokemonType.Ground],
    'levelType': LevelType.slow,
    'exp': 60,
    'eggCycles': 40,
    'evolutions': [new LevelEvolution('Larvitar', 'Pupitar', 30)],
    'base': {
        'hitpoints': 50,
        'attack': 64,
        'specialAttack': 45,
        'defense': 50,
        'specialDefense': 50,
        'speed': 41,
    },
}, {
    'id': 247,
    'name': 'Pupitar',
    'catchRate': 45,
    'type': [PokemonType.Rock, PokemonType.Ground],
    'levelType': LevelType.slow,
    'exp': 144,
    'eggCycles': 40,
    'evolutions': [new LevelEvolution('Pupitar', 'Tyranitar', 55)],
    'base': {
        'hitpoints': 70,
        'attack': 84,
        'specialAttack': 65,
        'defense': 70,
        'specialDefense': 70,
        'speed': 51,
    },
}, {
    'id': 248,
    'name': 'Tyranitar',
    'catchRate': 45,
    'type': [PokemonType.Rock, PokemonType.Dark],
    'levelType': LevelType.slow,
    'exp': 270,
    'eggCycles': 40,
    'base': {
        'hitpoints': 100,
        'attack': 134,
        'specialAttack': 95,
        'defense': 110,
        'specialDefense': 100,
        'speed': 61,
    },
}, {
    'id': 249,
    'name': 'Lugia',
    'catchRate': 3,
    'type': [PokemonType.Psychic, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 306,
    'eggCycles': 120,
    'base': {
        'hitpoints': 106,
        'attack': 90,
        'specialAttack': 90,
        'defense': 130,
        'specialDefense': 154,
        'speed': 110,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 250,
    'name': 'Ho-Oh',
    'catchRate': 3,
    'type': [PokemonType.Fire, PokemonType.Flying],
    'levelType': LevelType.slow,
    'exp': 306,
    'eggCycles': 120,
    'base': {
        'hitpoints': 106,
        'attack': 130,
        'specialAttack': 110,
        'defense': 90,
        'specialDefense': 154,
        'speed': 90,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 251,
    'name': 'Celebi',
    'catchRate': 45,
    'type': [PokemonType.Psychic, PokemonType.Grass],
    'levelType': LevelType.mediumslow,
    'exp': 270,
    'eggCycles': 120,
    'base': {
        'hitpoints': 100,
        'attack': 100,
        'specialAttack': 100,
        'defense': 100,
        'specialDefense': 100,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Lum },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 251.1,
    'name': 'Grinch Celebi',
    'catchRate': 45,
    'type': [PokemonType.Psychic, PokemonType.Grass],
    'levelType': LevelType.mediumslow,
    'exp': 270,
    'eggCycles': 120,
    'base': {
        'hitpoints': 100,
        'attack': 100,
        'specialAttack': 100,
        'defense': 100,
        'specialDefense': 100,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Lum },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 251.2,
    'name': 'Flowering Celebi',
    'catchRate': 45,
    'type': [PokemonType.Psychic, PokemonType.Grass],
    'levelType': LevelType.mediumslow,
    'exp': 270,
    'eggCycles': 120,
    'base': {
        'hitpoints': 100,
        'attack': 100,
        'specialAttack': 100,
        'defense': 100,
        'specialDefense': 100,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Lum },
}, {
    'id': 252,
    'name': 'Treecko',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Treecko', 'Grovyle', 16)],
    'base': {
        'hitpoints': 40,
        'attack': 45,
        'specialAttack': 65,
        'defense': 35,
        'specialDefense': 55,
        'speed': 70,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 253,
    'name': 'Grovyle',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Grovyle', 'Sceptile', 36)],
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 85,
        'defense': 45,
        'specialDefense': 65,
        'speed': 95,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 254,
    'name': 'Sceptile',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'catchRate': 45,
    'base': {
        'hitpoints': 70,
        'attack': 85,
        'specialAttack': 105,
        'defense': 65,
        'specialDefense': 85,
        'speed': 120,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 255,
    'name': 'Torchic',
    'type': [PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Torchic', 'Combusken', 16)],
    'base': {
        'hitpoints': 45,
        'attack': 60,
        'specialAttack': 70,
        'defense': 40,
        'specialDefense': 50,
        'speed': 45,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 256,
    'name': 'Combusken',
    'type': [PokemonType.Fire, PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Combusken', 'Blaziken', 36)],
    'base': {
        'hitpoints': 60,
        'attack': 85,
        'specialAttack': 85,
        'defense': 60,
        'specialDefense': 60,
        'speed': 55,
    },
    'gender': {
        'femaleRatio': 0.125,
        'visualDifference': true,
    },
}, {
    'id': 257,
    'name': 'Blaziken',
    'type': [PokemonType.Fire, PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 120,
        'specialAttack': 110,
        'defense': 70,
        'specialDefense': 70,
        'speed': 80,
    },
    'gender': {
        'femaleRatio': 0.125,
        'visualDifference': true,
    },
}, {
    'id': 258,
    'name': 'Mudkip',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Mudkip', 'Marshtomp', 16)],
    'base': {
        'hitpoints': 50,
        'attack': 70,
        'specialAttack': 50,
        'defense': 50,
        'specialDefense': 50,
        'speed': 40,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 259,
    'name': 'Marshtomp',
    'type': [PokemonType.Water, PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Marshtomp', 'Swampert', 36)],
    'base': {
        'hitpoints': 70,
        'attack': 85,
        'specialAttack': 60,
        'defense': 70,
        'specialDefense': 70,
        'speed': 50,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 260,
    'name': 'Swampert',
    'type': [PokemonType.Water, PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 241,
    'catchRate': 45,
    'base': {
        'hitpoints': 100,
        'attack': 110,
        'specialAttack': 85,
        'defense': 90,
        'specialDefense': 90,
        'speed': 60,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 261,
    'name': 'Poochyena',
    'type': [PokemonType.Dark],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 56,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Poochyena', 'Mightyena', 18)],
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 30,
        'defense': 35,
        'specialDefense': 30,
        'speed': 35,
    },
}, {
    'id': 262,
    'name': 'Mightyena',
    'type': [PokemonType.Dark],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 147,
    'catchRate': 127,
    'base': {
        'hitpoints': 70,
        'attack': 90,
        'specialAttack': 60,
        'defense': 70,
        'specialDefense': 60,
        'speed': 70,
    },
}, {
    'id': 263,
    'name': 'Zigzagoon',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 56,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Zigzagoon', 'Linoone', 20)],
    'base': {
        'hitpoints': 38,
        'attack': 30,
        'specialAttack': 30,
        'defense': 41,
        'specialDefense': 41,
        'speed': 60,
    },
    'heldItem': { type: ItemType.underground, id: 'Revive' },
}, {
    'id': 263.1,
    'name': 'Galarian Zigzagoon',
    'nativeRegion': GameConstants.Region.galar,
    'type': [PokemonType.Normal, PokemonType.Dark],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 56,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Galarian Zigzagoon', 'Galarian Linoone', 20)],
    'base': {
        'hitpoints': 38,
        'attack': 30,
        'specialAttack': 30,
        'defense': 41,
        'specialDefense': 41,
        'speed': 60,
    },
}, {
    'id': 264,
    'name': 'Linoone',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 147,
    'catchRate': 90,
    'base': {
        'hitpoints': 78,
        'attack': 70,
        'specialAttack': 50,
        'defense': 61,
        'specialDefense': 61,
        'speed': 100,
    },
    'heldItem': { type: ItemType.underground, id: 'Max Revive' },
}, {
    'id': 264.1,
    'name': 'Galarian Linoone',
    'nativeRegion': GameConstants.Region.galar,
    'type': [PokemonType.Normal, PokemonType.Dark],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 147,
    'catchRate': 90,
    'evolutions': [new NightTimedLevelEvolution('Galarian Linoone', 'Obstagoon', 35)],
    'base': {
        'hitpoints': 78,
        'attack': 70,
        'specialAttack': 50,
        'defense': 61,
        'specialDefense': 61,
        'speed': 100,
    },
}, {
    'id': 265,
    'name': 'Wurmple',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 56,
    'catchRate': 255,
    'evolutions': [
        new LevelEvolution('Wurmple', 'Silcoon', 7),
        new LevelEvolution('Wurmple', 'Cascoon', 7),
    ],
    'base': {
        'hitpoints': 45,
        'attack': 45,
        'specialAttack': 20,
        'defense': 35,
        'specialDefense': 30,
        'speed': 20,
    },
}, {
    'id': 266,
    'name': 'Silcoon',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 72,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Silcoon', 'Beautifly', 10)],
    'base': {
        'hitpoints': 50,
        'attack': 35,
        'specialAttack': 25,
        'defense': 55,
        'specialDefense': 25,
        'speed': 15,
    },
}, {
    'id': 267,
    'name': 'Beautifly',
    'type': [PokemonType.Bug, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 178,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 70,
        'specialAttack': 100,
        'defense': 50,
        'specialDefense': 50,
        'speed': 65,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 268,
    'name': 'Cascoon',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 72,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Cascoon', 'Dustox', 10)],
    'base': {
        'hitpoints': 50,
        'attack': 35,
        'specialAttack': 25,
        'defense': 55,
        'specialDefense': 25,
        'speed': 15,
    },
}, {
    'id': 269,
    'name': 'Dustox',
    'type': [PokemonType.Bug, PokemonType.Poison],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 50,
        'specialAttack': 50,
        'defense': 70,
        'specialDefense': 90,
        'speed': 65,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 270,
    'name': 'Lotad',
    'type': [PokemonType.Water, PokemonType.Grass],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 44,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Lotad', 'Lombre', 14)],
    'base': {
        'hitpoints': 40,
        'attack': 30,
        'specialAttack': 40,
        'defense': 30,
        'specialDefense': 50,
        'speed': 30,
    },
}, {
    'id': 271,
    'name': 'Lombre',
    'type': [PokemonType.Water, PokemonType.Grass],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 119,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Lombre', 'Ludicolo', GameConstants.StoneType.Water_stone)],
    'base': {
        'hitpoints': 60,
        'attack': 50,
        'specialAttack': 60,
        'defense': 50,
        'specialDefense': 70,
        'speed': 50,
    },
}, {
    'id': 272,
    'name': 'Ludicolo',
    'type': [PokemonType.Water, PokemonType.Grass],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 216,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 70,
        'specialAttack': 90,
        'defense': 70,
        'specialDefense': 100,
        'speed': 70,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 273,
    'name': 'Seedot',
    'type': [PokemonType.Grass],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 44,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Seedot', 'Nuzleaf', 14)],
    'base': {
        'hitpoints': 40,
        'attack': 40,
        'specialAttack': 30,
        'defense': 50,
        'specialDefense': 30,
        'speed': 30,
    },
}, {
    'id': 274,
    'name': 'Nuzleaf',
    'type': [PokemonType.Grass, PokemonType.Dark],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 119,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Nuzleaf', 'Shiftry', GameConstants.StoneType.Leaf_stone)],
    'base': {
        'hitpoints': 70,
        'attack': 70,
        'specialAttack': 60,
        'defense': 40,
        'specialDefense': 40,
        'speed': 60,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 275,
    'name': 'Shiftry',
    'type': [PokemonType.Grass, PokemonType.Dark],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 216,
    'catchRate': 45,
    'base': {
        'hitpoints': 90,
        'attack': 100,
        'specialAttack': 90,
        'defense': 60,
        'specialDefense': 60,
        'speed': 80,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 276,
    'name': 'Taillow',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 54,
    'catchRate': 200,
    'evolutions': [new LevelEvolution('Taillow', 'Swellow', 22)],
    'base': {
        'hitpoints': 40,
        'attack': 55,
        'specialAttack': 30,
        'defense': 30,
        'specialDefense': 30,
        'speed': 85,
    },
}, {
    'id': 277,
    'name': 'Swellow',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 159,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 85,
        'specialAttack': 75,
        'defense': 60,
        'specialDefense': 50,
        'speed': 125,
    },
}, {
    'id': 278,
    'name': 'Wingull',
    'type': [PokemonType.Water, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 54,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Wingull', 'Pelipper', 25)],
    'base': {
        'hitpoints': 40,
        'attack': 30,
        'specialAttack': 55,
        'defense': 30,
        'specialDefense': 30,
        'speed': 85,
    },
}, {
    'id': 279,
    'name': 'Pelipper',
    'type': [PokemonType.Water, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 154,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 50,
        'specialAttack': 95,
        'defense': 100,
        'specialDefense': 70,
        'speed': 65,
    },
}, {
    'id': 280,
    'name': 'Ralts',
    'type': [PokemonType.Psychic, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 40,
    'catchRate': 235,
    'evolutions': [new LevelEvolution('Ralts', 'Kirlia', 20)],
    'base': {
        'hitpoints': 28,
        'attack': 25,
        'specialAttack': 45,
        'defense': 25,
        'specialDefense': 35,
        'speed': 40,
    },
}, {
    'id': 281,
    'name': 'Kirlia',
    'type': [PokemonType.Psychic, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 97,
    'catchRate': 120,
    'evolutions': [
        new LevelEvolution('Kirlia', 'Gardevoir', 30),
        new StoneEvolution('Kirlia', 'Gallade', GameConstants.StoneType.Dawn_stone),
    ],
    'base': {
        'hitpoints': 38,
        'attack': 35,
        'specialAttack': 65,
        'defense': 35,
        'specialDefense': 55,
        'speed': 50,
    },
}, {
    'id': 282,
    'name': 'Gardevoir',
    'type': [PokemonType.Psychic, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 233,
    'catchRate': 45,
    'base': {
        'hitpoints': 68,
        'attack': 65,
        'specialAttack': 125,
        'defense': 65,
        'specialDefense': 115,
        'speed': 80,
    },
}, {
    'id': 283,
    'name': 'Surskit',
    'type': [PokemonType.Bug, PokemonType.Water],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 54,
    'catchRate': 200,
    'evolutions': [new LevelEvolution('Surskit', 'Masquerain', 22)],
    'base': {
        'hitpoints': 40,
        'attack': 30,
        'specialAttack': 50,
        'defense': 32,
        'specialDefense': 52,
        'speed': 65,
    },
}, {
    'id': 284,
    'name': 'Masquerain',
    'type': [PokemonType.Bug, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 159,
    'catchRate': 75,
    'base': {
        'hitpoints': 70,
        'attack': 60,
        'specialAttack': 100,
        'defense': 62,
        'specialDefense': 82,
        'speed': 80,
    },
}, {
    'id': 285,
    'name': 'Shroomish',
    'type': [PokemonType.Grass],
    'eggCycles': 15,
    'levelType': LevelType.fluctuating,
    'exp': 59,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Shroomish', 'Breloom', 23)],
    'base': {
        'hitpoints': 60,
        'attack': 40,
        'specialAttack': 40,
        'defense': 60,
        'specialDefense': 60,
        'speed': 35,
    },
}, {
    'id': 286,
    'name': 'Breloom',
    'type': [PokemonType.Grass, PokemonType.Fighting],
    'eggCycles': 15,
    'levelType': LevelType.fluctuating,
    'exp': 161,
    'catchRate': 90,
    'base': {
        'hitpoints': 60,
        'attack': 130,
        'specialAttack': 60,
        'defense': 80,
        'specialDefense': 60,
        'speed': 70,
    },
}, {
    'id': 287,
    'name': 'Slakoth',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.slow,
    'exp': 56,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Slakoth', 'Vigoroth', 18)],
    'base': {
        'hitpoints': 60,
        'attack': 60,
        'specialAttack': 35,
        'defense': 60,
        'specialDefense': 35,
        'speed': 30,
    },
}, {
    'id': 288,
    'name': 'Vigoroth',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.slow,
    'exp': 154,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Vigoroth', 'Slaking', 36)],
    'base': {
        'hitpoints': 80,
        'attack': 80,
        'specialAttack': 55,
        'defense': 80,
        'specialDefense': 55,
        'speed': 90,
    },
}, {
    'id': 289,
    'name': 'Slaking',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.slow,
    'exp': 252,
    'catchRate': 45,
    'base': {
        'hitpoints': 150,
        'attack': 160,
        'specialAttack': 95,
        'defense': 100,
        'specialDefense': 65,
        'speed': 100,
    },
}, {
    'id': 290,
    'name': 'Nincada',
    'type': [PokemonType.Bug, PokemonType.Ground],
    'eggCycles': 15,
    'levelType': LevelType.erratic,
    'exp': 53,
    'catchRate': 255,
    'evolutions': [
        new LevelEvolution('Nincada', 'Ninjask', 20),
        new LevelEvolution('Nincada', 'Shedinja', 20),
    ],
    'base': {
        'hitpoints': 31,
        'attack': 45,
        'specialAttack': 30,
        'defense': 90,
        'specialDefense': 30,
        'speed': 40,
    },
}, {
    'id': 291,
    'name': 'Ninjask',
    'type': [PokemonType.Bug, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.erratic,
    'exp': 160,
    'catchRate': 120,
    'base': {
        'hitpoints': 61,
        'attack': 90,
        'specialAttack': 50,
        'defense': 45,
        'specialDefense': 50,
        'speed': 160,
    },
}, {
    'id': 292,
    'name': 'Shedinja',
    'type': [PokemonType.Bug, PokemonType.Ghost],
    'eggCycles': 15,
    'levelType': LevelType.erratic,
    'exp': 83,
    'catchRate': 45,
    'base': {
        'hitpoints': 1,
        'attack': 90,
        'specialAttack': 30,
        'defense': 45,
        'specialDefense': 30,
        'speed': 40,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 293,
    'name': 'Whismur',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 48,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Whismur', 'Loudred', 20)],
    'base': {
        'hitpoints': 64,
        'attack': 51,
        'specialAttack': 51,
        'defense': 23,
        'specialDefense': 23,
        'speed': 28,
    },
}, {
    'id': 294,
    'name': 'Loudred',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 126,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Loudred', 'Exploud', 40)],
    'base': {
        'hitpoints': 84,
        'attack': 71,
        'specialAttack': 71,
        'defense': 43,
        'specialDefense': 43,
        'speed': 48,
    },
}, {
    'id': 295,
    'name': 'Exploud',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 221,
    'catchRate': 45,
    'base': {
        'hitpoints': 104,
        'attack': 91,
        'specialAttack': 91,
        'defense': 63,
        'specialDefense': 73,
        'speed': 68,
    },
}, {
    'id': 296,
    'name': 'Makuhita',
    'type': [PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.fluctuating,
    'exp': 47,
    'catchRate': 180,
    'evolutions': [new LevelEvolution('Makuhita', 'Hariyama', 24)],
    'base': {
        'hitpoints': 72,
        'attack': 60,
        'specialAttack': 20,
        'defense': 30,
        'specialDefense': 30,
        'speed': 25,
    },
    'gender': {
        'femaleRatio': 0.25,
    },
}, {
    'id': 297,
    'name': 'Hariyama',
    'type': [PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.fluctuating,
    'exp': 166,
    'catchRate': 200,
    'base': {
        'hitpoints': 144,
        'attack': 120,
        'specialAttack': 40,
        'defense': 60,
        'specialDefense': 60,
        'speed': 50,
    },
    'heldItem': { type: ItemType.item, id: 'Kings_rock' },
    'gender': {
        'femaleRatio': 0.25,
    },
}, {
    'id': 298,
    'name': 'Azurill',
    'type': [PokemonType.Normal, PokemonType.Fairy],
    'eggCycles': 10,
    'levelType': LevelType.fast,
    'exp': 38,
    'catchRate': 150,
    'evolutions': [new StoneEvolution('Azurill', 'Marill', GameConstants.StoneType.Soothe_bell)],
    'baby': true,
    'base': {
        'hitpoints': 50,
        'attack': 20,
        'specialAttack': 20,
        'defense': 40,
        'specialDefense': 40,
        'speed': 20,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 299,
    'name': 'Nosepass',
    'type': [PokemonType.Rock],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 75,
    'catchRate': 255,
    'evolutions': [
        new DungeonRestrictedLevelEvolution('Mt. Coronet North', 'Nosepass', 'Probopass', 20),
        new DungeonRestrictedLevelEvolution('Mt. Coronet South', 'Nosepass', 'Probopass', 20),
        new DungeonRestrictedLevelEvolution('Chargestone Cave', 'Nosepass', 'Probopass', 20),
        new DungeonRestrictedLevelEvolution('Kalos Power Plant', 'Nosepass', 'Probopass', 20),
        new DungeonRestrictedLevelEvolution('Vast Poni Canyon', 'Nosepass', 'Probopass', 20),
    ],
    'base': {
        'hitpoints': 30,
        'attack': 45,
        'specialAttack': 45,
        'defense': 135,
        'specialDefense': 90,
        'speed': 30,
    },
    'heldItem': { type: ItemType.underground, id: 'Hard Stone' },
}, {
    'id': 300,
    'name': 'Skitty',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.fast,
    'exp': 52,
    'catchRate': 255,
    'evolutions': [new StoneEvolution('Skitty', 'Delcatty', GameConstants.StoneType.Moon_stone)],
    'base': {
        'hitpoints': 50,
        'attack': 45,
        'specialAttack': 35,
        'defense': 45,
        'specialDefense': 35,
        'speed': 50,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 301,
    'name': 'Delcatty',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.fast,
    'exp': 140,
    'catchRate': 60,
    'base': {
        'hitpoints': 70,
        'attack': 65,
        'specialAttack': 55,
        'defense': 65,
        'specialDefense': 55,
        'speed': 90,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 302,
    'name': 'Sableye',
    'type': [PokemonType.Dark, PokemonType.Ghost],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 133,
    'catchRate': 45,
    'base': {
        'hitpoints': 50,
        'attack': 75,
        'specialAttack': 65,
        'defense': 75,
        'specialDefense': 65,
        'speed': 50,
    },
}, {
    'id': 303,
    'name': 'Mawile',
    'type': [PokemonType.Steel, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.fast,
    'exp': 133,
    'catchRate': 45,
    'base': {
        'hitpoints': 50,
        'attack': 85,
        'specialAttack': 55,
        'defense': 85,
        'specialDefense': 55,
        'speed': 50,
    },
    'heldItem': { type: ItemType.underground, id: 'Iron Ball' },
}, {
    'id': 304,
    'name': 'Aron',
    'type': [PokemonType.Steel, PokemonType.Rock],
    'eggCycles': 35,
    'levelType': LevelType.slow,
    'exp': 66,
    'catchRate': 180,
    'evolutions': [new LevelEvolution('Aron', 'Lairon', 32)],
    'base': {
        'hitpoints': 50,
        'attack': 70,
        'specialAttack': 40,
        'defense': 100,
        'specialDefense': 40,
        'speed': 30,
    },
    'heldItem': { type: ItemType.underground, id: 'Hard Stone' },
}, {
    'id': 305,
    'name': 'Lairon',
    'type': [PokemonType.Steel, PokemonType.Rock],
    'eggCycles': 35,
    'levelType': LevelType.slow,
    'exp': 151,
    'catchRate': 90,
    'evolutions': [new LevelEvolution('Lairon', 'Aggron', 42)],
    'base': {
        'hitpoints': 60,
        'attack': 90,
        'specialAttack': 50,
        'defense': 140,
        'specialDefense': 50,
        'speed': 40,
    },
    'heldItem': { type: ItemType.underground, id: 'Hard Stone' },
}, {
    'id': 306,
    'name': 'Aggron',
    'type': [PokemonType.Steel, PokemonType.Rock],
    'eggCycles': 35,
    'levelType': LevelType.slow,
    'exp': 239,
    'catchRate': 45,
    'base': {
        'hitpoints': 70,
        'attack': 110,
        'specialAttack': 60,
        'defense': 180,
        'specialDefense': 60,
        'speed': 50,
    },
    'heldItem': { type: ItemType.underground, id: 'Hard Stone' },
}, {
    'id': 307,
    'name': 'Meditite',
    'type': [PokemonType.Fighting, PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 56,
    'catchRate': 180,
    'evolutions': [new LevelEvolution('Meditite', 'Medicham', 37)],
    'base': {
        'hitpoints': 30,
        'attack': 40,
        'specialAttack': 40,
        'defense': 55,
        'specialDefense': 55,
        'speed': 60,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 308,
    'name': 'Medicham',
    'type': [PokemonType.Fighting, PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 144,
    'catchRate': 90,
    'base': {
        'hitpoints': 60,
        'attack': 60,
        'specialAttack': 60,
        'defense': 75,
        'specialDefense': 75,
        'speed': 80,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 309,
    'name': 'Electrike',
    'type': [PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 59,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Electrike', 'Manectric', 26)],
    'base': {
        'hitpoints': 40,
        'attack': 45,
        'specialAttack': 65,
        'defense': 40,
        'specialDefense': 40,
        'speed': 65,
    },
}, {
    'id': 310,
    'name': 'Manectric',
    'type': [PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 166,
    'catchRate': 45,
    'base': {
        'hitpoints': 70,
        'attack': 75,
        'specialAttack': 105,
        'defense': 60,
        'specialDefense': 60,
        'speed': 105,
    },
}, {
    'id': 311,
    'name': 'Plusle',
    'type': [PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 142,
    'catchRate': 200,
    'base': {
        'hitpoints': 60,
        'attack': 50,
        'specialAttack': 85,
        'defense': 40,
        'specialDefense': 75,
        'speed': 95,
    },
}, {
    'id': 312,
    'name': 'Minun',
    'type': [PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 142,
    'catchRate': 200,
    'base': {
        'hitpoints': 60,
        'attack': 40,
        'specialAttack': 75,
        'defense': 50,
        'specialDefense': 85,
        'speed': 95,
    },
}, {
    'id': 313,
    'name': 'Volbeat',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.erratic,
    'exp': 151,
    'catchRate': 150,
    'base': {
        'hitpoints': 65,
        'attack': 73,
        'specialAttack': 47,
        'defense': 75,
        'specialDefense': 85,
        'speed': 85,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 314,
    'name': 'Illumise',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.fluctuating,
    'exp': 151,
    'catchRate': 150,
    'base': {
        'hitpoints': 65,
        'attack': 47,
        'specialAttack': 73,
        'defense': 75,
        'specialDefense': 85,
        'speed': 85,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 315,
    'name': 'Roselia',
    'type': [PokemonType.Grass, PokemonType.Poison],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 140,
    'catchRate': 150,
    'evolutions': [new StoneEvolution('Roselia', 'Roserade', GameConstants.StoneType.Shiny_stone)],
    'base': {
        'hitpoints': 50,
        'attack': 60,
        'specialAttack': 100,
        'defense': 45,
        'specialDefense': 80,
        'speed': 65,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 316,
    'name': 'Gulpin',
    'type': [PokemonType.Poison],
    'eggCycles': 20,
    'levelType': LevelType.fluctuating,
    'exp': 60,
    'catchRate': 225,
    'evolutions': [new LevelEvolution('Gulpin', 'Swalot', 26)],
    'base': {
        'hitpoints': 70,
        'attack': 43,
        'specialAttack': 43,
        'defense': 53,
        'specialDefense': 53,
        'speed': 40,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 317,
    'name': 'Swalot',
    'type': [PokemonType.Poison],
    'eggCycles': 20,
    'levelType': LevelType.fluctuating,
    'exp': 163,
    'catchRate': 75,
    'base': {
        'hitpoints': 100,
        'attack': 73,
        'specialAttack': 73,
        'defense': 83,
        'specialDefense': 83,
        'speed': 55,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 318,
    'name': 'Carvanha',
    'type': [PokemonType.Water, PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 61,
    'catchRate': 225,
    'evolutions': [new LevelEvolution('Carvanha', 'Sharpedo', 30)],
    'base': {
        'hitpoints': 45,
        'attack': 90,
        'specialAttack': 65,
        'defense': 20,
        'specialDefense': 20,
        'speed': 65,
    },
    'heldItem': { type: ItemType.item, id: 'Deepsea_tooth' },
}, {
    'id': 319,
    'name': 'Sharpedo',
    'type': [PokemonType.Water, PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 161,
    'catchRate': 60,
    'base': {
        'hitpoints': 70,
        'attack': 120,
        'specialAttack': 95,
        'defense': 40,
        'specialDefense': 40,
        'speed': 95,
    },
    'heldItem': { type: ItemType.item, id: 'Deepsea_tooth' },
}, {
    'id': 320,
    'name': 'Wailmer',
    'type': [PokemonType.Water],
    'eggCycles': 40,
    'levelType': LevelType.fluctuating,
    'exp': 80,
    'catchRate': 125,
    'evolutions': [new LevelEvolution('Wailmer', 'Wailord', 40)],
    'base': {
        'hitpoints': 130,
        'attack': 70,
        'specialAttack': 70,
        'defense': 35,
        'specialDefense': 35,
        'speed': 60,
    },
}, {
    'id': 321,
    'name': 'Wailord',
    'type': [PokemonType.Water],
    'eggCycles': 40,
    'levelType': LevelType.fluctuating,
    'exp': 175,
    'catchRate': 60,
    'base': {
        'hitpoints': 170,
        'attack': 90,
        'specialAttack': 90,
        'defense': 45,
        'specialDefense': 45,
        'speed': 60,
    },
}, {
    'id': 322,
    'name': 'Numel',
    'type': [PokemonType.Fire, PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Numel', 'Camerupt', 33)],
    'base': {
        'hitpoints': 60,
        'attack': 60,
        'specialAttack': 65,
        'defense': 40,
        'specialDefense': 45,
        'speed': 35,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 323,
    'name': 'Camerupt',
    'type': [PokemonType.Fire, PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 161,
    'catchRate': 150,
    'base': {
        'hitpoints': 70,
        'attack': 100,
        'specialAttack': 105,
        'defense': 70,
        'specialDefense': 75,
        'speed': 40,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 324,
    'name': 'Torkoal',
    'type': [PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'catchRate': 90,
    'base': {
        'hitpoints': 70,
        'attack': 85,
        'specialAttack': 85,
        'defense': 140,
        'specialDefense': 70,
        'speed': 20,
    },
}, {
    'id': 325,
    'name': 'Spoink',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.fast,
    'exp': 66,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Spoink', 'Grumpig', 32)],
    'base': {
        'hitpoints': 60,
        'attack': 25,
        'specialAttack': 70,
        'defense': 35,
        'specialDefense': 80,
        'speed': 60,
    },
}, {
    'id': 326,
    'name': 'Grumpig',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.fast,
    'exp': 165,
    'catchRate': 60,
    'base': {
        'hitpoints': 80,
        'attack': 45,
        'specialAttack': 90,
        'defense': 65,
        'specialDefense': 110,
        'speed': 80,
    },
}, {
    'id': 327,
    'name': 'Spinda',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.fast,
    'exp': 126,
    'catchRate': 255,
    'base': {
        'hitpoints': 60,
        'attack': 60,
        'specialAttack': 60,
        'defense': 60,
        'specialDefense': 60,
        'speed': 60,
    },
}, {
    'id': 328,
    'name': 'Trapinch',
    'type': [PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 58,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Trapinch', 'Vibrava', 35)],
    'base': {
        'hitpoints': 45,
        'attack': 100,
        'specialAttack': 45,
        'defense': 45,
        'specialDefense': 45,
        'speed': 10,
    },
}, {
    'id': 329,
    'name': 'Vibrava',
    'type': [PokemonType.Ground, PokemonType.Dragon],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 119,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Vibrava', 'Flygon', 45)],
    'base': {
        'hitpoints': 50,
        'attack': 70,
        'specialAttack': 50,
        'defense': 50,
        'specialDefense': 50,
        'speed': 70,
    },
}, {
    'id': 330,
    'name': 'Flygon',
    'type': [PokemonType.Ground, PokemonType.Dragon],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 234,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 100,
        'specialAttack': 80,
        'defense': 80,
        'specialDefense': 80,
        'speed': 100,
    },
}, {
    'id': 331,
    'name': 'Cacnea',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 67,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Cacnea', 'Cacturne', 32)],
    'base': {
        'hitpoints': 50,
        'attack': 85,
        'specialAttack': 85,
        'defense': 40,
        'specialDefense': 40,
        'speed': 35,
    },
}, {
    'id': 332,
    'name': 'Cacturne',
    'type': [PokemonType.Grass, PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 166,
    'catchRate': 60,
    'base': {
        'hitpoints': 70,
        'attack': 115,
        'specialAttack': 115,
        'defense': 60,
        'specialDefense': 60,
        'speed': 55,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 333,
    'name': 'Swablu',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 62,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Swablu', 'Altaria', 35)],
    'base': {
        'hitpoints': 45,
        'attack': 40,
        'specialAttack': 40,
        'defense': 60,
        'specialDefense': 75,
        'speed': 50,
    },
}, {
    'id': 334,
    'name': 'Altaria',
    'type': [PokemonType.Dragon, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 172,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 70,
        'specialAttack': 70,
        'defense': 90,
        'specialDefense': 105,
        'speed': 80,
    },
}, {
    'id': 335,
    'name': 'Zangoose',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 160,
    'catchRate': 90,
    'base': {
        'hitpoints': 73,
        'attack': 115,
        'specialAttack': 60,
        'defense': 60,
        'specialDefense': 60,
        'speed': 90,
    },
}, {
    'id': 336,
    'name': 'Seviper',
    'type': [PokemonType.Poison],
    'eggCycles': 20,
    'levelType': LevelType.fluctuating,
    'exp': 160,
    'catchRate': 90,
    'base': {
        'hitpoints': 73,
        'attack': 100,
        'specialAttack': 100,
        'defense': 60,
        'specialDefense': 60,
        'speed': 65,
    },
}, {
    'id': 337,
    'name': 'Lunatone',
    'type': [PokemonType.Rock, PokemonType.Psychic],
    'eggCycles': 25,
    'levelType': LevelType.fast,
    'exp': 161,
    'catchRate': 45,
    'base': {
        'hitpoints': 90,
        'attack': 55,
        'specialAttack': 95,
        'defense': 65,
        'specialDefense': 85,
        'speed': 70,
    },
    'heldItem': { type: ItemType.item, id: 'Moon_stone' },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 338,
    'name': 'Solrock',
    'type': [PokemonType.Rock, PokemonType.Psychic],
    'eggCycles': 25,
    'levelType': LevelType.fast,
    'exp': 161,
    'catchRate': 45,
    'base': {
        'hitpoints': 90,
        'attack': 95,
        'specialAttack': 55,
        'defense': 85,
        'specialDefense': 65,
        'speed': 70,
    },
    'heldItem': { type: ItemType.item, id: 'Sun_stone' },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 339,
    'name': 'Barboach',
    'type': [PokemonType.Water, PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 58,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Barboach', 'Whiscash', 30)],
    'base': {
        'hitpoints': 50,
        'attack': 48,
        'specialAttack': 46,
        'defense': 43,
        'specialDefense': 41,
        'speed': 60,
    },
}, {
    'id': 340,
    'name': 'Whiscash',
    'type': [PokemonType.Water, PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 164,
    'catchRate': 75,
    'base': {
        'hitpoints': 110,
        'attack': 78,
        'specialAttack': 76,
        'defense': 73,
        'specialDefense': 71,
        'speed': 60,
    },
}, {
    'id': 341,
    'name': 'Corphish',
    'type': [PokemonType.Water],
    'eggCycles': 15,
    'levelType': LevelType.fluctuating,
    'exp': 62,
    'catchRate': 205,
    'evolutions': [new LevelEvolution('Corphish', 'Crawdaunt', 30)],
    'base': {
        'hitpoints': 43,
        'attack': 80,
        'specialAttack': 50,
        'defense': 65,
        'specialDefense': 35,
        'speed': 35,
    },
}, {
    'id': 342,
    'name': 'Crawdaunt',
    'type': [PokemonType.Water, PokemonType.Dark],
    'eggCycles': 15,
    'levelType': LevelType.fluctuating,
    'exp': 164,
    'catchRate': 155,
    'base': {
        'hitpoints': 63,
        'attack': 120,
        'specialAttack': 90,
        'defense': 85,
        'specialDefense': 55,
        'speed': 55,
    },
}, {
    'id': 343,
    'name': 'Baltoy',
    'type': [PokemonType.Ground, PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 60,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Baltoy', 'Claydol', 36)],
    'base': {
        'hitpoints': 40,
        'attack': 40,
        'specialAttack': 40,
        'defense': 55,
        'specialDefense': 70,
        'speed': 55,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 344,
    'name': 'Claydol',
    'type': [PokemonType.Ground, PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'catchRate': 90,
    'base': {
        'hitpoints': 60,
        'attack': 70,
        'specialAttack': 70,
        'defense': 105,
        'specialDefense': 120,
        'speed': 75,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 345,
    'name': 'Lileep',
    'type': [PokemonType.Rock, PokemonType.Grass],
    'eggCycles': 30,
    'levelType': LevelType.erratic,
    'exp': 71,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Lileep', 'Cradily', 40)],
    'base': {
        'hitpoints': 66,
        'attack': 41,
        'specialAttack': 61,
        'defense': 77,
        'specialDefense': 87,
        'speed': 23,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 346,
    'name': 'Cradily',
    'type': [PokemonType.Rock, PokemonType.Grass],
    'eggCycles': 30,
    'levelType': LevelType.erratic,
    'exp': 173,
    'catchRate': 45,
    'base': {
        'hitpoints': 86,
        'attack': 81,
        'specialAttack': 81,
        'defense': 97,
        'specialDefense': 107,
        'speed': 43,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 347,
    'name': 'Anorith',
    'type': [PokemonType.Rock, PokemonType.Bug],
    'eggCycles': 30,
    'levelType': LevelType.erratic,
    'exp': 71,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Anorith', 'Armaldo', 40)],
    'base': {
        'hitpoints': 45,
        'attack': 95,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 50,
        'speed': 75,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 348,
    'name': 'Armaldo',
    'type': [PokemonType.Rock, PokemonType.Bug],
    'eggCycles': 30,
    'levelType': LevelType.erratic,
    'exp': 173,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 125,
        'specialAttack': 70,
        'defense': 100,
        'specialDefense': 80,
        'speed': 45,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 349,
    'name': 'Feebas',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 40,
    'catchRate': 255,
    'evolutions': [new StoneEvolution('Feebas', 'Milotic', GameConstants.StoneType.Prism_scale)],
    'base': {
        'hitpoints': 20,
        'attack': 15,
        'specialAttack': 10,
        'defense': 20,
        'specialDefense': 55,
        'speed': 80,
    },
}, {
    'id': 350,
    'name': 'Milotic',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 189,
    'catchRate': 60,
    'base': {
        'hitpoints': 95,
        'attack': 60,
        'specialAttack': 100,
        'defense': 79,
        'specialDefense': 125,
        'speed': 81,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 351,
    'name': 'Castform',
    'type': [PokemonType.Normal],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 147,
    'catchRate': 45,
    'base': {
        'hitpoints': 70,
        'attack': 70,
        'specialAttack': 70,
        'defense': 70,
        'specialDefense': 70,
        'speed': 70,
    },
}, {
    'id': 351.1,
    'name': 'Castform (Sunny)',
    'type': [PokemonType.Fire],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 147,
    'catchRate': 45,
    'base': {
        'hitpoints': 70,
        'attack': 70,
        'specialAttack': 70,
        'defense': 70,
        'specialDefense': 70,
        'speed': 70,
    },
}, {
    'id': 351.2,
    'name': 'Castform (Rainy)',
    'type': [PokemonType.Water],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 147,
    'catchRate': 45,
    'base': {
        'hitpoints': 70,
        'attack': 70,
        'specialAttack': 70,
        'defense': 70,
        'specialDefense': 70,
        'speed': 70,
    },
}, {
    'id': 351.3,
    'name': 'Castform (Snowy)',
    'type': [PokemonType.Ice],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 147,
    'catchRate': 45,
    'base': {
        'hitpoints': 70,
        'attack': 70,
        'specialAttack': 70,
        'defense': 70,
        'specialDefense': 70,
        'speed': 70,
    },
}, {
    'id': 352,
    'name': 'Kecleon',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 154,
    'catchRate': 200,
    'base': {
        'hitpoints': 60,
        'attack': 90,
        'specialAttack': 60,
        'defense': 70,
        'specialDefense': 120,
        'speed': 40,
    },
}, {
    'id': 353,
    'name': 'Shuppet',
    'type': [PokemonType.Ghost],
    'eggCycles': 25,
    'levelType': LevelType.fast,
    'exp': 59,
    'catchRate': 225,
    'evolutions': [new LevelEvolution('Shuppet', 'Banette', 37)],
    'base': {
        'hitpoints': 44,
        'attack': 75,
        'specialAttack': 63,
        'defense': 35,
        'specialDefense': 33,
        'speed': 45,
    },
}, {
    'id': 354,
    'name': 'Banette',
    'type': [PokemonType.Ghost],
    'eggCycles': 25,
    'levelType': LevelType.fast,
    'exp': 159,
    'catchRate': 45,
    'base': {
        'hitpoints': 64,
        'attack': 115,
        'specialAttack': 83,
        'defense': 65,
        'specialDefense': 63,
        'speed': 65,
    },
}, {
    'id': 355,
    'name': 'Duskull',
    'type': [PokemonType.Ghost],
    'eggCycles': 25,
    'levelType': LevelType.fast,
    'exp': 59,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Duskull', 'Dusclops', 37)],
    'base': {
        'hitpoints': 20,
        'attack': 40,
        'specialAttack': 30,
        'defense': 90,
        'specialDefense': 90,
        'speed': 25,
    },
}, {
    'id': 356,
    'name': 'Dusclops',
    'type': [PokemonType.Ghost],
    'eggCycles': 25,
    'levelType': LevelType.fast,
    'exp': 159,
    'catchRate': 90,
    'evolutions': [new StoneEvolution('Dusclops', 'Dusknoir', GameConstants.StoneType.Reaper_cloth)],
    'base': {
        'hitpoints': 40,
        'attack': 70,
        'specialAttack': 60,
        'defense': 130,
        'specialDefense': 130,
        'speed': 25,
    },
}, {
    'id': 357,
    'name': 'Tropius',
    'type': [PokemonType.Grass, PokemonType.Flying],
    'eggCycles': 25,
    'levelType': LevelType.slow,
    'exp': 161,
    'catchRate': 200,
    'base': {
        'hitpoints': 99,
        'attack': 68,
        'specialAttack': 72,
        'defense': 83,
        'specialDefense': 87,
        'speed': 51,
    },
}, {
    'id': 358,
    'name': 'Chimecho',
    'type': [PokemonType.Psychic],
    'eggCycles': 25,
    'levelType': LevelType.fast,
    'exp': 159,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 50,
        'specialAttack': 95,
        'defense': 80,
        'specialDefense': 90,
        'speed': 65,
    },
}, {
    'id': 359,
    'name': 'Absol',
    'type': [PokemonType.Dark],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 163,
    'catchRate': 30,
    'base': {
        'hitpoints': 65,
        'attack': 130,
        'specialAttack': 75,
        'defense': 60,
        'specialDefense': 60,
        'speed': 75,
    },
}, {
    'id': 360,
    'name': 'Wynaut',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 52,
    'catchRate': 125,
    'evolutions': [new LevelEvolution('Wynaut', 'Wobbuffet', 15)],
    'baby': true,
    'base': {
        'hitpoints': 95,
        'attack': 23,
        'specialAttack': 23,
        'defense': 48,
        'specialDefense': 48,
        'speed': 23,
    },
}, {
    'id': 361,
    'name': 'Snorunt',
    'type': [PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 60,
    'catchRate': 190,
    'evolutions': [
        new LevelEvolution('Snorunt', 'Glalie', 42),
        new StoneEvolution('Snorunt', 'Froslass', GameConstants.StoneType.Dawn_stone),
    ],
    'base': {
        'hitpoints': 50,
        'attack': 50,
        'specialAttack': 50,
        'defense': 50,
        'specialDefense': 50,
        'speed': 50,
    },
}, {
    'id': 362,
    'name': 'Glalie',
    'type': [PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 75,
    'base': {
        'hitpoints': 80,
        'attack': 80,
        'specialAttack': 80,
        'defense': 80,
        'specialDefense': 80,
        'speed': 80,
    },
}, {
    'id': 363,
    'name': 'Spheal',
    'type': [PokemonType.Ice, PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 58,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Spheal', 'Sealeo', 32)],
    'base': {
        'hitpoints': 70,
        'attack': 40,
        'specialAttack': 55,
        'defense': 50,
        'specialDefense': 50,
        'speed': 25,
    },
}, {
    'id': 364,
    'name': 'Sealeo',
    'type': [PokemonType.Ice, PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 144,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Sealeo', 'Walrein', 44)],
    'base': {
        'hitpoints': 90,
        'attack': 60,
        'specialAttack': 75,
        'defense': 70,
        'specialDefense': 70,
        'speed': 45,
    },
}, {
    'id': 365,
    'name': 'Walrein',
    'type': [PokemonType.Ice, PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'catchRate': 45,
    'base': {
        'hitpoints': 110,
        'attack': 80,
        'specialAttack': 95,
        'defense': 90,
        'specialDefense': 90,
        'speed': 65,
    },
}, {
    'id': 366,
    'name': 'Clamperl',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 69,
    'catchRate': 255,
    'evolutions': [
        new StoneEvolution('Clamperl', 'Huntail', GameConstants.StoneType.Deepsea_tooth),
        new StoneEvolution('Clamperl', 'Gorebyss', GameConstants.StoneType.Deepsea_scale),
    ],
    'base': {
        'hitpoints': 35,
        'attack': 64,
        'specialAttack': 74,
        'defense': 85,
        'specialDefense': 55,
        'speed': 32,
    },
}, {
    'id': 367,
    'name': 'Huntail',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 170,
    'catchRate': 60,
    'base': {
        'hitpoints': 55,
        'attack': 104,
        'specialAttack': 94,
        'defense': 105,
        'specialDefense': 75,
        'speed': 52,
    },
    'heldItem': { type: ItemType.item, id: 'Deepsea_tooth' },
}, {
    'id': 368,
    'name': 'Gorebyss',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 170,
    'catchRate': 60,
    'base': {
        'hitpoints': 55,
        'attack': 84,
        'specialAttack': 114,
        'defense': 105,
        'specialDefense': 75,
        'speed': 52,
    },
    'heldItem': { type: ItemType.item, id: 'Deepsea_scale' },
}, {
    'id': 369,
    'name': 'Relicanth',
    'type': [PokemonType.Water, PokemonType.Rock],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 170,
    'catchRate': 25,
    'base': {
        'hitpoints': 100,
        'attack': 90,
        'specialAttack': 45,
        'defense': 130,
        'specialDefense': 65,
        'speed': 55,
    },
    'heldItem': { type: ItemType.item, id: 'Deepsea_scale' },
    'gender': {
        'femaleRatio': 0.125,
        'visualDifference': true,
    },
}, {
    'id': 370,
    'name': 'Luvdisc',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.fast,
    'exp': 116,
    'catchRate': 225,
    'base': {
        'hitpoints': 43,
        'attack': 30,
        'specialAttack': 40,
        'defense': 55,
        'specialDefense': 65,
        'speed': 97,
    },
    'heldItem': { type: ItemType.underground, id: 'Heart Scale' },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 371,
    'name': 'Bagon',
    'type': [PokemonType.Dragon],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 60,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Bagon', 'Shelgon', 30)],
    'base': {
        'hitpoints': 45,
        'attack': 75,
        'specialAttack': 40,
        'defense': 60,
        'specialDefense': 30,
        'speed': 50,
    },
    'heldItem': { type: ItemType.item, id: 'Dragon_scale' },
}, {
    'id': 372,
    'name': 'Shelgon',
    'type': [PokemonType.Dragon],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 147,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Shelgon', 'Salamence', 50)],
    'base': {
        'hitpoints': 65,
        'attack': 95,
        'specialAttack': 60,
        'defense': 100,
        'specialDefense': 50,
        'speed': 50,
    },
    'heldItem': { type: ItemType.item, id: 'Dragon_scale' },
}, {
    'id': 373,
    'name': 'Salamence',
    'type': [PokemonType.Dragon, PokemonType.Flying],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 45,
    'base': {
        'hitpoints': 95,
        'attack': 135,
        'specialAttack': 110,
        'defense': 80,
        'specialDefense': 80,
        'speed': 100,
    },
    'heldItem': { type: ItemType.item, id: 'Dragon_scale' },
}, {
    'id': 374,
    'name': 'Beldum',
    'type': [PokemonType.Steel, PokemonType.Psychic],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 60,
    'catchRate': 3,
    'evolutions': [new LevelEvolution('Beldum', 'Metang', 20)],
    'base': {
        'hitpoints': 40,
        'attack': 55,
        'specialAttack': 35,
        'defense': 80,
        'specialDefense': 60,
        'speed': 30,
    },
    'heldItem': { type: ItemType.item, id: 'Metal_coat' },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 375,
    'name': 'Metang',
    'type': [PokemonType.Steel, PokemonType.Psychic],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 147,
    'catchRate': 3,
    'evolutions': [new LevelEvolution('Metang', 'Metagross', 45)],
    'base': {
        'hitpoints': 60,
        'attack': 75,
        'specialAttack': 55,
        'defense': 100,
        'specialDefense': 80,
        'speed': 50,
    },
    'heldItem': { type: ItemType.item, id: 'Metal_coat' },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 376,
    'name': 'Metagross',
    'type': [PokemonType.Steel, PokemonType.Psychic],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 80,
        'attack': 135,
        'specialAttack': 95,
        'defense': 130,
        'specialDefense': 90,
        'speed': 70,
    },
    'heldItem': { type: ItemType.item, id: 'Metal_coat' },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 377,
    'name': 'Regirock',
    'type': [PokemonType.Rock],
    'eggCycles': 80,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 80,
        'attack': 100,
        'specialAttack': 50,
        'defense': 200,
        'specialDefense': 100,
        'speed': 50,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 378,
    'name': 'Regice',
    'type': [PokemonType.Ice],
    'eggCycles': 80,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 80,
        'attack': 50,
        'specialAttack': 100,
        'defense': 100,
        'specialDefense': 200,
        'speed': 50,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 379,
    'name': 'Registeel',
    'type': [PokemonType.Steel],
    'eggCycles': 80,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 80,
        'attack': 75,
        'specialAttack': 75,
        'defense': 150,
        'specialDefense': 150,
        'speed': 50,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 380,
    'name': 'Latias',
    'type': [PokemonType.Dragon, PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 80,
        'attack': 80,
        'specialAttack': 110,
        'defense': 90,
        'specialDefense': 130,
        'speed': 110,
    },
    'gender': {
        'femaleRatio': 1,
    },
    'heldItem': { type: ItemType.item, id: 'Soul_Dew' },
}, {
    'id': 381,
    'name': 'Latios',
    'type': [PokemonType.Dragon, PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 80,
        'attack': 90,
        'specialAttack': 130,
        'defense': 80,
        'specialDefense': 110,
        'speed': 110,
    },
    'gender': {
        'femaleRatio': 0,
    },
    'heldItem': { type: ItemType.item, id: 'Soul_Dew' },
}, {
    'id': 382,
    'name': 'Kyogre',
    'type': [PokemonType.Water],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 302,
    'catchRate': 3,
    'base': {
        'hitpoints': 100,
        'attack': 100,
        'specialAttack': 150,
        'defense': 90,
        'specialDefense': 140,
        'speed': 90,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 383,
    'name': 'Groudon',
    'type': [PokemonType.Ground],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 302,
    'catchRate': 3,
    'base': {
        'hitpoints': 100,
        'attack': 150,
        'specialAttack': 100,
        'defense': 140,
        'specialDefense': 90,
        'speed': 90,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 384,
    'name': 'Rayquaza',
    'type': [PokemonType.Dragon, PokemonType.Flying],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 306,
    'catchRate': 45,
    'base': {
        'hitpoints': 105,
        'attack': 150,
        'specialAttack': 150,
        'defense': 90,
        'specialDefense': 90,
        'speed': 95,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 385,
    'name': 'Jirachi',
    'type': [PokemonType.Steel, PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 100,
        'attack': 100,
        'specialAttack': 100,
        'defense': 100,
        'specialDefense': 100,
        'speed': 100,
    },
    'heldItem': { type: ItemType.underground, id: 'Star Piece' },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 386,
    'name': 'Deoxys',
    'type': [PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 50,
        'attack': 150,
        'specialAttack': 150,
        'defense': 50,
        'specialDefense': 50,
        'speed': 150,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 386.1,
    'name': 'Deoxys (Attack)',
    'type': [PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 50,
        'attack': 180,
        'specialAttack': 180,
        'defense': 20,
        'specialDefense': 20,
        'speed': 150,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 386.2,
    'name': 'Deoxys (Defense)',
    'type': [PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 50,
        'attack': 70,
        'specialAttack': 70,
        'defense': 160,
        'specialDefense': 160,
        'speed': 90,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 386.3,
    'name': 'Deoxys (Speed)',
    'type': [PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 50,
        'attack': 95,
        'specialAttack': 95,
        'defense': 90,
        'specialDefense': 90,
        'speed': 180,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 387,
    'name': 'Turtwig',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Turtwig', 'Grotle', 18)],
    'base': {
        'hitpoints': 55,
        'attack': 68,
        'specialAttack': 45,
        'defense': 64,
        'specialDefense': 55,
        'speed': 31,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 388,
    'name': 'Grotle',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Grotle', 'Torterra', 32)],
    'base': {
        'hitpoints': 75,
        'attack': 89,
        'specialAttack': 55,
        'defense': 85,
        'specialDefense': 65,
        'speed': 36,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 389,
    'name': 'Torterra',
    'type': [PokemonType.Grass, PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 236,
    'catchRate': 45,
    'base': {
        'hitpoints': 95,
        'attack': 109,
        'specialAttack': 75,
        'defense': 105,
        'specialDefense': 85,
        'speed': 56,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 390,
    'name': 'Chimchar',
    'type': [PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Chimchar', 'Monferno', 14)],
    'base': {
        'hitpoints': 44,
        'attack': 58,
        'specialAttack': 58,
        'defense': 44,
        'specialDefense': 44,
        'speed': 61,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 391,
    'name': 'Monferno',
    'type': [PokemonType.Fire, PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Monferno', 'Infernape', 36)],
    'base': {
        'hitpoints': 64,
        'attack': 78,
        'specialAttack': 78,
        'defense': 52,
        'specialDefense': 52,
        'speed': 81,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 392,
    'name': 'Infernape',
    'type': [PokemonType.Fire, PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 240,
    'catchRate': 45,
    'base': {
        'hitpoints': 76,
        'attack': 104,
        'specialAttack': 104,
        'defense': 71,
        'specialDefense': 71,
        'speed': 108,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 393,
    'name': 'Piplup',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 63,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Piplup', 'Prinplup', 16)],
    'base': {
        'hitpoints': 53,
        'attack': 51,
        'specialAttack': 61,
        'defense': 53,
        'specialDefense': 56,
        'speed': 40,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 394,
    'name': 'Prinplup',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Prinplup', 'Empoleon', 36)],
    'base': {
        'hitpoints': 64,
        'attack': 66,
        'specialAttack': 81,
        'defense': 68,
        'specialDefense': 76,
        'speed': 50,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 395,
    'name': 'Empoleon',
    'type': [PokemonType.Water, PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'catchRate': 45,
    'base': {
        'hitpoints': 84,
        'attack': 86,
        'specialAttack': 111,
        'defense': 88,
        'specialDefense': 101,
        'speed': 60,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 396,
    'name': 'Starly',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 49,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Starly', 'Staravia', 14)],
    'base': {
        'hitpoints': 40,
        'attack': 55,
        'specialAttack': 30,
        'defense': 30,
        'specialDefense': 30,
        'speed': 60,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 397,
    'name': 'Staravia',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 119,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Staravia', 'Staraptor', 34)],
    'base': {
        'hitpoints': 55,
        'attack': 75,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 40,
        'speed': 80,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 398,
    'name': 'Staraptor',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 218,
    'catchRate': 45,
    'base': {
        'hitpoints': 85,
        'attack': 120,
        'specialAttack': 50,
        'defense': 70,
        'specialDefense': 60,
        'speed': 100,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 399,
    'name': 'Bidoof',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 50,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Bidoof', 'Bibarel', 15)],
    'base': {
        'hitpoints': 59,
        'attack': 45,
        'specialAttack': 35,
        'defense': 40,
        'specialDefense': 40,
        'speed': 31,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 400,
    'name': 'Bibarel',
    'type': [PokemonType.Normal, PokemonType.Water],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 144,
    'catchRate': 127,
    'base': {
        'hitpoints': 79,
        'attack': 85,
        'specialAttack': 55,
        'defense': 60,
        'specialDefense': 60,
        'speed': 71,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 401,
    'name': 'Kricketot',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 39,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Kricketot', 'Kricketune', 10)],
    'base': {
        'hitpoints': 37,
        'attack': 25,
        'specialAttack': 25,
        'defense': 41,
        'specialDefense': 41,
        'speed': 25,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 402,
    'name': 'Kricketune',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 134,
    'catchRate': 45,
    'base': {
        'hitpoints': 77,
        'attack': 85,
        'specialAttack': 55,
        'defense': 51,
        'specialDefense': 51,
        'speed': 65,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 403,
    'name': 'Shinx',
    'type': [PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 53,
    'catchRate': 235,
    'evolutions': [new LevelEvolution('Shinx', 'Luxio', 15)],
    'base': {
        'hitpoints': 45,
        'attack': 65,
        'specialAttack': 40,
        'defense': 34,
        'specialDefense': 34,
        'speed': 45,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 404,
    'name': 'Luxio',
    'type': [PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 127,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Luxio', 'Luxray', 30)],
    'base': {
        'hitpoints': 60,
        'attack': 85,
        'specialAttack': 60,
        'defense': 49,
        'specialDefense': 49,
        'speed': 60,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 405,
    'name': 'Luxray',
    'type': [PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 235,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 120,
        'specialAttack': 95,
        'defense': 79,
        'specialDefense': 79,
        'speed': 70,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 406,
    'name': 'Budew',
    'type': [PokemonType.Grass, PokemonType.Poison],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 56,
    'catchRate': 255,
    'evolutions': [new DayTimedStoneEvolution('Budew', 'Roselia', GameConstants.StoneType.Soothe_bell)],
    'baby': true,
    'base': {
        'hitpoints': 40,
        'attack': 30,
        'specialAttack': 50,
        'defense': 35,
        'specialDefense': 70,
        'speed': 55,
    },
}, {
    'id': 407,
    'name': 'Roserade',
    'type': [PokemonType.Grass, PokemonType.Poison],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 232,
    'catchRate': 75,
    'base': {
        'hitpoints': 60,
        'attack': 70,
        'specialAttack': 125,
        'defense': 65,
        'specialDefense': 105,
        'speed': 90,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 408,
    'name': 'Cranidos',
    'type': [PokemonType.Rock],
    'eggCycles': 30,
    'levelType': LevelType.erratic,
    'exp': 70,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Cranidos', 'Rampardos', 30)],
    'base': {
        'hitpoints': 67,
        'attack': 125,
        'specialAttack': 30,
        'defense': 40,
        'specialDefense': 30,
        'speed': 58,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 409,
    'name': 'Rampardos',
    'type': [PokemonType.Rock],
    'eggCycles': 30,
    'levelType': LevelType.erratic,
    'exp': 173,
    'catchRate': 45,
    'base': {
        'hitpoints': 97,
        'attack': 165,
        'specialAttack': 65,
        'defense': 60,
        'specialDefense': 50,
        'speed': 58,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 410,
    'name': 'Shieldon',
    'type': [PokemonType.Rock, PokemonType.Steel],
    'eggCycles': 30,
    'levelType': LevelType.erratic,
    'exp': 70,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Shieldon', 'Bastiodon', 30)],
    'base': {
        'hitpoints': 30,
        'attack': 42,
        'specialAttack': 42,
        'defense': 118,
        'specialDefense': 88,
        'speed': 30,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 411,
    'name': 'Bastiodon',
    'type': [PokemonType.Rock, PokemonType.Steel],
    'eggCycles': 30,
    'levelType': LevelType.erratic,
    'exp': 173,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 52,
        'specialAttack': 47,
        'defense': 168,
        'specialDefense': 138,
        'speed': 30,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 412,
    'name': 'Burmy (Plant)',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 45,
    'catchRate': 120,
    'evolutions': [
        new LevelEvolution('Burmy (Plant)', 'Wormadam (Plant)', 20),
        new LevelEvolution('Burmy (Plant)', 'Mothim', 20),
        new EnvironmentRestrictedLevelEvolution('Cave', 'Burmy (Plant)', 'Burmy (Sand)', 1),
        new EnvironmentRestrictedLevelEvolution('GemCave', 'Burmy (Plant)', 'Burmy (Sand)', 1),
        new EnvironmentRestrictedLevelEvolution('PowerPlant', 'Burmy (Plant)', 'Burmy (Trash)', 1),
        new EnvironmentRestrictedLevelEvolution('Mansion', 'Burmy (Plant)', 'Burmy (Trash)', 1),
        new EnvironmentRestrictedLevelEvolution('Graveyard', 'Burmy (Plant)', 'Burmy (Trash)', 1),
    ],
    'base': {
        'hitpoints': 40,
        'attack': 29,
        'specialAttack': 29,
        'defense': 45,
        'specialDefense': 45,
        'speed': 36,
    },
}, {
    'id': 412.1,
    'name': 'Burmy (Sand)',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 45,
    'catchRate': 120,
    'evolutions': [
        new LevelEvolution('Burmy (Sand)', 'Wormadam (Sand)', 20),
        new LevelEvolution('Burmy (Sand)', 'Mothim', 20),
    ],
    'base': {
        'hitpoints': 40,
        'attack': 29,
        'specialAttack': 29,
        'defense': 45,
        'specialDefense': 45,
        'speed': 36,
    },
}, {
    'id': 412.2,
    'name': 'Burmy (Trash)',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 45,
    'catchRate': 120,
    'evolutions': [
        new LevelEvolution('Burmy (Trash)', 'Wormadam (Trash)', 20),
        new LevelEvolution('Burmy (Trash)', 'Mothim', 20),
    ],
    'base': {
        'hitpoints': 40,
        'attack': 29,
        'specialAttack': 29,
        'defense': 45,
        'specialDefense': 45,
        'speed': 36,
    },
}, {
    'id': 413,
    'name': 'Wormadam (Plant)',
    'type': [PokemonType.Bug, PokemonType.Grass],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 148,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 59,
        'specialAttack': 79,
        'defense': 85,
        'specialDefense': 105,
        'speed': 36,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 413.1,
    'name': 'Wormadam (Sand)',
    'type': [PokemonType.Bug, PokemonType.Ground],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 148,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 79,
        'specialAttack': 59,
        'defense': 105,
        'specialDefense': 85,
        'speed': 36,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 413.2,
    'name': 'Wormadam (Trash)',
    'type': [PokemonType.Bug, PokemonType.Steel],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 148,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 69,
        'specialAttack': 69,
        'defense': 95,
        'specialDefense': 95,
        'speed': 36,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 414,
    'name': 'Mothim',
    'type': [PokemonType.Bug, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 148,
    'catchRate': 45,
    'base': {
        'hitpoints': 70,
        'attack': 94,
        'specialAttack': 94,
        'defense': 50,
        'specialDefense': 50,
        'speed': 66,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 415,
    'name': 'Combee',
    'type': [PokemonType.Bug, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 49,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Combee', 'Vespiquen', 21)],
    'base': {
        'hitpoints': 30,
        'attack': 30,
        'specialAttack': 30,
        'defense': 42,
        'specialDefense': 42,
        'speed': 70,
    },
    'gender': {
        'femaleRatio': 0.125,
        'visualDifference': true,
    },
}, {
    'id': 416,
    'name': 'Vespiquen',
    'type': [PokemonType.Bug, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 166,
    'catchRate': 45,
    'base': {
        'hitpoints': 70,
        'attack': 80,
        'specialAttack': 80,
        'defense': 102,
        'specialDefense': 102,
        'speed': 40,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 417,
    'name': 'Pachirisu',
    'type': [PokemonType.Electric],
    'eggCycles': 10,
    'levelType': LevelType.mediumfast,
    'exp': 142,
    'catchRate': 200,
    'base': {
        'hitpoints': 60,
        'attack': 45,
        'specialAttack': 45,
        'defense': 70,
        'specialDefense': 90,
        'speed': 95,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 418,
    'name': 'Buizel',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 66,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Buizel', 'Floatzel', 26)],
    'base': {
        'hitpoints': 55,
        'attack': 65,
        'specialAttack': 60,
        'defense': 35,
        'specialDefense': 30,
        'speed': 85,
    },
}, {
    'id': 419,
    'name': 'Floatzel',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 75,
    'base': {
        'hitpoints': 85,
        'attack': 105,
        'specialAttack': 85,
        'defense': 55,
        'specialDefense': 50,
        'speed': 115,
    },
}, {
    'id': 420,
    'name': 'Cherubi',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 55,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Cherubi', 'Cherrim (Overcast)', 25)],
    'base': {
        'hitpoints': 45,
        'attack': 35,
        'specialAttack': 62,
        'defense': 45,
        'specialDefense': 53,
        'speed': 35,
    },
}, {
    'id': 421,
    'name': 'Cherrim (Overcast)',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 158,
    'catchRate': 75,
    'evolutions': [new WeatherRestrictedLevelEvolution('Cherrim (Overcast)', 'Cherrim (Sunshine)', 1, [WeatherType.Sunny])],
    'base': {
        'hitpoints': 70,
        'attack': 60,
        'specialAttack': 87,
        'defense': 70,
        'specialDefense': 78,
        'speed': 85,
    },
}, {
    'id': 421.1,
    'name': 'Cherrim (Sunshine)',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 158,
    'catchRate': 75,
    'base': {
        'hitpoints': 70,
        'attack': 60,
        'specialAttack': 87,
        'defense': 70,
        'specialDefense': 78,
        'speed': 85,
    },
}, {
    'id': 422,
    'name': 'Shellos (West)',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Shellos (West)', 'Gastrodon (West)', 30)],
    'base': {
        'hitpoints': 76,
        'attack': 48,
        'specialAttack': 57,
        'defense': 48,
        'specialDefense': 62,
        'speed': 34,
    },
}, {
    'id': 422.1,
    'name': 'Shellos (East)',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Shellos (East)', 'Gastrodon (East)', 30)],
    'base': {
        'hitpoints': 76,
        'attack': 48,
        'specialAttack': 57,
        'defense': 48,
        'specialDefense': 62,
        'speed': 34,
    },
}, {
    'id': 423,
    'name': 'Gastrodon (West)',
    'type': [PokemonType.Water, PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 75,
    'base': {
        'hitpoints': 111,
        'attack': 83,
        'specialAttack': 92,
        'defense': 68,
        'specialDefense': 82,
        'speed': 39,
    },
}, {
    'id': 423.1,
    'name': 'Gastrodon (East)',
    'type': [PokemonType.Water, PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 75,
    'base': {
        'hitpoints': 111,
        'attack': 83,
        'specialAttack': 92,
        'defense': 68,
        'specialDefense': 82,
        'speed': 39,
    },
}, {
    'id': 424,
    'name': 'Ambipom',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.fast,
    'exp': 169,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 100,
        'specialAttack': 60,
        'defense': 66,
        'specialDefense': 66,
        'speed': 115,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 425,
    'name': 'Drifloon',
    'type': [PokemonType.Ghost, PokemonType.Flying],
    'eggCycles': 30,
    'levelType': LevelType.fluctuating,
    'exp': 70,
    'catchRate': 125,
    'evolutions': [new LevelEvolution('Drifloon', 'Drifblim', 28)],
    'base': {
        'hitpoints': 90,
        'attack': 50,
        'specialAttack': 60,
        'defense': 34,
        'specialDefense': 44,
        'speed': 70,
    },
}, {
    'id': 426,
    'name': 'Drifblim',
    'type': [PokemonType.Ghost, PokemonType.Flying],
    'eggCycles': 30,
    'levelType': LevelType.fluctuating,
    'exp': 174,
    'catchRate': 60,
    'base': {
        'hitpoints': 150,
        'attack': 80,
        'specialAttack': 90,
        'defense': 44,
        'specialDefense': 54,
        'speed': 80,
    },
}, {
    'id': 427,
    'name': 'Buneary',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 70,
    'catchRate': 190,
    'evolutions': [new StoneEvolution('Buneary', 'Lopunny', GameConstants.StoneType.Soothe_bell)],
    'base': {
        'hitpoints': 55,
        'attack': 66,
        'specialAttack': 44,
        'defense': 44,
        'specialDefense': 56,
        'speed': 85,
    },
}, {
    'id': 428,
    'name': 'Lopunny',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 60,
    'base': {
        'hitpoints': 65,
        'attack': 76,
        'specialAttack': 54,
        'defense': 84,
        'specialDefense': 96,
        'speed': 105,
    },
}, {
    'id': 429,
    'name': 'Mismagius',
    'type': [PokemonType.Ghost],
    'eggCycles': 25,
    'levelType': LevelType.fast,
    'exp': 173,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 60,
        'specialAttack': 105,
        'defense': 60,
        'specialDefense': 105,
        'speed': 105,
    },
}, {
    'id': 430,
    'name': 'Honchkrow',
    'type': [PokemonType.Dark, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 177,
    'catchRate': 30,
    'base': {
        'hitpoints': 100,
        'attack': 125,
        'specialAttack': 105,
        'defense': 52,
        'specialDefense': 52,
        'speed': 71,
    },
}, {
    'id': 431,
    'name': 'Glameow',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.fast,
    'exp': 62,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Glameow', 'Purugly', 38)],
    'base': {
        'hitpoints': 49,
        'attack': 55,
        'specialAttack': 42,
        'defense': 42,
        'specialDefense': 37,
        'speed': 85,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 432,
    'name': 'Purugly',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.fast,
    'exp': 158,
    'catchRate': 75,
    'base': {
        'hitpoints': 71,
        'attack': 82,
        'specialAttack': 64,
        'defense': 64,
        'specialDefense': 59,
        'speed': 112,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 433,
    'name': 'Chingling',
    'type': [PokemonType.Psychic],
    'eggCycles': 25,
    'levelType': LevelType.fast,
    'exp': 57,
    'catchRate': 120,
    'evolutions': [new NightTimedStoneEvolution('Chingling', 'Chimecho', GameConstants.StoneType.Soothe_bell)],
    'baby': true,
    'base': {
        'hitpoints': 45,
        'attack': 30,
        'specialAttack': 65,
        'defense': 50,
        'specialDefense': 50,
        'speed': 45,
    },
}, {
    'id': 434,
    'name': 'Stunky',
    'type': [PokemonType.Poison, PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 66,
    'catchRate': 225,
    'evolutions': [new LevelEvolution('Stunky', 'Skuntank', 34)],
    'base': {
        'hitpoints': 63,
        'attack': 63,
        'specialAttack': 41,
        'defense': 47,
        'specialDefense': 41,
        'speed': 74,
    },
}, {
    'id': 435,
    'name': 'Skuntank',
    'type': [PokemonType.Poison, PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 60,
    'base': {
        'hitpoints': 103,
        'attack': 93,
        'specialAttack': 71,
        'defense': 67,
        'specialDefense': 61,
        'speed': 84,
    },
}, {
    'id': 436,
    'name': 'Bronzor',
    'type': [PokemonType.Steel, PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 60,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Bronzor', 'Bronzong', 33)],
    'base': {
        'hitpoints': 57,
        'attack': 24,
        'specialAttack': 24,
        'defense': 86,
        'specialDefense': 86,
        'speed': 23,
    },
    'heldItem': { type: ItemType.item, id: 'Metal_coat' },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 437,
    'name': 'Bronzong',
    'type': [PokemonType.Steel, PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'catchRate': 90,
    'base': {
        'hitpoints': 67,
        'attack': 89,
        'specialAttack': 79,
        'defense': 116,
        'specialDefense': 116,
        'speed': 33,
    },
    'heldItem': { type: ItemType.item, id: 'Metal_coat' },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 438,
    'name': 'Bonsly',
    'type': [PokemonType.Rock],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 58,
    'catchRate': 255,
    'evolutions': [
        // Evolves when leveled up while knowing Mimic
        // Learns mimic at level 16
        new LevelEvolution('Bonsly', 'Sudowoodo', 32),
    ],
    'baby': true,
    'base': {
        'hitpoints': 50,
        'attack': 80,
        'specialAttack': 10,
        'defense': 95,
        'specialDefense': 45,
        'speed': 10,
    },
}, {
    'id': 439,
    'name': 'Mime Jr.',
    'type': [PokemonType.Psychic, PokemonType.Fairy],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 62,
    'catchRate': 145,
    'evolutions': [
        // Evolves when leveled up while knowing Mimic
        // Learns mimic at level 32
        new RegionLevelEvolution(allButGalar, 'Mime Jr.', 'Mr. Mime', 32),
        new RegionLevelEvolution(galarOnly, 'Mime Jr.', 'Galarian Mr. Mime', 32),
    ],
    'baby': true,
    'base': {
        'hitpoints': 20,
        'attack': 25,
        'specialAttack': 70,
        'defense': 45,
        'specialDefense': 90,
        'speed': 60,
    },
}, {
    'id': 440,
    'name': 'Happiny',
    'type': [PokemonType.Normal],
    'eggCycles': 40,
    'levelType': LevelType.fast,
    'exp': 110,
    'catchRate': 130,
    'evolutions': [
        // TODO: Evolves while holding an Oval Stone during the Day time
        new StoneEvolution('Happiny', 'Chansey', GameConstants.StoneType.None),
    ],
    'baby': true,
    'base': {
        'hitpoints': 100,
        'attack': 5,
        'specialAttack': 15,
        'defense': 5,
        'specialDefense': 65,
        'speed': 30,
    },
    'heldItem': { type: ItemType.underground, id: 'Oval Stone' },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 441,
    'name': 'Chatot',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 144,
    'catchRate': 30,
    'base': {
        'hitpoints': 76,
        'attack': 65,
        'specialAttack': 92,
        'defense': 45,
        'specialDefense': 42,
        'speed': 91,
    },
}, {
    'id': 442,
    'name': 'Spiritomb',
    'type': [PokemonType.Ghost, PokemonType.Dark],
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 170,
    'catchRate': 100,
    'base': {
        'hitpoints': 50,
        'attack': 92,
        'specialAttack': 92,
        'defense': 108,
        'specialDefense': 108,
        'speed': 35,
    },
}, {
    'id': 443,
    'name': 'Gible',
    'type': [PokemonType.Dragon, PokemonType.Ground],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 60,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Gible', 'Gabite', 24)],
    'base': {
        'hitpoints': 58,
        'attack': 70,
        'specialAttack': 40,
        'defense': 45,
        'specialDefense': 45,
        'speed': 42,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 444,
    'name': 'Gabite',
    'type': [PokemonType.Dragon, PokemonType.Ground],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 144,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Gabite', 'Garchomp', 48)],
    'base': {
        'hitpoints': 68,
        'attack': 90,
        'specialAttack': 50,
        'defense': 65,
        'specialDefense': 55,
        'speed': 82,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 445,
    'name': 'Garchomp',
    'type': [PokemonType.Dragon, PokemonType.Ground],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 45,
    'base': {
        'hitpoints': 108,
        'attack': 130,
        'specialAttack': 80,
        'defense': 95,
        'specialDefense': 85,
        'speed': 102,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 446,
    'name': 'Munchlax',
    'type': [PokemonType.Normal],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 78,
    'catchRate': 50,
    'evolutions': [new StoneEvolution('Munchlax', 'Snorlax', GameConstants.StoneType.Soothe_bell)],
    'baby': true,
    'base': {
        'hitpoints': 135,
        'attack': 85,
        'specialAttack': 40,
        'defense': 40,
        'specialDefense': 85,
        'speed': 5,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 446.1,
    'name': 'Elf Munchlax',
    'type': [PokemonType.Normal],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 78,
    'catchRate': 50,
    'evolutions': [new StoneEvolution('Elf Munchlax', 'Santa Snorlax', GameConstants.StoneType.Soothe_bell)],
    'baby': true,
    'base': {
        'hitpoints': 135,
        'attack': 85,
        'specialAttack': 40,
        'defense': 40,
        'specialDefense': 85,
        'speed': 5,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 447,
    'name': 'Riolu',
    'type': [PokemonType.Fighting],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 57,
    'catchRate': 75,
    'evolutions': [new DayTimedStoneEvolution('Riolu', 'Lucario', GameConstants.StoneType.Soothe_bell)],
    'baby': true,
    'base': {
        'hitpoints': 40,
        'attack': 70,
        'specialAttack': 35,
        'defense': 40,
        'specialDefense': 40,
        'speed': 60,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 448,
    'name': 'Lucario',
    'type': [PokemonType.Fighting, PokemonType.Steel],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 184,
    'catchRate': 45,
    'base': {
        'hitpoints': 70,
        'attack': 110,
        'specialAttack': 115,
        'defense': 70,
        'specialDefense': 70,
        'speed': 90,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 449,
    'name': 'Hippopotas',
    'type': [PokemonType.Ground],
    'eggCycles': 30,
    'levelType': LevelType.slow,
    'exp': 66,
    'catchRate': 140,
    'evolutions': [new LevelEvolution('Hippopotas', 'Hippowdon', 34)],
    'base': {
        'hitpoints': 68,
        'attack': 72,
        'specialAttack': 38,
        'defense': 78,
        'specialDefense': 42,
        'speed': 32,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 450,
    'name': 'Hippowdon',
    'type': [PokemonType.Ground],
    'eggCycles': 30,
    'levelType': LevelType.slow,
    'exp': 184,
    'catchRate': 60,
    'base': {
        'hitpoints': 108,
        'attack': 112,
        'specialAttack': 68,
        'defense': 118,
        'specialDefense': 72,
        'speed': 47,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 451,
    'name': 'Skorupi',
    'type': [PokemonType.Poison, PokemonType.Bug],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 66,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Skorupi', 'Drapion', 40)],
    'base': {
        'hitpoints': 40,
        'attack': 50,
        'specialAttack': 30,
        'defense': 90,
        'specialDefense': 55,
        'speed': 65,
    },
}, {
    'id': 452,
    'name': 'Drapion',
    'type': [PokemonType.Poison, PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 175,
    'catchRate': 45,
    'base': {
        'hitpoints': 70,
        'attack': 90,
        'specialAttack': 60,
        'defense': 110,
        'specialDefense': 75,
        'speed': 95,
    },
}, {
    'id': 453,
    'name': 'Croagunk',
    'type': [PokemonType.Poison, PokemonType.Fighting],
    'eggCycles': 10,
    'levelType': LevelType.mediumfast,
    'exp': 60,
    'catchRate': 140,
    'evolutions': [new LevelEvolution('Croagunk', 'Toxicroak', 37)],
    'base': {
        'hitpoints': 48,
        'attack': 61,
        'specialAttack': 61,
        'defense': 40,
        'specialDefense': 40,
        'speed': 50,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 454,
    'name': 'Toxicroak',
    'type': [PokemonType.Poison, PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'catchRate': 75,
    'base': {
        'hitpoints': 83,
        'attack': 106,
        'specialAttack': 86,
        'defense': 65,
        'specialDefense': 65,
        'speed': 85,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 455,
    'name': 'Carnivine',
    'type': [PokemonType.Grass],
    'eggCycles': 25,
    'levelType': LevelType.slow,
    'exp': 159,
    'catchRate': 200,
    'base': {
        'hitpoints': 74,
        'attack': 100,
        'specialAttack': 90,
        'defense': 72,
        'specialDefense': 72,
        'speed': 46,
    },
}, {
    'id': 456,
    'name': 'Finneon',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 66,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Finneon', 'Lumineon', 31)],
    'base': {
        'hitpoints': 49,
        'attack': 49,
        'specialAttack': 49,
        'defense': 56,
        'specialDefense': 61,
        'speed': 66,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 457,
    'name': 'Lumineon',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 161,
    'catchRate': 75,
    'base': {
        'hitpoints': 69,
        'attack': 69,
        'specialAttack': 69,
        'defense': 76,
        'specialDefense': 86,
        'speed': 91,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 458,
    'name': 'Mantyke',
    'type': [PokemonType.Water, PokemonType.Flying],
    'eggCycles': 25,
    'levelType': LevelType.slow,
    'exp': 69,
    'catchRate': 25,
    'evolutions': [
        // TODO: Evolves when leveled up with a Remoraid in the party
        new StoneEvolution('Mantyke', 'Mantine', GameConstants.StoneType.None),
    ],
    'baby': true,
    'base': {
        'hitpoints': 45,
        'attack': 20,
        'specialAttack': 60,
        'defense': 50,
        'specialDefense': 120,
        'speed': 50,
    },
}, {
    'id': 459,
    'name': 'Snover',
    'type': [PokemonType.Grass, PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 67,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Snover', 'Abomasnow', 40)],
    'base': {
        'hitpoints': 60,
        'attack': 62,
        'specialAttack': 62,
        'defense': 50,
        'specialDefense': 60,
        'speed': 40,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 460,
    'name': 'Abomasnow',
    'type': [PokemonType.Grass, PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 173,
    'catchRate': 60,
    'base': {
        'hitpoints': 90,
        'attack': 92,
        'specialAttack': 92,
        'defense': 75,
        'specialDefense': 85,
        'speed': 60,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 461,
    'name': 'Weavile',
    'type': [PokemonType.Dark, PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 179,
    'catchRate': 45,
    'base': {
        'hitpoints': 70,
        'attack': 120,
        'specialAttack': 45,
        'defense': 65,
        'specialDefense': 85,
        'speed': 125,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 462,
    'name': 'Magnezone',
    'type': [PokemonType.Electric, PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 241,
    'catchRate': 30,
    'base': {
        'hitpoints': 70,
        'attack': 70,
        'specialAttack': 130,
        'defense': 115,
        'specialDefense': 90,
        'speed': 60,
    },
    'heldItem': { type: ItemType.item, id: 'Metal_coat' },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 463,
    'name': 'Lickilicky',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 180,
    'catchRate': 30,
    'base': {
        'hitpoints': 110,
        'attack': 85,
        'specialAttack': 80,
        'defense': 95,
        'specialDefense': 95,
        'speed': 50,
    },
}, {
    'id': 464,
    'name': 'Rhyperior',
    'type': [PokemonType.Ground, PokemonType.Rock],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 241,
    'catchRate': 30,
    'base': {
        'hitpoints': 115,
        'attack': 140,
        'specialAttack': 55,
        'defense': 130,
        'specialDefense': 55,
        'speed': 40,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 465,
    'name': 'Tangrowth',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 187,
    'catchRate': 30,
    'base': {
        'hitpoints': 100,
        'attack': 100,
        'specialAttack': 110,
        'defense': 125,
        'specialDefense': 50,
        'speed': 50,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 466,
    'name': 'Electivire',
    'type': [PokemonType.Electric],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 243,
    'catchRate': 30,
    'base': {
        'hitpoints': 75,
        'attack': 123,
        'specialAttack': 95,
        'defense': 67,
        'specialDefense': 85,
        'speed': 95,
    },
    'heldItem': { type: ItemType.item, id: 'Electirizer' },
    'gender': {
        'femaleRatio': 0.25,
    },
}, {
    'id': 467,
    'name': 'Magmortar',
    'type': [PokemonType.Fire],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 243,
    'catchRate': 30,
    'base': {
        'hitpoints': 75,
        'attack': 95,
        'specialAttack': 125,
        'defense': 67,
        'specialDefense': 95,
        'speed': 83,
    },
    'heldItem': { type: ItemType.item, id: 'Magmarizer' },
    'gender': {
        'femaleRatio': 0.25,
    },
}, {
    'id': 468,
    'name': 'Togekiss',
    'type': [PokemonType.Fairy, PokemonType.Flying],
    'eggCycles': 10,
    'levelType': LevelType.fast,
    'exp': 245,
    'catchRate': 30,
    'base': {
        'hitpoints': 85,
        'attack': 50,
        'specialAttack': 120,
        'defense': 95,
        'specialDefense': 115,
        'speed': 80,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 469,
    'name': 'Yanmega',
    'type': [PokemonType.Bug, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 180,
    'catchRate': 30,
    'base': {
        'hitpoints': 86,
        'attack': 76,
        'specialAttack': 116,
        'defense': 86,
        'specialDefense': 56,
        'speed': 95,
    },
}, {
    'id': 470,
    'name': 'Leafeon',
    'type': [PokemonType.Grass],
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 184,
    'catchRate': 45,
    'base': {
        'hitpoints': 65,
        'attack': 110,
        'specialAttack': 60,
        'defense': 130,
        'specialDefense': 65,
        'speed': 95,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 471,
    'name': 'Glaceon',
    'type': [PokemonType.Ice],
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 184,
    'catchRate': 45,
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 130,
        'defense': 110,
        'specialDefense': 95,
        'speed': 65,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 472,
    'name': 'Gliscor',
    'type': [PokemonType.Ground, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 179,
    'catchRate': 30,
    'base': {
        'hitpoints': 75,
        'attack': 95,
        'specialAttack': 45,
        'defense': 125,
        'specialDefense': 75,
        'speed': 95,
    },
}, {
    'id': 473,
    'name': 'Mamoswine',
    'type': [PokemonType.Ice, PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 239,
    'catchRate': 50,
    'base': {
        'hitpoints': 110,
        'attack': 130,
        'specialAttack': 70,
        'defense': 80,
        'specialDefense': 60,
        'speed': 80,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 474,
    'name': 'Porygon-Z',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 241,
    'catchRate': 30,
    'base': {
        'hitpoints': 85,
        'attack': 80,
        'specialAttack': 135,
        'defense': 70,
        'specialDefense': 75,
        'speed': 90,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 475,
    'name': 'Gallade',
    'type': [PokemonType.Psychic, PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 233,
    'catchRate': 45,
    'base': {
        'hitpoints': 68,
        'attack': 125,
        'specialAttack': 65,
        'defense': 65,
        'specialDefense': 115,
        'speed': 80,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 476,
    'name': 'Probopass',
    'type': [PokemonType.Rock, PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 184,
    'catchRate': 60,
    'base': {
        'hitpoints': 60,
        'attack': 55,
        'specialAttack': 75,
        'defense': 145,
        'specialDefense': 150,
        'speed': 40,
    },
    'heldItem': { type: ItemType.underground, id: 'Hard Stone' },
}, {
    'id': 477,
    'name': 'Dusknoir',
    'type': [PokemonType.Ghost],
    'eggCycles': 25,
    'levelType': LevelType.fast,
    'exp': 236,
    'catchRate': 45,
    'base': {
        'hitpoints': 45,
        'attack': 100,
        'specialAttack': 65,
        'defense': 135,
        'specialDefense': 135,
        'speed': 45,
    },
}, {
    'id': 478,
    'name': 'Froslass',
    'type': [PokemonType.Ice, PokemonType.Ghost],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 75,
    'base': {
        'hitpoints': 70,
        'attack': 80,
        'specialAttack': 80,
        'defense': 70,
        'specialDefense': 70,
        'speed': 110,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 479,
    'name': 'Rotom',
    'type': [PokemonType.Electric, PokemonType.Ghost],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 182,
    'catchRate': 45,
    'base': {
        'hitpoints': 50,
        'attack': 50,
        'specialAttack': 95,
        'defense': 77,
        'specialDefense': 77,
        'speed': 91,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 479.1,
    'name': 'Rotom (Heat)',
    'type': [PokemonType.Electric, PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 182,
    'catchRate': 45,
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 105,
        'defense': 107,
        'specialDefense': 107,
        'speed': 86,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 479.2,
    'name': 'Rotom (Wash)',
    'type': [PokemonType.Electric, PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 182,
    'catchRate': 45,
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 105,
        'defense': 107,
        'specialDefense': 107,
        'speed': 86,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 479.3,
    'name': 'Rotom (Frost)',
    'type': [PokemonType.Electric, PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 182,
    'catchRate': 45,
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 105,
        'defense': 107,
        'specialDefense': 107,
        'speed': 86,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 479.4,
    'name': 'Rotom (Fan)',
    'type': [PokemonType.Electric, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 182,
    'catchRate': 45,
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 105,
        'defense': 107,
        'specialDefense': 107,
        'speed': 86,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 479.5,
    'name': 'Rotom (Mow)',
    'type': [PokemonType.Electric, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 182,
    'catchRate': 45,
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 105,
        'defense': 107,
        'specialDefense': 107,
        'speed': 86,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 479.6,
    'name': 'Rotom (Discord)',
    'type': [PokemonType.Electric, PokemonType.Ghost],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 182,
    'catchRate': 45,
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 105,
        'defense': 107,
        'specialDefense': 107,
        'speed': 86,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 480,
    'name': 'Uxie',
    'type': [PokemonType.Psychic],
    'eggCycles': 80,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 75,
        'attack': 75,
        'specialAttack': 75,
        'defense': 130,
        'specialDefense': 130,
        'speed': 95,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 481,
    'name': 'Mesprit',
    'type': [PokemonType.Psychic],
    'eggCycles': 80,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 80,
        'attack': 105,
        'specialAttack': 105,
        'defense': 105,
        'specialDefense': 105,
        'speed': 80,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 482,
    'name': 'Azelf',
    'type': [PokemonType.Psychic],
    'eggCycles': 80,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 75,
        'attack': 125,
        'specialAttack': 125,
        'defense': 70,
        'specialDefense': 70,
        'speed': 115,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 483,
    'name': 'Dialga',
    'type': [PokemonType.Steel, PokemonType.Dragon],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 306,
    'catchRate': 3,
    'heldItem': { type: ItemType.item, id: 'Adamant_Orb' },
    'base': {
        'hitpoints': 100,
        'attack': 120,
        'specialAttack': 150,
        'defense': 120,
        'specialDefense': 100,
        'speed': 90,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 484,
    'name': 'Palkia',
    'type': [PokemonType.Water, PokemonType.Dragon],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 306,
    'catchRate': 3,
    'heldItem': { type: ItemType.item, id: 'Lustrous_Orb' },
    'base': {
        'hitpoints': 90,
        'attack': 120,
        'specialAttack': 150,
        'defense': 100,
        'specialDefense': 120,
        'speed': 100,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 485,
    'name': 'Heatran',
    'type': [PokemonType.Fire, PokemonType.Steel],
    'eggCycles': 80,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 91,
        'attack': 90,
        'specialAttack': 130,
        'defense': 106,
        'specialDefense': 106,
        'speed': 77,
    },
}, {
    'id': 486,
    'name': 'Regigigas',
    'type': [PokemonType.Normal],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 302,
    'catchRate': 3,
    'base': {
        'hitpoints': 110,
        'attack': 160,
        'specialAttack': 80,
        'defense': 110,
        'specialDefense': 110,
        'speed': 100,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 487,
    'name': 'Giratina (Altered)',
    'type': [PokemonType.Ghost, PokemonType.Dragon],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 306,
    'catchRate': 3,
    'base': {
        'hitpoints': 150,
        'attack': 100,
        'specialAttack': 100,
        'defense': 120,
        'specialDefense': 120,
        'speed': 90,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 487.1,
    'name': 'Giratina (Origin)',
    'type': [PokemonType.Ghost, PokemonType.Dragon],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 306,
    'catchRate': 3,
    'base': {
        'hitpoints': 150,
        'attack': 120,
        'specialAttack': 120,
        'defense': 100,
        'specialDefense': 100,
        'speed': 90,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 488,
    'name': 'Cresselia',
    'type': [PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 70,
        'specialAttack': 75,
        'defense': 120,
        'specialDefense': 130,
        'speed': 85,
    }, 'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 489,
    'name': 'Phione',
    'type': [PokemonType.Water],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 216,
    // 69420 to prevent evolution ingame, evolution needed for baby form to be obtainable
    'evolutions': [new LevelEvolution('Phione', 'Manaphy', 69420)],
    'baby': true,
    'catchRate': 30,
    'base': {
        'hitpoints': 80,
        'attack': 80,
        'specialAttack': 80,
        'defense': 80,
        'specialDefense': 80,
        'speed': 80,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 490,
    'name': 'Manaphy',
    'type': [PokemonType.Water],
    'eggCycles': 10,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 100,
        'attack': 100,
        'specialAttack': 100,
        'defense': 100,
        'specialDefense': 100,
        'speed': 100,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 491,
    'name': 'Darkrai',
    'type': [PokemonType.Dark],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 70,
        'attack': 90,
        'specialAttack': 135,
        'defense': 90,
        'specialDefense': 90,
        'speed': 125,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 492,
    'name': 'Shaymin (Land)',
    'type': [PokemonType.Grass],
    'eggCycles': 120,
    'levelType': LevelType.mediumslow,
    'exp': 270,
    'catchRate': 45,
    'base': {
        'hitpoints': 100,
        'attack': 100,
        'specialAttack': 100,
        'defense': 100,
        'specialDefense': 100,
        'speed': 100,
    },
    'heldItem': { type: ItemType.berry, id: BerryType.Lum },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 492.1,
    'name': 'Shaymin (Sky)',
    'type': [PokemonType.Grass, PokemonType.Flying],
    'eggCycles': 120,
    'levelType': LevelType.mediumslow,
    'exp': 270,
    'catchRate': 45,
    'base': {
        'hitpoints': 100,
        'attack': 103,
        'specialAttack': 120,
        'defense': 75,
        'specialDefense': 75,
        'speed': 127,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 493,
    'name': 'Arceus (Normal)',
    'type': [PokemonType.Normal],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 493.01,
    'name': 'Arceus (Fire)',
    'type': [PokemonType.Fire],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 493.02,
    'name': 'Arceus (Water)',
    'type': [PokemonType.Water],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 493.03,
    'name': 'Arceus (Electric)',
    'type': [PokemonType.Electric],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 493.04,
    'name': 'Arceus (Grass)',
    'type': [PokemonType.Grass],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 493.05,
    'name': 'Arceus (Ice)',
    'type': [PokemonType.Ice],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 493.06,
    'name': 'Arceus (Fighting)',
    'type': [PokemonType.Fighting],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 493.07,
    'name': 'Arceus (Poison)',
    'type': [PokemonType.Poison],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 493.08,
    'name': 'Arceus (Ground)',
    'type': [PokemonType.Ground],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 493.09,
    'name': 'Arceus (Flying)',
    'type': [PokemonType.Flying],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 493.10,
    'name': 'Arceus (Psychic)',
    'type': [PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 493.11,
    'name': 'Arceus (Bug)',
    'type': [PokemonType.Bug],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 493.12,
    'name': 'Arceus (Rock)',
    'type': [PokemonType.Rock],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 493.13,
    'name': 'Arceus (Ghost)',
    'type': [PokemonType.Ghost],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 493.14,
    'name': 'Arceus (Dragon)',
    'type': [PokemonType.Dragon],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 493.15,
    'name': 'Arceus (Dark)',
    'type': [PokemonType.Dark],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 493.16,
    'name': 'Arceus (Steel)',
    'type': [PokemonType.Steel],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 493.17,
    'name': 'Arceus (Fairy)',
    'type': [PokemonType.Fairy],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 324,
    'catchRate': 3,
    'base': {
        'hitpoints': 120,
        'attack': 120,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 120,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 494,
    'name': 'Victini',
    'type': [PokemonType.Psychic, PokemonType.Fire],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 100,
        'attack': 100,
        'specialAttack': 100,
        'defense': 100,
        'specialDefense': 100,
        'speed': 100,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 495,
    'name': 'Snivy',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Snivy', 'Servine', 17)],
    'base': {
        'hitpoints': 45,
        'attack': 45,
        'specialAttack': 45,
        'defense': 55,
        'specialDefense': 55,
        'speed': 63,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 496,
    'name': 'Servine',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 145,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Servine', 'Serperior', 36)],
    'base': {
        'hitpoints': 60,
        'attack': 60,
        'specialAttack': 60,
        'defense': 75,
        'specialDefense': 75,
        'speed': 83,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 497,
    'name': 'Serperior',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 238,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 75,
        'specialAttack': 75,
        'defense': 95,
        'specialDefense': 95,
        'speed': 113,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 498,
    'name': 'Tepig',
    'type': [PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Tepig', 'Pignite', 17)],
    'base': {
        'hitpoints': 65,
        'attack': 63,
        'specialAttack': 45,
        'defense': 45,
        'specialDefense': 45,
        'speed': 45,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 499,
    'name': 'Pignite',
    'type': [PokemonType.Fire, PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 146,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Pignite', 'Emboar', 36)],
    'base': {
        'hitpoints': 90,
        'attack': 93,
        'specialAttack': 70,
        'defense': 55,
        'specialDefense': 55,
        'speed': 55,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 500,
    'name': 'Emboar',
    'type': [PokemonType.Fire, PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 238,
    'catchRate': 45,
    'base': {
        'hitpoints': 110,
        'attack': 123,
        'specialAttack': 100,
        'defense': 65,
        'specialDefense': 65,
        'speed': 65,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 501,
    'name': 'Oshawott',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Oshawott', 'Dewott', 17)],
    'base': {
        'hitpoints': 55,
        'attack': 55,
        'specialAttack': 63,
        'defense': 45,
        'specialDefense': 45,
        'speed': 45,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 502,
    'name': 'Dewott',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 145,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Dewott', 'Samurott', 36)],
    'base': {
        'hitpoints': 75,
        'attack': 75,
        'specialAttack': 83,
        'defense': 60,
        'specialDefense': 60,
        'speed': 60,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 503,
    'name': 'Samurott',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 238,
    'catchRate': 45,
    'base': {
        'hitpoints': 95,
        'attack': 100,
        'specialAttack': 108,
        'defense': 85,
        'specialDefense': 70,
        'speed': 70,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 504,
    'name': 'Patrat',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 51,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Patrat', 'Watchog', 20)],
    'base': {
        'hitpoints': 45,
        'attack': 55,
        'specialAttack': 35,
        'defense': 39,
        'specialDefense': 39,
        'speed': 42,
    },
}, {
    'id': 505,
    'name': 'Watchog',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 147,
    'catchRate': 255,
    'base': {
        'hitpoints': 60,
        'attack': 85,
        'specialAttack': 60,
        'defense': 69,
        'specialDefense': 69,
        'speed': 77,
    },
}, {
    'id': 506,
    'name': 'Lillipup',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 55,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Lillipup', 'Herdier', 16)],
    'base': {
        'hitpoints': 45,
        'attack': 60,
        'specialAttack': 25,
        'defense': 45,
        'specialDefense': 45,
        'speed': 55,
    },
}, {
    'id': 507,
    'name': 'Herdier',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 130,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Herdier', 'Stoutland', 32)],
    'base': {
        'hitpoints': 65,
        'attack': 80,
        'specialAttack': 35,
        'defense': 65,
        'specialDefense': 65,
        'speed': 60,
    },
}, {
    'id': 508,
    'name': 'Stoutland',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 225,
    'catchRate': 45,
    'base': {
        'hitpoints': 85,
        'attack': 110,
        'specialAttack': 45,
        'defense': 90,
        'specialDefense': 90,
        'speed': 80,
    },
}, {
    'id': 509,
    'name': 'Purrloin',
    'type': [PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 56,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Purrloin', 'Liepard', 20)],
    'base': {
        'hitpoints': 41,
        'attack': 50,
        'specialAttack': 50,
        'defense': 37,
        'specialDefense': 37,
        'speed': 66,
    },
}, {
    'id': 510,
    'name': 'Liepard',
    'type': [PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 156,
    'catchRate': 90,
    'base': {
        'hitpoints': 64,
        'attack': 88,
        'specialAttack': 88,
        'defense': 50,
        'specialDefense': 50,
        'speed': 106,
    },
}, {
    'id': 511,
    'name': 'Pansage',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 63,
    'catchRate': 190,
    'evolutions': [new StoneEvolution('Pansage', 'Simisage', GameConstants.StoneType.Leaf_stone)],
    'base': {
        'hitpoints': 50,
        'attack': 53,
        'specialAttack': 53,
        'defense': 48,
        'specialDefense': 48,
        'speed': 64,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 512,
    'name': 'Simisage',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 174,
    'catchRate': 75,
    'base': {
        'hitpoints': 75,
        'attack': 98,
        'specialAttack': 98,
        'defense': 63,
        'specialDefense': 63,
        'speed': 101,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 513,
    'name': 'Pansear',
    'type': [PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 63,
    'catchRate': 190,
    'evolutions': [new StoneEvolution('Pansear', 'Simisear', GameConstants.StoneType.Fire_stone)],
    'base': {
        'hitpoints': 50,
        'attack': 53,
        'specialAttack': 53,
        'defense': 48,
        'specialDefense': 48,
        'speed': 64,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 514,
    'name': 'Simisear',
    'type': [PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 174,
    'catchRate': 75,
    'base': {
        'hitpoints': 75,
        'attack': 98,
        'specialAttack': 98,
        'defense': 63,
        'specialDefense': 63,
        'speed': 101,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 515,
    'name': 'Panpour',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 63,
    'catchRate': 190,
    'evolutions': [new StoneEvolution('Panpour', 'Simipour', GameConstants.StoneType.Water_stone)],
    'base': {
        'hitpoints': 50,
        'attack': 53,
        'specialAttack': 53,
        'defense': 48,
        'specialDefense': 48,
        'speed': 64,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 516,
    'name': 'Simipour',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 174,
    'catchRate': 75,
    'base': {
        'hitpoints': 75,
        'attack': 98,
        'specialAttack': 98,
        'defense': 63,
        'specialDefense': 63,
        'speed': 101,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 517,
    'name': 'Munna',
    'type': [PokemonType.Psychic],
    'eggCycles': 10,
    'levelType': LevelType.fast,
    'exp': 58,
    'catchRate': 190,
    'evolutions': [new StoneEvolution('Munna', 'Musharna', GameConstants.StoneType.Moon_stone)],
    'base': {
        'hitpoints': 76,
        'attack': 25,
        'specialAttack': 67,
        'defense': 45,
        'specialDefense': 55,
        'speed': 24,
    },
}, {
    'id': 518,
    'name': 'Musharna',
    'type': [PokemonType.Psychic],
    'eggCycles': 10,
    'levelType': LevelType.fast,
    'exp': 170,
    'catchRate': 75,
    'base': {
        'hitpoints': 116,
        'attack': 55,
        'specialAttack': 107,
        'defense': 85,
        'specialDefense': 95,
        'speed': 29,
    },
}, {
    'id': 519,
    'name': 'Pidove',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 53,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Pidove', 'Tranquill', 21)],
    'base': {
        'hitpoints': 50,
        'attack': 55,
        'specialAttack': 36,
        'defense': 50,
        'specialDefense': 30,
        'speed': 43,
    },
}, {
    'id': 520,
    'name': 'Tranquill',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 125,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Tranquill', 'Unfezant', 32)],
    'base': {
        'hitpoints': 62,
        'attack': 77,
        'specialAttack': 50,
        'defense': 62,
        'specialDefense': 42,
        'speed': 65,
    },
}, {
    'id': 521,
    'name': 'Unfezant',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 220,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 115,
        'specialAttack': 65,
        'defense': 80,
        'specialDefense': 55,
        'speed': 93,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 522,
    'name': 'Blitzle',
    'type': [PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 59,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Blitzle', 'Zebstrika', 27)],
    'base': {
        'hitpoints': 45,
        'attack': 60,
        'specialAttack': 50,
        'defense': 32,
        'specialDefense': 32,
        'speed': 76,
    },
}, {
    'id': 523,
    'name': 'Zebstrika',
    'type': [PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 174,
    'catchRate': 75,
    'base': {
        'hitpoints': 75,
        'attack': 100,
        'specialAttack': 80,
        'defense': 63,
        'specialDefense': 63,
        'speed': 116,
    },
}, {
    'id': 524,
    'name': 'Roggenrola',
    'type': [PokemonType.Rock],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 56,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Roggenrola', 'Boldore', 25)],
    'base': {
        'hitpoints': 55,
        'attack': 75,
        'specialAttack': 25,
        'defense': 85,
        'specialDefense': 25,
        'speed': 15,
    },
    'heldItem': { type: ItemType.underground, id: 'Everstone' },
}, {
    'id': 525,
    'name': 'Boldore',
    'type': [PokemonType.Rock],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 137,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Boldore', 'Gigalith', GameConstants.StoneType.Linking_cord)],
    'base': {
        'hitpoints': 70,
        'attack': 105,
        'specialAttack': 50,
        'defense': 105,
        'specialDefense': 40,
        'speed': 20,
    },
    'heldItem': { type: ItemType.underground, id: 'Everstone' },
}, {
    'id': 526,
    'name': 'Gigalith',
    'type': [PokemonType.Rock],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 232,
    'catchRate': 45,
    'base': {
        'hitpoints': 85,
        'attack': 135,
        'specialAttack': 60,
        'defense': 130,
        'specialDefense': 80,
        'speed': 25,
    },
    'heldItem': { type: ItemType.underground, id: 'Everstone' },
}, {
    'id': 527,
    'name': 'Woobat',
    'type': [PokemonType.Psychic, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'catchRate': 190,
    'evolutions': [new StoneEvolution('Woobat', 'Swoobat', GameConstants.StoneType.Soothe_bell)],
    'base': {
        'hitpoints': 65,
        'attack': 45,
        'specialAttack': 55,
        'defense': 43,
        'specialDefense': 43,
        'speed': 72,
    },
}, {
    'id': 528,
    'name': 'Swoobat',
    'type': [PokemonType.Psychic, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 149,
    'catchRate': 45,
    'base': {
        'hitpoints': 67,
        'attack': 57,
        'specialAttack': 77,
        'defense': 55,
        'specialDefense': 55,
        'speed': 114,
    },
}, {
    'id': 529,
    'name': 'Drilbur',
    'type': [PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 66,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Drilbur', 'Excadrill', 31)],
    'base': {
        'hitpoints': 60,
        'attack': 85,
        'specialAttack': 30,
        'defense': 40,
        'specialDefense': 45,
        'speed': 68,
    },
}, {
    'id': 530,
    'name': 'Excadrill',
    'type': [PokemonType.Ground, PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 178,
    'catchRate': 60,
    'base': {
        'hitpoints': 110,
        'attack': 135,
        'specialAttack': 50,
        'defense': 60,
        'specialDefense': 65,
        'speed': 88,
    },
}, {
    'id': 531,
    'name': 'Audino',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.fast,
    'exp': 390,
    'catchRate': 255,
    'base': {
        'hitpoints': 103,
        'attack': 60,
        'specialAttack': 60,
        'defense': 86,
        'specialDefense': 86,
        'speed': 50,
    },
}, {
    'id': 532,
    'name': 'Timburr',
    'type': [PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 61,
    'catchRate': 180,
    'evolutions': [new LevelEvolution('Timburr', 'Gurdurr', 25)],
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 25,
        'defense': 55,
        'specialDefense': 35,
        'speed': 35,
    },
    'gender': {
        'femaleRatio': 0.25,
    },
}, {
    'id': 533,
    'name': 'Gurdurr',
    'type': [PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'catchRate': 90,
    'evolutions': [new StoneEvolution('Gurdurr', 'Conkeldurr', GameConstants.StoneType.Linking_cord)],
    'base': {
        'hitpoints': 85,
        'attack': 105,
        'specialAttack': 40,
        'defense': 85,
        'specialDefense': 50,
        'speed': 40,
    },
    'gender': {
        'femaleRatio': 0.25,
    },
}, {
    'id': 534,
    'name': 'Conkeldurr',
    'type': [PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 227,
    'catchRate': 45,
    'base': {
        'hitpoints': 105,
        'attack': 140,
        'specialAttack': 55,
        'defense': 95,
        'specialDefense': 65,
        'speed': 45,
    },
    'gender': {
        'femaleRatio': 0.25,
    },
}, {
    'id': 535,
    'name': 'Tympole',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 59,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Tympole', 'Palpitoad', 25)],
    'base': {
        'hitpoints': 50,
        'attack': 50,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 40,
        'speed': 64,
    },
}, {
    'id': 536,
    'name': 'Palpitoad',
    'type': [PokemonType.Water, PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 134,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Palpitoad', 'Seismitoad', 36)],
    'base': {
        'hitpoints': 75,
        'attack': 65,
        'specialAttack': 65,
        'defense': 55,
        'specialDefense': 55,
        'speed': 69,
    },
}, {
    'id': 537,
    'name': 'Seismitoad',
    'type': [PokemonType.Water, PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 229,
    'catchRate': 45,
    'base': {
        'hitpoints': 105,
        'attack': 95,
        'specialAttack': 85,
        'defense': 75,
        'specialDefense': 75,
        'speed': 74,
    },
}, {
    'id': 538,
    'name': 'Throh',
    'type': [PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 163,
    'catchRate': 45,
    'base': {
        'hitpoints': 120,
        'attack': 100,
        'specialAttack': 30,
        'defense': 85,
        'specialDefense': 85,
        'speed': 45,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 539,
    'name': 'Sawk',
    'type': [PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 163,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 125,
        'specialAttack': 30,
        'defense': 75,
        'specialDefense': 75,
        'speed': 85,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 540,
    'name': 'Sewaddle',
    'type': [PokemonType.Bug, PokemonType.Grass],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Sewaddle', 'Swadloon', 20)],
    'base': {
        'hitpoints': 45,
        'attack': 53,
        'specialAttack': 40,
        'defense': 70,
        'specialDefense': 60,
        'speed': 42,
    },
}, {
    'id': 541,
    'name': 'Swadloon',
    'type': [PokemonType.Bug, PokemonType.Grass],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 133,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Swadloon', 'Leavanny', GameConstants.StoneType.Soothe_bell)],
    'base': {
        'hitpoints': 55,
        'attack': 63,
        'specialAttack': 50,
        'defense': 90,
        'specialDefense': 80,
        'speed': 42,
    },
}, {
    'id': 542,
    'name': 'Leavanny',
    'type': [PokemonType.Bug, PokemonType.Grass],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 225,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 103,
        'specialAttack': 70,
        'defense': 80,
        'specialDefense': 80,
        'speed': 92,
    },
}, {
    'id': 543,
    'name': 'Venipede',
    'type': [PokemonType.Bug, PokemonType.Poison],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 52,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Venipede', 'Whirlipede', 22)],
    'base': {
        'hitpoints': 30,
        'attack': 45,
        'specialAttack': 30,
        'defense': 59,
        'specialDefense': 39,
        'speed': 57,
    },
}, {
    'id': 544,
    'name': 'Whirlipede',
    'type': [PokemonType.Bug, PokemonType.Poison],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 126,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Whirlipede', 'Scolipede', 30)],
    'base': {
        'hitpoints': 40,
        'attack': 55,
        'specialAttack': 40,
        'defense': 99,
        'specialDefense': 79,
        'speed': 47,
    },
}, {
    'id': 545,
    'name': 'Scolipede',
    'type': [PokemonType.Bug, PokemonType.Poison],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 218,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 100,
        'specialAttack': 55,
        'defense': 89,
        'specialDefense': 69,
        'speed': 112,
    },
}, {
    'id': 546,
    'name': 'Cottonee',
    'type': [PokemonType.Grass, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 56,
    'catchRate': 190,
    'evolutions': [new StoneEvolution('Cottonee', 'Whimsicott', GameConstants.StoneType.Sun_stone)],
    'base': {
        'hitpoints': 40,
        'attack': 27,
        'specialAttack': 37,
        'defense': 60,
        'specialDefense': 50,
        'speed': 66,
    },
}, {
    'id': 547,
    'name': 'Whimsicott',
    'type': [PokemonType.Grass, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 75,
    'base': {
        'hitpoints': 60,
        'attack': 67,
        'specialAttack': 77,
        'defense': 85,
        'specialDefense': 75,
        'speed': 116,
    },
}, {
    'id': 548,
    'name': 'Petilil',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 56,
    'catchRate': 190,
    'evolutions': [new StoneEvolution('Petilil', 'Lilligant', GameConstants.StoneType.Sun_stone)],
    'base': {
        'hitpoints': 45,
        'attack': 35,
        'specialAttack': 70,
        'defense': 50,
        'specialDefense': 50,
        'speed': 30,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 549,
    'name': 'Lilligant',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 75,
    'base': {
        'hitpoints': 70,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 75,
        'speed': 90,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 550,
    'name': 'Basculin (Red-Striped)',
    'type': [PokemonType.Water],
    'eggCycles': 40,
    'levelType': LevelType.mediumfast,
    'exp': 161,
    'catchRate': 25,
    'base': {
        'hitpoints': 70,
        'attack': 92,
        'specialAttack': 80,
        'defense': 65,
        'specialDefense': 55,
        'speed': 98,
    },
    'heldItem': { type: ItemType.item, id: 'Deepsea_tooth' },
}, {
    'id': 550.01,
    'name': 'Basculin (Blue-Striped)',
    'type': [PokemonType.Water],
    'eggCycles': 40,
    'levelType': LevelType.mediumfast,
    'exp': 161,
    'catchRate': 25,
    'base': {
        'hitpoints': 70,
        'attack': 92,
        'specialAttack': 80,
        'defense': 65,
        'specialDefense': 55,
        'speed': 98,
    },
    'heldItem': { type: ItemType.item, id: 'Deepsea_scale' },
}, {
    'id': 551,
    'name': 'Sandile',
    'type': [PokemonType.Ground, PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 58,
    'catchRate': 180,
    'evolutions': [new LevelEvolution('Sandile', 'Krokorok', 29)],
    'base': {
        'hitpoints': 50,
        'attack': 72,
        'specialAttack': 35,
        'defense': 35,
        'specialDefense': 35,
        'speed': 65,
    },
}, {
    'id': 552,
    'name': 'Krokorok',
    'type': [PokemonType.Ground, PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 123,
    'catchRate': 90,
    'evolutions': [new LevelEvolution('Krokorok', 'Krookodile', 40)],
    'base': {
        'hitpoints': 60,
        'attack': 82,
        'specialAttack': 45,
        'defense': 45,
        'specialDefense': 45,
        'speed': 74,
    },
}, {
    'id': 553,
    'name': 'Krookodile',
    'type': [PokemonType.Ground, PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 234,
    'catchRate': 45,
    'base': {
        'hitpoints': 95,
        'attack': 117,
        'specialAttack': 65,
        'defense': 80,
        'specialDefense': 70,
        'speed': 92,
    },
}, {
    'id': 554,
    'name': 'Darumaka',
    'type': [PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 63,
    'catchRate': 120,
    'evolutions': [
        new LevelEvolution('Darumaka', 'Darmanitan', 35),
        new LevelEvolution('Darumaka', 'Darmanitan (Zen)', 1234),
    ],
    'base': {
        'hitpoints': 70,
        'attack': 90,
        'specialAttack': 15,
        'defense': 45,
        'specialDefense': 45,
        'speed': 50,
    },
}, {
    'id': 554.1,
    'name': 'Galarian Darumaka',
    'nativeRegion': GameConstants.Region.galar,
    'type': [PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 63,
    'catchRate': 120,
    'evolutions': [
        new StoneEvolution('Galarian Darumaka', 'Galarian Darmanitan', GameConstants.StoneType.Ice_stone),
        new LevelEvolution('Galarian Darumaka', 'Galarian Darmanitan (Zen)', 1234),
    ],
    'base': {
        'hitpoints': 70,
        'attack': 90,
        'specialAttack': 15,
        'defense': 45,
        'specialDefense': 45,
        'speed': 50,
    },
}, {
    'id': 555,
    'name': 'Darmanitan',
    'type': [PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 189,
    'catchRate': 60,
    'base': {
        'hitpoints': 105,
        'attack': 140,
        'specialAttack': 30,
        'defense': 55,
        'specialDefense': 55,
        'speed': 95,
    },
}, {
    'id': 555.1,
    'name': 'Darmanitan (Zen)',
    'type': [PokemonType.Fire, PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 189,
    'catchRate': 60,
    'base': {
        'hitpoints': 105,
        'attack': 30,
        'specialAttack': 140,
        'defense': 105,
        'specialDefense': 105,
        'speed': 55,
    },
}, {
    'id': 555.2,
    'name': 'Galarian Darmanitan',
    'nativeRegion': GameConstants.Region.galar,
    'type': [PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 189,
    'catchRate': 60,
    'base': {
        'hitpoints': 105,
        'attack': 140,
        'specialAttack': 30,
        'defense': 55,
        'specialDefense': 55,
        'speed': 95,
    },
}, {
    'id': 555.3,
    'name': 'Galarian Darmanitan (Zen)',
    'nativeRegion': GameConstants.Region.galar,
    'type': [PokemonType.Fire, PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 189,
    'catchRate': 60,
    'base': {
        'hitpoints': 105,
        'attack': 160,
        'specialAttack': 30,
        'defense': 55,
        'specialDefense': 55,
        'speed': 135,
    },
}, {
    'id': 556,
    'name': 'Maractus',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 161,
    'catchRate': 255,
    'base': {
        'hitpoints': 75,
        'attack': 86,
        'specialAttack': 106,
        'defense': 67,
        'specialDefense': 67,
        'speed': 60,
    },
}, {
    'id': 557,
    'name': 'Dwebble',
    'type': [PokemonType.Bug, PokemonType.Rock],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Dwebble', 'Crustle', 34)],
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 35,
        'defense': 85,
        'specialDefense': 35,
        'speed': 55,
    },
    'heldItem': { type: ItemType.underground, id: 'Rare Bone' },
}, {
    'id': 558,
    'name': 'Crustle',
    'type': [PokemonType.Bug, PokemonType.Rock],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 170,
    'catchRate': 75,
    'base': {
        'hitpoints': 70,
        'attack': 105,
        'specialAttack': 65,
        'defense': 125,
        'specialDefense': 75,
        'speed': 45,
    },
    'heldItem': { type: ItemType.underground, id: 'Rare Bone' },
}, {
    'id': 559,
    'name': 'Scraggy',
    'type': [PokemonType.Dark, PokemonType.Fighting],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 70,
    'catchRate': 180,
    'evolutions': [new LevelEvolution('Scraggy', 'Scrafty', 39)],
    'base': {
        'hitpoints': 50,
        'attack': 75,
        'specialAttack': 35,
        'defense': 70,
        'specialDefense': 70,
        'speed': 48,
    },
}, {
    'id': 560,
    'name': 'Scrafty',
    'type': [PokemonType.Dark, PokemonType.Fighting],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 171,
    'catchRate': 90,
    'base': {
        'hitpoints': 65,
        'attack': 90,
        'specialAttack': 45,
        'defense': 115,
        'specialDefense': 115,
        'speed': 58,
    },
}, {
    'id': 561,
    'name': 'Sigilyph',
    'type': [PokemonType.Psychic, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'catchRate': 45,
    'base': {
        'hitpoints': 72,
        'attack': 58,
        'specialAttack': 103,
        'defense': 80,
        'specialDefense': 80,
        'speed': 97,
    },
}, {
    'id': 562,
    'name': 'Yamask',
    'type': [PokemonType.Ghost],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Yamask', 'Cofagrigus', 34)],
    'base': {
        'hitpoints': 38,
        'attack': 30,
        'specialAttack': 55,
        'defense': 85,
        'specialDefense': 65,
        'speed': 30,
    },
}, {
    'id': 562.1,
    'name': 'Galarian Yamask',
    'nativeRegion': GameConstants.Region.galar,
    'type': [PokemonType.Ghost, PokemonType.Ground],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 190,
    'evolutions': [new DungeonRestrictedLevelEvolution('Dusty Bowl', 'Galarian Yamask', 'Runerigus', 34)],
    'base': {
        'hitpoints': 38,
        'attack': 55,
        'specialAttack': 30,
        'defense': 85,
        'specialDefense': 65,
        'speed': 30,
    },
}, {
    'id': 563,
    'name': 'Cofagrigus',
    'type': [PokemonType.Ghost],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 169,
    'catchRate': 90,
    'base': {
        'hitpoints': 58,
        'attack': 50,
        'specialAttack': 95,
        'defense': 145,
        'specialDefense': 105,
        'speed': 30,
    },
}, {
    'id': 564,
    'name': 'Tirtouga',
    'type': [PokemonType.Water, PokemonType.Rock],
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 71,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Tirtouga', 'Carracosta', 37)],
    'base': {
        'hitpoints': 54,
        'attack': 78,
        'specialAttack': 53,
        'defense': 103,
        'specialDefense': 45,
        'speed': 22,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 565,
    'name': 'Carracosta',
    'type': [PokemonType.Water, PokemonType.Rock],
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 45,
    'base': {
        'hitpoints': 74,
        'attack': 108,
        'specialAttack': 83,
        'defense': 133,
        'specialDefense': 65,
        'speed': 32,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 566,
    'name': 'Archen',
    'type': [PokemonType.Rock, PokemonType.Flying],
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 71,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Archen', 'Archeops', 37)],
    'base': {
        'hitpoints': 55,
        'attack': 112,
        'specialAttack': 74,
        'defense': 45,
        'specialDefense': 45,
        'speed': 70,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 567,
    'name': 'Archeops',
    'type': [PokemonType.Rock, PokemonType.Flying],
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 177,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 140,
        'specialAttack': 112,
        'defense': 65,
        'specialDefense': 65,
        'speed': 110,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 568,
    'name': 'Trubbish',
    'type': [PokemonType.Poison],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 66,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Trubbish', 'Garbodor', 36)],
    'base': {
        'hitpoints': 50,
        'attack': 50,
        'specialAttack': 40,
        'defense': 62,
        'specialDefense': 62,
        'speed': 65,
    },
}, {
    'id': 569,
    'name': 'Garbodor',
    'type': [PokemonType.Poison],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 60,
    'base': {
        'hitpoints': 80,
        'attack': 95,
        'specialAttack': 60,
        'defense': 82,
        'specialDefense': 82,
        'speed': 75,
    },
}, {
    'id': 569.1,
    'name': 'Gigantamax Garbodor',
    'nativeRegion': GameConstants.Region.none,
    'type': [PokemonType.Poison],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 60,
    'base': {
        'hitpoints': 160,
        'attack': 95,
        'specialAttack': 60,
        'defense': 82,
        'specialDefense': 82,
        'speed': 75,
    },
}, {
    'id': 570,
    'name': 'Zorua',
    'type': [PokemonType.Dark],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 66,
    'catchRate': 75,
    'evolutions': [new LevelEvolution('Zorua', 'Zoroark', 30)],
    'base': {
        'hitpoints': 40,
        'attack': 65,
        'specialAttack': 80,
        'defense': 40,
        'specialDefense': 40,
        'speed': 65,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 571,
    'name': 'Zoroark',
    'type': [PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 179,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 105,
        'specialAttack': 120,
        'defense': 60,
        'specialDefense': 60,
        'speed': 105,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 572,
    'name': 'Minccino',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.fast,
    'exp': 60,
    'catchRate': 255,
    'evolutions': [new StoneEvolution('Minccino', 'Cinccino', GameConstants.StoneType.Shiny_stone)],
    'base': {
        'hitpoints': 55,
        'attack': 50,
        'specialAttack': 40,
        'defense': 40,
        'specialDefense': 40,
        'speed': 75,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 573,
    'name': 'Cinccino',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.fast,
    'exp': 165,
    'catchRate': 60,
    'base': {
        'hitpoints': 75,
        'attack': 95,
        'specialAttack': 65,
        'defense': 60,
        'specialDefense': 60,
        'speed': 115,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 574,
    'name': 'Gothita',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 58,
    'catchRate': 200,
    'evolutions': [new LevelEvolution('Gothita', 'Gothorita', 32)],
    'base': {
        'hitpoints': 45,
        'attack': 30,
        'specialAttack': 55,
        'defense': 50,
        'specialDefense': 65,
        'speed': 45,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 575,
    'name': 'Gothorita',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 137,
    'catchRate': 100,
    'evolutions': [new LevelEvolution('Gothorita', 'Gothitelle', 41)],
    'base': {
        'hitpoints': 60,
        'attack': 45,
        'specialAttack': 75,
        'defense': 70,
        'specialDefense': 85,
        'speed': 55,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 576,
    'name': 'Gothitelle',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 221,
    'catchRate': 50,
    'base': {
        'hitpoints': 70,
        'attack': 55,
        'specialAttack': 95,
        'defense': 95,
        'specialDefense': 110,
        'speed': 65,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 577,
    'name': 'Solosis',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 58,
    'catchRate': 200,
    'evolutions': [new LevelEvolution('Solosis', 'Duosion', 32)],
    'base': {
        'hitpoints': 45,
        'attack': 30,
        'specialAttack': 105,
        'defense': 40,
        'specialDefense': 50,
        'speed': 20,
    },
}, {
    'id': 578,
    'name': 'Duosion',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 130,
    'catchRate': 100,
    'evolutions': [new LevelEvolution('Duosion', 'Reuniclus', 41)],
    'base': {
        'hitpoints': 65,
        'attack': 40,
        'specialAttack': 125,
        'defense': 50,
        'specialDefense': 60,
        'speed': 30,
    },
}, {
    'id': 579,
    'name': 'Reuniclus',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 221,
    'catchRate': 50,
    'base': {
        'hitpoints': 110,
        'attack': 65,
        'specialAttack': 125,
        'defense': 75,
        'specialDefense': 85,
        'speed': 30,
    },
}, {
    'id': 580,
    'name': 'Ducklett',
    'type': [PokemonType.Water, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Ducklett', 'Swanna', 35)],
    'base': {
        'hitpoints': 62,
        'attack': 44,
        'specialAttack': 44,
        'defense': 50,
        'specialDefense': 50,
        'speed': 55,
    },
}, {
    'id': 581,
    'name': 'Swanna',
    'type': [PokemonType.Water, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 87,
        'specialAttack': 87,
        'defense': 63,
        'specialDefense': 63,
        'speed': 98,
    },
}, {
    'id': 582,
    'name': 'Vanillite',
    'type': [PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 61,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Vanillite', 'Vanillish', 35)],
    'base': {
        'hitpoints': 36,
        'attack': 50,
        'specialAttack': 65,
        'defense': 50,
        'specialDefense': 60,
        'speed': 44,
    },
}, {
    'id': 583,
    'name': 'Vanillish',
    'type': [PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 138,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Vanillish', 'Vanilluxe', 47)],
    'base': {
        'hitpoints': 51,
        'attack': 65,
        'specialAttack': 80,
        'defense': 65,
        'specialDefense': 75,
        'speed': 59,
    },
}, {
    'id': 584,
    'name': 'Vanilluxe',
    'type': [PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 241,
    'catchRate': 45,
    'base': {
        'hitpoints': 71,
        'attack': 95,
        'specialAttack': 110,
        'defense': 85,
        'specialDefense': 95,
        'speed': 79,
    },
}, {
    'id': 585,
    'name': 'Deerling (Spring)',
    'type': [PokemonType.Normal, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 67,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Deerling (Spring)', 'Sawsbuck (Spring)', 34)],
    'base': {
        'hitpoints': 60,
        'attack': 60,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 50,
        'speed': 75,
    },
}, {
    'id': 585.01,
    'name': 'Deerling (Summer)',
    'type': [PokemonType.Normal, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 67,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Deerling (Summer)', 'Sawsbuck (Summer)', 34)],
    'base': {
        'hitpoints': 60,
        'attack': 60,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 50,
        'speed': 75,
    },
}, {
    'id': 585.02,
    'name': 'Deerling (Autumn)',
    'type': [PokemonType.Normal, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 67,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Deerling (Autumn)', 'Sawsbuck (Autumn)', 34)],
    'base': {
        'hitpoints': 60,
        'attack': 60,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 50,
        'speed': 75,
    },
}, {
    'id': 585.03,
    'name': 'Deerling (Winter)',
    'type': [PokemonType.Normal, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 67,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Deerling (Winter)', 'Sawsbuck (Winter)', 34)],
    'base': {
        'hitpoints': 60,
        'attack': 60,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 50,
        'speed': 75,
    },
}, {
    'id': 586,
    'name': 'Sawsbuck (Spring)',
    'type': [PokemonType.Normal, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 75,
    'base': {
        'hitpoints': 80,
        'attack': 100,
        'specialAttack': 60,
        'defense': 70,
        'specialDefense': 70,
        'speed': 95,
    },
}, {
    'id': 586.01,
    'name': 'Sawsbuck (Summer)',
    'type': [PokemonType.Normal, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 75,
    'base': {
        'hitpoints': 80,
        'attack': 100,
        'specialAttack': 60,
        'defense': 70,
        'specialDefense': 70,
        'speed': 95,
    },
}, {
    'id': 586.02,
    'name': 'Sawsbuck (Autumn)',
    'type': [PokemonType.Normal, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 75,
    'base': {
        'hitpoints': 80,
        'attack': 100,
        'specialAttack': 60,
        'defense': 70,
        'specialDefense': 70,
        'speed': 95,
    },
}, {
    'id': 586.03,
    'name': 'Sawsbuck (Winter)',
    'type': [PokemonType.Normal, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 75,
    'base': {
        'hitpoints': 80,
        'attack': 100,
        'specialAttack': 60,
        'defense': 70,
        'specialDefense': 70,
        'speed': 95,
    },
}, {
    'id': 587,
    'name': 'Emolga',
    'type': [PokemonType.Electric, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 150,
    'catchRate': 200,
    'base': {
        'hitpoints': 55,
        'attack': 75,
        'specialAttack': 75,
        'defense': 60,
        'specialDefense': 60,
        'speed': 103,
    },
}, {
    'id': 588,
    'name': 'Karrablast',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 63,
    'catchRate': 200,
    'evolutions': [new StoneEvolution('Karrablast', 'Escavalier', GameConstants.StoneType.Linking_cord)],
    'base': {
        'hitpoints': 50,
        'attack': 75,
        'specialAttack': 40,
        'defense': 45,
        'specialDefense': 45,
        'speed': 60,
    },
}, {
    'id': 589,
    'name': 'Escavalier',
    'type': [PokemonType.Bug, PokemonType.Steel],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 75,
    'base': {
        'hitpoints': 70,
        'attack': 135,
        'specialAttack': 60,
        'defense': 105,
        'specialDefense': 105,
        'speed': 20,
    },
}, {
    'id': 590,
    'name': 'Foongus',
    'type': [PokemonType.Grass, PokemonType.Poison],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 59,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Foongus', 'Amoonguss', 39)],
    'base': {
        'hitpoints': 69,
        'attack': 55,
        'specialAttack': 55,
        'defense': 45,
        'specialDefense': 55,
        'speed': 15,
    },
}, {
    'id': 591,
    'name': 'Amoonguss',
    'type': [PokemonType.Grass, PokemonType.Poison],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 162,
    'catchRate': 75,
    'base': {
        'hitpoints': 114,
        'attack': 85,
        'specialAttack': 85,
        'defense': 70,
        'specialDefense': 80,
        'speed': 30,
    },
}, {
    'id': 592,
    'name': 'Frillish',
    'type': [PokemonType.Water, PokemonType.Ghost],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 67,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Frillish', 'Jellicent', 40)],
    'base': {
        'hitpoints': 55,
        'attack': 40,
        'specialAttack': 65,
        'defense': 50,
        'specialDefense': 85,
        'speed': 40,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 593,
    'name': 'Jellicent',
    'type': [PokemonType.Water, PokemonType.Ghost],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 60,
    'base': {
        'hitpoints': 100,
        'attack': 60,
        'specialAttack': 85,
        'defense': 70,
        'specialDefense': 105,
        'speed': 60,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 594,
    'name': 'Alomomola',
    'type': [PokemonType.Water],
    'eggCycles': 40,
    'levelType': LevelType.fast,
    'exp': 165,
    'catchRate': 75,
    'base': {
        'hitpoints': 165,
        'attack': 75,
        'specialAttack': 40,
        'defense': 80,
        'specialDefense': 45,
        'speed': 65,
    },
}, {
    'id': 595,
    'name': 'Joltik',
    'type': [PokemonType.Bug, PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 64,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Joltik', 'Galvantula', 36)],
    'base': {
        'hitpoints': 50,
        'attack': 47,
        'specialAttack': 57,
        'defense': 50,
        'specialDefense': 50,
        'speed': 65,
    },
}, {
    'id': 596,
    'name': 'Galvantula',
    'type': [PokemonType.Bug, PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'catchRate': 75,
    'base': {
        'hitpoints': 70,
        'attack': 77,
        'specialAttack': 97,
        'defense': 60,
        'specialDefense': 60,
        'speed': 108,
    },
}, {
    'id': 597,
    'name': 'Ferroseed',
    'type': [PokemonType.Grass, PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Ferroseed', 'Ferrothorn', 40)],
    'base': {
        'hitpoints': 44,
        'attack': 50,
        'specialAttack': 24,
        'defense': 91,
        'specialDefense': 86,
        'speed': 10,
    },
}, {
    'id': 598,
    'name': 'Ferrothorn',
    'type': [PokemonType.Grass, PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 171,
    'catchRate': 90,
    'base': {
        'hitpoints': 74,
        'attack': 94,
        'specialAttack': 54,
        'defense': 131,
        'specialDefense': 116,
        'speed': 20,
    },
}, {
    'id': 599,
    'name': 'Klink',
    'type': [PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 60,
    'catchRate': 130,
    'evolutions': [new LevelEvolution('Klink', 'Klang', 38)],
    'base': {
        'hitpoints': 40,
        'attack': 55,
        'specialAttack': 45,
        'defense': 70,
        'specialDefense': 60,
        'speed': 30,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 600,
    'name': 'Klang',
    'type': [PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 154,
    'catchRate': 60,
    'evolutions': [new LevelEvolution('Klang', 'Klinklang', 49)],
    'base': {
        'hitpoints': 60,
        'attack': 80,
        'specialAttack': 70,
        'defense': 95,
        'specialDefense': 85,
        'speed': 50,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 601,
    'name': 'Klinklang',
    'type': [PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 234,
    'catchRate': 30,
    'base': {
        'hitpoints': 60,
        'attack': 100,
        'specialAttack': 70,
        'defense': 115,
        'specialDefense': 85,
        'speed': 90,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 602,
    'name': 'Tynamo',
    'type': [PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 55,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Tynamo', 'Eelektrik', 39)],
    'base': {
        'hitpoints': 35,
        'attack': 55,
        'specialAttack': 45,
        'defense': 40,
        'specialDefense': 40,
        'speed': 60,
    },
}, {
    'id': 603,
    'name': 'Eelektrik',
    'type': [PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 142,
    'catchRate': 60,
    'evolutions': [new StoneEvolution('Eelektrik', 'Eelektross', GameConstants.StoneType.Thunder_stone)],
    'base': {
        'hitpoints': 65,
        'attack': 85,
        'specialAttack': 75,
        'defense': 70,
        'specialDefense': 70,
        'speed': 40,
    },
}, {
    'id': 604,
    'name': 'Eelektross',
    'type': [PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 232,
    'catchRate': 30,
    'base': {
        'hitpoints': 85,
        'attack': 115,
        'specialAttack': 105,
        'defense': 80,
        'specialDefense': 80,
        'speed': 50,
    },
}, {
    'id': 605,
    'name': 'Elgyem',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 67,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Elgyem', 'Beheeyem', 42)],
    'base': {
        'hitpoints': 55,
        'attack': 55,
        'specialAttack': 85,
        'defense': 55,
        'specialDefense': 55,
        'speed': 30,
    },
}, {
    'id': 606,
    'name': 'Beheeyem',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 170,
    'catchRate': 90,
    'base': {
        'hitpoints': 75,
        'attack': 75,
        'specialAttack': 125,
        'defense': 75,
        'specialDefense': 95,
        'speed': 40,
    },
}, {
    'id': 607,
    'name': 'Litwick',
    'type': [PokemonType.Ghost, PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 55,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Litwick', 'Lampent', 41)],
    'base': {
        'hitpoints': 50,
        'attack': 30,
        'specialAttack': 65,
        'defense': 55,
        'specialDefense': 55,
        'speed': 20,
    },
}, {
    'id': 608,
    'name': 'Lampent',
    'type': [PokemonType.Ghost, PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 130,
    'catchRate': 90,
    'evolutions': [new StoneEvolution('Lampent', 'Chandelure', GameConstants.StoneType.Dusk_stone)],
    'base': {
        'hitpoints': 60,
        'attack': 40,
        'specialAttack': 95,
        'defense': 60,
        'specialDefense': 60,
        'speed': 55,
    },
}, {
    'id': 609,
    'name': 'Chandelure',
    'type': [PokemonType.Ghost, PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 234,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 55,
        'specialAttack': 145,
        'defense': 90,
        'specialDefense': 90,
        'speed': 80,
    },
}, {
    'id': 610,
    'name': 'Axew',
    'type': [PokemonType.Dragon],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 64,
    'catchRate': 75,
    'evolutions': [new LevelEvolution('Axew', 'Fraxure', 38)],
    'base': {
        'hitpoints': 46,
        'attack': 87,
        'specialAttack': 30,
        'defense': 60,
        'specialDefense': 40,
        'speed': 57,
    },
}, {
    'id': 611,
    'name': 'Fraxure',
    'type': [PokemonType.Dragon],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 144,
    'catchRate': 60,
    'evolutions': [new LevelEvolution('Fraxure', 'Haxorus', 48)],
    'base': {
        'hitpoints': 66,
        'attack': 117,
        'specialAttack': 40,
        'defense': 70,
        'specialDefense': 50,
        'speed': 67,
    },
}, {
    'id': 612,
    'name': 'Haxorus',
    'type': [PokemonType.Dragon],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 243,
    'catchRate': 45,
    'base': {
        'hitpoints': 76,
        'attack': 147,
        'specialAttack': 60,
        'defense': 90,
        'specialDefense': 70,
        'speed': 97,
    },
}, {
    'id': 613,
    'name': 'Cubchoo',
    'type': [PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Cubchoo', 'Beartic', 37)],
    'base': {
        'hitpoints': 55,
        'attack': 70,
        'specialAttack': 60,
        'defense': 40,
        'specialDefense': 40,
        'speed': 40,
    },
}, {
    'id': 614,
    'name': 'Beartic',
    'type': [PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 177,
    'catchRate': 60,
    'base': {
        'hitpoints': 95,
        'attack': 130,
        'specialAttack': 70,
        'defense': 80,
        'specialDefense': 80,
        'speed': 50,
    },
}, {
    'id': 615,
    'name': 'Cryogonal',
    'type': [PokemonType.Ice],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 180,
    'catchRate': 25,
    'base': {
        'hitpoints': 80,
        'attack': 50,
        'specialAttack': 95,
        'defense': 50,
        'specialDefense': 135,
        'speed': 105,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 616,
    'name': 'Shelmet',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 200,
    'evolutions': [new StoneEvolution('Shelmet', 'Accelgor', GameConstants.StoneType.Linking_cord)],
    'base': {
        'hitpoints': 50,
        'attack': 40,
        'specialAttack': 40,
        'defense': 85,
        'specialDefense': 65,
        'speed': 25,
    },
}, {
    'id': 617,
    'name': 'Accelgor',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 75,
    'base': {
        'hitpoints': 80,
        'attack': 70,
        'specialAttack': 100,
        'defense': 40,
        'specialDefense': 60,
        'speed': 145,
    },
}, {
    'id': 618,
    'name': 'Stunfisk',
    'type': [PokemonType.Ground, PokemonType.Electric],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'catchRate': 75,
    'base': {
        'hitpoints': 109,
        'attack': 66,
        'specialAttack': 81,
        'defense': 84,
        'specialDefense': 99,
        'speed': 32,
    },
}, {
    'id': 618.1,
    'name': 'Galarian Stunfisk',
    'nativeRegion': GameConstants.Region.galar,
    'type': [PokemonType.Ground, PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'catchRate': 75,
    'base': {
        'hitpoints': 109,
        'attack': 81,
        'specialAttack': 66,
        'defense': 99,
        'specialDefense': 84,
        'speed': 32,
    },
}, {
    'id': 619,
    'name': 'Mienfoo',
    'type': [PokemonType.Fighting],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 70,
    'catchRate': 180,
    'evolutions': [new LevelEvolution('Mienfoo', 'Mienshao', 50)],
    'base': {
        'hitpoints': 45,
        'attack': 85,
        'specialAttack': 55,
        'defense': 50,
        'specialDefense': 50,
        'speed': 65,
    },
}, {
    'id': 620,
    'name': 'Mienshao',
    'type': [PokemonType.Fighting],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 179,
    'catchRate': 45,
    'base': {
        'hitpoints': 65,
        'attack': 125,
        'specialAttack': 95,
        'defense': 60,
        'specialDefense': 60,
        'speed': 105,
    },
}, {
    'id': 621,
    'name': 'Druddigon',
    'type': [PokemonType.Dragon],
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 170,
    'catchRate': 45,
    'base': {
        'hitpoints': 77,
        'attack': 120,
        'specialAttack': 60,
        'defense': 90,
        'specialDefense': 90,
        'speed': 48,
    },
}, {
    'id': 622,
    'name': 'Golett',
    'type': [PokemonType.Ground, PokemonType.Ghost],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Golett', 'Golurk', 43)],
    'base': {
        'hitpoints': 59,
        'attack': 74,
        'specialAttack': 35,
        'defense': 50,
        'specialDefense': 50,
        'speed': 35,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 623,
    'name': 'Golurk',
    'type': [PokemonType.Ground, PokemonType.Ghost],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 169,
    'catchRate': 90,
    'base': {
        'hitpoints': 89,
        'attack': 124,
        'specialAttack': 55,
        'defense': 80,
        'specialDefense': 80,
        'speed': 55,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 624,
    'name': 'Pawniard',
    'type': [PokemonType.Dark, PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 68,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Pawniard', 'Bisharp', 52)],
    'base': {
        'hitpoints': 45,
        'attack': 85,
        'specialAttack': 40,
        'defense': 70,
        'specialDefense': 40,
        'speed': 60,
    },
}, {
    'id': 625,
    'name': 'Bisharp',
    'type': [PokemonType.Dark, PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'catchRate': 45,
    'base': {
        'hitpoints': 65,
        'attack': 125,
        'specialAttack': 60,
        'defense': 100,
        'specialDefense': 70,
        'speed': 70,
    },
}, {
    'id': 626,
    'name': 'Bouffalant',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'catchRate': 45,
    'base': {
        'hitpoints': 95,
        'attack': 110,
        'specialAttack': 40,
        'defense': 95,
        'specialDefense': 95,
        'speed': 55,
    },
}, {
    'id': 627,
    'name': 'Rufflet',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 70,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Rufflet', 'Braviary', 54)],
    'base': {
        'hitpoints': 70,
        'attack': 83,
        'specialAttack': 37,
        'defense': 50,
        'specialDefense': 50,
        'speed': 60,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 628,
    'name': 'Braviary',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 179,
    'catchRate': 60,
    'base': {
        'hitpoints': 100,
        'attack': 123,
        'specialAttack': 57,
        'defense': 75,
        'specialDefense': 75,
        'speed': 80,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 629,
    'name': 'Vullaby',
    'type': [PokemonType.Dark, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 74,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Vullaby', 'Mandibuzz', 54)],
    'base': {
        'hitpoints': 70,
        'attack': 55,
        'specialAttack': 45,
        'defense': 75,
        'specialDefense': 65,
        'speed': 60,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 630,
    'name': 'Mandibuzz',
    'type': [PokemonType.Dark, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 179,
    'catchRate': 60,
    'base': {
        'hitpoints': 110,
        'attack': 65,
        'specialAttack': 55,
        'defense': 105,
        'specialDefense': 95,
        'speed': 80,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 631,
    'name': 'Heatmor',
    'type': [PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 169,
    'catchRate': 90,
    'base': {
        'hitpoints': 85,
        'attack': 97,
        'specialAttack': 105,
        'defense': 66,
        'specialDefense': 66,
        'speed': 65,
    },
}, {
    'id': 632,
    'name': 'Durant',
    'type': [PokemonType.Bug, PokemonType.Steel],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 169,
    'catchRate': 90,
    'base': {
        'hitpoints': 58,
        'attack': 109,
        'specialAttack': 48,
        'defense': 112,
        'specialDefense': 48,
        'speed': 109,
    },
}, {
    'id': 633,
    'name': 'Deino',
    'type': [PokemonType.Dark, PokemonType.Dragon],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 60,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Deino', 'Zweilous', 50)],
    'base': {
        'hitpoints': 52,
        'attack': 65,
        'specialAttack': 45,
        'defense': 50,
        'specialDefense': 50,
        'speed': 38,
    },
}, {
    'id': 634,
    'name': 'Zweilous',
    'type': [PokemonType.Dark, PokemonType.Dragon],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 147,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Zweilous', 'Hydreigon', 64)],
    'base': {
        'hitpoints': 72,
        'attack': 85,
        'specialAttack': 65,
        'defense': 70,
        'specialDefense': 70,
        'speed': 58,
    },
}, {
    'id': 635,
    'name': 'Hydreigon',
    'type': [PokemonType.Dark, PokemonType.Dragon],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 45,
    'base': {
        'hitpoints': 92,
        'attack': 105,
        'specialAttack': 125,
        'defense': 90,
        'specialDefense': 90,
        'speed': 98,
    },
}, {
    'id': 636,
    'name': 'Larvesta',
    'type': [PokemonType.Bug, PokemonType.Fire],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 72,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Larvesta', 'Volcarona', 59)],
    'baby': true,
    'base': {
        'hitpoints': 55,
        'attack': 85,
        'specialAttack': 50,
        'defense': 55,
        'specialDefense': 55,
        'speed': 60,
    },
}, {
    'id': 637,
    'name': 'Volcarona',
    'type': [PokemonType.Bug, PokemonType.Fire],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 248,
    'catchRate': 15,
    'base': {
        'hitpoints': 85,
        'attack': 60,
        'specialAttack': 135,
        'defense': 65,
        'specialDefense': 105,
        'speed': 100,
    },
}, {
    'id': 638,
    'name': 'Cobalion',
    'type': [PokemonType.Steel, PokemonType.Fighting],
    'eggCycles': 80,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 91,
        'attack': 90,
        'specialAttack': 90,
        'defense': 129,
        'specialDefense': 72,
        'speed': 108,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 639,
    'name': 'Terrakion',
    'type': [PokemonType.Rock, PokemonType.Fighting],
    'eggCycles': 80,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 91,
        'attack': 129,
        'specialAttack': 72,
        'defense': 90,
        'specialDefense': 90,
        'speed': 108,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 640,
    'name': 'Virizion',
    'type': [PokemonType.Grass, PokemonType.Fighting],
    'eggCycles': 80,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 91,
        'attack': 90,
        'specialAttack': 90,
        'defense': 72,
        'specialDefense': 129,
        'speed': 108,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 641,
    'name': 'Tornadus',
    'type': [PokemonType.Flying],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 79,
        'attack': 115,
        'specialAttack': 125,
        'defense': 70,
        'specialDefense': 80,
        'speed': 111,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 641.1,
    'name': 'Tornadus (Therian)',
    'type': [PokemonType.Flying],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 79,
        'attack': 100,
        'specialAttack': 110,
        'defense': 80,
        'specialDefense': 90,
        'speed': 121,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 642,
    'name': 'Thundurus',
    'type': [PokemonType.Electric, PokemonType.Flying],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 79,
        'attack': 115,
        'specialAttack': 125,
        'defense': 70,
        'specialDefense': 80,
        'speed': 111,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 642.1,
    'name': 'Thundurus (Therian)',
    'type': [PokemonType.Electric, PokemonType.Flying],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 79,
        'attack': 105,
        'specialAttack': 145,
        'defense': 70,
        'specialDefense': 80,
        'speed': 101,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 643,
    'name': 'Reshiram',
    'type': [PokemonType.Dragon, PokemonType.Fire],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 306,
    'catchRate': 3,
    'base': {
        'hitpoints': 100,
        'attack': 120,
        'specialAttack': 150,
        'defense': 100,
        'specialDefense': 120,
        'speed': 90,
    },
    'heldItem': { type: ItemType.item, id: 'White_DNA' },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 644,
    'name': 'Zekrom',
    'type': [PokemonType.Dragon, PokemonType.Electric],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 306,
    'catchRate': 3,
    'base': {
        'hitpoints': 100,
        'attack': 150,
        'specialAttack': 120,
        'defense': 120,
        'specialDefense': 100,
        'speed': 90,
    },
    'heldItem': { type: ItemType.item, id: 'Black_DNA' },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 645,
    'name': 'Landorus',
    'type': [PokemonType.Ground, PokemonType.Flying],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 89,
        'attack': 125,
        'specialAttack': 115,
        'defense': 90,
        'specialDefense': 80,
        'speed': 101,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 645.1,
    'name': 'Landorus (Therian)',
    'type': [PokemonType.Ground, PokemonType.Flying],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 89,
        'attack': 145,
        'specialAttack': 105,
        'defense': 90,
        'specialDefense': 80,
        'speed': 91,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 646,
    'name': 'Kyurem',
    'type': [PokemonType.Dragon, PokemonType.Ice],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 297,
    'catchRate': 3,
    'evolutions': [
        new StoneEvolution('Kyurem', 'Kyurem (Black)', GameConstants.StoneType.Black_DNA),
        new StoneEvolution('Kyurem', 'Kyurem (White)', GameConstants.StoneType.White_DNA),
    ],
    'base': {
        'hitpoints': 125,
        'attack': 130,
        'specialAttack': 130,
        'defense': 90,
        'specialDefense': 90,
        'speed': 95,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 646.1,
    'name': 'Kyurem (White)',
    'type': [PokemonType.Dragon, PokemonType.Ice],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 297,
    'catchRate': 3,
    'base': {
        'hitpoints': 125,
        'attack': 120,
        'specialAttack': 170,
        'defense': 90,
        'specialDefense': 100,
        'speed': 95,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 646.2,
    'name': 'Kyurem (Black)',
    'type': [PokemonType.Dragon, PokemonType.Ice],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 297,
    'catchRate': 3,
    'base': {
        'hitpoints': 125,
        'attack': 170,
        'specialAttack': 120,
        'defense': 100,
        'specialDefense': 90,
        'speed': 95,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 647,
    'name': 'Keldeo',
    'type': [PokemonType.Water, PokemonType.Fighting],
    'eggCycles': 80,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 91,
        'attack': 72,
        'specialAttack': 129,
        'defense': 90,
        'specialDefense': 90,
        'speed': 108,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 647.1,
    'name': 'Keldeo (Resolute)',
    'type': [PokemonType.Water, PokemonType.Fighting],
    'eggCycles': 80,
    'levelType': LevelType.slow,
    'exp': 261,
    'catchRate': 3,
    'base': {
        'hitpoints': 91,
        'attack': 72,
        'specialAttack': 129,
        'defense': 90,
        'specialDefense': 90,
        'speed': 108,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 648,
    'name': 'Meloetta (Aria)',
    'type': [PokemonType.Normal, PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 100,
        'attack': 77,
        'specialAttack': 128,
        'defense': 77,
        'specialDefense': 128,
        'speed': 90,
    },
    'heldItem': { type: ItemType.underground, id: 'Star Piece' },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 648.1,
    'name': 'Meloetta (Pirouette)',
    'type': [PokemonType.Normal, PokemonType.Fighting],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 100,
        'attack': 128,
        'specialAttack': 77,
        'defense': 90,
        'specialDefense': 77,
        'speed': 128,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 649,
    'name': 'Genesect',
    'type': [PokemonType.Bug, PokemonType.Steel],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 71,
        'attack': 120,
        'specialAttack': 120,
        'defense': 95,
        'specialDefense': 95,
        'speed': 99,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 650,
    'name': 'Chespin',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 63,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Chespin', 'Quilladin', 16)],
    'base': {
        'hitpoints': 56,
        'attack': 61,
        'specialAttack': 48,
        'defense': 65,
        'specialDefense': 45,
        'speed': 38,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 651,
    'name': 'Quilladin',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Quilladin', 'Chesnaught', 36)],
    'base': {
        'hitpoints': 61,
        'attack': 78,
        'specialAttack': 56,
        'defense': 95,
        'specialDefense': 58,
        'speed': 57,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 652,
    'name': 'Chesnaught',
    'type': [PokemonType.Grass, PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'catchRate': 45,
    'base': {
        'hitpoints': 88,
        'attack': 107,
        'specialAttack': 74,
        'defense': 122,
        'specialDefense': 75,
        'speed': 64,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 653,
    'name': 'Fennekin',
    'type': [PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 61,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Fennekin', 'Braixen', 16)],
    'base': {
        'hitpoints': 40,
        'attack': 45,
        'specialAttack': 62,
        'defense': 40,
        'specialDefense': 60,
        'speed': 60,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 654,
    'name': 'Braixen',
    'type': [PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 143,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Braixen', 'Delphox', 36)],
    'base': {
        'hitpoints': 59,
        'attack': 59,
        'specialAttack': 90,
        'defense': 58,
        'specialDefense': 70,
        'speed': 73,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 655,
    'name': 'Delphox',
    'type': [PokemonType.Fire, PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 240,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 69,
        'specialAttack': 114,
        'defense': 72,
        'specialDefense': 100,
        'speed': 104,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 656,
    'name': 'Froakie',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 63,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Froakie', 'Frogadier', 16)],
    'base': {
        'hitpoints': 41,
        'attack': 56,
        'specialAttack': 62,
        'defense': 40,
        'specialDefense': 44,
        'speed': 71,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 657,
    'name': 'Frogadier',
    'type': [PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 142,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Frogadier', 'Greninja', 36)],
    'base': {
        'hitpoints': 54,
        'attack': 63,
        'specialAttack': 83,
        'defense': 52,
        'specialDefense': 56,
        'speed': 97,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 658,
    'name': 'Greninja',
    'type': [PokemonType.Water, PokemonType.Dark],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'catchRate': 45,
    'base': {
        'hitpoints': 72,
        'attack': 95,
        'specialAttack': 103,
        'defense': 67,
        'specialDefense': 71,
        'speed': 122,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 658.01,
    'name': 'Ash-Greninja',
    'type': [PokemonType.Water, PokemonType.Dark],
    'eggCycles': 45,
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'catchRate': 45,
    'base': {
        'hitpoints': 72,
        'attack': 145,
        'specialAttack': 153,
        'defense': 67,
        'specialDefense': 71,
        'speed': 132,
    },
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 659,
    'name': 'Bunnelby',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 47,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Bunnelby', 'Diggersby', 20)],
    'base': {
        'hitpoints': 38,
        'attack': 36,
        'specialAttack': 32,
        'defense': 38,
        'specialDefense': 36,
        'speed': 57,
    },
}, {
    'id': 660,
    'name': 'Diggersby',
    'type': [PokemonType.Normal, PokemonType.Ground],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 148,
    'catchRate': 127,
    'base': {
        'hitpoints': 85,
        'attack': 56,
        'specialAttack': 50,
        'defense': 77,
        'specialDefense': 77,
        'speed': 78,
    },
}, {
    'id': 661,
    'name': 'Fletchling',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 56,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Fletchling', 'Fletchinder', 17)],
    'base': {
        'hitpoints': 45,
        'attack': 50,
        'specialAttack': 40,
        'defense': 43,
        'specialDefense': 38,
        'speed': 62,
    },
}, {
    'id': 662,
    'name': 'Fletchinder',
    'type': [PokemonType.Fire, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 134,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Fletchinder', 'Talonflame', 35)],
    'base': {
        'hitpoints': 62,
        'attack': 73,
        'specialAttack': 56,
        'defense': 55,
        'specialDefense': 52,
        'speed': 84,
    },
}, {
    'id': 663,
    'name': 'Talonflame',
    'type': [PokemonType.Fire, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 175,
    'catchRate': 45,
    'base': {
        'hitpoints': 78,
        'attack': 81,
        'specialAttack': 74,
        'defense': 71,
        'specialDefense': 69,
        'speed': 126,
    },
}, {
    'id': 664,
    'name': 'Scatterbug',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 40,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Scatterbug', 'Spewpa', 9)],
    'base': {
        'hitpoints': 38,
        'attack': 35,
        'specialAttack': 27,
        'defense': 40,
        'specialDefense': 25,
        'speed': 35,
    },
}, {
    'id': 665,
    'name': 'Spewpa',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 75,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Spewpa', 'Vivillon (Meadow)', 12)],
    'base': {
        'hitpoints': 45,
        'attack': 22,
        'specialAttack': 27,
        'defense': 60,
        'specialDefense': 30,
        'speed': 29,
    },
}, {
    'id': 666,
    'name': 'Vivillon (Meadow)',
    'type': [PokemonType.Bug, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 185,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 52,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 50,
        'speed': 89,
    },
}, {
    'id': 666.01,
    'name': 'Vivillon (Poké Ball)',
    'type': [PokemonType.Bug, PokemonType.Flying],
    // Boosted to match standard Vivillon (Meadow)
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 185,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 52,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 50,
        'speed': 89,
    },
}, {
    'id': 666.02,
    'name': 'Vivillon (Polar)',
    'type': [PokemonType.Bug, PokemonType.Flying],
    // Boosted to match standard Vivillon (Meadow)
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 185,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 52,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 50,
        'speed': 89,
    },
}, {
    'id': 666.03,
    'name': 'Vivillon (Tundra)',
    'type': [PokemonType.Bug, PokemonType.Flying],
    // Boosted to match standard Vivillon (Meadow)
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 185,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 52,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 50,
        'speed': 89,
    },
}, {
    'id': 666.04,
    'name': 'Vivillon (Continental)',
    'type': [PokemonType.Bug, PokemonType.Flying],
    // Boosted to match standard Vivillon (Meadow)
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 185,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 52,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 50,
        'speed': 89,
    },
}, {
    'id': 666.05,
    'name': 'Vivillon (Garden)',
    'type': [PokemonType.Bug, PokemonType.Flying],
    // Boosted to match standard Vivillon (Meadow)
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 185,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 52,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 50,
        'speed': 89,
    },
}, {
    'id': 666.06,
    'name': 'Vivillon (Elegant)',
    'type': [PokemonType.Bug, PokemonType.Flying],
    // Boosted to match standard Vivillon (Meadow)
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 185,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 52,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 50,
        'speed': 89,
    },
}, {
    'id': 666.07,
    'name': 'Vivillon (Icy Snow)',
    'type': [PokemonType.Bug, PokemonType.Flying],
    // Boosted to match standard Vivillon (Meadow)
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 185,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 52,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 50,
        'speed': 89,
    },
}, {
    'id': 666.08,
    'name': 'Vivillon (Modern)',
    'type': [PokemonType.Bug, PokemonType.Flying],
    // Boosted to match standard Vivillon (Meadow)
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 185,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 52,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 50,
        'speed': 89,
    },
}, {
    'id': 666.09,
    'name': 'Vivillon (Marine)',
    'type': [PokemonType.Bug, PokemonType.Flying],
    // Boosted to match standard Vivillon (Meadow)
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 185,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 52,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 50,
        'speed': 89,
    },
}, {
    'id': 666.10,
    'name': 'Vivillon (Archipelago)',
    'type': [PokemonType.Bug, PokemonType.Flying],
    // Boosted to match standard Vivillon (Meadow)
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 185,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 52,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 50,
        'speed': 89,
    },
}, {
    'id': 666.11,
    'name': 'Vivillon (High Plains)',
    'type': [PokemonType.Bug, PokemonType.Flying],
    // Boosted to match standard Vivillon (Meadow)
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 185,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 52,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 50,
        'speed': 89,
    },
}, {
    'id': 666.12,
    'name': 'Vivillon (Sandstorm)',
    'type': [PokemonType.Bug, PokemonType.Flying],
    // Boosted to match standard Vivillon (Meadow)
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 185,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 52,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 50,
        'speed': 89,
    },
}, {
    'id': 666.13,
    'name': 'Vivillon (River)',
    'type': [PokemonType.Bug, PokemonType.Flying],
    // Boosted to match standard Vivillon (Meadow)
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 185,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 52,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 50,
        'speed': 89,
    },
}, {
    'id': 666.14,
    'name': 'Vivillon (Monsoon)',
    'type': [PokemonType.Bug, PokemonType.Flying],
    // Boosted to match standard Vivillon (Meadow)
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 185,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 52,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 50,
        'speed': 89,
    },
}, {
    'id': 666.15,
    'name': 'Vivillon (Savanna)',
    'type': [PokemonType.Bug, PokemonType.Flying],
    // Boosted to match standard Vivillon (Meadow)
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 185,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 52,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 50,
        'speed': 89,
    },
}, {
    'id': 666.16,
    'name': 'Vivillon (Sun)',
    'type': [PokemonType.Bug, PokemonType.Flying],
    // Boosted to match standard Vivillon (Meadow)
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 185,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 52,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 50,
        'speed': 89,
    },
}, {
    'id': 666.17,
    'name': 'Vivillon (Ocean)',
    'type': [PokemonType.Bug, PokemonType.Flying],
    // Boosted to match standard Vivillon (Meadow)
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 185,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 52,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 50,
        'speed': 89,
    },
}, {
    'id': 666.18,
    'name': 'Vivillon (Jungle)',
    'type': [PokemonType.Bug, PokemonType.Flying],
    // Boosted to match standard Vivillon (Meadow)
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 185,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 52,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 50,
        'speed': 89,
    },
}, {
    'id': 666.19,
    'name': 'Vivillon (Fancy)',
    'type': [PokemonType.Bug, PokemonType.Flying],
    // Boosted to match standard Vivillon (Meadow)
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 185,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 52,
        'specialAttack': 90,
        'defense': 50,
        'specialDefense': 50,
        'speed': 89,
    },
}, {
    'id': 667,
    'name': 'Litleo',
    'type': [PokemonType.Fire, PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 74,
    'catchRate': 220,
    'evolutions': [new LevelEvolution('Litleo', 'Pyroar', 35)],
    'base': {
        'hitpoints': 62,
        'attack': 50,
        'specialAttack': 73,
        'defense': 58,
        'specialDefense': 54,
        'speed': 72,
    },
    'gender': {
        'femaleRatio': 0.875,
    },
}, {
    'id': 668,
    'name': 'Pyroar',
    'type': [PokemonType.Fire, PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 177,
    'catchRate': 65,
    'base': {
        'hitpoints': 86,
        'attack': 68,
        'specialAttack': 109,
        'defense': 72,
        'specialDefense': 66,
        'speed': 106,
    },
    'gender': {
        'femaleRatio': 0.875,
        'visualDifference': true,
    },
}, {
    'id': 669,
    'name': 'Flabébé (Red)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 225,
    'evolutions': [new LevelEvolution('Flabébé (Red)', 'Floette (Red)', 19)],
    'base': {
        'hitpoints': 44,
        'attack': 38,
        'specialAttack': 61,
        'defense': 39,
        'specialDefense': 79,
        'speed': 42,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 669.01,
    'name': 'Flabébé (Yellow)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 225,
    'evolutions': [new LevelEvolution('Flabébé (Yellow)', 'Floette (Yellow)', 19)],
    'base': {
        'hitpoints': 44,
        'attack': 38,
        'specialAttack': 61,
        'defense': 39,
        'specialDefense': 79,
        'speed': 42,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 669.02,
    'name': 'Flabébé (Blue)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 225,
    'evolutions': [new LevelEvolution('Flabébé (Blue)', 'Floette (Blue)', 19)],
    'base': {
        'hitpoints': 44,
        'attack': 38,
        'specialAttack': 61,
        'defense': 39,
        'specialDefense': 79,
        'speed': 42,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 669.03,
    'name': 'Flabébé (Orange)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 225,
    'evolutions': [new LevelEvolution('Flabébé (Orange)', 'Floette (Orange)', 19)],
    'base': {
        'hitpoints': 44,
        'attack': 38,
        'specialAttack': 61,
        'defense': 39,
        'specialDefense': 79,
        'speed': 42,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 669.04,
    'name': 'Flabébé (White)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 225,
    'evolutions': [new LevelEvolution('Flabébé (White)', 'Floette (White)', 19)],
    'base': {
        'hitpoints': 44,
        'attack': 38,
        'specialAttack': 61,
        'defense': 39,
        'specialDefense': 79,
        'speed': 42,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 670,
    'name': 'Floette (Red)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 130,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Floette (Red)', 'Florges (Red)', GameConstants.StoneType.Shiny_stone)],
    'base': {
        'hitpoints': 54,
        'attack': 45,
        'specialAttack': 75,
        'defense': 47,
        'specialDefense': 98,
        'speed': 52,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 670.01,
    'name': 'Floette (Yellow)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 130,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Floette (Yellow)', 'Florges (Yellow)', GameConstants.StoneType.Shiny_stone)],
    'base': {
        'hitpoints': 54,
        'attack': 45,
        'specialAttack': 75,
        'defense': 47,
        'specialDefense': 98,
        'speed': 52,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 670.02,
    'name': 'Floette (Blue)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 130,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Floette (Blue)', 'Florges (Blue)', GameConstants.StoneType.Shiny_stone)],
    'base': {
        'hitpoints': 54,
        'attack': 45,
        'specialAttack': 75,
        'defense': 47,
        'specialDefense': 98,
        'speed': 52,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 670.03,
    'name': 'Floette (Orange)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 130,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Floette (Orange)', 'Florges (Orange)', GameConstants.StoneType.Shiny_stone)],
    'base': {
        'hitpoints': 54,
        'attack': 45,
        'specialAttack': 75,
        'defense': 47,
        'specialDefense': 98,
        'speed': 52,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 670.04,
    'name': 'Floette (White)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 130,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Floette (White)', 'Florges (White)', GameConstants.StoneType.Shiny_stone)],
    'base': {
        'hitpoints': 54,
        'attack': 45,
        'specialAttack': 75,
        'defense': 47,
        'specialDefense': 98,
        'speed': 52,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 670.05,
    'name': 'Floette (Eternal)',
    'type': [PokemonType.Fairy],
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 130,
    'catchRate': 120,
    'base': {
        'hitpoints': 74,
        'attack': 65,
        'specialAttack': 125,
        'defense': 67,
        'specialDefense': 128,
        'speed': 92,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 671,
    'name': 'Florges (Red)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 248,
    'catchRate': 45,
    'base': {
        'hitpoints': 78,
        'attack': 65,
        'specialAttack': 112,
        'defense': 68,
        'specialDefense': 154,
        'speed': 75,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 671.01,
    'name': 'Florges (Yellow)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 248,
    'catchRate': 45,
    'base': {
        'hitpoints': 78,
        'attack': 65,
        'specialAttack': 112,
        'defense': 68,
        'specialDefense': 154,
        'speed': 75,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 671.02,
    'name': 'Florges (Blue)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 248,
    'catchRate': 45,
    'base': {
        'hitpoints': 78,
        'attack': 65,
        'specialAttack': 112,
        'defense': 68,
        'specialDefense': 154,
        'speed': 75,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 671.03,
    'name': 'Florges (Orange)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 248,
    'catchRate': 45,
    'base': {
        'hitpoints': 78,
        'attack': 65,
        'specialAttack': 112,
        'defense': 68,
        'specialDefense': 154,
        'speed': 75,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 671.04,
    'name': 'Florges (White)',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 248,
    'catchRate': 45,
    'base': {
        'hitpoints': 78,
        'attack': 65,
        'specialAttack': 112,
        'defense': 68,
        'specialDefense': 154,
        'speed': 75,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 672,
    'name': 'Skiddo',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 70,
    'catchRate': 200,
    'evolutions': [new LevelEvolution('Skiddo', 'Gogoat', 32)],
    'base': {
        'hitpoints': 66,
        'attack': 65,
        'specialAttack': 62,
        'defense': 48,
        'specialDefense': 57,
        'speed': 52,
    },
}, {
    'id': 673,
    'name': 'Gogoat',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 186,
    'catchRate': 45,
    'base': {
        'hitpoints': 123,
        'attack': 100,
        'specialAttack': 97,
        'defense': 62,
        'specialDefense': 81,
        'speed': 68,
    },
}, {
    'id': 674,
    'name': 'Pancham',
    'type': [PokemonType.Fighting],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 70,
    'catchRate': 220,
    'evolutions': [new LevelEvolution('Pancham', 'Pangoro', 32)],
    'base': {
        'hitpoints': 67,
        'attack': 82,
        'specialAttack': 46,
        'defense': 62,
        'specialDefense': 48,
        'speed': 43,
    },
}, {
    'id': 675,
    'name': 'Pangoro',
    'type': [PokemonType.Fighting, PokemonType.Dark],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 65,
    'base': {
        'hitpoints': 95,
        'attack': 124,
        'specialAttack': 69,
        'defense': 78,
        'specialDefense': 71,
        'speed': 58,
    },
}, {
    'id': 676,
    'name': 'Furfrou',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'catchRate': 160,
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 65,
        'defense': 60,
        'specialDefense': 90,
        'speed': 102,
    },
}, {
    'id': 676.01,
    'name': 'Furfrou (Heart)',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'catchRate': 160,
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 65,
        'defense': 60,
        'specialDefense': 90,
        'speed': 102,
    },
}, {
    'id': 676.02,
    'name': 'Furfrou (Star)',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'catchRate': 160,
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 65,
        'defense': 60,
        'specialDefense': 90,
        'speed': 102,
    },
}, {
    'id': 676.03,
    'name': 'Furfrou (Diamond)',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'catchRate': 160,
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 65,
        'defense': 60,
        'specialDefense': 90,
        'speed': 102,
    },
}, {
    'id': 676.04,
    'name': 'Furfrou (Debutante)',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'catchRate': 160,
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 65,
        'defense': 60,
        'specialDefense': 90,
        'speed': 102,
    },
}, {
    'id': 676.05,
    'name': 'Furfrou (Matron)',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'catchRate': 160,
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 65,
        'defense': 60,
        'specialDefense': 90,
        'speed': 102,
    },
}, {
    'id': 676.06,
    'name': 'Furfrou (Dandy)',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'catchRate': 160,
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 65,
        'defense': 60,
        'specialDefense': 90,
        'speed': 102,
    },
}, {
    'id': 676.07,
    'name': 'Furfrou (La Reine)',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'catchRate': 160,
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 65,
        'defense': 60,
        'specialDefense': 90,
        'speed': 102,
    },
}, {
    'id': 676.08,
    'name': 'Furfrou (Kabuki)',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'catchRate': 160,
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 65,
        'defense': 60,
        'specialDefense': 90,
        'speed': 102,
    },
}, {
    'id': 676.09,
    'name': 'Furfrou (Pharaoh)',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'catchRate': 160,
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 65,
        'defense': 60,
        'specialDefense': 90,
        'speed': 102,
    },
}, {
    'id': 677,
    'name': 'Espurr',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 71,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Espurr', 'Meowstic', 25)],
    'base': {
        'hitpoints': 62,
        'attack': 48,
        'specialAttack': 63,
        'defense': 54,
        'specialDefense': 60,
        'speed': 68,
    },
}, {
    'id': 678,
    'name': 'Meowstic',
    'type': [PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 163,
    'catchRate': 75,
    'base': {
        'hitpoints': 74,
        'attack': 48,
        'specialAttack': 83,
        'defense': 76,
        'specialDefense': 81,
        'speed': 104,
    },
    'gender': {
        'visualDifference': true,
    },
}, {
    'id': 679,
    'name': 'Honedge',
    'type': [PokemonType.Steel, PokemonType.Ghost],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 65,
    'catchRate': 180,
    'evolutions': [new LevelEvolution('Honedge', 'Doublade', 35)],
    'base': {
        'hitpoints': 45,
        'attack': 80,
        'specialAttack': 35,
        'defense': 100,
        'specialDefense': 37,
        'speed': 28,
    },
}, {
    'id': 680,
    'name': 'Doublade',
    'type': [PokemonType.Steel, PokemonType.Ghost],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 157,
    'catchRate': 90,
    'evolutions': [
        new StoneEvolution('Doublade', 'Aegislash (Shield)', GameConstants.StoneType.Dusk_stone),
        new LevelEvolution('Doublade', 'Aegislash (Blade)', 4777),
    ],
    'base': {
        'hitpoints': 59,
        'attack': 110,
        'specialAttack': 45,
        'defense': 150,
        'specialDefense': 49,
        'speed': 35,
    },
}, {
    'id': 681,
    'name': 'Aegislash (Shield)',
    'type': [PokemonType.Steel, PokemonType.Ghost],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 234,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 50,
        'specialAttack': 50,
        'defense': 140,
        'specialDefense': 140,
        'speed': 60,
    },
}, {
    'id': 681.1,
    'name': 'Aegislash (Blade)',
    'type': [PokemonType.Steel, PokemonType.Ghost],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 234,
    'catchRate': 45,
    'base': {
        'hitpoints': 60,
        'attack': 140,
        'specialAttack': 140,
        'defense': 50,
        'specialDefense': 50,
        'speed': 60,
    },
}, {
    'id': 682,
    'name': 'Spritzee',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 68,
    'catchRate': 200,
    'evolutions': [new StoneEvolution('Spritzee', 'Aromatisse', GameConstants.StoneType.Sachet)],
    'base': {
        'hitpoints': 78,
        'attack': 52,
        'specialAttack': 63,
        'defense': 60,
        'specialDefense': 65,
        'speed': 23,
    },
}, {
    'id': 683,
    'name': 'Aromatisse',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 162,
    'catchRate': 140,
    'base': {
        'hitpoints': 101,
        'attack': 72,
        'specialAttack': 99,
        'defense': 72,
        'specialDefense': 89,
        'speed': 29,
    },
}, {
    'id': 684,
    'name': 'Swirlix',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 68,
    'catchRate': 200,
    'evolutions': [new StoneEvolution('Swirlix', 'Slurpuff', GameConstants.StoneType.Whipped_dream)],
    'base': {
        'hitpoints': 62,
        'attack': 48,
        'specialAttack': 59,
        'defense': 66,
        'specialDefense': 57,
        'speed': 49,
    },
}, {
    'id': 685,
    'name': 'Slurpuff',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 140,
    'base': {
        'hitpoints': 82,
        'attack': 80,
        'specialAttack': 85,
        'defense': 86,
        'specialDefense': 75,
        'speed': 72,
    },
}, {
    'id': 686,
    'name': 'Inkay',
    'type': [PokemonType.Dark, PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 58,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Inkay', 'Malamar', 30)],
    'base': {
        'hitpoints': 53,
        'attack': 54,
        'specialAttack': 37,
        'defense': 53,
        'specialDefense': 46,
        'speed': 45,
    },
}, {
    'id': 687,
    'name': 'Malamar',
    'type': [PokemonType.Dark, PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 169,
    'catchRate': 80,
    'base': {
        'hitpoints': 86,
        'attack': 92,
        'specialAttack': 68,
        'defense': 88,
        'specialDefense': 75,
        'speed': 73,
    },
}, {
    'id': 688,
    'name': 'Binacle',
    'type': [PokemonType.Rock, PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Binacle', 'Barbaracle', 39)],
    'base': {
        'hitpoints': 42,
        'attack': 52,
        'specialAttack': 39,
        'defense': 67,
        'specialDefense': 56,
        'speed': 50,
    },
}, {
    'id': 689,
    'name': 'Barbaracle',
    'type': [PokemonType.Rock, PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'catchRate': 45,
    'base': {
        'hitpoints': 72,
        'attack': 105,
        'specialAttack': 54,
        'defense': 115,
        'specialDefense': 86,
        'speed': 68,
    },
}, {
    'id': 690,
    'name': 'Skrelp',
    'type': [PokemonType.Poison, PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 64,
    'catchRate': 225,
    'evolutions': [new LevelEvolution('Skrelp', 'Dragalge', 48)],
    'base': {
        'hitpoints': 50,
        'attack': 60,
        'specialAttack': 60,
        'defense': 60,
        'specialDefense': 60,
        'speed': 30,
    },
}, {
    'id': 691,
    'name': 'Dragalge',
    'type': [PokemonType.Poison, PokemonType.Dragon],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 55,
    'base': {
        'hitpoints': 65,
        'attack': 75,
        'specialAttack': 97,
        'defense': 90,
        'specialDefense': 123,
        'speed': 44,
    },
}, {
    'id': 692,
    'name': 'Clauncher',
    'type': [PokemonType.Water],
    'eggCycles': 15,
    'levelType': LevelType.slow,
    'exp': 66,
    'catchRate': 225,
    'evolutions': [new LevelEvolution('Clauncher', 'Clawitzer', 37)],
    'base': {
        'hitpoints': 50,
        'attack': 53,
        'specialAttack': 58,
        'defense': 62,
        'specialDefense': 63,
        'speed': 44,
    },
}, {
    'id': 693,
    'name': 'Clawitzer',
    'type': [PokemonType.Water],
    'eggCycles': 15,
    'levelType': LevelType.slow,
    'exp': 100,
    'catchRate': 55,
    'base': {
        'hitpoints': 71,
        'attack': 73,
        'specialAttack': 120,
        'defense': 88,
        'specialDefense': 89,
        'speed': 59,
    },
}, {
    'id': 694,
    'name': 'Helioptile',
    'type': [PokemonType.Electric, PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 58,
    'catchRate': 190,
    'evolutions': [new StoneEvolution('Helioptile', 'Heliolisk', GameConstants.StoneType.Sun_stone)],
    'base': {
        'hitpoints': 44,
        'attack': 38,
        'specialAttack': 61,
        'defense': 33,
        'specialDefense': 43,
        'speed': 70,
    },
}, {
    'id': 695,
    'name': 'Heliolisk',
    'type': [PokemonType.Electric, PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 75,
    'base': {
        'hitpoints': 62,
        'attack': 55,
        'specialAttack': 109,
        'defense': 52,
        'specialDefense': 94,
        'speed': 109,
    },
}, {
    'id': 696,
    'name': 'Tyrunt',
    'type': [PokemonType.Rock, PokemonType.Dragon],
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 72,
    'catchRate': 45,
    'evolutions': [new DayTimedLevelEvolution('Tyrunt', 'Tyrantrum', 39)],
    'base': {
        'hitpoints': 58,
        'attack': 89,
        'specialAttack': 45,
        'defense': 77,
        'specialDefense': 45,
        'speed': 48,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 697,
    'name': 'Tyrantrum',
    'type': [PokemonType.Rock, PokemonType.Dragon],
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 182,
    'catchRate': 45,
    'base': {
        'hitpoints': 82,
        'attack': 121,
        'specialAttack': 69,
        'defense': 119,
        'specialDefense': 59,
        'speed': 71,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 698,
    'name': 'Amaura',
    'type': [PokemonType.Rock, PokemonType.Ice],
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 72,
    'catchRate': 45,
    'evolutions': [new NightTimedLevelEvolution('Amaura', 'Aurorus', 39)],
    'base': {
        'hitpoints': 77,
        'attack': 59,
        'specialAttack': 67,
        'defense': 50,
        'specialDefense': 63,
        'speed': 46,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 699,
    'name': 'Aurorus',
    'type': [PokemonType.Rock, PokemonType.Ice],
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 104,
    'catchRate': 45,
    'base': {
        'hitpoints': 123,
        'attack': 77,
        'specialAttack': 99,
        'defense': 72,
        'specialDefense': 92,
        'speed': 58,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 700,
    'name': 'Sylveon',
    'type': [PokemonType.Fairy],
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 184,
    'catchRate': 45,
    'base': {
        'hitpoints': 95,
        'attack': 65,
        'specialAttack': 110,
        'defense': 65,
        'specialDefense': 130,
        'speed': 60,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 701,
    'name': 'Hawlucha',
    'type': [PokemonType.Fighting, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'catchRate': 100,
    'base': {
        'hitpoints': 78,
        'attack': 92,
        'specialAttack': 74,
        'defense': 75,
        'specialDefense': 63,
        'speed': 118,
    },
    'heldItem': { type: ItemType.item, id: 'Kings_rock' },
}, {
    'id': 702,
    'name': 'Dedenne',
    'type': [PokemonType.Electric, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 151,
    'catchRate': 180,
    'base': {
        'hitpoints': 67,
        'attack': 58,
        'specialAttack': 81,
        'defense': 57,
        'specialDefense': 67,
        'speed': 101,
    },
}, {
    'id': 703,
    'name': 'Carbink',
    'type': [PokemonType.Rock, PokemonType.Fairy],
    'eggCycles': 25,
    'levelType': LevelType.slow,
    'exp': 100,
    'catchRate': 60,
    'base': {
        'hitpoints': 50,
        'attack': 50,
        'specialAttack': 50,
        'defense': 150,
        'specialDefense': 150,
        'speed': 50,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 704,
    'name': 'Goomy',
    'type': [PokemonType.Dragon],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 60,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Goomy', 'Sliggoo', 40)],
    'base': {
        'hitpoints': 45,
        'attack': 50,
        'specialAttack': 55,
        'defense': 35,
        'specialDefense': 75,
        'speed': 40,
    },
}, {
    'id': 705,
    'name': 'Sliggoo',
    'type': [PokemonType.Dragon],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 158,
    'catchRate': 45,
    'evolutions': [new WeatherRestrictedLevelEvolution('Sliggoo', 'Goodra', 50, [WeatherType.Rain, WeatherType.Fog, WeatherType.Thunderstorm])],
    'base': {
        'hitpoints': 68,
        'attack': 75,
        'specialAttack': 83,
        'defense': 53,
        'specialDefense': 113,
        'speed': 60,
    },
}, {
    'id': 706,
    'name': 'Goodra',
    'type': [PokemonType.Dragon],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 45,
    'base': {
        'hitpoints': 90,
        'attack': 100,
        'specialAttack': 110,
        'defense': 70,
        'specialDefense': 150,
        'speed': 80,
    },
}, {
    'id': 707,
    'name': 'Klefki',
    'type': [PokemonType.Steel, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.fast,
    'exp': 165,
    'catchRate': 75,
    'base': {
        'hitpoints': 57,
        'attack': 80,
        'specialAttack': 80,
        'defense': 91,
        'specialDefense': 87,
        'speed': 75,
    },
}, {
    'id': 708,
    'name': 'Phantump',
    'type': [PokemonType.Ghost, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 62,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Phantump', 'Trevenant', GameConstants.StoneType.Linking_cord)],
    'base': {
        'hitpoints': 43,
        'attack': 70,
        'specialAttack': 50,
        'defense': 48,
        'specialDefense': 60,
        'speed': 38,
    },
}, {
    'id': 709,
    'name': 'Trevenant',
    'type': [PokemonType.Ghost, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 60,
    'base': {
        'hitpoints': 85,
        'attack': 110,
        'specialAttack': 65,
        'defense': 76,
        'specialDefense': 82,
        'speed': 56,
    },
}, {
    'id': 710,
    'name': 'Pumpkaboo (Average)',
    'type': [PokemonType.Ghost, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 67,
    'catchRate': 120,
    'evolutions': [new StoneEvolution('Pumpkaboo (Average)', 'Gourgeist (Average)', GameConstants.StoneType.Linking_cord)],
    'base': {
        'hitpoints': 49,
        'attack': 66,
        'specialAttack': 44,
        'defense': 70,
        'specialDefense': 55,
        'speed': 51,
    },
}, {
    'id': 710.1,
    'name': 'Pumpkaboo (Small)',
    'type': [PokemonType.Ghost, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 67,
    'catchRate': 130,
    'evolutions': [new StoneEvolution('Pumpkaboo (Small)', 'Gourgeist (Small)', GameConstants.StoneType.Linking_cord)],
    'base': {
        'hitpoints': 44,
        'attack': 66,
        'specialAttack': 44,
        'defense': 70,
        'specialDefense': 55,
        'speed': 56,
    },
}, {
    'id': 710.2,
    'name': 'Pumpkaboo (Large)',
    'type': [PokemonType.Ghost, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 67,
    'catchRate': 110,
    'evolutions': [new StoneEvolution('Pumpkaboo (Large)', 'Gourgeist (Large)', GameConstants.StoneType.Linking_cord)],
    'base': {
        'hitpoints': 54,
        'attack': 66,
        'specialAttack': 44,
        'defense': 70,
        'specialDefense': 55,
        'speed': 46,
    },
}, {
    'id': 710.3,
    'name': 'Pumpkaboo (Super Size)',
    'type': [PokemonType.Ghost, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 67,
    'catchRate': 100,
    'evolutions': [new StoneEvolution('Pumpkaboo (Super Size)', 'Gourgeist (Super Size)', GameConstants.StoneType.Linking_cord)],
    'base': {
        'hitpoints': 59,
        'attack': 66,
        'specialAttack': 44,
        'defense': 70,
        'specialDefense': 55,
        'speed': 41,
    },
}, {
    'id': 711,
    'name': 'Gourgeist (Average)',
    'type': [PokemonType.Ghost, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 60,
    'base': {
        'hitpoints': 65,
        'attack': 90,
        'specialAttack': 58,
        'defense': 122,
        'specialDefense': 75,
        'speed': 84,
    },
}, {
    'id': 711.1,
    'name': 'Gourgeist (Small)',
    'type': [PokemonType.Ghost, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 65,
    'base': {
        'hitpoints': 55,
        'attack': 85,
        'specialAttack': 58,
        'defense': 122,
        'specialDefense': 75,
        'speed': 99,
    },
}, {
    'id': 711.2,
    'name': 'Gourgeist (Large)',
    'type': [PokemonType.Ghost, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 55,
    'base': {
        'hitpoints': 75,
        'attack': 95,
        'specialAttack': 58,
        'defense': 122,
        'specialDefense': 75,
        'speed': 69,
    },
}, {
    'id': 711.3,
    'name': 'Gourgeist (Super Size)',
    'type': [PokemonType.Ghost, PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 50,
    'base': {
        'hitpoints': 85,
        'attack': 100,
        'specialAttack': 58,
        'defense': 122,
        'specialDefense': 75,
        'speed': 54,
    },
}, {
    'id': 712,
    'name': 'Bergmite',
    'type': [PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Bergmite', 'Avalugg', 37)],
    'base': {
        'hitpoints': 55,
        'attack': 69,
        'specialAttack': 32,
        'defense': 85,
        'specialDefense': 35,
        'speed': 28,
    },
}, {
    'id': 713,
    'name': 'Avalugg',
    'type': [PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 180,
    'catchRate': 55,
    'base': {
        'hitpoints': 95,
        'attack': 117,
        'specialAttack': 44,
        'defense': 184,
        'specialDefense': 46,
        'speed': 28,
    },
}, {
    'id': 714,
    'name': 'Noibat',
    'type': [PokemonType.Flying, PokemonType.Dragon],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 49,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Noibat', 'Noivern', 48)],
    'base': {
        'hitpoints': 40,
        'attack': 30,
        'specialAttack': 45,
        'defense': 35,
        'specialDefense': 40,
        'speed': 55,
    },
}, {
    'id': 715,
    'name': 'Noivern',
    'type': [PokemonType.Flying, PokemonType.Dragon],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 187,
    'catchRate': 45,
    'base': {
        'hitpoints': 85,
        'attack': 70,
        'specialAttack': 97,
        'defense': 80,
        'specialDefense': 80,
        'speed': 123,
    },
}, {
    'id': 716,
    'name': 'Xerneas',
    'type': [PokemonType.Fairy],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 306,
    'catchRate': 45,
    'base': {
        'hitpoints': 126,
        'attack': 131,
        'specialAttack': 131,
        'defense': 95,
        'specialDefense': 98,
        'speed': 99,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 717,
    'name': 'Yveltal',
    'type': [PokemonType.Dark, PokemonType.Flying],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 306,
    'catchRate': 45,
    'base': {
        'hitpoints': 126,
        'attack': 131,
        'specialAttack': 131,
        'defense': 95,
        'specialDefense': 98,
        'speed': 99,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 718,
    'name': 'Zygarde',
    'type': [PokemonType.Dragon, PokemonType.Ground],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 108,
        'attack': 100,
        'specialAttack': 81,
        'defense': 121,
        'specialDefense': 95,
        'speed': 95,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 719,
    'name': 'Diancie',
    'type': [PokemonType.Rock, PokemonType.Fairy],
    'eggCycles': 25,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 50,
        'attack': 100,
        'specialAttack': 100,
        'defense': 150,
        'specialDefense': 150,
        'speed': 50,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 720,
    'name': 'Hoopa',
    'type': [PokemonType.Psychic, PokemonType.Ghost],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 80,
        'attack': 110,
        'specialAttack': 150,
        'defense': 60,
        'specialDefense': 130,
        'speed': 70,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 721,
    'name': 'Volcanion',
    'type': [PokemonType.Fire, PokemonType.Water],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 80,
        'attack': 110,
        'specialAttack': 130,
        'defense': 120,
        'specialDefense': 90,
        'speed': 70,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 722,
    'name': 'Rowlet',
    'type': [PokemonType.Grass, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Rowlet', 'Dartrix', 17)],
    'base': {
        'hitpoints': 68,
        'attack': 55,
        'specialAttack': 50,
        'defense': 55,
        'specialDefense': 50,
        'speed': 42,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 723,
    'name': 'Dartrix',
    'type': [PokemonType.Grass, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 147,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Dartrix', 'Decidueye', 34)],
    'base': {
        'hitpoints': 78,
        'attack': 75,
        'specialAttack': 70,
        'defense': 75,
        'specialDefense': 70,
        'speed': 52,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 724,
    'name': 'Decidueye',
    'type': [PokemonType.Grass, PokemonType.Ghost],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'catchRate': 45,
    'base': {
        'hitpoints': 78,
        'attack': 107,
        'specialAttack': 100,
        'defense': 75,
        'specialDefense': 100,
        'speed': 70,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 725,
    'name': 'Litten',
    'type': [PokemonType.Fire],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Litten', 'Torracat', 17)],
    'base': {
        'hitpoints': 45,
        'attack': 65,
        'specialAttack': 60,
        'defense': 40,
        'specialDefense': 40,
        'speed': 70,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 726,
    'name': 'Torracat',
    'type': [PokemonType.Fire],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 147,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Torracat', 'Incineroar', 34)],
    'base': {
        'hitpoints': 65,
        'attack': 85,
        'specialAttack': 80,
        'defense': 50,
        'specialDefense': 50,
        'speed': 90,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 727,
    'name': 'Incineroar',
    'type': [PokemonType.Fire, PokemonType.Dark],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'catchRate': 45,
    'base': {
        'hitpoints': 95,
        'attack': 115,
        'specialAttack': 80,
        'defense': 90,
        'specialDefense': 90,
        'speed': 60,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 728,
    'name': 'Popplio',
    'type': [PokemonType.Water],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Popplio', 'Brionne', 17)],
    'base': {
        'hitpoints': 50,
        'attack': 54,
        'specialAttack': 66,
        'defense': 54,
        'specialDefense': 56,
        'speed': 40,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 729,
    'name': 'Brionne',
    'type': [PokemonType.Water],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 147,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Brionne', 'Primarina', 34)],
    'base': {
        'hitpoints': 60,
        'attack': 69,
        'specialAttack': 91,
        'defense': 69,
        'specialDefense': 81,
        'speed': 50,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 730,
    'name': 'Primarina',
    'type': [PokemonType.Water, PokemonType.Fairy],
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 239,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 74,
        'specialAttack': 126,
        'defense': 74,
        'specialDefense': 116,
        'speed': 60,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 731,
    'name': 'Pikipek',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 53,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Pikipek', 'Trumbeak', 14)],
    'base': {
        'hitpoints': 35,
        'attack': 75,
        'specialAttack': 30,
        'defense': 30,
        'specialDefense': 30,
        'speed': 65,
    },
}, {
    'id': 732,
    'name': 'Trumbeak',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 124,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Trumbeak', 'Toucannon', 28)],
    'base': {
        'hitpoints': 55,
        'attack': 85,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 50,
        'speed': 75,
    },
}, {
    'id': 733,
    'name': 'Toucannon',
    'type': [PokemonType.Normal, PokemonType.Flying],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 218,
    'catchRate': 45,
    'base': {
        'hitpoints': 80,
        'attack': 120,
        'specialAttack': 75,
        'defense': 75,
        'specialDefense': 75,
        'speed': 60,
    },
}, {
    'id': 734,
    'name': 'Yungoos',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 51,
    'catchRate': 255,
    'evolutions': [new DayTimedLevelEvolution('Yungoos', 'Gumshoos', 20)],
    'base': {
        'hitpoints': 48,
        'attack': 70,
        'specialAttack': 30,
        'defense': 30,
        'specialDefense': 30,
        'speed': 45,
    },
}, {
    'id': 735,
    'name': 'Gumshoos',
    'type': [PokemonType.Normal],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 146,
    'catchRate': 127,
    'base': {
        'hitpoints': 88,
        'attack': 110,
        'specialAttack': 55,
        'defense': 60,
        'specialDefense': 60,
        'speed': 45,
    },
}, {
    'id': 735.01,
    'name': 'Totem Gumshoos',
    'type': [PokemonType.Normal],
    'eggCycles': 23,
    'levelType': LevelType.mediumfast,
    'exp': 146,
    'catchRate': 127,
    'base': {
        'hitpoints': 88,
        'attack': 110,
        'specialAttack': 55,
        'defense': 70,
        'specialDefense': 60,
        'speed': 45,
    },
}, {
    'id': 736,
    'name': 'Grubbin',
    'type': [PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 60,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Grubbin', 'Charjabug', 20)],
    'base': {
        'hitpoints': 47,
        'attack': 62,
        'specialAttack': 55,
        'defense': 45,
        'specialDefense': 45,
        'speed': 46,
    },
}, {
    'id': 737,
    'name': 'Charjabug',
    'type': [PokemonType.Bug, PokemonType.Electric],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 140,
    'catchRate': 120,
    'evolutions': [
        new DungeonRestrictedLevelEvolution('Mt. Coronet North', 'Charjabug', 'Vikavolt', 20),
        new DungeonRestrictedLevelEvolution('Mt. Coronet South', 'Charjabug', 'Vikavolt', 20),
        new DungeonRestrictedLevelEvolution('Chargestone Cave', 'Charjabug', 'Vikavolt', 20),
        new DungeonRestrictedLevelEvolution('Kalos Power Plant', 'Charjabug', 'Vikavolt', 20),
        new DungeonRestrictedLevelEvolution('Vast Poni Canyon', 'Charjabug', 'Vikavolt', 20),
        new RegionStoneEvolution(galarOnly, 'Charjabug', 'Vikavolt', GameConstants.StoneType.Thunder_stone),
    ],
    'base': {
        'hitpoints': 57,
        'attack': 82,
        'specialAttack': 55,
        'defense': 95,
        'specialDefense': 75,
        'speed': 36,
    },
}, {
    'id': 738,
    'name': 'Vikavolt',
    'type': [PokemonType.Bug, PokemonType.Electric],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 225,
    'catchRate': 45,
    'base': {
        'hitpoints': 77,
        'attack': 70,
        'specialAttack': 145,
        'defense': 90,
        'specialDefense': 75,
        'speed': 43,
    },
}, {
    'id': 738.01,
    'name': 'Totem Vikavolt',
    'type': [PokemonType.Bug, PokemonType.Electric],
    'eggCycles': 35,
    'levelType': LevelType.mediumfast,
    'exp': 225,
    'catchRate': 45,
    'base': {
        'hitpoints': 77,
        'attack': 80,
        'specialAttack': 155,
        'defense': 100,
        'specialDefense': 85,
        'speed': 53,
    },
}, {
    'id': 739,
    'name': 'Crabrawler',
    'type': [PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 68,
    'catchRate': 225,
    'evolutions': [new DungeonRestrictedLevelEvolution('Mount Lanakila', 'Crabrawler', 'Crabominable', 20)],
    'base': {
        'hitpoints': 47,
        'attack': 82,
        'specialAttack': 42,
        'defense': 57,
        'specialDefense': 47,
        'speed': 63,
    },
}, {
    'id': 740,
    'name': 'Crabominable',
    'type': [PokemonType.Fighting, PokemonType.Ice],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 167,
    'catchRate': 60,
    'base': {
        'hitpoints': 97,
        'attack': 132,
        'specialAttack': 62,
        'defense': 77,
        'specialDefense': 67,
        'speed': 43,
    },
}, {
    'id': 741,
    'name': 'Oricorio (Baile)',
    'type': [PokemonType.Fire, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 167,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 70,
        'specialAttack': 98,
        'defense': 70,
        'specialDefense': 70,
        'speed': 93,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 741.01,
    'name': 'Oricorio (Pom-Pom)',
    'type': [PokemonType.Electric, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 167,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 70,
        'specialAttack': 98,
        'defense': 70,
        'specialDefense': 70,
        'speed': 93,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 741.02,
    'name': 'Oricorio (Pa\'u)',
    'type': [PokemonType.Psychic, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 167,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 70,
        'specialAttack': 98,
        'defense': 70,
        'specialDefense': 70,
        'speed': 93,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 741.03,
    'name': 'Oricorio (Sensu)',
    'type': [PokemonType.Ghost, PokemonType.Flying],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 167,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 70,
        'specialAttack': 98,
        'defense': 70,
        'specialDefense': 70,
        'speed': 93,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 742,
    'name': 'Cutiefly',
    'type': [PokemonType.Bug, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Cutiefly', 'Ribombee', 25)],
    'base': {
        'hitpoints': 40,
        'attack': 45,
        'specialAttack': 55,
        'defense': 40,
        'specialDefense': 40,
        'speed': 84,
    },
}, {
    'id': 743,
    'name': 'Ribombee',
    'type': [PokemonType.Bug, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 162,
    'catchRate': 75,
    'base': {
        'hitpoints': 60,
        'attack': 55,
        'specialAttack': 95,
        'defense': 60,
        'specialDefense': 70,
        'speed': 124,
    },
}, {
    'id': 743.01,
    'name': 'Totem Ribombee',
    'type': [PokemonType.Bug, PokemonType.Fairy],
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 162,
    'catchRate': 75,
    'base': {
        'hitpoints': 60,
        'attack': 75,
        'specialAttack': 115,
        'defense': 80,
        'specialDefense': 90,
        'speed': 144,
    },
}, {
    'id': 744,
    'name': 'Rockruff',
    'type': [PokemonType.Rock],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 56,
    'catchRate': 190,
    'evolutions': [
        TimeRestrictedLevelEvolution(6, 17, 'Rockruff', 'Lycanroc (Midday)', 25),
        TimeRestrictedLevelEvolution(17, 18, 'Rockruff', 'Lycanroc (Dusk)', 25),
        TimeRestrictedLevelEvolution(18, 5, 'Rockruff', 'Lycanroc (Midnight)', 25),
        TimeRestrictedLevelEvolution(5, 6, 'Rockruff', 'Lycanroc (Dusk)', 25),
    ],
    'base': {
        'hitpoints': 45,
        'attack': 65,
        'specialAttack': 30,
        'defense': 40,
        'specialDefense': 40,
        'speed': 60,
    },
}, {
    'id': 745,
    'name': 'Lycanroc (Midday)',
    'type': [PokemonType.Rock],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 170,
    'catchRate': 90,
    'base': {
        'hitpoints': 75,
        'attack': 115,
        'specialAttack': 55,
        'defense': 65,
        'specialDefense': 65,
        'speed': 112,
    },
}, {
    'id': 745.01,
    'name': 'Lycanroc (Midnight)',
    'type': [PokemonType.Rock],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 170,
    'catchRate': 90,
    'base': {
        'hitpoints': 85,
        'attack': 115,
        'specialAttack': 55,
        'defense': 75,
        'specialDefense': 75,
        'speed': 82,
    },
}, {
    'id': 745.02,
    'name': 'Lycanroc (Dusk)',
    'type': [PokemonType.Rock],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 170,
    'catchRate': 90,
    'base': {
        'hitpoints': 75,
        'attack': 117,
        'specialAttack': 55,
        'defense': 65,
        'specialDefense': 65,
        'speed': 110,
    },
}, {
    'id': 746,
    'name': 'Wishiwashi (Solo)',
    'type': [PokemonType.Water],
    'eggCycles': 15,
    'levelType': LevelType.fast,
    'exp': 61,
    'catchRate': 60,
    'evolutions': [new LevelEvolution('Wishiwashi (Solo)', 'Wishiwashi (School)', 20)],
    'base': {
        'hitpoints': 45,
        'attack': 20,
        'specialAttack': 25,
        'defense': 20,
        'specialDefense': 25,
        'speed': 40,
    },
}, {
    'id': 746.01,
    'name': 'Wishiwashi (School)',
    'type': [PokemonType.Water],
    'eggCycles': 15,
    'levelType': LevelType.fast,
    'exp': 61,
    'catchRate': 60,
    'base': {
        'hitpoints': 45,
        'attack': 140,
        'specialAttack': 140,
        'defense': 130,
        'specialDefense': 135,
        'speed': 30,
    },
}, {
    'id': 746.02,
    'name': 'Totem Wishiwashi',
    'type': [PokemonType.Water],
    'eggCycles': 23,
    'levelType': LevelType.fast,
    'exp': 61,
    'catchRate': 60,
    'base': {
        'hitpoints': 45,
        'attack': 140,
        'specialAttack': 140,
        'defense': 140,
        'specialDefense': 135,
        'speed': 30,
    },
}, {
    'id': 747,
    'name': 'Mareanie',
    'type': [PokemonType.Poison, PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Mareanie', 'Toxapex', 38)],
    'base': {
        'hitpoints': 50,
        'attack': 53,
        'specialAttack': 43,
        'defense': 62,
        'specialDefense': 52,
        'speed': 45,
    },
}, {
    'id': 748,
    'name': 'Toxapex',
    'type': [PokemonType.Poison, PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 75,
    'base': {
        'hitpoints': 50,
        'attack': 63,
        'specialAttack': 53,
        'defense': 152,
        'specialDefense': 142,
        'speed': 35,
    },
}, {
    'id': 749,
    'name': 'Mudbray',
    'type': [PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 77,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Mudbray', 'Mudsdale', 30)],
    'base': {
        'hitpoints': 70,
        'attack': 100,
        'specialAttack': 45,
        'defense': 70,
        'specialDefense': 55,
        'speed': 45,
    },
}, {
    'id': 750,
    'name': 'Mudsdale',
    'type': [PokemonType.Ground],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'catchRate': 60,
    'base': {
        'hitpoints': 100,
        'attack': 125,
        'specialAttack': 55,
        'defense': 100,
        'specialDefense': 85,
        'speed': 35,
    },
}, {
    'id': 751,
    'name': 'Dewpider',
    'type': [PokemonType.Water, PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 54,
    'catchRate': 200,
    'evolutions': [new LevelEvolution('Dewpider', 'Araquanid', 22)],
    'base': {
        'hitpoints': 38,
        'attack': 40,
        'specialAttack': 40,
        'defense': 52,
        'specialDefense': 72,
        'speed': 27,
    },
}, {
    'id': 752,
    'name': 'Araquanid',
    'type': [PokemonType.Water, PokemonType.Bug],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 159,
    'catchRate': 100,
    'base': {
        'hitpoints': 68,
        'attack': 70,
        'specialAttack': 50,
        'defense': 92,
        'specialDefense': 132,
        'speed': 42,
    },
}, {
    'id': 752.01,
    'name': 'Totem Araquanid',
    'type': [PokemonType.Water, PokemonType.Bug],
    'eggCycles': 23,
    'levelType': LevelType.mediumfast,
    'exp': 159,
    'catchRate': 100,
    'base': {
        'hitpoints': 68,
        'attack': 70,
        'specialAttack': 50,
        'defense': 92,
        'specialDefense': 132,
        'speed': 52,
    },
}, {
    'id': 753,
    'name': 'Fomantis',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 50,
    'catchRate': 190,
    'evolutions': [new DayTimedLevelEvolution('Fomantis', 'Lurantis', 34)],
    'base': {
        'hitpoints': 40,
        'attack': 55,
        'specialAttack': 50,
        'defense': 35,
        'specialDefense': 35,
        'speed': 35,
    },
}, {
    'id': 754,
    'name': 'Lurantis',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 75,
    'base': {
        'hitpoints': 70,
        'attack': 105,
        'specialAttack': 80,
        'defense': 90,
        'specialDefense': 90,
        'speed': 45,
    },
}, {
    'id': 754.01,
    'name': 'Totem Lurantis',
    'type': [PokemonType.Grass],
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 75,
    'base': {
        'hitpoints': 70,
        'attack': 105,
        'specialAttack': 80,
        'defense': 90,
        'specialDefense': 90,
        'speed': 65,
    },
}, {
    'id': 755,
    'name': 'Morelull',
    'type': [PokemonType.Grass, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 57,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Morelull', 'Shiinotic', 24)],
    'base': {
        'hitpoints': 40,
        'attack': 35,
        'specialAttack': 65,
        'defense': 55,
        'specialDefense': 75,
        'speed': 15,
    },
}, {
    'id': 756,
    'name': 'Shiinotic',
    'type': [PokemonType.Grass, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 142,
    'catchRate': 75,
    'base': {
        'hitpoints': 60,
        'attack': 45,
        'specialAttack': 90,
        'defense': 80,
        'specialDefense': 100,
        'speed': 30,
    },
}, {
    'id': 757,
    'name': 'Salandit',
    'type': [PokemonType.Poison, PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 64,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Salandit', 'Salazzle', 33)],
    'base': {
        'hitpoints': 48,
        'attack': 44,
        'specialAttack': 71,
        'defense': 40,
        'specialDefense': 40,
        'speed': 77,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 758,
    'name': 'Salazzle',
    'type': [PokemonType.Poison, PokemonType.Fire],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 45,
    'base': {
        'hitpoints': 68,
        'attack': 64,
        'specialAttack': 111,
        'defense': 60,
        'specialDefense': 60,
        'speed': 117,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 758.01,
    'name': 'Totem Salazzle',
    'type': [PokemonType.Poison, PokemonType.Fire],
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 45,
    'base': {
        'hitpoints': 68,
        'attack': 64,
        'specialAttack': 111,
        'defense': 60,
        'specialDefense': 70,
        'speed': 117,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 759,
    'name': 'Stufful',
    'type': [PokemonType.Normal, PokemonType.Fighting],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 68,
    'catchRate': 140,
    'evolutions': [new LevelEvolution('Stufful', 'Bewear', 27)],
    'base': {
        'hitpoints': 70,
        'attack': 75,
        'specialAttack': 45,
        'defense': 50,
        'specialDefense': 50,
        'speed': 50,
    },
}, {
    'id': 760,
    'name': 'Bewear',
    'type': [PokemonType.Normal, PokemonType.Fighting],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'catchRate': 70,
    'base': {
        'hitpoints': 120,
        'attack': 125,
        'specialAttack': 55,
        'defense': 80,
        'specialDefense': 60,
        'speed': 60,
    },
}, {
    'id': 761,
    'name': 'Bounsweet',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 42,
    'catchRate': 235,
    'evolutions': [new LevelEvolution('Bounsweet', 'Steenee', 18)],
    'base': {
        'hitpoints': 42,
        'attack': 30,
        'specialAttack': 30,
        'defense': 38,
        'specialDefense': 38,
        'speed': 32,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 762,
    'name': 'Steenee',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 102,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Steenee', 'Tsareena', 29)],
    'base': {
        'hitpoints': 52,
        'attack': 40,
        'specialAttack': 40,
        'defense': 48,
        'specialDefense': 48,
        'speed': 62,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 763,
    'name': 'Tsareena',
    'type': [PokemonType.Grass],
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 230,
    'catchRate': 45,
    'base': {
        'hitpoints': 72,
        'attack': 120,
        'specialAttack': 50,
        'defense': 98,
        'specialDefense': 98,
        'speed': 72,
    },
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 764,
    'name': 'Comfey',
    'type': [PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.fast,
    'exp': 170,
    'catchRate': 60,
    'base': {
        'hitpoints': 51,
        'attack': 52,
        'specialAttack': 82,
        'defense': 90,
        'specialDefense': 110,
        'speed': 100,
    },
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 765,
    'name': 'Oranguru',
    'type': [PokemonType.Normal, PokemonType.Psychic],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 172,
    'catchRate': 45,
    'base': {
        'hitpoints': 90,
        'attack': 60,
        'specialAttack': 90,
        'defense': 80,
        'specialDefense': 110,
        'speed': 60,
    },
}, {
    'id': 766,
    'name': 'Passimian',
    'type': [PokemonType.Fighting],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 172,
    'catchRate': 45,
    'base': {
        'hitpoints': 100,
        'attack': 120,
        'specialAttack': 40,
        'defense': 90,
        'specialDefense': 60,
        'speed': 80,
    },
}, {
    'id': 767,
    'name': 'Wimpod',
    'type': [PokemonType.Bug, PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 46,
    'catchRate': 90,
    'evolutions': [new LevelEvolution('Wimpod', 'Golisopod', 30)],
    'base': {
        'hitpoints': 25,
        'attack': 35,
        'specialAttack': 20,
        'defense': 40,
        'specialDefense': 30,
        'speed': 80,
    },
}, {
    'id': 768,
    'name': 'Golisopod',
    'type': [PokemonType.Bug, PokemonType.Water],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 186,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 125,
        'specialAttack': 60,
        'defense': 140,
        'specialDefense': 90,
        'speed': 40,
    },
}, {
    'id': 769,
    'name': 'Sandygast',
    'type': [PokemonType.Ghost, PokemonType.Ground],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 64,
    'catchRate': 140,
    'evolutions': [new LevelEvolution('Sandygast', 'Palossand', 42)],
    'base': {
        'hitpoints': 55,
        'attack': 55,
        'specialAttack': 70,
        'defense': 80,
        'specialDefense': 45,
        'speed': 15,
    },
}, {
    'id': 770,
    'name': 'Palossand',
    'type': [PokemonType.Ghost, PokemonType.Ground],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 168,
    'catchRate': 60,
    'base': {
        'hitpoints': 85,
        'attack': 75,
        'specialAttack': 100,
        'defense': 110,
        'specialDefense': 75,
        'speed': 35,
    },
}, {
    'id': 771,
    'name': 'Pyukumuku',
    'type': [PokemonType.Water],
    'eggCycles': 15,
    'levelType': LevelType.fast,
    'exp': 144,
    'catchRate': 60,
    'base': {
        'hitpoints': 55,
        'attack': 60,
        'specialAttack': 30,
        'defense': 130,
        'specialDefense': 130,
        'speed': 5,
    },
}, {
    'id': 772,
    'name': 'Type: Null',
    'type': [PokemonType.Normal],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 107,
    'catchRate': 3,
    'evolutions': [new StoneEvolution('Type: Null', 'Silvally', GameConstants.StoneType.Soothe_bell)],
    'base': {
        'hitpoints': 95,
        'attack': 95,
        'specialAttack': 95,
        'defense': 95,
        'specialDefense': 95,
        'speed': 59,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 773,
    'name': 'Silvally',
    'type': [PokemonType.Normal],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 257,
    'catchRate': 3,
    'base': {
        'hitpoints': 95,
        'attack': 95,
        'specialAttack': 95,
        'defense': 95,
        'specialDefense': 95,
        'speed': 95,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 774,
    'name': 'Minior (Meteor)',
    'type': [PokemonType.Rock, PokemonType.Flying],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 154,
    'catchRate': 30,
    'base': {
        'hitpoints': 60,
        'attack': 60,
        'specialAttack': 60,
        'defense': 100,
        'specialDefense': 100,
        'speed': 60,
    },
    'heldItem': { type: ItemType.underground, id: 'Star Piece' },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 774.01,
    'name': 'Minior (Blue Core)',
    'type': [PokemonType.Rock, PokemonType.Flying],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 154,
    'catchRate': 30,
    'base': {
        'hitpoints': 60,
        'attack': 100,
        'specialAttack': 100,
        'defense': 60,
        'specialDefense': 60,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 774.02,
    'name': 'Minior (Green Core)',
    'type': [PokemonType.Rock, PokemonType.Flying],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 154,
    'catchRate': 30,
    'base': {
        'hitpoints': 60,
        'attack': 100,
        'specialAttack': 100,
        'defense': 60,
        'specialDefense': 60,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 774.03,
    'name': 'Minior (Indigo Core)',
    'type': [PokemonType.Rock, PokemonType.Flying],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 154,
    'catchRate': 30,
    'base': {
        'hitpoints': 60,
        'attack': 100,
        'specialAttack': 100,
        'defense': 60,
        'specialDefense': 60,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 774.04,
    'name': 'Minior (Orange Core)',
    'type': [PokemonType.Rock, PokemonType.Flying],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 154,
    'catchRate': 30,
    'base': {
        'hitpoints': 60,
        'attack': 100,
        'specialAttack': 100,
        'defense': 60,
        'specialDefense': 60,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 774.05,
    'name': 'Minior (Red Core)',
    'type': [PokemonType.Rock, PokemonType.Flying],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 154,
    'catchRate': 30,
    'base': {
        'hitpoints': 60,
        'attack': 100,
        'specialAttack': 100,
        'defense': 60,
        'specialDefense': 60,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 774.06,
    'name': 'Minior (Violet Core)',
    'type': [PokemonType.Rock, PokemonType.Flying],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 154,
    'catchRate': 30,
    'base': {
        'hitpoints': 60,
        'attack': 100,
        'specialAttack': 100,
        'defense': 60,
        'specialDefense': 60,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 774.07,
    'name': 'Minior (Yellow Core)',
    'type': [PokemonType.Rock, PokemonType.Flying],
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 154,
    'catchRate': 30,
    'base': {
        'hitpoints': 60,
        'attack': 100,
        'specialAttack': 100,
        'defense': 60,
        'specialDefense': 60,
        'speed': 120,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 775,
    'name': 'Komala',
    'type': [PokemonType.Normal],
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 168,
    'catchRate': 45,
    'base': {
        'hitpoints': 65,
        'attack': 115,
        'specialAttack': 75,
        'defense': 65,
        'specialDefense': 95,
        'speed': 65,
    },
}, {
    'id': 776,
    'name': 'Turtonator',
    'type': [PokemonType.Fire, PokemonType.Dragon],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 170,
    'catchRate': 70,
    'base': {
        'hitpoints': 60,
        'attack': 78,
        'specialAttack': 91,
        'defense': 135,
        'specialDefense': 85,
        'speed': 36,
    },
}, {
    'id': 777,
    'name': 'Togedemaru',
    'type': [PokemonType.Electric, PokemonType.Steel],
    'eggCycles': 10,
    'levelType': LevelType.mediumfast,
    'exp': 152,
    'catchRate': 180,
    'base': {
        'hitpoints': 65,
        'attack': 98,
        'specialAttack': 40,
        'defense': 63,
        'specialDefense': 73,
        'speed': 96,
    },
}, {
    'id': 777.01,
    'name': 'Totem Togedemaru',
    'type': [PokemonType.Electric, PokemonType.Steel],
    'eggCycles': 10,
    'levelType': LevelType.mediumfast,
    'exp': 152,
    'catchRate': 180,
    'base': {
        'hitpoints': 65,
        'attack': 98,
        'specialAttack': 40,
        'defense': 83,
        'specialDefense': 73,
        'speed': 96,
    },
}, {
    'id': 778,
    'name': 'Mimikyu',
    'type': [PokemonType.Ghost, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 167,
    'catchRate': 45,
    'base': {
        'hitpoints': 55,
        'attack': 90,
        'specialAttack': 50,
        'defense': 80,
        'specialDefense': 105,
        'speed': 96,
    },
}, {
    'id': 778.01,
    'name': 'Totem Mimikyu',
    'type': [PokemonType.Ghost, PokemonType.Fairy],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 167,
    'catchRate': 45,
    'base': {
        'hitpoints': 55,
        'attack': 100,
        'specialAttack': 60,
        'defense': 90,
        'specialDefense': 115,
        'speed': 106,
    },
}, {
    'id': 779,
    'name': 'Bruxish',
    'type': [PokemonType.Water, PokemonType.Psychic],
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 80,
    'base': {
        'hitpoints': 68,
        'attack': 105,
        'specialAttack': 70,
        'defense': 70,
        'specialDefense': 70,
        'speed': 92,
    },
    'heldItem': { type: ItemType.item, id: 'Razor_fang' },
}, {
    'id': 780,
    'name': 'Drampa',
    'type': [PokemonType.Normal, PokemonType.Dragon],
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 170,
    'catchRate': 70,
    'base': {
        'hitpoints': 78,
        'attack': 60,
        'specialAttack': 135,
        'defense': 85,
        'specialDefense': 91,
        'speed': 36,
    },
}, {
    'id': 781,
    'name': 'Dhelmise',
    'type': [PokemonType.Ghost, PokemonType.Grass],
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 181,
    'catchRate': 25,
    'base': {
        'hitpoints': 70,
        'attack': 131,
        'specialAttack': 86,
        'defense': 100,
        'specialDefense': 90,
        'speed': 40,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 782,
    'name': 'Jangmo-o',
    'type': [PokemonType.Dragon],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 60,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Jangmo-o', 'Hakamo-o', 35)],
    'base': {
        'hitpoints': 45,
        'attack': 55,
        'specialAttack': 45,
        'defense': 65,
        'specialDefense': 45,
        'speed': 45,
    },
    'heldItem': { type: ItemType.item, id: 'Razor_claw' },
}, {
    'id': 783,
    'name': 'Hakamo-o',
    'type': [PokemonType.Dragon, PokemonType.Fighting],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 147,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Hakamo-o', 'Kommo-o', 45)],
    'base': {
        'hitpoints': 55,
        'attack': 75,
        'specialAttack': 65,
        'defense': 90,
        'specialDefense': 70,
        'speed': 65,
    },
    'heldItem': { type: ItemType.item, id: 'Razor_claw' },
}, {
    'id': 784,
    'name': 'Kommo-o',
    'type': [PokemonType.Dragon, PokemonType.Fighting],
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 110,
        'specialAttack': 100,
        'defense': 125,
        'specialDefense': 105,
        'speed': 85,
    },
    'heldItem': { type: ItemType.item, id: 'Razor_claw' },
}, {
    'id': 784.01,
    'name': 'Totem Kommo-o',
    'type': [PokemonType.Dragon, PokemonType.Fighting],
    'eggCycles': 90,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 45,
    'base': {
        'hitpoints': 75,
        'attack': 120,
        'specialAttack': 110,
        'defense': 135,
        'specialDefense': 115,
        'speed': 95,
    },
}, {
    'id': 785,
    'name': 'Tapu Koko',
    'type': [PokemonType.Electric, PokemonType.Fairy],
    'eggCycles': 15,
    'levelType': LevelType.slow,
    'exp': 257,
    'catchRate': 3,
    'base': {
        'hitpoints': 70,
        'attack': 115,
        'specialAttack': 95,
        'defense': 85,
        'specialDefense': 75,
        'speed': 130,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 786,
    'name': 'Tapu Lele',
    'type': [PokemonType.Psychic, PokemonType.Fairy],
    'eggCycles': 15,
    'levelType': LevelType.slow,
    'exp': 257,
    'catchRate': 3,
    'base': {
        'hitpoints': 70,
        'attack': 85,
        'specialAttack': 130,
        'defense': 75,
        'specialDefense': 115,
        'speed': 95,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 787,
    'name': 'Tapu Bulu',
    'type': [PokemonType.Grass, PokemonType.Fairy],
    'eggCycles': 15,
    'levelType': LevelType.slow,
    'exp': 257,
    'catchRate': 3,
    'base': {
        'hitpoints': 70,
        'attack': 130,
        'specialAttack': 85,
        'defense': 115,
        'specialDefense': 95,
        'speed': 75,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 788,
    'name': 'Tapu Fini',
    'type': [PokemonType.Water, PokemonType.Fairy],
    'eggCycles': 15,
    'levelType': LevelType.slow,
    'exp': 257,
    'catchRate': 3,
    'base': {
        'hitpoints': 70,
        'attack': 75,
        'specialAttack': 95,
        'defense': 115,
        'specialDefense': 130,
        'speed': 85,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 789,
    'name': 'Cosmog',
    'type': [PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 40,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Cosmog', 'Cosmoem', 43)],
    'base': {
        'hitpoints': 43,
        'attack': 29,
        'specialAttack': 29,
        'defense': 31,
        'specialDefense': 31,
        'speed': 37,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 790,
    'name': 'Cosmoem',
    'type': [PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 140,
    'catchRate': 45,
    'evolutions': [
        new LevelEvolution('Cosmoem', 'Solgaleo', 53),
        new LevelEvolution('Cosmoem', 'Lunala', 53),
    ],
    'base': {
        'hitpoints': 43,
        'attack': 29,
        'specialAttack': 29,
        'defense': 131,
        'specialDefense': 131,
        'speed': 37,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 791,
    'name': 'Solgaleo',
    'type': [PokemonType.Psychic, PokemonType.Steel],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 306,
    'catchRate': 45,
    'evolutions': [new StoneEvolution('Solgaleo', 'Solgaleo (Radiant Sun)', GameConstants.StoneType.Solar_light)],
    'base': {
        'hitpoints': 137,
        'attack': 137,
        'specialAttack': 113,
        'defense': 107,
        'specialDefense': 89,
        'speed': 97,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
    'heldItem': { type: ItemType.item, id: 'Solar_light' },
}, {
    'id': 791.1,
    'name': 'Solgaleo (Radiant Sun)',
    'type': [PokemonType.Psychic, PokemonType.Steel],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': null,
    'catchRate': 45,
    'base': {
        'hitpoints': 137,
        'attack': 137,
        'specialAttack': 113,
        'defense': 107,
        'specialDefense': 89,
        'speed': 97,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
    'heldItem': { type: ItemType.item, id: 'Solar_light' },
}, {
    'id': 792,
    'name': 'Lunala',
    'type': [PokemonType.Psychic, PokemonType.Ghost],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 306,
    'catchRate': 45,
    'evolutions': [new StoneEvolution('Lunala', 'Lunala (Full Moon)', GameConstants.StoneType.Lunar_light)],
    'base': {
        'hitpoints': 137,
        'attack': 113,
        'specialAttack': 137,
        'defense': 89,
        'specialDefense': 107,
        'speed': 97,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
    'heldItem': { type: ItemType.item, id: 'Lunar_light' },
}, {
    'id': 792.1,
    'name': 'Lunala (Full Moon)',
    'type': [PokemonType.Psychic, PokemonType.Ghost],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': null,
    'catchRate': 45,
    'base': {
        'hitpoints': 137,
        'attack': 113,
        'specialAttack': 137,
        'defense': 89,
        'specialDefense': 107,
        'speed': 97,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
    'heldItem': { type: ItemType.item, id: 'Lunar_light' },
}, {
    'id': 793,
    'name': 'Nihilego',
    'type': [PokemonType.Rock, PokemonType.Poison],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 257,
    'catchRate': 45,
    'base': {
        'hitpoints': 109,
        'attack': 53,
        'specialAttack': 127,
        'defense': 47,
        'specialDefense': 131,
        'speed': 103,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 794,
    'name': 'Buzzwole',
    'type': [PokemonType.Bug, PokemonType.Fighting],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 257,
    'catchRate': 45,
    'base': {
        'hitpoints': 107,
        'attack': 139,
        'specialAttack': 53,
        'defense': 139,
        'specialDefense': 53,
        'speed': 79,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 795,
    'name': 'Pheromosa',
    'type': [PokemonType.Bug, PokemonType.Fighting],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 257,
    'catchRate': 45,
    'base': {
        'hitpoints': 71,
        'attack': 137,
        'specialAttack': 137,
        'defense': 37,
        'specialDefense': 37,
        'speed': 151,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 796,
    'name': 'Xurkitree',
    'type': [PokemonType.Electric],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 257,
    'catchRate': 45,
    'base': {
        'hitpoints': 83,
        'attack': 89,
        'specialAttack': 173,
        'defense': 71,
        'specialDefense': 71,
        'speed': 83,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 797,
    'name': 'Celesteela',
    'type': [PokemonType.Steel, PokemonType.Flying],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 257,
    'catchRate': 45,
    'base': {
        'hitpoints': 97,
        'attack': 101,
        'specialAttack': 107,
        'defense': 103,
        'specialDefense': 101,
        'speed': 61,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 798,
    'name': 'Kartana',
    'type': [PokemonType.Grass, PokemonType.Steel],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 257,
    'catchRate': 45,
    'base': {
        'hitpoints': 59,
        'attack': 181,
        'specialAttack': 59,
        'defense': 131,
        'specialDefense': 31,
        'speed': 109,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 799,
    'name': 'Guzzlord',
    'type': [PokemonType.Dark, PokemonType.Dragon],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 257,
    'catchRate': 45,
    'base': {
        'hitpoints': 223,
        'attack': 101,
        'specialAttack': 97,
        'defense': 53,
        'specialDefense': 53,
        'speed': 43,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 800,
    'name': 'Necrozma',
    'type': [PokemonType.Psychic],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 255,
    'evolutions': [
        new StoneEvolution('Necrozma', 'Necrozma (Dusk Mane)', GameConstants.StoneType.Solar_light),
        new StoneEvolution('Necrozma', 'Necrozma (Dawn Wings)', GameConstants.StoneType.Lunar_light),
    ],
    'base': {
        'hitpoints': 97,
        'attack': 107,
        'specialAttack': 127,
        'defense': 101,
        'specialDefense': 89,
        'speed': 79,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 800.01,
    'name': 'Necrozma (Dusk Mane)',
    'type': [PokemonType.Psychic, PokemonType.Steel],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 255,
    'base': {
        'hitpoints': 97,
        'attack': 157,
        'specialAttack': 113,
        'defense': 127,
        'specialDefense': 109,
        'speed': 77,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 800.02,
    'name': 'Necrozma (Dawn Wings)',
    'type': [PokemonType.Psychic, PokemonType.Ghost],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 255,
    'base': {
        'hitpoints': 97,
        'attack': 113,
        'specialAttack': 157,
        'defense': 109,
        'specialDefense': 127,
        'speed': 77,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 800.03,
    'name': 'Necrozma (Ultra)',
    'type': [PokemonType.Psychic, PokemonType.Dragon],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 255,
    'base': {
        'hitpoints': 97,
        'attack': 167,
        'specialAttack': 167,
        'defense': 97,
        'specialDefense': 97,
        'speed': 129,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 801,
    'name': 'Magearna',
    'type': [PokemonType.Steel, PokemonType.Fairy],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 80,
        'attack': 95,
        'specialAttack': 130,
        'defense': 115,
        'specialDefense': 115,
        'speed': 65,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 801.1,
    'name': 'Magearna (Original Color)',
    'type': [PokemonType.Steel, PokemonType.Fairy],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 80,
        'attack': 95,
        'specialAttack': 130,
        'defense': 115,
        'specialDefense': 115,
        'speed': 65,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 802,
    'name': 'Marshadow',
    'type': [PokemonType.Fighting, PokemonType.Ghost],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 90,
        'attack': 125,
        'specialAttack': 90,
        'defense': 80,
        'specialDefense': 90,
        'speed': 125,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 803,
    'name': 'Poipole',
    'type': [PokemonType.Poison],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 189,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Poipole', 'Naganadel', 41)],
    'base': {
        'hitpoints': 67,
        'attack': 73,
        'specialAttack': 73,
        'defense': 67,
        'specialDefense': 67,
        'speed': 73,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 804,
    'name': 'Naganadel',
    'type': [PokemonType.Poison, PokemonType.Dragon],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 243,
    'catchRate': 45,
    'base': {
        'hitpoints': 73,
        'attack': 73,
        'specialAttack': 127,
        'defense': 73,
        'specialDefense': 73,
        'speed': 121,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 805,
    'name': 'Stakataka',
    'type': [PokemonType.Rock, PokemonType.Steel],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 257,
    'catchRate': 30,
    'base': {
        'hitpoints': 61,
        'attack': 131,
        'specialAttack': 53,
        'defense': 211,
        'specialDefense': 101,
        'speed': 13,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 806,
    'name': 'Blacephalon',
    'type': [PokemonType.Fire, PokemonType.Ghost],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 257,
    'catchRate': 30,
    'base': {
        'hitpoints': 53,
        'attack': 127,
        'specialAttack': 151,
        'defense': 53,
        'specialDefense': 79,
        'speed': 107,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 807,
    'name': 'Zeraora',
    'type': [PokemonType.Electric],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 88,
        'attack': 112,
        'specialAttack': 102,
        'defense': 75,
        'specialDefense': 80,
        'speed': 143,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 808,
    'name': 'Meltan',
    'nativeRegion': GameConstants.Region.none,
    'type': [PokemonType.Steel],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 135,
    'catchRate': 3,
    'evolutions': [new StoneEvolution('Meltan', 'Melmetal', GameConstants.StoneType.None)],
    'base': {
        'hitpoints': 46,
        'attack': 65,
        'specialAttack': 55,
        'defense': 65,
        'specialDefense': 35,
        'speed': 34,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 809,
    'name': 'Melmetal',
    'nativeRegion': GameConstants.Region.none,
    'type': [PokemonType.Steel],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 135,
        'attack': 143,
        'specialAttack': 80,
        'defense': 143,
        'specialDefense': 65,
        'speed': 34,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 809.1,
    'name': 'Gigantamax Melmetal',
    'nativeRegion': GameConstants.Region.none,
    'type': [PokemonType.Steel],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 270,
    'catchRate': 3,
    'base': {
        'hitpoints': 270,
        'attack': 143,
        'specialAttack': 80,
        'defense': 143,
        'specialDefense': 65,
        'speed': 34,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 810,
    'name': 'Grookey',
    'type': [PokemonType.Grass],
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 40,
        'speed': 65,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Grookey', 'Thwackey', 16)],
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 811,
    'name': 'Thwackey',
    'type': [PokemonType.Grass],
    'base': {
        'hitpoints': 70,
        'attack': 85,
        'specialAttack': 55,
        'defense': 70,
        'specialDefense': 60,
        'speed': 80,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 147,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Thwackey', 'Rillaboom', 35)],
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 812,
    'name': 'Rillaboom',
    'type': [PokemonType.Grass],
    'base': {
        'hitpoints': 100,
        'attack': 125,
        'specialAttack': 60,
        'defense': 90,
        'specialDefense': 70,
        'speed': 85,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 265,
    'catchRate': 45,
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 812.1,
    'name': 'Gigantamax Rillaboom',
    'nativeRegion': GameConstants.Region.none,
    'type': [PokemonType.Grass],
    'base': {
        'hitpoints': 200,
        'attack': 125,
        'specialAttack': 60,
        'defense': 90,
        'specialDefense': 70,
        'speed': 85,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 265,
    'catchRate': 45,
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 813,
    'name': 'Scorbunny',
    'type': [PokemonType.Fire],
    'base': {
        'hitpoints': 50,
        'attack': 71,
        'specialAttack': 40,
        'defense': 40,
        'specialDefense': 40,
        'speed': 69,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Scorbunny', 'Raboot', 16)],
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 814,
    'name': 'Raboot',
    'type': [PokemonType.Fire],
    'base': {
        'hitpoints': 65,
        'attack': 86,
        'specialAttack': 55,
        'defense': 60,
        'specialDefense': 60,
        'speed': 94,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 147,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Raboot', 'Cinderace', 35)],
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 815,
    'name': 'Cinderace',
    'type': [PokemonType.Fire],
    'base': {
        'hitpoints': 80,
        'attack': 116,
        'specialAttack': 65,
        'defense': 75,
        'specialDefense': 75,
        'speed': 119,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 265,
    'catchRate': 45,
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 815.1,
    'name': 'Gigantamax Cinderace',
    'nativeRegion': GameConstants.Region.none,
    'type': [PokemonType.Fire],
    'base': {
        'hitpoints': 160,
        'attack': 116,
        'specialAttack': 65,
        'defense': 75,
        'specialDefense': 75,
        'speed': 119,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 265,
    'catchRate': 45,
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 816,
    'name': 'Sobble',
    'type': [PokemonType.Water],
    'base': {
        'hitpoints': 50,
        'attack': 40,
        'specialAttack': 70,
        'defense': 40,
        'specialDefense': 40,
        'speed': 70,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Sobble', 'Drizzile', 16)],
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 817,
    'name': 'Drizzile',
    'type': [PokemonType.Water],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 95,
        'defense': 55,
        'specialDefense': 55,
        'speed': 90,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 147,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Drizzile', 'Inteleon', 35)],
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 818,
    'name': 'Inteleon',
    'type': [PokemonType.Water],
    'base': {
        'hitpoints': 70,
        'attack': 85,
        'specialAttack': 125,
        'defense': 65,
        'specialDefense': 65,
        'speed': 120,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 265,
    'catchRate': 45,
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 818.1,
    'name': 'Gigantamax Inteleon',
    'nativeRegion': GameConstants.Region.none,
    'type': [PokemonType.Water],
    'base': {
        'hitpoints': 140,
        'attack': 85,
        'specialAttack': 125,
        'defense': 65,
        'specialDefense': 65,
        'speed': 120,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumslow,
    'exp': 265,
    'catchRate': 45,
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 819,
    'name': 'Skwovet',
    'type': [PokemonType.Normal],
    'base': {
        'hitpoints': 70,
        'attack': 55,
        'specialAttack': 35,
        'defense': 55,
        'specialDefense': 35,
        'speed': 25,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 55,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Skwovet', 'Greedent', 24)],
}, {
    'id': 820,
    'name': 'Greedent',
    'type': [PokemonType.Normal],
    'base': {
        'hitpoints': 120,
        'attack': 95,
        'specialAttack': 55,
        'defense': 95,
        'specialDefense': 75,
        'speed': 20,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 161,
    'catchRate': 90,
}, {
    'id': 821,
    'name': 'Rookidee',
    'type': [PokemonType.Flying],
    'base': {
        'hitpoints': 38,
        'attack': 47,
        'specialAttack': 33,
        'defense': 35,
        'specialDefense': 35,
        'speed': 57,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 49,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Rookidee', 'Corvisquire', 18)],
}, {
    'id': 822,
    'name': 'Corvisquire',
    'type': [PokemonType.Flying],
    'base': {
        'hitpoints': 68,
        'attack': 67,
        'specialAttack': 43,
        'defense': 55,
        'specialDefense': 55,
        'speed': 77,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 128,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Corvisquire', 'Corviknight', 38)],
}, {
    'id': 823,
    'name': 'Corviknight',
    'type': [
        PokemonType.Flying,
        PokemonType.Steel,
    ],
    'base': {
        'hitpoints': 98,
        'attack': 87,
        'specialAttack': 53,
        'defense': 105,
        'specialDefense': 85,
        'speed': 67,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 248,
    'catchRate': 45,
}, {
    'id': 823.1,
    'name': 'Gigantamax Corviknight',
    'nativeRegion': GameConstants.Region.none,
    'type': [
        PokemonType.Flying,
        PokemonType.Steel,
    ],
    'base': {
        'hitpoints': 196,
        'attack': 87,
        'specialAttack': 53,
        'defense': 105,
        'specialDefense': 85,
        'speed': 67,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 248,
    'catchRate': 45,
}, {
    'id': 824,
    'name': 'Blipbug',
    'type': [PokemonType.Bug],
    'base': {
        'hitpoints': 25,
        'attack': 20,
        'specialAttack': 25,
        'defense': 20,
        'specialDefense': 45,
        'speed': 45,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 36,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Blipbug', 'Dottler', 10)],
}, {
    'id': 825,
    'name': 'Dottler',
    'type': [
        PokemonType.Bug,
        PokemonType.Psychic,
    ],
    'base': {
        'hitpoints': 50,
        'attack': 35,
        'specialAttack': 50,
        'defense': 80,
        'specialDefense': 90,
        'speed': 30,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 117,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Dottler', 'Orbeetle', 30)],
}, {
    'id': 826,
    'name': 'Orbeetle',
    'type': [
        PokemonType.Bug,
        PokemonType.Psychic,
    ],
    'base': {
        'hitpoints': 60,
        'attack': 45,
        'specialAttack': 80,
        'defense': 110,
        'specialDefense': 120,
        'speed': 90,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 253,
    'catchRate': 45,
}, {
    'id': 826.1,
    'name': 'Gigantamax Orbeetle',
    'nativeRegion': GameConstants.Region.none,
    'type': [
        PokemonType.Bug,
        PokemonType.Psychic,
    ],
    'base': {
        'hitpoints': 120,
        'attack': 45,
        'specialAttack': 80,
        'defense': 110,
        'specialDefense': 120,
        'speed': 90,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 253,
    'catchRate': 45,
}, {
    'id': 827,
    'name': 'Nickit',
    'type': [PokemonType.Dark],
    'base': {
        'hitpoints': 40,
        'attack': 28,
        'specialAttack': 47,
        'defense': 28,
        'specialDefense': 52,
        'speed': 50,
    },
    'eggCycles': 15,
    'levelType': LevelType.fast,
    'exp': 49,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Nickit', 'Thievul', 18)],
}, {
    'id': 828,
    'name': 'Thievul',
    'type': [PokemonType.Dark],
    'base': {
        'hitpoints': 70,
        'attack': 58,
        'specialAttack': 87,
        'defense': 58,
        'specialDefense': 92,
        'speed': 90,
    },
    'eggCycles': 15,
    'levelType': LevelType.fast,
    'exp': 159,
    'catchRate': 127,
}, {
    'id': 829,
    'name': 'Gossifleur',
    'type': [PokemonType.Grass],
    'base': {
        'hitpoints': 40,
        'attack': 40,
        'specialAttack': 40,
        'defense': 60,
        'specialDefense': 60,
        'speed': 10,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 50,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Gossifleur', 'Eldegoss', 20)],
}, {
    'id': 830,
    'name': 'Eldegoss',
    'type': [PokemonType.Grass],
    'base': {
        'hitpoints': 60,
        'attack': 50,
        'specialAttack': 80,
        'defense': 90,
        'specialDefense': 120,
        'speed': 60,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 161,
    'catchRate': 75,
}, {
    'id': 831,
    'name': 'Wooloo',
    'type': [PokemonType.Normal],
    'base': {
        'hitpoints': 42,
        'attack': 40,
        'specialAttack': 40,
        'defense': 55,
        'specialDefense': 45,
        'speed': 48,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 122,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Wooloo', 'Dubwool', 24)],
}, {
    'id': 832,
    'name': 'Dubwool',
    'type': [PokemonType.Normal],
    'base': {
        'hitpoints': 72,
        'attack': 80,
        'specialAttack': 60,
        'defense': 100,
        'specialDefense': 90,
        'speed': 88,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 172,
    'catchRate': 127,
}, {
    'id': 833,
    'name': 'Chewtle',
    'type': [PokemonType.Water],
    'base': {
        'hitpoints': 50,
        'attack': 64,
        'specialAttack': 38,
        'defense': 50,
        'specialDefense': 38,
        'speed': 44,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 57,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Chewtle', 'Drednaw', 22)],
}, {
    'id': 834,
    'name': 'Drednaw',
    'type': [
        PokemonType.Water,
        PokemonType.Rock,
    ],
    'base': {
        'hitpoints': 90,
        'attack': 115,
        'specialAttack': 48,
        'defense': 90,
        'specialDefense': 68,
        'speed': 74,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 170,
    'catchRate': 75,
}, {
    'id': 834.1,
    'name': 'Gigantamax Drednaw',
    'nativeRegion': GameConstants.Region.none,
    'type': [
        PokemonType.Water,
        PokemonType.Rock,
    ],
    'base': {
        'hitpoints': 180,
        'attack': 115,
        'specialAttack': 48,
        'defense': 90,
        'specialDefense': 68,
        'speed': 74,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 170,
    'catchRate': 75,
}, {
    'id': 835,
    'name': 'Yamper',
    'type': [PokemonType.Electric],
    'base': {
        'hitpoints': 59,
        'attack': 45,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 50,
        'speed': 26,
    },
    'eggCycles': 20,
    'levelType': LevelType.fast,
    'exp': 54,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Yamper', 'Boltund', 25)],
}, {
    'id': 836,
    'name': 'Boltund',
    'type': [PokemonType.Electric],
    'base': {
        'hitpoints': 69,
        'attack': 90,
        'specialAttack': 90,
        'defense': 60,
        'specialDefense': 60,
        'speed': 121,
    },
    'eggCycles': 20,
    'levelType': LevelType.fast,
    'exp': 172,
    'catchRate': 45,
}, {
    'id': 837,
    'name': 'Rolycoly',
    'type': [PokemonType.Rock],
    'base': {
        'hitpoints': 30,
        'attack': 40,
        'specialAttack': 40,
        'defense': 50,
        'specialDefense': 50,
        'speed': 30,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 48,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Rolycoly', 'Carkol', 18)],
}, {
    'id': 838,
    'name': 'Carkol',
    'type': [
        PokemonType.Rock,
        PokemonType.Fire,
    ],
    'base': {
        'hitpoints': 80,
        'attack': 60,
        'specialAttack': 60,
        'defense': 90,
        'specialDefense': 70,
        'speed': 50,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 144,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Carkol', 'Coalossal', 34)],
}, {
    'id': 839,
    'name': 'Coalossal',
    'type': [
        PokemonType.Rock,
        PokemonType.Fire,
    ],
    'base': {
        'hitpoints': 110,
        'attack': 80,
        'specialAttack': 80,
        'defense': 120,
        'specialDefense': 90,
        'speed': 30,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 255,
    'catchRate': 45,
}, {
    'id': 839.1,
    'name': 'Gigantamax Coalossal',
    'nativeRegion': GameConstants.Region.none,
    'type': [
        PokemonType.Rock,
        PokemonType.Fire,
    ],
    'base': {
        'hitpoints': 220,
        'attack': 80,
        'specialAttack': 80,
        'defense': 120,
        'specialDefense': 90,
        'speed': 30,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumslow,
    'exp': 255,
    'catchRate': 45,
}, {
    'id': 840,
    'name': 'Applin',
    'type': [
        PokemonType.Grass,
        PokemonType.Dragon,
    ],
    'base': {
        'hitpoints': 40,
        'attack': 40,
        'specialAttack': 40,
        'defense': 80,
        'specialDefense': 40,
        'speed': 20,
    },
    'eggCycles': 20,
    'evolutions': [
        new StoneEvolution('Applin', 'Flapple', GameConstants.StoneType.Tart_apple),
        new StoneEvolution('Applin', 'Appletun', GameConstants.StoneType.Sweet_apple),
    ],
    'levelType': LevelType.erratic,
    'exp': 52,
    'catchRate': 255,
}, {
    'id': 841,
    'name': 'Flapple',
    'type': [
        PokemonType.Grass,
        PokemonType.Dragon,
    ],
    'base': {
        'hitpoints': 70,
        'attack': 110,
        'specialAttack': 95,
        'defense': 80,
        'specialDefense': 60,
        'speed': 70,
    },
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 170,
    'catchRate': 45,
}, {
    'id': 841.1,
    'name': 'Gigantamax Flapple',
    'nativeRegion': GameConstants.Region.none,
    'type': [
        PokemonType.Grass,
        PokemonType.Dragon,
    ],
    'base': {
        'hitpoints': 140,
        'attack': 110,
        'specialAttack': 95,
        'defense': 80,
        'specialDefense': 60,
        'speed': 70,
    },
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 170,
    'catchRate': 45,
}, {
    'id': 842,
    'name': 'Appletun',
    'type': [
        PokemonType.Grass,
        PokemonType.Dragon,
    ],
    'base': {
        'hitpoints': 110,
        'attack': 85,
        'specialAttack': 100,
        'defense': 80,
        'specialDefense': 80,
        'speed': 30,
    },
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 170,
    'catchRate': 45,
}, {
    'id': 842.1,
    'name': 'Gigantamax Appletun',
    'nativeRegion': GameConstants.Region.none,
    'type': [
        PokemonType.Grass,
        PokemonType.Dragon,
    ],
    'base': {
        'hitpoints': 220,
        'attack': 85,
        'specialAttack': 100,
        'defense': 80,
        'specialDefense': 80,
        'speed': 30,
    },
    'eggCycles': 20,
    'levelType': LevelType.erratic,
    'exp': 170,
    'catchRate': 45,
}, {
    'id': 843,
    'name': 'Silicobra',
    'type': [PokemonType.Ground],
    'base': {
        'hitpoints': 52,
        'attack': 57,
        'specialAttack': 35,
        'defense': 75,
        'specialDefense': 50,
        'speed': 46,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 63,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Silicobra', 'Sandaconda', 36)],
}, {
    'id': 844,
    'name': 'Sandaconda',
    'type': [PokemonType.Ground],
    'base': {
        'hitpoints': 72,
        'attack': 107,
        'specialAttack': 65,
        'defense': 125,
        'specialDefense': 70,
        'speed': 71,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 179,
    'catchRate': 120,
}, {
    'id': 844.1,
    'name': 'Gigantamax Sandaconda',
    'nativeRegion': GameConstants.Region.none,
    'type': [PokemonType.Ground],
    'base': {
        'hitpoints': 144,
        'attack': 107,
        'specialAttack': 65,
        'defense': 125,
        'specialDefense': 70,
        'speed': 71,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 179,
    'catchRate': 120,
}, {
    'id': 845,
    'name': 'Cramorant',
    'type': [
        PokemonType.Flying,
        PokemonType.Water,
    ],
    'base': {
        'hitpoints': 70,
        'attack': 85,
        'specialAttack': 85,
        'defense': 55,
        'specialDefense': 95,
        'speed': 85,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 45,
}, {
    'id': 845.1,
    'name': 'Cramorant (Gulping)',
    'type': [
        PokemonType.Flying,
        PokemonType.Water,
    ],
    'base': {
        'hitpoints': 70,
        'attack': 85,
        'specialAttack': 85,
        'defense': 55,
        'specialDefense': 95,
        'speed': 85,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 45,
}, {
    'id': 845.2,
    'name': 'Cramorant (Gorging)',
    'type': [
        PokemonType.Flying,
        PokemonType.Water,
    ],
    'base': {
        'hitpoints': 70,
        'attack': 85,
        'specialAttack': 85,
        'defense': 55,
        'specialDefense': 95,
        'speed': 85,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 45,
}, {
    'id': 846,
    'name': 'Arrokuda',
    'type': [PokemonType.Water],
    'base': {
        'hitpoints': 41,
        'attack': 63,
        'specialAttack': 40,
        'defense': 40,
        'specialDefense': 30,
        'speed': 66,
    },
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 56,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Arrokuda', 'Barraskewda', 26)],
}, {
    'id': 847,
    'name': 'Barraskewda',
    'type': [PokemonType.Water],
    'base': {
        'hitpoints': 61,
        'attack': 123,
        'specialAttack': 60,
        'defense': 60,
        'specialDefense': 50,
        'speed': 136,
    },
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 172,
    'catchRate': 60,
}, {
    'id': 848,
    'name': 'Toxel',
    'type': [
        PokemonType.Electric,
        PokemonType.Poison,
    ],
    'base': {
        'hitpoints': 40,
        'attack': 38,
        'specialAttack': 54,
        'defense': 35,
        'specialDefense': 35,
        'speed': 40,
    },
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 48,
    'catchRate': 75,
    'baby': true,
    'evolutions': [
        new LevelEvolution('Toxel', 'Toxtricity (Amped)', 30),
        new LevelEvolution('Toxel', 'Toxtricity (Low Key)', 30),
    ],
}, {
    'id': 849,
    'name': 'Toxtricity (Amped)',
    'type': [
        PokemonType.Electric,
        PokemonType.Poison,
    ],
    'base': {
        'hitpoints': 75,
        'attack': 98,
        'specialAttack': 114,
        'defense': 70,
        'specialDefense': 70,
        'speed': 75,
    },
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 176,
    'catchRate': 45,
}, {
    'id': 849.1,
    'name': 'Toxtricity (Low Key)',
    'type': [
        PokemonType.Electric,
        PokemonType.Poison,
    ],
    'base': {
        'hitpoints': 75,
        'attack': 98,
        'specialAttack': 114,
        'defense': 70,
        'specialDefense': 70,
        'speed': 75,
    },
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 176,
    'catchRate': 45,
}, {
    'id': 849.2,
    'name': 'Gigantamax Toxtricity',
    'nativeRegion': GameConstants.Region.none,
    'type': [
        PokemonType.Electric,
        PokemonType.Poison,
    ],
    'base': {
        'hitpoints': 150,
        'attack': 98,
        'specialAttack': 114,
        'defense': 70,
        'specialDefense': 70,
        'speed': 75,
    },
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 176,
    'catchRate': 45,
}, {
    'id': 850,
    'name': 'Sizzlipede',
    'type': [
        PokemonType.Fire,
        PokemonType.Bug,
    ],
    'base': {
        'hitpoints': 50,
        'attack': 65,
        'specialAttack': 50,
        'defense': 45,
        'specialDefense': 50,
        'speed': 45,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 61,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Sizzlipede', 'Centiskorch', 28)],
}, {
    'id': 851,
    'name': 'Centiskorch',
    'type': [
        PokemonType.Fire,
        PokemonType.Bug,
    ],
    'base': {
        'hitpoints': 100,
        'attack': 115,
        'specialAttack': 90,
        'defense': 65,
        'specialDefense': 90,
        'speed': 65,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 184,
    'catchRate': 75,
}, {
    'id': 851.1,
    'name': 'Gigantamax Centiskorch',
    'nativeRegion': GameConstants.Region.none,
    'type': [
        PokemonType.Fire,
        PokemonType.Bug,
    ],
    'base': {
        'hitpoints': 200,
        'attack': 115,
        'specialAttack': 90,
        'defense': 65,
        'specialDefense': 90,
        'speed': 65,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 184,
    'catchRate': 75,
}, {
    'id': 852,
    'name': 'Clobbopus',
    'type': [PokemonType.Fighting],
    'base': {
        'hitpoints': 50,
        'attack': 68,
        'specialAttack': 50,
        'defense': 60,
        'specialDefense': 50,
        'speed': 32,
    },
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 62,
    'catchRate': 180,
    'evolutions': [new LevelEvolution('Clobbopus', 'Grapploct', 35)],
}, {
    'id': 853,
    'name': 'Grapploct',
    'type': [PokemonType.Fighting],
    'base': {
        'hitpoints': 80,
        'attack': 118,
        'specialAttack': 70,
        'defense': 90,
        'specialDefense': 80,
        'speed': 42,
    },
    'eggCycles': 25,
    'levelType': LevelType.mediumslow,
    'exp': 168,
    'catchRate': 45,
}, {
    'id': 854,
    'name': 'Sinistea',
    'type': [PokemonType.Ghost],
    'base': {
        'hitpoints': 40,
        'attack': 45,
        'specialAttack': 74,
        'defense': 45,
        'specialDefense': 54,
        'speed': 50,
    },
    'eggCycles': 20,
    'evolutions': [new StoneEvolution('Sinistea', 'Polteageist', GameConstants.StoneType.Cracked_pot)],
    'levelType': LevelType.mediumfast,
    'exp': 62,
    'catchRate': 120,
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 855,
    'name': 'Polteageist',
    'type': [PokemonType.Ghost],
    'base': {
        'hitpoints': 60,
        'attack': 65,
        'specialAttack': 134,
        'defense': 65,
        'specialDefense': 114,
        'speed': 70,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 178,
    'catchRate': 60,
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 856,
    'name': 'Hatenna',
    'type': [PokemonType.Psychic],
    'base': {
        'hitpoints': 42,
        'attack': 30,
        'specialAttack': 56,
        'defense': 45,
        'specialDefense': 53,
        'speed': 39,
    },
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 53,
    'catchRate': 235,
    'evolutions': [new LevelEvolution('Hatenna', 'Hattrem', 32)],
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 857,
    'name': 'Hattrem',
    'type': [PokemonType.Psychic],
    'base': {
        'hitpoints': 57,
        'attack': 40,
        'specialAttack': 86,
        'defense': 65,
        'specialDefense': 73,
        'speed': 49,
    },
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 130,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Hattrem', 'Hatterene', 42)],
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 858,
    'name': 'Hatterene',
    'type': [
        PokemonType.Psychic,
        PokemonType.Fairy,
    ],
    'base': {
        'hitpoints': 57,
        'attack': 90,
        'specialAttack': 136,
        'defense': 95,
        'specialDefense': 103,
        'speed': 29,
    },
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 255,
    'catchRate': 45,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 858.1,
    'name': 'Gigantamax Hatterene',
    'nativeRegion': GameConstants.Region.none,
    'type': [
        PokemonType.Psychic,
        PokemonType.Fairy,
    ],
    'base': {
        'hitpoints': 114,
        'attack': 90,
        'specialAttack': 136,
        'defense': 95,
        'specialDefense': 103,
        'speed': 29,
    },
    'eggCycles': 20,
    'levelType': LevelType.slow,
    'exp': 255,
    'catchRate': 45,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 859,
    'name': 'Impidimp',
    'type': [
        PokemonType.Dark,
        PokemonType.Fairy,
    ],
    'base': {
        'hitpoints': 45,
        'attack': 45,
        'specialAttack': 55,
        'defense': 30,
        'specialDefense': 40,
        'speed': 50,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 53,
    'catchRate': 255,
    'evolutions': [new LevelEvolution('Impidimp', 'Morgrem', 32)],
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 860,
    'name': 'Morgrem',
    'type': [
        PokemonType.Dark,
        PokemonType.Fairy,
    ],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 75,
        'defense': 45,
        'specialDefense': 55,
        'speed': 70,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 130,
    'catchRate': 120,
    'evolutions': [new LevelEvolution('Morgrem', 'Grimmsnarl', 42)],
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 861,
    'name': 'Grimmsnarl',
    'type': [
        PokemonType.Dark,
        PokemonType.Fairy,
    ],
    'base': {
        'hitpoints': 95,
        'attack': 120,
        'specialAttack': 95,
        'defense': 65,
        'specialDefense': 75,
        'speed': 60,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 255,
    'catchRate': 45,
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 861.1,
    'name': 'Gigantamax Grimmsnarl',
    'nativeRegion': GameConstants.Region.none,
    'type': [
        PokemonType.Dark,
        PokemonType.Fairy,
    ],
    'base': {
        'hitpoints': 190,
        'attack': 120,
        'specialAttack': 95,
        'defense': 65,
        'specialDefense': 75,
        'speed': 60,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 255,
    'catchRate': 45,
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 862,
    'name': 'Obstagoon',
    'type': [
        PokemonType.Dark,
        PokemonType.Normal,
    ],
    'base': {
        'hitpoints': 93,
        'attack': 90,
        'specialAttack': 60,
        'defense': 101,
        'specialDefense': 81,
        'speed': 95,
    },
    'eggCycles': 15,
    'levelType': LevelType.mediumfast,
    'exp': 260,
    'catchRate': 45,
}, {
    'id': 863,
    'name': 'Perrserker',
    'nativeRegion': GameConstants.Region.galar,
    'type': [PokemonType.Steel],
    'base': {
        'hitpoints': 70,
        'attack': 110,
        'specialAttack': 50,
        'defense': 100,
        'specialDefense': 60,
        'speed': 50,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 154,
    'catchRate': 90,
}, {
    'id': 864,
    'name': 'Cursola',
    'type': [PokemonType.Ghost],
    'base': {
        'hitpoints': 60,
        'attack': 95,
        'specialAttack': 145,
        'defense': 50,
        'specialDefense': 130,
        'speed': 30,
    },
    'eggCycles': 20,
    'levelType': LevelType.fast,
    'exp': 179,
    'catchRate': 30,
    'gender': {
        'femaleRatio': 0.75,
    },
}, {
    'id': 865,
    'name': 'Sirfetch\'d',
    'type': [PokemonType.Fighting],
    'base': {
        'hitpoints': 62,
        'attack': 135,
        'specialAttack': 68,
        'defense': 95,
        'specialDefense': 82,
        'speed': 65,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 177,
    'catchRate': 45,
    'heldItem': { type: ItemType.item, id: 'Leek' },
}, {
    'id': 866,
    'name': 'Mr. Rime',
    'type': [
        PokemonType.Psychic,
        PokemonType.Ice,
    ],
    'base': {
        'hitpoints': 80,
        'attack': 85,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 100,
        'speed': 70,
    },
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 182,
    'catchRate': 45,
}, {
    'id': 867,
    'name': 'Runerigus',
    'type': [
        PokemonType.Ground,
        PokemonType.Ghost,
    ],
    'base': {
        'hitpoints': 58,
        'attack': 95,
        'specialAttack': 50,
        'defense': 145,
        'specialDefense': 105,
        'speed': 30,
    },
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 169,
    'catchRate': 90,
}, {
    'id': 868,
    'name': 'Milcery',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 45,
        'attack': 40,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 61,
        'speed': 34,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 54,
    'catchRate': 200,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 868.01,
    'name': 'Milcery (Cheesy)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 45,
        'attack': 40,
        'specialAttack': 50,
        'defense': 40,
        'specialDefense': 61,
        'speed': 34,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 54,
    'catchRate': 200,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869,
    'name': 'Alcremie (Strawberry Vanilla)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.01,
    'name': 'Alcremie (Strawberry Lemon)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.02,
    'name': 'Alcremie (Strawberry Mint)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.03,
    'name': 'Alcremie (Strawberry Matcha)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.04,
    'name': 'Alcremie (Strawberry Ruby Cream)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.05,
    'name': 'Alcremie (Strawberry Caramel)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.06,
    'name': 'Alcremie (Strawberry Rainbow)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.07,
    'name': 'Alcremie (Strawberry Ruby Swirl)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.08,
    'name': 'Alcremie (Strawberry Salted)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.1,
    'name': 'Alcremie (Berry Vanilla)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.11,
    'name': 'Alcremie (Berry Lemon)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.12,
    'name': 'Alcremie (Berry Mint)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.13,
    'name': 'Alcremie (Berry Matcha)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.14,
    'name': 'Alcremie (Berry Ruby Cream)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.15,
    'name': 'Alcremie (Berry Caramel)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.16,
    'name': 'Alcremie (Berry Rainbow)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.17,
    'name': 'Alcremie (Berry Ruby Swirl)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.18,
    'name': 'Alcremie (Berry Salted)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.2,
    'name': 'Alcremie (Love Vanilla)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.21,
    'name': 'Alcremie (Love Lemon)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.22,
    'name': 'Alcremie (Love Mint)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.23,
    'name': 'Alcremie (Love Matcha)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.24,
    'name': 'Alcremie (Love Ruby Cream)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.25,
    'name': 'Alcremie (Love Caramel)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.26,
    'name': 'Alcremie (Love Rainbow)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.27,
    'name': 'Alcremie (Love Ruby Swirl)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.28,
    'name': 'Alcremie (Love Salted)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.3,
    'name': 'Alcremie (Star Vanilla)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.31,
    'name': 'Alcremie (Star Lemon)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.32,
    'name': 'Alcremie (Star Mint)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.33,
    'name': 'Alcremie (Star Matcha)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.34,
    'name': 'Alcremie (Star Ruby Cream)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.35,
    'name': 'Alcremie (Star Caramel)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.36,
    'name': 'Alcremie (Star Rainbow)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.37,
    'name': 'Alcremie (Star Ruby Swirl)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.38,
    'name': 'Alcremie (Star Salted)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.4,
    'name': 'Alcremie (Clover Vanilla)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.41,
    'name': 'Alcremie (Clover Lemon)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.42,
    'name': 'Alcremie (Clover Mint)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.43,
    'name': 'Alcremie (Clover Matcha)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.44,
    'name': 'Alcremie (Clover Ruby Cream)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.45,
    'name': 'Alcremie (Clover Caramel)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.46,
    'name': 'Alcremie (Clover Rainbow)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.47,
    'name': 'Alcremie (Clover Ruby Swirl)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.48,
    'name': 'Alcremie (Clover Salted)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.5,
    'name': 'Alcremie (Flower Vanilla)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.51,
    'name': 'Alcremie (Flower Lemon)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.52,
    'name': 'Alcremie (Flower Mint)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.53,
    'name': 'Alcremie (Flower Matcha)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.54,
    'name': 'Alcremie (Flower Ruby Cream)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.55,
    'name': 'Alcremie (Flower Caramel)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.56,
    'name': 'Alcremie (Flower Rainbow)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.57,
    'name': 'Alcremie (Flower Ruby Swirl)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.58,
    'name': 'Alcremie (Flower Salted)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.6,
    'name': 'Alcremie (Ribbon Vanilla)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.61,
    'name': 'Alcremie (Ribbon Lemon)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.62,
    'name': 'Alcremie (Ribbon Mint)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.63,
    'name': 'Alcremie (Ribbon Matcha)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.64,
    'name': 'Alcremie (Ribbon Ruby Cream)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.65,
    'name': 'Alcremie (Ribbon Caramel)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.66,
    'name': 'Alcremie (Ribbon Rainbow)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.67,
    'name': 'Alcremie (Ribbon Ruby Swirl)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.68,
    'name': 'Alcremie (Ribbon Salted)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 65,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 869.7,
    'name': 'Gigantamax Alcremie',
    'nativeRegion': GameConstants.Region.none,
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 130,
        'attack': 60,
        'specialAttack': 110,
        'defense': 75,
        'specialDefense': 121,
        'speed': 64,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 173,
    'catchRate': 100,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 870,
    'name': 'Falinks',
    'type': [PokemonType.Fighting],
    'base': {
        'hitpoints': 65,
        'attack': 100,
        'specialAttack': 70,
        'defense': 100,
        'specialDefense': 60,
        'speed': 75,
    },
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 165,
    'catchRate': 45,
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 871,
    'name': 'Pincurchin',
    'type': [PokemonType.Electric],
    'base': {
        'hitpoints': 48,
        'attack': 101,
        'specialAttack': 91,
        'defense': 95,
        'specialDefense': 85,
        'speed': 15,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 152,
    'catchRate': 75,
}, {
    'id': 872,
    'name': 'Snom',
    'type': [
        PokemonType.Ice,
        PokemonType.Bug,
    ],
    'base': {
        'hitpoints': 30,
        'attack': 25,
        'specialAttack': 45,
        'defense': 35,
        'specialDefense': 30,
        'speed': 20,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 37,
    'catchRate': 190,
    'evolutions': [new NightTimedStoneEvolution('Snom', 'Frosmoth', GameConstants.StoneType.Soothe_bell)],
}, {
    'id': 873,
    'name': 'Frosmoth',
    'type': [
        PokemonType.Ice,
        PokemonType.Bug,
    ],
    'base': {
        'hitpoints': 70,
        'attack': 65,
        'specialAttack': 125,
        'defense': 60,
        'specialDefense': 90,
        'speed': 65,
    },
    'eggCycles': 20,
    'levelType': LevelType.mediumfast,
    'exp': 166,
    'catchRate': 75,
}, {
    'id': 874,
    'name': 'Stonjourner',
    'type': [PokemonType.Rock],
    'base': {
        'hitpoints': 100,
        'attack': 125,
        'specialAttack': 20,
        'defense': 135,
        'specialDefense': 20,
        'speed': 70,
    },
    'eggCycles': 25,
    'levelType': LevelType.slow,
    'exp': 165,
    'catchRate': 60,
}, {
    'id': 875,
    'name': 'Eiscue (Ice Face)',
    'type': [PokemonType.Ice],
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 65,
        'defense': 110,
        'specialDefense': 90,
        'speed': 50,
    },
    'eggCycles': 25,
    'levelType': LevelType.slow,
    'exp': 165,
    'catchRate': 60,
}, {
    'id': 875.1,
    'name': 'Eiscue (No Ice Face)',
    'type': [PokemonType.Ice],
    'base': {
        'hitpoints': 75,
        'attack': 80,
        'specialAttack': 65,
        'defense': 70,
        'specialDefense': 50,
        'speed': 130,
    },
    'eggCycles': 25,
    'levelType': LevelType.slow,
    'exp': 165,
    'catchRate': 60,
}, {
    'id': 876,
    'name': 'Indeedee (Male)',
    'type': [
        PokemonType.Psychic,
        PokemonType.Normal,
    ],
    'base': {
        'hitpoints': 60,
        'attack': 65,
        'specialAttack': 105,
        'defense': 55,
        'specialDefense': 95,
        'speed': 95,
    },
    'eggCycles': 40,
    'levelType': LevelType.fast,
    'exp': 166,
    'catchRate': 30,
    'gender': {
        'femaleRatio': 0,
    },
}, {
    'id': 876.1,
    'name': 'Indeedee (Female)',
    'type': [
        PokemonType.Psychic,
        PokemonType.Normal,
    ],
    'base': {
        'hitpoints': 70,
        'attack': 55,
        'specialAttack': 95,
        'defense': 65,
        'specialDefense': 105,
        'speed': 85,
    },
    'eggCycles': 40,
    'levelType': LevelType.fast,
    'exp': 166,
    'catchRate': 30,
    'gender': {
        'femaleRatio': 1,
    },
}, {
    'id': 877,
    'name': 'Morpeko',
    'type': [
        PokemonType.Electric,
        PokemonType.Dark,
    ],
    'base': {
        'hitpoints': 58,
        'attack': 95,
        'specialAttack': 70,
        'defense': 58,
        'specialDefense': 58,
        'speed': 97,
    },
    'eggCycles': 10,
    'levelType': LevelType.mediumfast,
    'exp': 153,
    'catchRate': 180,
}, {
    'id': 877.1,
    'name': 'Morpeko (Hangry)',
    'type': [
        PokemonType.Electric,
        PokemonType.Dark,
    ],
    'base': {
        'hitpoints': 58,
        'attack': 95,
        'specialAttack': 70,
        'defense': 58,
        'specialDefense': 58,
        'speed': 97,
    },
    'eggCycles': 10,
    'levelType': LevelType.mediumfast,
    'exp': 153,
    'catchRate': 180,
}, {
    'id': 878,
    'name': 'Cufant',
    'type': [PokemonType.Steel],
    'base': {
        'hitpoints': 72,
        'attack': 80,
        'specialAttack': 40,
        'defense': 49,
        'specialDefense': 49,
        'speed': 40,
    },
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 66,
    'catchRate': 190,
    'evolutions': [new LevelEvolution('Cufant', 'Copperajah', 34)],
}, {
    'id': 879,
    'name': 'Copperajah',
    'type': [PokemonType.Steel],
    'base': {
        'hitpoints': 122,
        'attack': 130,
        'specialAttack': 80,
        'defense': 69,
        'specialDefense': 69,
        'speed': 30,
    },
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'catchRate': 90,
}, {
    'id': 879.1,
    'name': 'Gigantamax Copperajah',
    'nativeRegion': GameConstants.Region.none,
    'type': [PokemonType.Steel],
    'base': {
        'hitpoints': 244,
        'attack': 130,
        'specialAttack': 80,
        'defense': 69,
        'specialDefense': 69,
        'speed': 30,
    },
    'eggCycles': 25,
    'levelType': LevelType.mediumfast,
    'exp': 175,
    'catchRate': 90,
}, {
    'id': 880,
    'name': 'Dracozolt',
    'type': [
        PokemonType.Electric,
        PokemonType.Dragon,
    ],
    'base': {
        'hitpoints': 90,
        'attack': 100,
        'specialAttack': 80,
        'defense': 90,
        'specialDefense': 70,
        'speed': 75,
    },
    'eggCycles': 35,
    'levelType': LevelType.slow,
    'exp': 177,
    'catchRate': 45,
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 881,
    'name': 'Arctozolt',
    'type': [
        PokemonType.Electric,
        PokemonType.Ice,
    ],
    'base': {
        'hitpoints': 90,
        'attack': 100,
        'specialAttack': 90,
        'defense': 90,
        'specialDefense': 80,
        'speed': 55,
    },
    'eggCycles': 35,
    'levelType': LevelType.slow,
    'exp': 177,
    'catchRate': 45,
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 882,
    'name': 'Dracovish',
    'type': [
        PokemonType.Water,
        PokemonType.Dragon,
    ],
    'base': {
        'hitpoints': 90,
        'attack': 90,
        'specialAttack': 70,
        'defense': 100,
        'specialDefense': 80,
        'speed': 75,
    },
    'eggCycles': 35,
    'levelType': LevelType.slow,
    'exp': 177,
    'catchRate': 45,
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 883,
    'name': 'Arctovish',
    'type': [
        PokemonType.Water,
        PokemonType.Ice,
    ],
    'base': {
        'hitpoints': 90,
        'attack': 90,
        'specialAttack': 80,
        'defense': 100,
        'specialDefense': 90,
        'speed': 55,
    },
    'eggCycles': 35,
    'levelType': LevelType.slow,
    'exp': 177,
    'catchRate': 45,
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 884,
    'name': 'Duraludon',
    'type': [
        PokemonType.Steel,
        PokemonType.Dragon,
    ],
    'base': {
        'hitpoints': 70,
        'attack': 95,
        'specialAttack': 120,
        'defense': 115,
        'specialDefense': 50,
        'speed': 85,
    },
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 187,
    'catchRate': 45,
}, {
    'id': 884.1,
    'name': 'Gigantamax Duraludon',
    'nativeRegion': GameConstants.Region.none,
    'type': [
        PokemonType.Steel,
        PokemonType.Dragon,
    ],
    'base': {
        'hitpoints': 140,
        'attack': 95,
        'specialAttack': 120,
        'defense': 115,
        'specialDefense': 50,
        'speed': 85,
    },
    'eggCycles': 30,
    'levelType': LevelType.mediumfast,
    'exp': 187,
    'catchRate': 45,
}, {
    'id': 885,
    'name': 'Dreepy',
    'type': [
        PokemonType.Dragon,
        PokemonType.Ghost,
    ],
    'base': {
        'hitpoints': 28,
        'attack': 60,
        'specialAttack': 40,
        'defense': 30,
        'specialDefense': 30,
        'speed': 82,
    },
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 54,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Dreepy', 'Drakloak', 50)],
}, {
    'id': 886,
    'name': 'Drakloak',
    'type': [
        PokemonType.Dragon,
        PokemonType.Ghost,
    ],
    'base': {
        'hitpoints': 68,
        'attack': 80,
        'specialAttack': 60,
        'defense': 50,
        'specialDefense': 50,
        'speed': 102,
    },
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 144,
    'catchRate': 45,
    'evolutions': [new LevelEvolution('Drakloak', 'Dragapult', 60)],
}, {
    'id': 887,
    'name': 'Dragapult',
    'type': [
        PokemonType.Dragon,
        PokemonType.Ghost,
    ],
    'base': {
        'hitpoints': 88,
        'attack': 120,
        'specialAttack': 100,
        'defense': 75,
        'specialDefense': 75,
        'speed': 142,
    },
    'eggCycles': 40,
    'levelType': LevelType.slow,
    'exp': 300,
    'catchRate': 45,
}, {
    'id': 888,
    'name': 'Zacian (Battle Hero)',
    'type': [PokemonType.Fairy],
    'base': {
        'hitpoints': 92,
        'attack': 130,
        'specialAttack': 80,
        'defense': 115,
        'specialDefense': 115,
        'speed': 138,
    },
    'eggCycles': 120,
    'evolutions': [new HeldItemLevelEvolution('Zacian (Battle Hero)', 'Zacian (Crowned Sword)', 100, 'Rusted_Sword')],
    'levelType': LevelType.slow,
    'exp': 335,
    'catchRate': 10,
    'heldItem': { type: ItemType.item, id: 'Rusted_Sword' },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 888.1,
    'name': 'Zacian (Crowned Sword)',
    'type': [PokemonType.Fairy, PokemonType.Steel],
    'base': {
        'hitpoints': 92,
        'attack': 170,
        'specialAttack': 80,
        'defense': 115,
        'specialDefense': 115,
        'speed': 148,
    },
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
    'catchRate': 10,
    'heldItem': { type: ItemType.item, id: 'Rusted_Sword' },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 889,
    'name': 'Zamazenta (Battle Hero)',
    'type': [PokemonType.Fighting],
    'base': {
        'hitpoints': 92,
        'attack': 130,
        'specialAttack': 80,
        'defense': 115,
        'specialDefense': 115,
        'speed': 138,
    },
    'eggCycles': 120,
    'evolutions': [new HeldItemLevelEvolution('Zamazenta (Battle Hero)', 'Zamazenta (Crowned Shield)', 100, 'Rusted_Shield')],
    'levelType': LevelType.slow,
    'exp': 335,
    'catchRate': 10,
    'heldItem': { type: ItemType.item, id: 'Rusted_Shield' },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 889.1,
    'name': 'Zamazenta (Crowned Shield)',
    'type': [PokemonType.Fighting, PokemonType.Steel],
    'base': {
        'hitpoints': 92,
        'attack': 130,
        'specialAttack': 80,
        'defense': 145,
        'specialDefense': 145,
        'speed': 128,
    },
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
    'catchRate': 10,
    'heldItem': { type: ItemType.item, id: 'Rusted_Shield' },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 890,
    'name': 'Eternatus',
    'type': [
        PokemonType.Poison,
        PokemonType.Dragon,
    ],
    'base': {
        'hitpoints': 140,
        'attack': 85,
        'specialAttack': 145,
        'defense': 95,
        'specialDefense': 95,
        'speed': 130,
    },
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 345,
    'catchRate': 255,
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 890.1,
    'name': 'Eternamax Eternatus',
    'nativeRegion': GameConstants.Region.none,
    'type': [
        PokemonType.Poison,
        PokemonType.Dragon,
    ],
    'base': {
        'hitpoints': 255,
        'attack': 115,
        'specialAttack': 125,
        'defense': 250,
        'specialDefense': 250,
        'speed': 130,
    },
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 345,
    'catchRate': 255,
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 891,
    'name': 'Kubfu',
    'type': [PokemonType.Fighting],
    'base': {
        'hitpoints': 60,
        'attack': 90,
        'specialAttack': 53,
        'defense': 60,
        'specialDefense': 50,
        'speed': 72,
    },
    'catchRate': 3,
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 892,
    'name': 'Urshifu (Single Strike)',
    'type': [
        PokemonType.Fighting,
        PokemonType.Dark,
    ],
    'base': {
        'hitpoints': 100,
        'attack': 130,
        'specialAttack': 63,
        'defense': 100,
        'specialDefense': 60,
        'speed': 97,
    },
    'catchRate': 3,
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 892.1,
    'name': 'Urshifu (Rapid Strike)',
    'type': [
        PokemonType.Fighting,
        PokemonType.Water,
    ],
    'base': {
        'hitpoints': 100,
        'attack': 130,
        'specialAttack': 63,
        'defense': 100,
        'specialDefense': 60,
        'speed': 97,
    },
    'catchRate': 3,
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 892.2,
    'name': 'Gigantamax Urshifu (Single Strike)',
    'nativeRegion': GameConstants.Region.none,
    'type': [
        PokemonType.Fighting,
        PokemonType.Dark,
    ],
    'base': {
        'hitpoints': 200,
        'attack': 130,
        'specialAttack': 63,
        'defense': 100,
        'specialDefense': 60,
        'speed': 97,
    },
    'catchRate': 3,
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 892.3,
    'name': 'Gigantamax Urshifu (Rapid Strike)',
    'nativeRegion': GameConstants.Region.none,
    'type': [
        PokemonType.Fighting,
        PokemonType.Water,
    ],
    'base': {
        'hitpoints': 200,
        'attack': 130,
        'specialAttack': 63,
        'defense': 100,
        'specialDefense': 60,
        'speed': 97,
    },
    'catchRate': 3,
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': 893,
    'name': 'Zarude',
    'type': [
        PokemonType.Dark,
        PokemonType.Grass,
    ],
    'base': {
        'hitpoints': 105,
        'attack': 120,
        'specialAttack': 70,
        'defense': 105,
        'specialDefense': 95,
        'speed': 105,
    },
    'catchRate': 3,
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 893.1,
    'name': 'Zarude (Dada)',
    'type': [
        PokemonType.Dark,
        PokemonType.Grass,
    ],
    'base': {
        'hitpoints': 105,
        'attack': 120,
        'specialAttack': 70,
        'defense': 105,
        'specialDefense': 95,
        'speed': 105,
    },
    'catchRate': 3,
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 894,
    'name': 'Regieleki',
    'type': [PokemonType.Electric],
    'base': {
        'hitpoints': 80,
        'attack': 100,
        'specialAttack': 100,
        'defense': 50,
        'specialDefense': 50,
        'speed': 200,
    },
    'catchRate': 3,
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 895,
    'name': 'Regidrago',
    'type': [PokemonType.Dragon],
    'base': {
        'hitpoints': 200,
        'attack': 100,
        'specialAttack': 100,
        'defense': 50,
        'specialDefense': 50,
        'speed': 80,
    },
    'catchRate': 3,
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 896,
    'name': 'Glastrier',
    'type': [PokemonType.Ice],
    'base': {
        'hitpoints': 100,
        'attack': 145,
        'specialAttack': 65,
        'defense': 130,
        'specialDefense': 110,
        'speed': 30,
    },
    'catchRate': 3,
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
    'heldItem': { type: ItemType.item, id: 'White_mane_hair' },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 897,
    'name': 'Spectrier',
    'type': [PokemonType.Ghost],
    'base': {
        'hitpoints': 100,
        'attack': 65,
        'specialAttack': 145,
        'defense': 60,
        'specialDefense': 80,
        'speed': 130,
    },
    'catchRate': 3,
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
    'heldItem': { type: ItemType.item, id: 'Black_mane_hair' },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 898,
    'name': 'Calyrex',
    'type': [PokemonType.Psychic, PokemonType.Grass],
    'base': {
        'hitpoints': 100,
        'attack': 80,
        'specialAttack': 80,
        'defense': 80,
        'specialDefense': 80,
        'speed': 80,
    },
    'catchRate': 3,
    'evolutions': [
        new StoneEvolution('Calyrex', 'Shadow Rider Calyrex', GameConstants.StoneType.Black_mane_hair),
        new StoneEvolution('Calyrex', 'Ice Rider Calyrex', GameConstants.StoneType.White_mane_hair),
    ],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 898.1,
    'name': 'Ice Rider Calyrex',
    'type': [PokemonType.Psychic, PokemonType.Ice],
    'base': {
        'hitpoints': 100,
        'attack': 165,
        'specialAttack': 85,
        'defense': 150,
        'specialDefense': 130,
        'speed': 50,
    },
    'catchRate': 3,
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, {
    'id': 898.2,
    'name': 'Shadow Rider Calyrex',
    'type': [PokemonType.Psychic, PokemonType.Ghost],
    'base': {
        'hitpoints': 100,
        'attack': 85,
        'specialAttack': 165,
        'defense': 80,
        'specialDefense': 100,
        'speed': 150,
    },
    'catchRate': 3,
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 335,
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, 
// Missingno.
{
    'id': 0,
    'name': 'MissingNo.',
    'nativeRegion': GameConstants.Region.none,
    'catchRate': 45,
    'type': [PokemonType.Flying, PokemonType.Normal],
    'levelType': LevelType.mediumslow,
    'exp': 64,
    'eggCycles': 20,
    'base': {
        'hitpoints': 178,
        'attack': 19,
        'specialAttack': 23,
        'defense': 11,
        'specialDefense': 23,
        'speed': 0,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, 
// Megas only between -100 → -199
{
    'id': -100,
    'name': 'Mega Venusaur',
    'nativeRegion': GameConstants.Region.kanto,
    'type': [PokemonType.Grass, PokemonType.Poison],
    'eggCycles': 120,
    'levelType': LevelType.mediumslow,
    'exp': 281,
    'catchRate': 10,
    'base': {
        'hitpoints': 80,
        'attack': 100,
        'specialAttack': 122,
        'defense': 123,
        'specialDefense': 120,
        'speed': 80,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, {
    'id': -101,
    'name': 'Mega Charizard X',
    'nativeRegion': GameConstants.Region.kanto,
    'type': [PokemonType.Fire, PokemonType.Dragon],
    'eggCycles': 120,
    'levelType': LevelType.mediumslow,
    'exp': 285,
    'catchRate': 10,
    'base': {
        'hitpoints': 78,
        'attack': 130,
        'specialAttack': 130,
        'defense': 111,
        'specialDefense': 85,
        'speed': 100,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, 
// {
//     'id': -102,
//     'name': 'Mega Charizard Y',
//     'type': [PokemonType.Fire, PokemonType.Flying],
//     'eggCycles': 120,
//     'levelType': LevelType.mediumslow,
//     'exp': 285,
//     'catchRate': 10,
//     'base': {
//         'hitpoints': 78,
//         'attack': 104,
//         'specialAttack': 154,
//         'defense': 78,
//         'specialDefense': 115,
//         'speed': 100,
//     },
// },
// {
//     'id': -103,
//     'name': 'Mega Blastoise',
//     'type': [PokemonType.Water],
//     'eggCycles': 120,
//     'levelType': LevelType.mediumslow,
//     'exp': 284,
//     'catchRate': 10,
//     'base': {
//         'hitpoints': 79,
//         'attack': 103,
//         'specialAttack': 135,
//         'defense': 120,
//         'specialDefense': 115,
//         'speed': 78,
//     },
// },
// {
//     'id': -104,
//     'name': 'Mega Beedrill',
//     'type': [PokemonType.Bug, PokemonType.Poison],
//     'eggCycles': 80,
//     'levelType': LevelType.mediumfast,
//     'exp': 223,
//     'catchRate': 10,
//     'base': {
//         'hitpoints': 65,
//         'attack': 150,
//         'specialAttack': 15,
//         'defense': 40,
//         'specialDefense': 80,
//         'speed': 145,
//     },
// },
// {
//     'id': -105,
//     'name': 'Mega Pidgeot',
//     'type': [PokemonType.Normal, PokemonType.Flying],
//     'eggCycles': 80,
//     'levelType': LevelType.mediumfast,
//     'exp': 261,
//     'catchRate': 10,
//     'base': {
//         'hitpoints': 83,
//         'attack': 80,
//         'specialAttack': 135,
//         'defense': 80,
//         'specialDefense': 80,
//         'speed': 121,
//     },
// },
// {
//     'id': -106,
//     'name': 'Mega Alakazam',
//     'type': [PokemonType.Psychic],
//     'eggCycles': 80,
//     'levelType': LevelType.mediumslow,
//     'exp': 270,
//     'catchRate': 10,
//     'base': {
//         'hitpoints': 55,
//         'attack': 50,
//         'specialAttack': 175,
//         'defense': 65,
//         'specialDefense': 105,
//         'speed': 150,
//     },
// },
// {
//     'id': -107,
//     'name': 'Mega Slowbro',
//     'type': [PokemonType.Water, PokemonType.Psychic],
//     'eggCycles': 80,
//     'levelType': LevelType.mediumfast,
//     'exp': 207,
//     'catchRate': 10,
//     'base': {
//         'hitpoints': 95,
//         'attack': 75,
//         'specialAttack': 130,
//         'defense': 180,
//         'specialDefense': 80,
//         'speed': 30,
//     },
// },
// {
//     'id': -108,
//     'name': 'Mega Gengar',
//     'type': [PokemonType.Poison, PokemonType.Ghost],
//     'eggCycles': 120,
//     'levelType': LevelType.mediumslow,
//     'exp': 207,
//     'catchRate': 10,
//     'base': {
//         'hitpoints': 60,
//         'attack': 65,
//         'specialAttack': 170,
//         'defense': 80,
//         'specialDefense': 95,
//         'speed': 130,
//     },
// },
// {
//     'id': -109,
//     'name': 'Mega Kangaskhan',
//     'type': [PokemonType.Normal],
//     'eggCycles': 120,
//     'levelType': LevelType.mediumslow,
//     'exp': 207,
//     'catchRate': 10,
//     'base': {
//         'hitpoints': 105,
//         'attack': 125,
//         'specialAttack': 60,
//         'defense': 100,
//         'specialDefense': 100,
//         'speed': 100,
//     },
// },
// {
//     'id': -110,
//     'name': 'Mega Pinsir',
//     'type': [PokemonType.Bug, PokemonType.Flying],
//     'eggCycles': 120,
//     'levelType': LevelType.mediumslow,
//     'exp': 210,
//     'catchRate': 10,
//     'base': {
//         'hitpoints': 65,
//         'attack': 155,
//         'specialAttack': 65,
//         'defense': 120,
//         'specialDefense': 90,
//         'speed': 105,
//     },
// },
{
    'id': -111,
    'name': 'Mega Gyarados',
    'nativeRegion': GameConstants.Region.kanto,
    'type': [PokemonType.Water, PokemonType.Dark],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 224,
    'catchRate': 10,
    'base': {
        'hitpoints': 95,
        'attack': 155,
        'specialAttack': 70,
        'defense': 109,
        'specialDefense': 130,
        'speed': 81,
    },
}, 
// {
//     'id': -112,
//     'name': 'Mega Aerodactyl',
//     'type': [PokemonType.Rock, PokemonType.Flying],
//     'eggCycles': 120,
//     'levelType': LevelType.mediumslow,
//     'exp': 215,
//     'catchRate': 10,
//     'base': {
//         'hitpoints': 80,
//         'attack': 135,
//         'specialAttack': 70,
//         'defense': 85,
//         'specialDefense': 95,
//         'speed': 150,
//     },
// },
// {
//     'id': -113,
//     'name': 'Mega Mewtwo X',
//     'type': [PokemonType.Psychic, PokemonType.Fighting],
//     'eggCycles': 120,
//     'levelType': LevelType.slow,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 106,
//         'attack': 190,
//         'specialAttack': 154,
//         'defense': 100,
//         'specialDefense': 100,
//         'speed': 130,
//     },
// },
// {
//     'id': -114,
//     'name': 'Mega Mewtwo Y',
//     'type': [PokemonType.Psychic],
//     'eggCycles': 120,
//     'levelType': LevelType.slow,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 106,
//         'attack': 150,
//         'specialAttack': 194,
//         'defense': 70,
//         'specialDefense': 120,
//         'speed': 140,
//     },
// },
// {
//     'id': -115,
//     'name': 'Mega Ampharos',
//     'type': [PokemonType.Electric, PokemonType.Dragon],
//     'eggCycles': 120,
//     'levelType': LevelType.mediumslow,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 90,
//         'attack': 95,
//         'specialAttack': 165,
//         'defense': 105,
//         'specialDefense': 110,
//         'speed': 45,
//     },
// },
// {
//     'id': -116,
//     'name': 'Mega Steelix',
//     'type': [PokemonType.Steel, PokemonType.Ground],
//     'eggCycles': 120,
//     'levelType': LevelType.mediumfast,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 75,
//         'attack': 125,
//         'specialAttack': 55,
//         'defense': 230,
//         'specialDefense': 95,
//         'speed': 30,
//     },
// },
// {
//     'id': -117,
//     'name': 'Mega Scizor',
//     'type': [PokemonType.Bug, PokemonType.Steel],
//     'eggCycles': 120,
//     'levelType': LevelType.mediumfast,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 70,
//         'attack': 150,
//         'specialAttack': 65,
//         'defense': 140,
//         'specialDefense': 100,
//         'speed': 75,
//     },
// },
// {
//     'id': -118,
//     'name': 'Mega Heracross',
//     'type': [PokemonType.Bug, PokemonType.Fighting],
//     'eggCycles': 120,
//     'levelType': LevelType.slow,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 80,
//         'attack': 185,
//         'specialAttack': 40,
//         'defense': 115,
//         'specialDefense': 105,
//         'speed': 75,
//     },
// },
// {
//     'id': -119,
//     'name': 'Mega Houndoom',
//     'type': [PokemonType.Fire, PokemonType.Dark],
//     'eggCycles': 120,
//     'levelType': LevelType.slow,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 75,
//         'attack': 90,
//         'specialAttack': 140,
//         'defense': 90,
//         'specialDefense': 90,
//         'speed': 115,
//     },
// },
// {
//     'id': -120,
//     'name': 'Mega Tyranitar',
//     'type': [PokemonType.Rock, PokemonType.Dark],
//     'eggCycles': 120,
//     'levelType': LevelType.slow,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 100,
//         'attack': 164,
//         'specialAttack': 95,
//         'defense': 150,
//         'specialDefense': 120,
//         'speed': 71,
//     },
// },
// {
//     'id': -121,
//     'name': 'Mega Sceptile',
//     'type': [PokemonType.Grass, PokemonType.Dragon],
//     'eggCycles': 120,
//     'levelType': LevelType.mediumslow,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 70,
//         'attack': 110,
//         'specialAttack': 145,
//         'defense': 75,
//         'specialDefense': 85,
//         'speed': 145,
//     },
// },
// {
//     'id': -122,
//     'name': 'Mega Blaziken',
//     'type': [PokemonType.Fire, PokemonType.Fighting],
//     'eggCycles': 120,
//     'levelType': LevelType.mediumslow,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 80,
//         'attack': 160,
//         'specialAttack': 130,
//         'defense': 80,
//         'specialDefense': 80,
//         'speed': 100,
//     },
// },
// {
//     'id': -123,
//     'name': 'Mega Swampert',
//     'type': [PokemonType.Water, PokemonType.Ground],
//     'eggCycles': 120,
//     'levelType': LevelType.mediumslow,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 100,
//         'attack': 150,
//         'specialAttack': 95,
//         'defense': 110,
//         'specialDefense': 110,
//         'speed': 70,
//     },
// },
{
    'id': -124,
    'name': 'Mega Gardevoir',
    'type': [PokemonType.Psychic, PokemonType.Fairy],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 351,
    'catchRate': 2,
    'base': {
        'hitpoints': 68,
        'attack': 85,
        'specialAttack': 165,
        'defense': 65,
        'specialDefense': 135,
        'speed': 100,
    },
}, 
// {
//     'id': -125,
//     'name': 'Mega Sableye',
//     'type': [PokemonType.Dark, PokemonType.Ghost],
//     'eggCycles': 120,
//     'levelType': LevelType.mediumslow,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 50,
//         'attack': 85,
//         'specialAttack': 85,
//         'defense': 125,
//         'specialDefense': 115,
//         'speed': 20,
//     },
// },
// {
//     'id': -126,
//     'name': 'Mega Mawile',
//     'type': [PokemonType.Steel, PokemonType.Fairy],
//     'eggCycles': 120,
//     'levelType': LevelType.fast,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 50,
//         'attack': 105,
//         'specialAttack': 55,
//         'defense': 125,
//         'specialDefense': 95,
//         'speed': 50,
//     },
// },
// {
//     'id': -127,
//     'name': 'Mega Aggron',
//     'type': [PokemonType.Steel],
//     'eggCycles': 120,
//     'levelType': LevelType.slow,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 70,
//         'attack': 140,
//         'specialAttack': 60,
//         'defense': 230,
//         'specialDefense': 80,
//         'speed': 50,
//     },
// },
// {
//     'id': -128,
//     'name': 'Mega Medicham',
//     'type': [PokemonType.Fighting, PokemonType.Psychic],
//     'eggCycles': 120,
//     'levelType': LevelType.mediumfast,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 60,
//         'attack': 100,
//         'specialAttack': 80,
//         'defense': 85,
//         'specialDefense': 85,
//         'speed': 100,
//     },
// },
// {
//     'id': -129,
//     'name': 'Mega Manectric',
//     'type': [PokemonType.Electric],
//     'eggCycles': 120,
//     'levelType': LevelType.slow,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 70,
//         'attack': 75,
//         'specialAttack': 135,
//         'defense': 80,
//         'specialDefense': 80,
//         'speed': 135,
//     },
// },
// {
//     'id': -130,
//     'name': 'Mega Sharpedo',
//     'type': [PokemonType.Water, PokemonType.Dark],
//     'eggCycles': 120,
//     'levelType': LevelType.slow,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 70,
//         'attack': 140,
//         'specialAttack': 110,
//         'defense': 70,
//         'specialDefense': 65,
//         'speed': 105,
//     },
// },
// {
//     'id': -131,
//     'name': 'Mega Camerupt',
//     'type': [PokemonType.Fire, PokemonType.Ground],
//     'eggCycles': 120,
//     'levelType': LevelType.mediumfast,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 70,
//         'attack': 120,
//         'specialAttack': 145,
//         'defense': 100,
//         'specialDefense': 105,
//         'speed': 20,
//     },
// },
// {
//     'id': -132,
//     'name': 'Mega Altaria',
//     'type': [PokemonType.Dragon, PokemonType.Fairy],
//     'eggCycles': 120,
//     'levelType': LevelType.erratic,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 75,
//         'attack': 110,
//         'specialAttack': 110,
//         'defense': 110,
//         'specialDefense': 105,
//         'speed': 80,
//     },
// },
// {
//     'id': -133,
//     'name': 'Mega Banette',
//     'type': [PokemonType.Ghost],
//     'eggCycles': 120,
//     'levelType': LevelType.fast,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 64,
//         'attack': 115,
//         'specialAttack': 83,
//         'defense': 65,
//         'specialDefense': 63,
//         'speed': 65,
//     },
// },
// {
//     'id': -134,
//     'name': 'Mega Absol',
//     'type': [PokemonType.Dark],
//     'eggCycles': 120,
//     'levelType': LevelType.mediumslow,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 65,
//         'attack': 150,
//         'specialAttack': 115,
//         'defense': 60,
//         'specialDefense': 60,
//         'speed': 115,
//     },
// },
// {
//     'id': -135,
//     'name': 'Mega Glalie',
//     'type': [PokemonType.Ice],
//     'eggCycles': 120,
//     'levelType': LevelType.mediumfast,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 80,
//         'attack': 120,
//         'specialAttack': 120,
//         'defense': 80,
//         'specialDefense': 80,
//         'speed': 100,
//     },
// },
// {
//     'id': -136,
//     'name': 'Mega Salamence',
//     'type': [PokemonType.Dragon, PokemonType.Flying],
//     'eggCycles': 120,
//     'levelType': LevelType.slow,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 95,
//         'attack': 145,
//         'specialAttack': 120,
//         'defense': 130,
//         'specialDefense': 90,
//         'speed': 120,
//     },
// },
// {
//     'id': -137,
//     'name': 'Mega Metagross',
//     'type': [PokemonType.Steel, PokemonType.Psychic],
//     'eggCycles': 120,
//     'levelType': LevelType.slow,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 80,
//         'attack': 145,
//         'specialAttack': 105,
//         'defense': 150,
//         'specialDefense': 110,
//         'speed': 110,
//     },
// },
// {
//     'id': -138,
//     'name': 'Mega Latias',
//     'type': [PokemonType.Dragon, PokemonType.Psychic],
//     'eggCycles': 120,
//     'levelType': LevelType.slow,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 80,
//         'attack': 100,
//         'specialAttack': 140,
//         'defense': 120,
//         'specialDefense': 150,
//         'speed': 110,
//     },
// },
// {
//     'id': -139,
//     'name': 'Mega Latios',
//     'type': [PokemonType.Dragon, PokemonType.Psychic],
//     'eggCycles': 120,
//     'levelType': LevelType.slow,
//     'exp': 351,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 80,
//         'attack': 130,
//         'specialAttack': 160,
//         'defense': 100,
//         'specialDefense': 120,
//         'speed': 110,
//     },
// },
// {
//     'id': -140,
//     'name': 'Primal Kyogre',
//     'type': [PokemonType.Water],
//     'eggCycles': 120,
//     'levelType': LevelType.slow,
//     'exp': 347,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 100,
//         'attack': 150,
//         'specialAttack': 180,
//         'defense': 90,
//         'specialDefense': 160,
//         'speed': 90,
//     },
// },
// {
//     'id': -141,
//     'name': 'Primal Groudon',
//     'type': [PokemonType.Ground, PokemonType.Fire],
//     'eggCycles': 120,
//     'levelType': LevelType.slow,
//     'exp': 347,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 100,
//         'attack': 180,
//         'specialAttack': 150,
//         'defense': 160,
//         'specialDefense': 90,
//         'speed': 90,
//     },
// },
{
    'id': -142,
    'name': 'Mega Rayquaza',
    'nativeRegion': GameConstants.Region.hoenn,
    'type': [PokemonType.Dragon, PokemonType.Flying],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 351,
    'catchRate': 1,
    'base': {
        'hitpoints': 105,
        'attack': 180,
        'specialAttack': 180,
        'defense': 100,
        'specialDefense': 100,
        'speed': 115,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
}, 
// {
//     'id': -143,
//     'name': 'Mega Lopunny',
//     'type': [PokemonType.Normal, PokemonType.Fighting],
//     'eggCycles': 120,
//     'levelType': LevelType.mediumfast,
//     'exp': 347,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 65,
//         'attack': 136,
//         'specialAttack': 54,
//         'defense': 94,
//         'specialDefense': 96,
//         'speed': 135,
//     },
// },
// {
//     'id': -144,
//     'name': 'Mega Garchomp',
//     'type': [PokemonType.Dragon, PokemonType.Ground],
//     'eggCycles': 120,
//     'levelType': LevelType.slow,
//     'exp': 347,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 108,
//         'attack': 170,
//         'specialAttack': 120,
//         'defense': 115,
//         'specialDefense': 95,
//         'speed': 92,
//     },
// },
{
    'id': -145,
    'name': 'Mega Lucario',
    'type': [PokemonType.Fighting, PokemonType.Steel],
    'eggCycles': 120,
    'levelType': LevelType.mediumslow,
    'exp': 347,
    'catchRate': 2,
    'base': {
        'hitpoints': 70,
        'attack': 145,
        'specialAttack': 140,
        'defense': 88,
        'specialDefense': 70,
        'speed': 112,
    },
    'gender': {
        'femaleRatio': 0.125,
    },
}, 
// {
//     'id': -146,
//     'name': 'Mega Abomasnow',
//     'type': [PokemonType.Grass, PokemonType.Ice],
//     'eggCycles': 120,
//     'levelType': LevelType.slow,
//     'exp': 347,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 90,
//         'attack': 132,
//         'specialAttack': 132,
//         'defense': 105,
//         'specialDefense': 105,
//         'speed': 30,
//     },
// },
// {
//     'id': -147,
//     'name': 'Mega Gallade',
//     'type': [PokemonType.Psychic, PokemonType.Fighting],
//     'eggCycles': 120,
//     'levelType': LevelType.slow,
//     'exp': 347,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 68,
//         'attack': 165,
//         'specialAttack': 65,
//         'defense': 95,
//         'specialDefense': 115,
//         'speed': 110,
//     },
// },
// {
//     'id': -148,
//     'name': 'Mega Audino',
//     'type': [PokemonType.Normal, PokemonType.Fairy],
//     'eggCycles': 120,
//     'levelType': LevelType.fast,
//     'exp': 347,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 103,
//         'attack': 60,
//         'specialAttack': 80,
//         'defense': 126,
//         'specialDefense': 126,
//         'speed': 50,
//     },
// },
// {
//     'id': -149,
//     'name': 'Mega Diancie',
//     'type': [PokemonType.Rock, PokemonType.Fairy],
//     'eggCycles': 120,
//     'levelType': LevelType.slow,
//     'exp': 347,
//     'catchRate': 2,
//     'base': {
//         'hitpoints': 50,
//         'attack': 160,
//         'specialAttack': 160,
//         'defense': 110,
//         'specialDefense': 110,
//         'speed': 110,
//     },
// },
{
    'id': -793,
    'name': '???',
    'nativeRegion': GameConstants.Region.alola,
    'type': [PokemonType.Rock, PokemonType.Poison],
    'eggCycles': 120,
    'levelType': LevelType.slow,
    'exp': 257,
    'catchRate': 45,
    'base': {
        'hitpoints': 109,
        'attack': 53,
        'specialAttack': 127,
        'defense': 47,
        'specialDefense': 131,
        'speed': 103,
    },
    'gender': {
        'type': GameConstants.Genders.Genderless,
    },
});
const pokemonNameIndex = {};
const maxEggCycles = Math.max(...pokemonList.map(p => p.eggCycles));
// This needs to be initiallised before pokemonMap as some other things rely on it for data
// Specifically Roamers not sure what else.
pokemonList.forEach(p => {
    var _a, _b;
    // Calculate our attack values
    const baseOffense = 2 * Math.round(Math.sqrt(p.base.attack * p.base.specialAttack) + Math.sqrt(p.base.speed));
    const baseDefense = 2 * Math.round(Math.sqrt(p.base.defense * p.base.specialDefense) + Math.sqrt(p.base.speed));
    const baseStamina = 2 * p.base.hitpoints;
    p.attack = Math.max(10, Math.floor(Math.sqrt(baseDefense * baseStamina) * baseOffense / 250));
    if (p.baby) {
        // Calculate prevolutions/baby pokemon
        // Egg steps should be lower than evolved form
        (_a = p.evolutions) === null || _a === void 0 ? void 0 : _a.forEach(evo => {
            var _a;
            pokemonBabyPrevolutionMap[evo.getEvolvedPokemon()] = evo.basePokemon;
            // Do another loop for adding last stage of evolution on "reproductive" pokemon
            (_a = pokemonList.find(_p => _p.name == evo.getEvolvedPokemon()).evolutions) === null || _a === void 0 ? void 0 : _a.forEach(lastStage => {
                pokemonBabyPrevolutionMap[lastStage.getEvolvedPokemon()] = lastStage.basePokemon;
            });
            const eggCycles = pokemonList.find(_p => _p.name == evo.getEvolvedPokemon()).eggCycles;
            p.eggCycles = Math.round(eggCycles * 0.8);
        });
    }
    else {
        // Calculate evolutions egg steps to be higher than the base forms
        (_b = p.evolutions) === null || _b === void 0 ? void 0 : _b.forEach(evo => {
            const poke = pokemonList.find(_p => _p.name == evo.getEvolvedPokemon());
            poke.eggCycles = Math.min(maxEggCycles, Math.round(p.eggCycles * 1.5));
        });
    }
    // Calculate this pokemons native region
    p.nativeRegion = p.nativeRegion || GameConstants.MaxIDPerRegion.findIndex(maxRegionID => maxRegionID >= Math.floor(p.id));
    // Create an index of pokemon
    pokemonNameIndex[p.name.toLowerCase()] = p;
    // Fill gender object as default
    p.gender = p.gender === undefined ? { 'type': GameConstants.Genders.MaleFemale, 'femaleRatio': 0.5, 'visualDifference': false } : p.gender;
    // Add GameConstants.Genders.MaleFemale as default gender type
    p.gender.type = p.gender.type === undefined ? GameConstants.Genders.MaleFemale : p.gender.type;
    // Add 0.5 as default gender ratio
    p.gender.femaleRatio = p.gender.femaleRatio === undefined ? 0.5 : p.gender.femaleRatio;
    // Add false as default gender visual difference
    p.gender.visualDifference = p.gender.visualDifference === undefined ? false : p.gender.visualDifference;
});
const pokemonMap = new GenericProxy(pokemonList, {
    get: (pokemon, prop) => {
        var _a, _b;
        if (!isNaN(+prop)) {
            const id = +prop;
            const pokemonByID = pokemon.find(p => p.id == id);
            if (pokemonByID) {
                return pokemonByID;
            }
        }
        switch (prop) {
            case 'random':
                return (_max = 0, _min = 0) => {
                    // minimum 0
                    const min = Math.max(0, Math.min(_min, _max));
                    // maximum is same as however many pokemon are available
                    const max = Math.min(pokemon.length, Math.max(_min, _max));
                    // Decide on a base ID first (so we aren't weighted towards pokemon with multiple forms such as Alcremie)
                    const basePokemonIDs = [...new Set(pokemon.filter(p => p.id >= min && p.id <= max).map(p => Math.floor(p.id)))];
                    const ID = Rand.fromArray(basePokemonIDs);
                    // Choose a Pokemon with that base ID
                    const poke = Rand.fromArray(pokemon.filter(p => Math.floor(p.id) === ID && p.id >= min && p.id <= max));
                    return poke || pokemon.find(p => p.id == 0);
                };
            case 'randomRegion':
                return (_max = GameConstants.Region.kanto, _min = GameConstants.Region.kanto) => {
                    // minimum 0 (Kanto)
                    const min = Math.max(GameConstants.Region.kanto, Math.min(_min, _max));
                    const max = Math.max(GameConstants.Region.kanto, _min, _max);
                    // Decide on a base ID first (so we aren't weighted towards pokemon with multiple forms such as Alcremie)
                    const basePokemonIDs = [...new Set(pokemon.filter(p => p.id > 0 && p.nativeRegion >= min && p.nativeRegion <= max).map(p => Math.floor(p.id)))];
                    const ID = Rand.fromArray(basePokemonIDs);
                    // Choose a Pokemon with that base ID
                    const poke = Rand.fromArray(pokemon.filter(p => Math.floor(p.id) === ID && p.nativeRegion >= min && p.nativeRegion <= max));
                    // return a random Pokemon or MissingNo if none found
                    return poke || pokemon.find(p => p.id == 0);
                };
            default:
                return pokemonNameIndex[prop.toLowerCase()] || ((_b = (_a = pokemon[prop]) === null || _a === void 0 ? void 0 : _a.bind) === null || _b === void 0 ? void 0 : _b.call(pokemon[prop], pokemon)) || pokemon[prop] || pokemon.find(p => p.id == 0);
        }
    },
});
///<reference path="PokemonList.ts"/>
///<reference path="../GameConstants.d.ts"/>
var PokemonLocationType;
(function (PokemonLocationType) {
    PokemonLocationType[PokemonLocationType["Route"] = 0] = "Route";
    PokemonLocationType[PokemonLocationType["Roaming"] = 1] = "Roaming";
    PokemonLocationType[PokemonLocationType["Dungeon"] = 2] = "Dungeon";
    PokemonLocationType[PokemonLocationType["DungeonBoss"] = 3] = "DungeonBoss";
    PokemonLocationType[PokemonLocationType["DungeonChest"] = 4] = "DungeonChest";
    PokemonLocationType[PokemonLocationType["Evolution"] = 5] = "Evolution";
    PokemonLocationType[PokemonLocationType["Egg"] = 6] = "Egg";
    PokemonLocationType[PokemonLocationType["Baby"] = 7] = "Baby";
    PokemonLocationType[PokemonLocationType["Shop"] = 8] = "Shop";
    PokemonLocationType[PokemonLocationType["Fossil"] = 9] = "Fossil";
    PokemonLocationType[PokemonLocationType["Safari"] = 10] = "Safari";
    PokemonLocationType[PokemonLocationType["BattleFrontier"] = 11] = "BattleFrontier";
    PokemonLocationType[PokemonLocationType["Wandering"] = 12] = "Wandering";
    PokemonLocationType[PokemonLocationType["Discord"] = 13] = "Discord";
})(PokemonLocationType || (PokemonLocationType = {}));
class PokemonHelper {
    static getPokemonsWithEvolution(evoType) {
        return App.game.party.caughtPokemon.filter((partyPokemon) => {
            if (!partyPokemon.evolutions) {
                return false;
            }
            for (const evolution of partyPokemon.evolutions) {
                if (evolution instanceof StoneEvolution && evolution.stone == evoType && evolution.isSatisfied() && PokemonHelper.calcNativeRegion(evolution.getEvolvedPokemon()) <= player.highestRegion()) {
                    return true;
                }
            }
            return false;
        }).sort((a, b) => a.id - b.id);
    }
    static getEvolution(id, evoType) {
        const pokemon = App.game.party.getPokemon(id);
        if (pokemon) {
            for (const evolution of pokemon.evolutions) {
                if (evolution instanceof StoneEvolution && evolution.stone == evoType) {
                    return evolution.getEvolvedPokemon();
                }
            }
        }
        return '';
    }
    static getPokemonById(id) {
        return this.getPokemonByName(pokemonMap[id].name);
    }
    static getPokemonByName(name) {
        var _a;
        const basePokemon = pokemonMap[name];
        if (!basePokemon) {
            console.warn('Could not find pokemon', name);
            return;
        }
        const type1 = basePokemon.type[0];
        const type2 = (_a = basePokemon.type[1]) !== null && _a !== void 0 ? _a : PokemonType.None;
        const eggCycles = basePokemon.eggCycles || 20;
        return new DataPokemon(basePokemon.id, basePokemon.name, basePokemon.catchRate, basePokemon.evolutions, type1, type2, basePokemon.attack, basePokemon.base.hitpoints, basePokemon.levelType, basePokemon.exp, eggCycles, basePokemon.heldItem, basePokemon.gender);
    }
    static typeStringToId(id) {
        return PokemonType[id];
    }
    static typeIdToString(id) {
        return PokemonType[id];
    }
    static getImage(pokemonId, shiny = undefined, gender = undefined) {
        var _a, _b;
        let src = 'assets/images/';
        if (shiny === undefined) {
            shiny = App.game.party.alreadyCaughtPokemon(pokemonId, true);
        }
        if (gender === undefined) {
            gender = (_b = (_a = App.game.party.getPokemon(pokemonId)) === null || _a === void 0 ? void 0 : _a.defaultFemaleSprite()) !== null && _b !== void 0 ? _b : false;
        }
        if (shiny) {
            src += 'shiny';
        }
        let genderString = '';
        // If Pokémon is female, use the female sprite, otherwise use the male/genderless one
        const hasDiff = this.getPokemonById(pokemonId).gender.visualDifference;
        if (hasDiff) {
            if (gender) {
                genderString = '-f';
            }
        }
        src += `pokemon/${pokemonId}${genderString}.png`;
        return src;
    }
    static getPokeballImage(pokemonName) {
        let src = '';
        if (App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(pokemonName).id)) {
            src = 'assets/images/pokeball/Pokeball-';
            if (App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(pokemonName).id, true)) {
                src += 'shiny-';
            }
            src += 'small.png';
        }
        return src;
    }
    static calcNativeRegion(pokemonName) {
        const pokemon = pokemonMap[pokemonName];
        if (pokemon.nativeRegion != undefined) {
            return pokemon.nativeRegion;
        }
        const id = pokemon.id;
        const region = GameConstants.MaxIDPerRegion.findIndex(maxRegionID => maxRegionID >= Math.floor(id));
        return region >= 0 ? region : GameConstants.Region.none;
    }
    static calcUniquePokemonsByRegion(region) {
        return new Set(pokemonList.filter(p => p.id > 0 && PokemonHelper.calcNativeRegion(p.name) === region).map(p => Math.floor(p.id))).size;
    }
    // To have encounter/caught/defeat/hatch statistics in a single place
    static incrementPokemonStatistics(pokemonId, statistic, shiny, gender) {
        const pokemonStatistics = {
            'Captured': App.game.statistics.pokemonCaptured[pokemonId],
            'Defeated': App.game.statistics.pokemonDefeated[pokemonId],
            'Encountered': App.game.statistics.pokemonEncountered[pokemonId],
            'Hatched': App.game.statistics.pokemonHatched[pokemonId],
            'MaleCaptured': App.game.statistics.malePokemonCaptured[pokemonId],
            'MaleDefeated': App.game.statistics.malePokemonDefeated[pokemonId],
            'MaleEncountered': App.game.statistics.malePokemonEncountered[pokemonId],
            'MaleHatched': App.game.statistics.malePokemonHatched[pokemonId],
            'FemaleCaptured': App.game.statistics.femalePokemonCaptured[pokemonId],
            'FemaleDefeated': App.game.statistics.femalePokemonDefeated[pokemonId],
            'FemaleEncountered': App.game.statistics.femalePokemonEncountered[pokemonId],
            'FemaleHatched': App.game.statistics.femalePokemonHatched[pokemonId],
            'ShinyCaptured': App.game.statistics.shinyPokemonCaptured[pokemonId],
            'ShinyDefeated': App.game.statistics.shinyPokemonDefeated[pokemonId],
            'ShinyEncountered': App.game.statistics.shinyPokemonEncountered[pokemonId],
            'ShinyHatched': App.game.statistics.shinyPokemonHatched[pokemonId],
            'ShinyMaleCaptured': App.game.statistics.shinyMalePokemonCaptured[pokemonId],
            'ShinyMaleDefeated': App.game.statistics.shinyMalePokemonDefeated[pokemonId],
            'ShinyMaleEncountered': App.game.statistics.shinyMalePokemonEncountered[pokemonId],
            'ShinyMaleHatched': App.game.statistics.shinyMalePokemonHatched[pokemonId],
            'ShinyFemaleCaptured': App.game.statistics.shinyFemalePokemonCaptured[pokemonId],
            'ShinyFemaleDefeated': App.game.statistics.shinyFemalePokemonDefeated[pokemonId],
            'ShinyFemaleEncountered': App.game.statistics.shinyFemalePokemonEncountered[pokemonId],
            'ShinyFemaleHatched': App.game.statistics.shinyFemalePokemonHatched[pokemonId],
        };
        const totalStatistics = {
            'Captured': App.game.statistics.totalPokemonCaptured,
            'Defeated': App.game.statistics.totalPokemonDefeated,
            'Encountered': App.game.statistics.totalPokemonEncountered,
            'Hatched': App.game.statistics.totalPokemonHatched,
            'MaleCaptured': App.game.statistics.totalMalePokemonCaptured,
            'MaleDefeated': App.game.statistics.totalMalePokemonDefeated,
            'MaleEncountered': App.game.statistics.totalMalePokemonEncountered,
            'MaleHatched': App.game.statistics.totalMalePokemonHatched,
            'FemaleCaptured': App.game.statistics.totalFemalePokemonCaptured,
            'FemaleDefeated': App.game.statistics.totalFemalePokemonDefeated,
            'FemaleEncountered': App.game.statistics.totalFemalePokemonEncountered,
            'FemaleHatched': App.game.statistics.totalFemalePokemonHatched,
            'GenderlessCaptured': App.game.statistics.totalGenderlessPokemonCaptured,
            'GenderlessDefeated': App.game.statistics.totalGenderlessPokemonDefeated,
            'GenderlessEncountered': App.game.statistics.totalGenderlessPokemonEncountered,
            'GenderlessHatched': App.game.statistics.totalGenderlessPokemonHatched,
            'ShinyCaptured': App.game.statistics.totalShinyPokemonCaptured,
            'ShinyDefeated': App.game.statistics.totalShinyPokemonDefeated,
            'ShinyEncountered': App.game.statistics.totalShinyPokemonEncountered,
            'ShinyHatched': App.game.statistics.totalShinyPokemonHatched,
            'ShinyMaleCaptured': App.game.statistics.totalShinyMalePokemonCaptured,
            'ShinyMaleDefeated': App.game.statistics.totalShinyMalePokemonDefeated,
            'ShinyMaleEncountered': App.game.statistics.totalShinyMalePokemonEncountered,
            'ShinyMaleHatched': App.game.statistics.totalShinyMalePokemonHatched,
            'ShinyFemaleCaptured': App.game.statistics.totalShinyFemalePokemonCaptured,
            'ShinyFemaleDefeated': App.game.statistics.totalShinyFemalePokemonDefeated,
            'ShinyFemaleEncountered': App.game.statistics.totalShinyFemalePokemonEncountered,
            'ShinyFemaleHatched': App.game.statistics.totalShinyFemalePokemonHatched,
            'ShinyGenderlessCaptured': App.game.statistics.totalShinyGenderlessPokemonCaptured,
            'ShinyGenderlessDefeated': App.game.statistics.totalShinyGenderlessPokemonDefeated,
            'ShinyGenderlessEncountered': App.game.statistics.totalShinyGenderlessPokemonEncountered,
            'ShinyGenderlessHatched': App.game.statistics.totalShinyGenderlessPokemonHatched,
        };
        let genderString = '';
        // Gender Statistics
        if (gender === GameConstants.BattlePokemonGender.Male) {
            genderString = 'Male';
        }
        else if (gender === GameConstants.BattlePokemonGender.Female) {
            genderString = 'Female';
        }
        else if (gender === GameConstants.BattlePokemonGender.NoGender) {
            genderString = 'Genderless';
        }
        GameHelper.incrementObservable(pokemonStatistics[statistic]);
        GameHelper.incrementObservable(totalStatistics[statistic]);
        // Gender
        if (gender != GameConstants.BattlePokemonGender.NoGender) {
            GameHelper.incrementObservable(pokemonStatistics[genderString + statistic]);
        }
        GameHelper.incrementObservable(totalStatistics[genderString + statistic]);
        if (shiny) {
            const shinyString = 'Shiny';
            GameHelper.incrementObservable(pokemonStatistics[shinyString + statistic]);
            GameHelper.incrementObservable(totalStatistics[shinyString + statistic]);
            // Gender
            if (gender != GameConstants.BattlePokemonGender.NoGender) {
                GameHelper.incrementObservable(pokemonStatistics[shinyString + genderString + statistic]);
            }
            GameHelper.incrementObservable(totalStatistics[shinyString + genderString + statistic]);
        }
    }
    /*
    PRETTY MUCH ONLY USED BY THE BOT BELOW
    */
    static getPokemonRegionRoutes(pokemonName, maxRegion = GameConstants.Region.none) {
        const regionRoutes = {};
        Routes.regionRoutes.forEach(routeData => {
            var _a;
            const region = routeData.region;
            // If we only want to check up to a maximum region
            if (maxRegion != GameConstants.Region.none && region > maxRegion) {
                return false;
            }
            Object.entries(routeData.pokemon).forEach(([encounterType, pokemon]) => {
                if (Object.values(pokemon).flat().includes(pokemonName)) {
                    if (!regionRoutes[region]) {
                        regionRoutes[region] = [];
                    }
                    regionRoutes[region].push({ route: routeData.number });
                }
            });
            (_a = routeData.pokemon.special) === null || _a === void 0 ? void 0 : _a.forEach(special => {
                if (special.pokemon.includes(pokemonName)) {
                    if (!regionRoutes[region]) {
                        regionRoutes[region] = [];
                    }
                    regionRoutes[region].push({ route: routeData.number, requirements: special.req.hint() });
                }
            });
            return true;
        });
        return regionRoutes;
    }
    static getPokemonDungeons(pokemonName, maxRegion = GameConstants.Region.none) {
        const dungeons = [];
        Object.entries(dungeonList).forEach(([dungeonName, dungeon]) => {
            // If we only want to check up to a maximum region
            if (maxRegion != GameConstants.Region.none) {
                const region = GameConstants.RegionDungeons.findIndex(d => d.includes(dungeonName));
                if (region > maxRegion) {
                    return false;
                }
            }
            // Dungeon Grunt
            if (dungeon.pokemonList.includes(pokemonName)) {
                dungeons.push(dungeonName);
            }
        });
        return dungeons;
    }
    static getPokemonBossDungeons(pokemonName, maxRegion = GameConstants.Region.none) {
        const dungeons = [];
        Object.entries(dungeonList).forEach(([dungeonName, dungeon]) => {
            var _a, _b;
            // If we only want to check up to a maximum region
            if (maxRegion != GameConstants.Region.none) {
                const region = GameConstants.RegionDungeons.findIndex(d => d.includes(dungeonName));
                if (region > maxRegion) {
                    return false;
                }
            }
            // Dungeon Boss
            const boss = dungeon.availableBosses(false, true).find(boss => boss.name == pokemonName);
            if (boss) {
                const data = {
                    dungeon: dungeonName,
                    requirements: (_b = (_a = boss.options) === null || _a === void 0 ? void 0 : _a.requirement) === null || _b === void 0 ? void 0 : _b.hint(),
                };
                dungeons.push(data);
            }
        });
        return dungeons;
    }
    static getPokemonChestDungeons(pokemonName, maxRegion = GameConstants.Region.none) {
        const dungeons = [];
        Object.entries(dungeonList).forEach(([dungeonName, dungeon]) => {
            // If we only want to check up to a maximum region
            if (maxRegion != GameConstants.Region.none) {
                const region = GameConstants.RegionDungeons.findIndex(d => d.includes(dungeonName));
                if (region > maxRegion) {
                    return false;
                }
            }
            // Dungeon Chest
            Object.values(dungeon.lootTable).flat().forEach(i => {
                var _a;
                if (i.loot == pokemonName) {
                    const data = {
                        dungeon: dungeonName,
                        requirements: (_a = i.requirement) === null || _a === void 0 ? void 0 : _a.hint(),
                    };
                    dungeons.push(data);
                }
            });
        });
        return dungeons;
    }
    static getPokemonEggs(pokemonName, maxRegion = GameConstants.Region.none) {
        const eggTypes = [];
        Object.entries(App.game.breeding.hatchList).forEach(([eggType, eggArr]) => {
            eggArr.forEach((pokemonArr, region) => {
                // If we only want to check up to a maximum region
                if (maxRegion != GameConstants.Region.none && region > maxRegion) {
                    return false;
                }
                if (pokemonArr.includes(pokemonName)) {
                    eggTypes.push(EggType[eggType]);
                }
            });
        });
        return eggTypes;
    }
    static getPokemonShops(pokemonName, maxRegion = GameConstants.Region.none) {
        const shops = [];
        Object.entries(TownList).forEach(([townName, town]) => {
            // Check if the shop has items
            const townShops = town.content.filter(c => c instanceof Shop && c.items);
            if (townShops.length) {
                // If we only want to check up to a maximum region
                const region = town.region;
                if (maxRegion != GameConstants.Region.none && region > maxRegion) {
                    return false;
                }
                const hasPokemon = townShops.find(ts => { var _a; return (_a = ts.items) === null || _a === void 0 ? void 0 : _a.find(item => item.name == pokemonName); });
                if (hasPokemon) {
                    shops.push(townName);
                }
            }
        });
        return shops;
    }
    static getPokemonRoamingRegions(pokemonName, maxRegion = GameConstants.Region.none) {
        const regions = [];
        Object.entries(RoamingPokemonList.list).forEach(([region, regionArr]) => {
            var _a;
            if (maxRegion != GameConstants.Region.none && (+region) > maxRegion) {
                return false;
            }
            const pokemon = regionArr.flat().find(r => r.pokemon.name == pokemonName);
            if (pokemon) {
                const data = {
                    region: +region,
                    requirements: (_a = pokemon.unlockRequirement) === null || _a === void 0 ? void 0 : _a.hint(),
                };
                regions.push(data);
            }
        });
        return regions;
    }
    static getPokemonParents(pokemonName, maxRegion = GameConstants.Region.none) {
        const parents = [];
        Object.entries(pokemonBabyPrevolutionMap).forEach(([parent, baby]) => {
            if (baby == pokemonName) {
                if (maxRegion != GameConstants.Region.none && pokemonMap[parent].nativeRegion > maxRegion) {
                    return false;
                }
                parents.push(parent);
            }
        });
        return parents;
    }
    static getPokemonFossils(pokemonName) {
        const fossils = [];
        Object.entries(GameConstants.FossilToPokemon).forEach(([fossil, pokemon]) => {
            if (pokemon == pokemonName) {
                fossils.push(fossil);
            }
        });
        return fossils;
    }
    static getPokemonSafariChance(pokemonName) {
        const safariWeight = SafariPokemon.list.reduce((sum, p) => sum += p.weight, 0);
        const safariPokemon = SafariPokemon.list.find(p => p.name == pokemonName);
        return safariPokemon ? +((SafariPokemon.calcPokemonWeight(safariPokemon) / safariWeight) * 100).toFixed(2) : 0;
    }
    static getPokemonPrevolution(pokemonName, maxRegion = GameConstants.Region.none) {
        const evolutions = [];
        const prevolutionPokemon = pokemonList.filter((p) => { var _a; return (_a = p.evolutions) === null || _a === void 0 ? void 0 : _a.find(e => e.getEvolvedPokemon() == pokemonName); });
        prevolutionPokemon.forEach((p) => p.evolutions.forEach(e => {
            if (e.getEvolvedPokemon() == pokemonName) {
                if (maxRegion != GameConstants.Region.none && p.nativeRegion > maxRegion) {
                    return false;
                }
                evolutions.push(e);
            }
        }));
        return evolutions;
    }
    static getPokemonLevelPrevolution(pokemonName, maxRegion = GameConstants.Region.none) {
        var _a, _b;
        const evolutionPokemon = pokemonList.find((p) => { var _a; return (_a = p.evolutions) === null || _a === void 0 ? void 0 : _a.find(e => e.type.includes(EvolutionType.Level) && e.getEvolvedPokemon() == pokemonName); });
        if (maxRegion != GameConstants.Region.none && pokemonMap[evolutionPokemon.name].nativeRegion > maxRegion) {
            return;
        }
        return (_b = (_a = evolutionPokemon) === null || _a === void 0 ? void 0 : _a.evolutions) === null || _b === void 0 ? void 0 : _b.find(e => e.getEvolvedPokemon() == pokemonName);
    }
    static getPokemonStonePrevolution(pokemonName, maxRegion = GameConstants.Region.none) {
        var _a, _b;
        const evolutionPokemon = pokemonList.find((p) => { var _a; return (_a = p.evolutions) === null || _a === void 0 ? void 0 : _a.find(e => e.type.includes(EvolutionType.Stone) && e.getEvolvedPokemon() == pokemonName); });
        if (maxRegion != GameConstants.Region.none && pokemonMap[evolutionPokemon.name].nativeRegion > maxRegion) {
            return;
        }
        return (_b = (_a = evolutionPokemon) === null || _a === void 0 ? void 0 : _a.evolutions) === null || _b === void 0 ? void 0 : _b.find(e => e.getEvolvedPokemon() == pokemonName);
    }
    static getPokemonBattleFrontier(pokemonName) {
        const stages = [];
        BattleFrontierMilestones.milestoneRewards.filter(m => m instanceof BattleFrontierMilestonePokemon).forEach(milestone => {
            if (milestone._description == pokemonName) {
                stages.push(milestone.stage);
            }
        });
        return stages;
    }
    static getPokemonWandering(pokemonName) {
        const berries = [];
        if (Berry.baseWander.includes(pokemonName)) {
            return ['Always'];
        }
        App.game.farming.berryData.forEach((berry) => {
            if (berry.wander.includes(pokemonName)) {
                berries.push(BerryType[berry.type]);
            }
        });
        return berries;
    }
    static getPokemonDiscord(pokemonName) {
        const codes = [];
        App.game.discord.codes.forEach(code => {
            if (code.name == pokemonName) {
                codes.push(code.price);
            }
        });
        return codes;
    }
}
PokemonHelper.getPokemonLocations = (pokemonName, maxRegion = GameConstants.Region.none) => {
    const encounterTypes = {};
    // Routes
    const regionRoutes = PokemonHelper.getPokemonRegionRoutes(pokemonName, maxRegion);
    if (Object.keys(regionRoutes).length) {
        encounterTypes[PokemonLocationType.Route] = regionRoutes;
    }
    // Dungeons
    const dungeons = PokemonHelper.getPokemonDungeons(pokemonName, maxRegion);
    if (dungeons.length) {
        encounterTypes[PokemonLocationType.Dungeon] = dungeons;
    }
    // Dungeon Boss
    const bossDungeons = PokemonHelper.getPokemonBossDungeons(pokemonName, maxRegion);
    if (bossDungeons.length) {
        encounterTypes[PokemonLocationType.DungeonBoss] = bossDungeons;
    }
    // Dungeon Chest
    const chestDungeons = PokemonHelper.getPokemonChestDungeons(pokemonName, maxRegion);
    if (chestDungeons.length) {
        encounterTypes[PokemonLocationType.DungeonChest] = chestDungeons;
    }
    // Eggs
    const eggs = PokemonHelper.getPokemonEggs(pokemonName, maxRegion);
    if (eggs.length) {
        encounterTypes[PokemonLocationType.Egg] = eggs;
    }
    // Shops
    const shops = PokemonHelper.getPokemonShops(pokemonName, maxRegion);
    if (shops.length) {
        encounterTypes[PokemonLocationType.Shop] = shops;
    }
    // Roaming
    const roaming = PokemonHelper.getPokemonRoamingRegions(pokemonName, maxRegion);
    if (roaming.length) {
        encounterTypes[PokemonLocationType.Roaming] = roaming;
    }
    // Baby
    const parents = PokemonHelper.getPokemonParents(pokemonName, maxRegion);
    if (parents.length) {
        encounterTypes[PokemonLocationType.Baby] = parents;
    }
    // Fossil
    const fossils = PokemonHelper.getPokemonFossils(pokemonName);
    if (fossils.length) {
        encounterTypes[PokemonLocationType.Fossil] = fossils;
    }
    // Safari
    const safariChance = PokemonHelper.getPokemonSafariChance(pokemonName);
    if (safariChance) {
        encounterTypes[PokemonLocationType.Safari] = `${safariChance}%`;
    }
    // Evolution
    const evolutions = PokemonHelper.getPokemonPrevolution(pokemonName, maxRegion);
    if (evolutions.length) {
        encounterTypes[PokemonLocationType.Evolution] = evolutions;
    }
    // Battle Frontier
    const battleFrontier = PokemonHelper.getPokemonBattleFrontier(pokemonName);
    if (battleFrontier.length) {
        encounterTypes[PokemonLocationType.BattleFrontier] = battleFrontier;
    }
    // Wandering
    const wandering = PokemonHelper.getPokemonWandering(pokemonName);
    if (wandering.length) {
        encounterTypes[PokemonLocationType.Wandering] = wandering;
    }
    // Wandering
    const discord = PokemonHelper.getPokemonDiscord(pokemonName);
    if (discord.length) {
        encounterTypes[PokemonLocationType.Discord] = discord;
    }
    // Return the list of items
    return encounterTypes;
};
/// <reference path="../../declarations/GameHelper.d.ts" />
class BattlePokemon {
    /**
     * In case you want to manually create a Pokémon instead of generating it from the route number
     * @param name Pokémon name
     * @param id Pokémon
     * @param type1 First type of the Pokémon
     * @param type2 Second type of the Pokémon
     * @param maxHealth max health that the Pokémon can have
     * @param level level is 2 times the current route
     * @param catchRate base chance of catching this Pokémon
     * @param exp base exp reward for defeating this Pokémon
     * @param reward currency reward for defeating this Pokémon
     * @param shiny is a shiny variant
     * @param gender Pokémon gender
     * @param [heldItem] item to possibly gain for defeating this Pokémon
     */
    constructor(name, id, type1 = PokemonType.None, type2 = PokemonType.None, maxHealth, level, catchRate, exp, reward = new Amount(0, GameConstants.Currency.money), shiny, gemReward = 1, gender, heldItem, ep) {
        this.name = name;
        this.id = id;
        this.type1 = type1;
        this.type2 = type2;
        this.level = level;
        this.catchRate = catchRate;
        this.exp = exp;
        this.reward = reward;
        this.shiny = shiny;
        this.gemReward = gemReward;
        this.gender = gender;
        this.heldItem = heldItem;
        this.ep = ep;
        this.health = ko.observable(maxHealth);
        this.maxHealth = ko.observable(maxHealth);
        this.healthPercentage = ko.observable(100);
    }
    isAlive() {
        return this.health() > 0;
    }
    /**
     * Lost health without
     * @param damage
     */
    damage(damage) {
        this.health(Math.max(0, this.health() - damage));
        this.healthPercentage(Math.floor(this.health() / this.maxHealth() * 100));
    }
    defeat(trainer = false) {
        PokemonHelper.incrementPokemonStatistics(this.id, GameConstants.STATISTIC_DEFEATED, this.shiny, this.gender);
        if (this.reward.amount > 0) {
            App.game.wallet.addAmount(this.reward);
        }
        if (this.heldItem) {
            const name = BagHandler.displayName(this.heldItem);
            BagHandler.gainItem(this.heldItem);
            const msg = `${this.name} dropped ${GameHelper.anOrA(name)} ${name}!`;
            Notifier.notify({
                message: `The enemy ${msg} <img src="${BagHandler.image(this.heldItem)}" height="24px"/>`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Items.dropped_item,
            });
            App.game.logbook.newLog(LogBookTypes.FOUND, `An enemy ${msg}`);
        }
        App.game.party.gainExp(this.exp, this.level, trainer);
        App.game.gems.gainGems(this.gemReward, this.type1);
        App.game.gems.gainGems(this.gemReward, this.type2);
    }
}
///<reference path="PokemonHelper.ts"/>
///<reference path="BattlePokemon.ts"/>
class PokemonFactory {
    /**
     * Generate a wild pokemon based on route, region and the dataList.
     * @param route route that the player is on.
     * @param region region that the player is in.
     * @returns {any}
     */
    static generateWildPokemon(route, region, subRegion) {
        if (!MapHelper.validRoute(route, region)) {
            return new BattlePokemon('MissingNo.', 0, PokemonType.None, PokemonType.None, 0, 0, 0, 0, new Amount(0, GameConstants.Currency.money), false, 0, GameConstants.BattlePokemonGender.NoGender);
        }
        let name;
        const roaming = PokemonFactory.roamingEncounter(route, region, subRegion);
        if (roaming) {
            name = PokemonFactory.generateRoamingEncounter(region, subRegion);
        }
        else {
            name = Rand.fromArray(RouteHelper.getAvailablePokemonList(route, region));
        }
        const basePokemon = PokemonHelper.getPokemonByName(name);
        const id = basePokemon.id;
        const routeAvgHp = (region, route) => {
            const poke = [...new Set(Object.values(Routes.getRoute(region, route).pokemon).flat().map(p => { var _a; return (_a = p.pokemon) !== null && _a !== void 0 ? _a : p; }).flat())];
            const total = poke.map(p => pokemonMap[p].base.hitpoints).reduce((s, a) => s + a, 0);
            return total / poke.length;
        };
        // TODO this monster formula needs to be improved. Preferably with graphs :D
        // Health has a +/- 10% variable based on base health stat compared to the average of the route
        const maxHealth = Math.round((PokemonFactory.routeHealth(route, region) - (PokemonFactory.routeHealth(route, region) / 10)) + (PokemonFactory.routeHealth(route, region) / 10 / routeAvgHp(region, route) * basePokemon.hitpoints));
        const catchRate = this.catchRateHelper(basePokemon.catchRate);
        const exp = basePokemon.exp;
        const level = this.routeLevel(route, region);
        const heldItem = this.generateHeldItem(basePokemon.heldItem, GameConstants.ROUTE_HELD_ITEM_MODIFIER);
        const money = this.routeMoney(route, region);
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        if (shiny) {
            Notifier.notify({
                message: `✨ You encountered a shiny ${name}! ✨`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.General.shiny_long,
                setting: NotificationConstants.NotificationSetting.General.encountered_shiny,
            });
            // Track shinies encountered, and rate of shinies
            LogEvent('encountered shiny', 'shiny pokemon', 'wild encounter', Math.floor(App.game.statistics.totalPokemonEncountered() / App.game.statistics.totalShinyPokemonEncountered()));
        }
        if (roaming) {
            Notifier.notify({
                message: `You encountered a roaming ${name}!`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.General.roaming,
                setting: NotificationConstants.NotificationSetting.General.encountered_roaming,
            });
            App.game.logbook.newLog(LogBookTypes.ROAMER, `[${Routes.getRoute(player.region, player.route()).routeName}] You encountered a ${shiny ? 'shiny' : ''} roaming ${name}!`);
        }
        const ep = GameConstants.BASE_EP_YIELD * (roaming ? GameConstants.ROAMER_EP_MODIFIER : 1);
        const gender = this.generateGender(basePokemon.gender.femaleRatio, basePokemon.gender.type);
        return new BattlePokemon(name, id, basePokemon.type1, basePokemon.type2, maxHealth, level, catchRate, exp, new Amount(money, GameConstants.Currency.money), shiny, 1, gender, heldItem, ep);
    }
    static routeLevel(route, region) {
        return Math.floor(20 * Math.pow(MapHelper.normalizeRoute(route, region), (1 / 2.25)));
    }
    static routeHealth(route, region) {
        const regionRoute = Routes.regionRoutes.find((routeData) => routeData.region === region && routeData.number === route);
        if (regionRoute === null || regionRoute === void 0 ? void 0 : regionRoute.routeHealth) {
            return regionRoute.routeHealth;
        }
        route = MapHelper.normalizeRoute(route, region);
        const health = Math.max(20, Math.floor(Math.pow((100 * Math.pow(route, 2.2) / 12), 1.15) * (1 + region / 20))) || 20;
        return health;
    }
    static routeMoney(route, region, useRandomDeviation = true) {
        route = MapHelper.normalizeRoute(route, region);
        //If it's not random, we take the mean value (truncated)
        const deviation = useRandomDeviation ? Rand.intBetween(-25, 25) : 12;
        const money = Math.max(10, 3 * route + 5 * Math.pow(route, 1.15) + deviation);
        return money;
    }
    static routeDungeonTokens(route, region) {
        route = MapHelper.normalizeRoute(route, region);
        const tokens = Math.max(1, 6 * Math.pow(route * 2 / (2.8 / (1 + region / 3)), 1.08));
        return tokens;
    }
    /**
     * Calculate if a shiny has spawned.
     * @param chance Base chance, should be from GameConstants.SHINY_CHANCE.*
     * @returns {boolean}
     */
    static generateShiny(chance, skipBonus = false) {
        const bonus = skipBonus ? 1 : App.game.multiplier.getBonus('shiny');
        if (Rand.chance(chance / bonus)) {
            App.game.oakItems.use(OakItemType.Shiny_Charm);
            return true;
        }
        return false;
    }
    static generatePartyPokemon(id, shiny = false, gender = GameConstants.BattlePokemonGender.NoGender) {
        const dataPokemon = PokemonHelper.getPokemonById(id);
        return new PartyPokemon(dataPokemon.id, dataPokemon.name, dataPokemon.evolutions, dataPokemon.attack, shiny, gender);
    }
    /**
     * Generate a Gym trainer pokemon based on gymName, index and the dataList.
     * @param gymName name of the gym that the player is fighting.
     * @param index index of the Pokémon that is being generated.
     * @returns {any}
     */
    static generateGymPokemon(gym, index) {
        const pokemon = gym.pokemons[index];
        const basePokemon = PokemonHelper.getPokemonByName(pokemon.name);
        const exp = basePokemon.exp;
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        const gender = this.generateGender(basePokemon.gender.femaleRatio, basePokemon.gender.type);
        return new BattlePokemon(pokemon.name, basePokemon.id, basePokemon.type1, basePokemon.type2, pokemon.maxHealth, pokemon.level, 0, exp, new Amount(0, GameConstants.Currency.money), shiny, GameConstants.GYM_GEMS, gender);
    }
    static generateDungeonPokemon(name, chestsOpened, baseHealth, level) {
        const basePokemon = PokemonHelper.getPokemonByName(name);
        const id = basePokemon.id;
        const maxHealth = Math.floor(baseHealth * (1 + (chestsOpened / 5)));
        const catchRate = this.catchRateHelper(basePokemon.catchRate);
        const exp = basePokemon.exp;
        const money = 0;
        const heldItem = this.generateHeldItem(basePokemon.heldItem, GameConstants.DUNGEON_HELD_ITEM_MODIFIER);
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_DUNGEON);
        if (shiny) {
            Notifier.notify({
                message: `✨ You encountered a shiny ${name}! ✨`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.General.shiny_long,
                setting: NotificationConstants.NotificationSetting.General.encountered_shiny,
            });
            // Track shinies encountered, and rate of shinies
            LogEvent('encountered shiny', 'shiny pokemon', 'dungeon encounter', Math.floor(App.game.statistics.totalPokemonEncountered() / App.game.statistics.totalShinyPokemonEncountered()));
        }
        const ep = GameConstants.BASE_EP_YIELD * GameConstants.DUNGEON_EP_MODIFIER;
        const gender = this.generateGender(basePokemon.gender.femaleRatio, basePokemon.gender.type);
        return new BattlePokemon(name, id, basePokemon.type1, basePokemon.type2, maxHealth, level, catchRate, exp, new Amount(money, GameConstants.Currency.money), shiny, GameConstants.DUNGEON_GEMS, gender, heldItem, ep);
    }
    static generateDungeonTrainerPokemon(pokemon, chestsOpened, baseHealth, level) {
        // TODO: HLXII - Will Dungeon Trainer pokemon health be handled differently?
        const name = pokemon.name;
        const basePokemon = PokemonHelper.getPokemonByName(name);
        const maxHealth = Math.floor(baseHealth * (1 + (chestsOpened / 5)));
        const exp = basePokemon.exp;
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_DUNGEON);
        // Reward 2% or 5% (boss) of dungeon DT cost when the trainer mons are defeated
        const money = 0;
        const gender = this.generateGender(basePokemon.gender.femaleRatio, basePokemon.gender.type);
        return new BattlePokemon(name, basePokemon.id, basePokemon.type1, basePokemon.type2, maxHealth, level, 0, exp, new Amount(money, GameConstants.Currency.money), shiny, GameConstants.DUNGEON_GEMS, gender);
    }
    static generateDungeonBoss(bossPokemon, chestsOpened) {
        const name = bossPokemon.name;
        const basePokemon = PokemonHelper.getPokemonByName(name);
        const id = basePokemon.id;
        const maxHealth = Math.floor(bossPokemon.baseHealth * (1 + (chestsOpened / 5)));
        const catchRate = this.catchRateHelper(basePokemon.catchRate);
        const exp = basePokemon.exp;
        const money = 0;
        const heldItem = this.generateHeldItem(basePokemon.heldItem, GameConstants.DUNGEON_BOSS_HELD_ITEM_MODIFIER);
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_DUNGEON);
        if (shiny) {
            Notifier.notify({
                message: `✨ You encountered a shiny ${name}! ✨`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.General.shiny_long,
                setting: NotificationConstants.NotificationSetting.General.encountered_shiny,
            });
            // Track shinies encountered, and rate of shinies
            LogEvent('encountered shiny', 'shiny pokemon', 'dungeon boss encounter', Math.floor(App.game.statistics.totalPokemonEncountered() / App.game.statistics.totalShinyPokemonEncountered()));
        }
        const ep = GameConstants.BASE_EP_YIELD * GameConstants.DUNGEON_BOSS_EP_MODIFIER;
        const gender = this.generateGender(basePokemon.gender.femaleRatio, basePokemon.gender.type);
        return new BattlePokemon(name, id, basePokemon.type1, basePokemon.type2, maxHealth, bossPokemon.level, catchRate, exp, new Amount(money, GameConstants.Currency.money), shiny, GameConstants.DUNGEON_BOSS_GEMS, gender, heldItem, ep);
    }
    static generateTemporaryBattlePokemon(battle, index) {
        const pokemon = battle.pokemons[index];
        const basePokemon = PokemonHelper.getPokemonByName(pokemon.name);
        const catchRate = this.catchRateHelper(basePokemon.catchRate);
        const exp = basePokemon.exp;
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        const gender = this.generateGender(basePokemon.gender.femaleRatio, basePokemon.gender.type);
        return new BattlePokemon(pokemon.name, basePokemon.id, basePokemon.type1, basePokemon.type2, pokemon.maxHealth, pokemon.level, catchRate, exp, new Amount(0, GameConstants.Currency.money), shiny, GameConstants.GYM_GEMS, gender);
    }
    static generateRoamingEncounter(region, subRegion) {
        const possible = RoamingPokemonList.getSubRegionalGroupRoamers(region, RoamingPokemonList.findGroup(region, subRegion.id));
        // Double the chance of encountering a roaming Pokemon you have not yet caught
        return Rand.fromWeightedArray(possible, possible.map(r => App.game.party.alreadyCaughtPokemonByName(r.pokemon.name) ? 1 : 2)).pokemon.name;
    }
    static roamingEncounter(routeNum, region, subRegion) {
        // Map to the route numbers
        const route = Routes.getRoute(region, routeNum);
        const routes = Routes.getRoutesByRegion(region).map(r => MapHelper.normalizeRoute(r.number, region));
        // Check if the dice rolls in their favor
        const encounter = PokemonFactory.roamingChance(Math.max(...routes), Math.min(...routes), route, region, subRegion);
        if (!encounter) {
            return false;
        }
        // There is likely to be a roamer available, so we can check this last
        const roamingPokemon = RoamingPokemonList.getSubRegionalGroupRoamers(region, RoamingPokemonList.findGroup(region, subRegion.id));
        if (!routes || !routes.length || !roamingPokemon || !roamingPokemon.length) {
            return false;
        }
        // Roaming encounter
        return true;
    }
    static roamingChance(maxRoute, minRoute, curRoute, region, subRegion, max = GameConstants.ROAMING_MAX_CHANCE, min = GameConstants.ROAMING_MIN_CHANCE, skipBonus = false) {
        var _a;
        const bonus = skipBonus ? 1 : App.game.multiplier.getBonus('roaming');
        const routeNum = MapHelper.normalizeRoute(curRoute === null || curRoute === void 0 ? void 0 : curRoute.number, region);
        // Check if we should have increased chances on this route (3 x rate)
        const increasedChance = ((_a = RoamingPokemonList.getIncreasedChanceRouteBySubRegionGroup(player.region, RoamingPokemonList.findGroup(region, subRegion.id))()) === null || _a === void 0 ? void 0 : _a.number) == (curRoute === null || curRoute === void 0 ? void 0 : curRoute.number);
        const roamingChance = (max + ((min - max) * (maxRoute - routeNum) / (maxRoute - minRoute))) / ((increasedChance ? 3 : 1) * bonus);
        return Rand.chance(roamingChance);
    }
    static catchRateHelper(baseCatchRate, noVariation = false) {
        const catchVariation = noVariation ? 0 : Rand.intBetween(-3, 3);
        const catchRateRaw = Math.floor(Math.pow(baseCatchRate, 0.75)) + catchVariation;
        return GameConstants.clipNumber(catchRateRaw, 0, 100);
    }
    static generateHeldItem(item, modifier) {
        if (!item || !BagHandler.displayName(item)) {
            return null;
        }
        let chance = GameConstants.HELD_ITEM_CHANCE;
        // Apply drop chance by item type
        switch (item.type) {
            case ItemType.underground:
                chance = GameConstants.HELD_UNDERGROUND_ITEM_CHANCE;
                break;
        }
        // Apply drop chance by item ID
        switch (item.id) {
            case 'Black_DNA':
            case 'White_DNA':
                chance = GameConstants.DNA_ITEM_CHANCE;
                break;
            case 'Solar_light':
            case 'Lunar_light':
                chance = GameConstants.LIGHT_ITEM_CHANCE;
                break;
            case 'Rusted_Sword':
            case 'Rusted_Shield':
                chance = GameConstants.RUST_ITEM_CHANCE;
                break;
            case 'Black_mane_hair':
            case 'White_mane_hair':
                chance = GameConstants.MANE_ITEM_CHANCE;
                break;
        }
        chance /= modifier;
        if (EffectEngineRunner.isActive(GameConstants.BattleItemType.Dowsing_machine)()) {
            chance /= 1.5;
        }
        if (Rand.chance(chance)) {
            return item;
        }
        return null;
    }
    // Gender functions
    /**
     * generateGender but using Pokemon ID
     */
    static generateGenderById(id) {
        const pokemon = PokemonHelper.getPokemonById(id);
        return this.generateGender(pokemon.gender.femaleRatio, pokemon.gender.type);
    }
    /**
     * Calculate which gender has the pokemon.
     * @param chance Base chance, should be from GameConstants under Gender Ratio comment
     * @param genderType Gender type (Genderless, male only, etc.), should be from GameConstants under Gender Types comment
     * @returns GameConstants.BattlePokemonGender
     */
    static generateGender(chance, genderType) {
        let gender;
        switch (genderType) {
            case GameConstants.Genders.Genderless:
                gender = GameConstants.BattlePokemonGender.NoGender;
                break;
            case GameConstants.Genders.MaleFemale:
                if (Rand.chance(chance)) { // Female
                    gender = GameConstants.BattlePokemonGender.Female;
                }
                else { // Male
                    gender = GameConstants.BattlePokemonGender.Male;
                }
                break;
            default:
                console.warn('Invalid gender');
        }
        return gender;
    }
}
///<reference path="pokemons/PokemonFactory.ts"/>
/// <reference path="../declarations/GameHelper.d.ts" />
/**
 * Handles all logic related to battling
 */
class Battle {
    /**
     * Probably not needed right now, but might be if we add more logic to a gameTick.
     */
    static tick() {
        this.counter = 0;
        this.pokemonAttack();
    }
    /**
     * Attacks with Pokémon and checks if the enemy is defeated.
     */
    static pokemonAttack() {
        var _a;
        // TODO: figure out a better way of handling this
        // Limit pokemon attack speed, Only allow 1 attack per 900ms
        const now = Date.now();
        if (this.lastPokemonAttack > now - 900) {
            return;
        }
        this.lastPokemonAttack = now;
        if (!((_a = this.enemyPokemon()) === null || _a === void 0 ? void 0 : _a.isAlive())) {
            return;
        }
        this.enemyPokemon().damage(App.game.party.calculatePokemonAttack(this.enemyPokemon().type1, this.enemyPokemon().type2));
        if (!this.enemyPokemon().isAlive()) {
            this.defeatPokemon();
        }
    }
    /**
     * Attacks with clicks and checks if the enemy is defeated.
     */
    static clickAttack() {
        var _a;
        // click attacks disabled and we already beat the starter
        if (App.game.challenges.list.disableClickAttack.active() && player.starter() != GameConstants.Starter.None) {
            return;
        }
        // TODO: figure out a better way of handling this
        // Limit click attack speed, Only allow 1 attack per 50ms (20 per second)
        const now = Date.now();
        if (this.lastClickAttack > now - 50) {
            return;
        }
        this.lastClickAttack = now;
        if (!((_a = this.enemyPokemon()) === null || _a === void 0 ? void 0 : _a.isAlive())) {
            return;
        }
        GameHelper.incrementObservable(App.game.statistics.clickAttacks);
        this.enemyPokemon().damage(App.game.party.calculateClickAttack(true));
        if (!this.enemyPokemon().isAlive()) {
            this.defeatPokemon();
        }
    }
    /**
     * Award the player with money and exp, and throw a Pokéball if applicable
     */
    static defeatPokemon() {
        const enemyPokemon = this.enemyPokemon();
        Battle.route = player.route();
        const region = player.region;
        const catchRoute = player.route(); // Has to be set, the Battle.route is "zeroed" on region change
        enemyPokemon.defeat();
        GameHelper.incrementObservable(App.game.statistics.routeKills[player.region][Battle.route]);
        App.game.breeding.progressEggsBattle(Battle.route, player.region);
        const isShiny = enemyPokemon.shiny;
        const pokeBall = App.game.pokeballs.calculatePokeballToUse(enemyPokemon.id, isShiny);
        if (pokeBall !== GameConstants.Pokeball.None) {
            this.prepareCatch(enemyPokemon, pokeBall);
            setTimeout(() => {
                this.attemptCatch(enemyPokemon, catchRoute, region);
                if (Battle.route != 0) {
                    this.generateNewEnemy();
                }
            }, App.game.pokeballs.calculateCatchTime(pokeBall));
        }
        else {
            this.generateNewEnemy();
        }
        this.gainItem();
        player.lowerItemMultipliers(MultiplierDecreaser.Battle);
    }
    /**
     * Generate a new enemy based on the current route and region.
     * Reset the counter.
     */
    static generateNewEnemy() {
        this.counter = 0;
        this.enemyPokemon(PokemonFactory.generateWildPokemon(player.route(), player.region, player.subregionObject()));
        const enemyPokemon = this.enemyPokemon();
        PokemonHelper.incrementPokemonStatistics(enemyPokemon.id, GameConstants.STATISTIC_ENCOUNTERED, enemyPokemon.shiny, enemyPokemon.gender);
        // Shiny
        if (enemyPokemon.shiny) {
            App.game.logbook.newLog(LogBookTypes.SHINY, `[${Routes.getRoute(player.region, player.route()).routeName}] You encountered a wild shiny ${enemyPokemon.name}.`);
        }
        else if (!App.game.party.alreadyCaughtPokemon(enemyPokemon.id) && enemyPokemon.health()) {
            App.game.logbook.newLog(LogBookTypes.NEW, `[${Routes.getRoute(player.region, player.route()).routeName}] You encountered a wild ${enemyPokemon.name}.`);
        }
    }
    static calculateActualCatchRate(enemyPokemon, pokeBall) {
        const pokeballBonus = App.game.pokeballs.getCatchBonus(pokeBall);
        const oakBonus = App.game.oakItems.calculateBonus(OakItemType.Magic_Ball);
        const totalChance = GameConstants.clipNumber(enemyPokemon.catchRate + pokeballBonus + oakBonus, 0, 100);
        return totalChance;
    }
    static prepareCatch(enemyPokemon, pokeBall) {
        this.pokeball(pokeBall);
        this.catching(true);
        this.catchRateActual(this.calculateActualCatchRate(enemyPokemon, pokeBall));
        App.game.pokeballs.usePokeball(pokeBall);
    }
    static attemptCatch(enemyPokemon, route, region) {
        if (enemyPokemon == null) {
            this.catching(false);
            return;
        }
        if (Rand.chance(this.catchRateActual() / 100)) { // Caught
            this.catchPokemon(enemyPokemon, route, region);
        }
        else if (enemyPokemon.shiny) { // Failed to catch, Shiny
            App.game.logbook.newLog(LogBookTypes.ESCAPED, `The shiny ${enemyPokemon.name} escaped!`);
        }
        else if (!App.game.party.alreadyCaughtPokemon(enemyPokemon.id)) { // Failed to catch, Uncaught
            App.game.logbook.newLog(LogBookTypes.ESCAPED, `The wild ${enemyPokemon.name} escaped!`);
        }
        this.catching(false);
        this.catchRateActual(null);
    }
    static catchPokemon(enemyPokemon, route, region) {
        App.game.wallet.gainDungeonTokens(PokemonFactory.routeDungeonTokens(route, region));
        App.game.oakItems.use(OakItemType.Magic_Ball);
        App.game.party.gainPokemonById(enemyPokemon.id, enemyPokemon.shiny, undefined, enemyPokemon.gender);
        const partyPokemon = App.game.party.getPokemon(enemyPokemon.id);
        const epBonus = App.game.pokeballs.getEPBonus(this.pokeball());
        partyPokemon.effortPoints += App.game.party.calculateEffortPoints(partyPokemon, enemyPokemon.shiny, enemyPokemon.ep * epBonus);
    }
    static gainItem() {
        const p = MapHelper.normalizeRoute(Battle.route, player.region) / 1600 + 0.009375;
        if (Rand.chance(p)) {
            App.game.farming.gainRandomBerry();
        }
    }
}
Battle.enemyPokemon = ko.observable(null);
Battle.counter = 0;
Battle.catching = ko.observable(false);
Battle.catchRateActual = ko.observable(null);
Battle.pokeball = ko.observable(GameConstants.Pokeball.Pokeball);
Battle.lastPokemonAttack = Date.now();
Battle.lastClickAttack = Date.now();
/// <reference path="../declarations/DataStore/BadgeCase.d.ts" />
/// <reference path="../declarations/GameHelper.d.ts" />
/// <reference path="../declarations/party/Category.d.ts"/>
/**
 * Main game class.
 */
class Game {
    /**
     * TODO(@Isha) pass all features through the constructor
     */
    constructor(update, profile, breeding, pokeballs, wallet, keyItems, badgeCase, oakItems, oakItemLoadouts, categories, party, gems, underground, farming, logbook, redeemableCodes, statistics, quests, specialEvents, discord, achievementTracker, challenges, battleFrontier, multiplier, saveReminder, battleCafe) {
        this.update = update;
        this.profile = profile;
        this.breeding = breeding;
        this.pokeballs = pokeballs;
        this.wallet = wallet;
        this.keyItems = keyItems;
        this.badgeCase = badgeCase;
        this.oakItems = oakItems;
        this.oakItemLoadouts = oakItemLoadouts;
        this.categories = categories;
        this.party = party;
        this.gems = gems;
        this.underground = underground;
        this.farming = farming;
        this.logbook = logbook;
        this.redeemableCodes = redeemableCodes;
        this.statistics = statistics;
        this.quests = quests;
        this.specialEvents = specialEvents;
        this.discord = discord;
        this.achievementTracker = achievementTracker;
        this.challenges = challenges;
        this.battleFrontier = battleFrontier;
        this.multiplier = multiplier;
        this.saveReminder = saveReminder;
        this.battleCafe = battleCafe;
        this._gameState = ko.observable(GameConstants.GameState.paused);
    }
    load() {
        const saveJSON = localStorage.getItem(`save${Save.key}`);
        const saveObject = JSON.parse(saveJSON || '{}');
        Object.keys(this).filter(key => { var _a; return (_a = this[key]) === null || _a === void 0 ? void 0 : _a.saveKey; }).forEach(key => {
            try {
                const saveKey = this[key].saveKey;
                // Load our save object or the default save data
                this[key].fromJSON(saveObject[saveKey] || this[key].toJSON());
            }
            catch (error) {
                console.error('Unable to load sava data from JSON for:', key, '\nError:\n', error);
            }
        });
    }
    initialize() {
        AchievementHandler.initialize(this.multiplier, this.challenges);
        FarmController.initialize();
        EffectEngineRunner.initialize(this.multiplier);
        FluteEffectRunner.initialize(this.multiplier);
        ItemHandler.initilizeEvoStones();
        this.profile.initialize();
        this.breeding.initialize();
        this.pokeballs.initialize();
        this.keyItems.initialize();
        this.oakItems.initialize();
        this.underground.initialize();
        this.farming.initialize();
        this.specialEvents.initialize();
        this.load();
        // Update if the achievements are already completed
        AchievementHandler.preCheckAchievements();
        // TODO refactor to proper initialization methods
        if (player.starter() != GameConstants.Starter.None) {
            Battle.generateNewEnemy();
        }
        else {
            const battlePokemon = new BattlePokemon('MissingNo.', 0, PokemonType.None, PokemonType.None, 0, 0, 0, 0, new Amount(0, GameConstants.Currency.money), false, 0, GameConstants.BattlePokemonGender.NoGender);
            Battle.enemyPokemon(battlePokemon);
        }
        //Safari.load();
        Underground.energyTick(this.underground.getEnergyRegenTime());
        AchievementHandler.calculateMaxBonus(); //recalculate bonus based on active challenges
        const now = new Date();
        SeededDateRand.seedWithDate(now);
        DailyDeal.generateDeals(this.underground.getDailyDealsMax(), now);
        BerryDeal.generateDeals(now);
        Weather.generateWeather(now);
        GemDeal.generateDeals();
        ShardDeal.generateDeals();
        RoamingPokemonList.generateIncreasedChanceRoutes(now);
        if (Settings.getSetting('disableOfflineProgress').value === false) {
            this.computeOfflineEarnings();
        }
        this.checkAndFix();
        // If the player isn't on a route, they're in a town/dungeon
        this.gameState = player.route() ? GameConstants.GameState.fighting : GameConstants.GameState.town;
    }
    computeOfflineEarnings() {
        const now = Date.now();
        const timeDiffInSeconds = Math.floor((now - player._lastSeen) / 1000);
        if (timeDiffInSeconds > 1) {
            // Only allow up to 24 hours worth of bonuses
            const timeDiffOverride = Math.min(86400, timeDiffInSeconds);
            let region = player.region;
            let route = player.route() || GameConstants.StartingRoutes[region];
            if (!MapHelper.validRoute(route, region)) {
                route = 1;
                region = GameConstants.Region.kanto;
            }
            const availablePokemonMap = RouteHelper.getAvailablePokemonList(route, region).map(name => pokemonMap[name]);
            const maxHealth = PokemonFactory.routeHealth(route, region);
            let hitsToKill = 0;
            for (const pokemon of availablePokemonMap) {
                const type1 = pokemon.type[0];
                const type2 = pokemon.type.length > 1 ? pokemon.type[1] : PokemonType.None;
                const attackAgainstPokemon = App.game.party.calculatePokemonAttack(type1, type2);
                const currentHitsToKill = Math.ceil(maxHealth / attackAgainstPokemon);
                hitsToKill += currentHitsToKill;
            }
            hitsToKill = Math.ceil(hitsToKill / availablePokemonMap.length);
            const numberOfPokemonDefeated = Math.floor(timeDiffOverride / hitsToKill);
            if (numberOfPokemonDefeated === 0) {
                return;
            }
            const routeMoney = PokemonFactory.routeMoney(player.route(), player.region, false);
            const baseMoneyToEarn = numberOfPokemonDefeated * routeMoney;
            const moneyToEarn = Math.floor(baseMoneyToEarn * 0.5); //Debuff for offline money
            App.game.wallet.gainMoney(moneyToEarn, true);
            Notifier.notify({
                type: NotificationConstants.NotificationOption.info,
                title: 'Offline-time Bonus',
                message: `Defeated: ${numberOfPokemonDefeated.toLocaleString('en-US')} Pokémon\nEarned: <img src="./assets/images/currency/money.svg" height="24px"/> ${moneyToEarn.toLocaleString('en-US')}`,
                strippedMessage: `Defeated: ${numberOfPokemonDefeated.toLocaleString('en-US')} Pokémon\nEarned: ${moneyToEarn.toLocaleString('en-US')} Pokédollars`,
                timeout: 2 * GameConstants.MINUTE,
                setting: NotificationConstants.NotificationSetting.General.offline_earnings,
            });
        }
    }
    checkAndFix() {
        // Quest box not showing (game thinking tutorial is not completed)
        if (App.game.quests.getQuestLine('Tutorial Quests').state() == QuestLineState.inactive) {
            if (App.game.statistics.gymsDefeated[GameConstants.getGymIndex('Pewter City')]() >= 1) {
                // Defeated Brock, Has completed the Tutorial
                App.game.quests.getQuestLine('Tutorial Quests').state(QuestLineState.ended);
            }
            else if (player.starter() >= 0) {
                // Has chosen a starter, Tutorial is started
                App.game.quests.getQuestLine('Tutorial Quests').state(QuestLineState.started);
                App.game.quests.getQuestLine('Tutorial Quests').beginQuest(App.game.quests.getQuestLine('Tutorial Quests').curQuest());
            }
        }
        // Battle Frontier not accessable (chances are people broke this themselves, but whatever...)
        if (App.game.quests.getQuestLine('Mystery of Deoxys').state() == QuestLineState.inactive) {
            if (App.game.statistics.battleFrontierHighestStageCompleted() >= 100) {
                // Defeated stage 100, has obtained deoxys
                App.game.quests.getQuestLine('Mystery of Deoxys').state(QuestLineState.ended);
            }
            else if (App.game.statistics.gymsDefeated[GameConstants.getGymIndex('Champion Wallace')]() >= 1) {
                // Has defeated the Hoenn champion, Quest is started
                App.game.quests.getQuestLine('Mystery of Deoxys').state(QuestLineState.started);
                App.game.quests.getQuestLine('Mystery of Deoxys').beginQuest(App.game.quests.getQuestLine('Mystery of Deoxys').curQuest());
            }
        }
        // Mining expedition questline
        if (App.game.quests.getQuestLine('Mining Expedition').state() == QuestLineState.inactive) {
            if (App.game.party.alreadyCaughtPokemon(142)) {
                // Has obtained Aerodactyl
                App.game.quests.getQuestLine('Mining Expedition').state(QuestLineState.ended);
            }
            else if (App.game.badgeCase.badgeList[BadgeEnums.Soul]()) {
                // Has the soul badge, Quest is started
                App.game.quests.getQuestLine('Mining Expedition').state(QuestLineState.started);
                App.game.quests.getQuestLine('Mining Expedition').beginQuest(App.game.quests.getQuestLine('Mining Expedition').curQuest());
            }
        }
        // Vivillon questline (if not started due to gym bug)
        if (App.game.quests.getQuestLine('The Great Vivillon Hunt!').state() == QuestLineState.inactive) {
            if (App.game.party.alreadyCaughtPokemon(666.01)) {
                // Has obtained Vivillon (Pokéball)
                App.game.quests.getQuestLine('The Great Vivillon Hunt!').state(QuestLineState.ended);
            }
            else if (App.game.badgeCase.badgeList[BadgeEnums.Iceberg]()) {
                // Has the Iceberg badge, Quest is started
                App.game.quests.getQuestLine('The Great Vivillon Hunt!').state(QuestLineState.started);
                App.game.quests.getQuestLine('The Great Vivillon Hunt!').beginQuest(App.game.quests.getQuestLine('The Great Vivillon Hunt!').curQuest());
            }
        }
        // Check if Koga has been defeated, but have no safari ticket yet
        if (App.game.badgeCase.badgeList[BadgeEnums.Soul]() && !App.game.keyItems.itemList[KeyItemType.Safari_ticket].isUnlocked()) {
            App.game.keyItems.gainKeyItem(KeyItemType.Safari_ticket, true);
        }
        // Check if Giovanni has been defeated, but have no gem case yet
        if (App.game.badgeCase.badgeList[BadgeEnums.Earth]() && !App.game.keyItems.itemList[KeyItemType.Gem_case].isUnlocked()) {
            App.game.keyItems.gainKeyItem(KeyItemType.Gem_case, true);
        }
        // Check that none of our quest are less than their initial value
        App.game.quests.questLines().filter(q => q.state() == 1).forEach(questLine => {
            const quest = questLine.curQuestObject();
            if (quest.initial() > quest.focus()) {
                quest.initial(quest.focus());
            }
        });
        // Check for breeding pokemons not in queue
        const breeding = [...App.game.breeding.eggList.map((l) => l().pokemon), ...App.game.breeding.queueList()];
        App.game.party._caughtPokemon().filter((p) => p.breeding).forEach((p) => {
            if (!breeding.includes(p.id)) {
                p.breeding = false;
            }
        });
        // Egg partyPokemon requires App.game.party and cannot be set until after loading is complete
        App.game.breeding.eggList.filter(e => e().pokemon).forEach(e => {
            e().setPartyPokemon();
        });
    }
    start() {
        var _a;
        console.log(`[${GameConstants.formatDate(new Date())}] %cGame started`, 'color:#2ecc71;font-weight:900;');
        if (player.starter() === GameConstants.Starter.None) {
            StartSequenceRunner.start();
        }
        let pageHidden = document.hidden;
        // requestAnimationFrame (consistent if page visible)
        let lastFrameTime = 0;
        let ticks = 0;
        const tick = (currentFrameTime) => {
            // Don't process while page hidden
            if (pageHidden) {
                this.frameRequest = requestAnimationFrame(tick);
                return;
            }
            const delta = currentFrameTime - lastFrameTime;
            ticks += delta;
            lastFrameTime = currentFrameTime;
            if (ticks >= GameConstants.TICK_TIME) {
                // Skip the ticks if we have too many...
                if (ticks >= GameConstants.TICK_TIME * 2) {
                    ticks = 0;
                }
                else {
                    ticks -= GameConstants.TICK_TIME;
                }
                this.gameTick();
            }
            this.frameRequest = requestAnimationFrame(tick);
        };
        this.frameRequest = requestAnimationFrame(tick);
        // Try start our webworker so we can process stuff while the page isn't focused
        try {
            console.log(`[${GameConstants.formatDate(new Date())}] %cStarting web worker..`, 'color:#8e44ad;font-weight:900;');
            const blob = new Blob([
                `
                // Window visibility state
                let pageHidden = false;
                self.onmessage = function(e) {
                    if (e.data.pageHidden != undefined) {
                        pageHidden = e.data.pageHidden;
                    }
                };

                // setInterval (slightly slower on FireFox)
                const tickInterval = setInterval(() => {
                    // Don't process while page visible
                    if (!pageHidden) return;

                    postMessage('tick')
                }, ${GameConstants.TICK_TIME});
                `,
            ]);
            const blobURL = window.URL.createObjectURL(blob);
            this.worker = new Worker(blobURL);
            // use a setTimeout to queue the event
            (_a = this.worker) === null || _a === void 0 ? void 0 : _a.addEventListener('message', () => Settings.getSetting('useWebWorkerForGameTicks').value ? this.gameTick() : null);
            // Let our worker know if the page is visible or not
            document.addEventListener('visibilitychange', () => {
                if (pageHidden != document.hidden) {
                    pageHidden = document.hidden;
                    this.worker.postMessage({ 'pageHidden': pageHidden });
                }
            });
            this.worker.postMessage({ 'pageHidden': pageHidden });
            if (this.worker) {
                console.log(`[${GameConstants.formatDate(new Date())}] %cWeb worker started`, 'color:#2ecc71;font-weight:900;');
            }
        }
        catch (e) {
            console.error(`[${GameConstants.formatDate(new Date())}] Web worker error`, e);
        }
        window.onbeforeunload = () => {
            this.save();
        };
    }
    stop() {
        cancelAnimationFrame(this.frameRequest);
        window.onbeforeunload = () => { };
    }
    gameTick() {
        // Acheivements
        Game.achievementCounter += GameConstants.TICK_TIME;
        if (Game.achievementCounter >= GameConstants.ACHIEVEMENT_TICK) {
            Game.achievementCounter = 0;
            AchievementHandler.checkAchievements();
            GameHelper.incrementObservable(App.game.statistics.secondsPlayed);
        }
        // Battles
        switch (this.gameState) {
            case GameConstants.GameState.fighting: {
                Battle.counter += GameConstants.TICK_TIME;
                if (Battle.counter >= GameConstants.BATTLE_TICK) {
                    Battle.tick();
                }
                break;
            }
            case GameConstants.GameState.gym: {
                GymBattle.counter += GameConstants.TICK_TIME;
                if (GymBattle.counter >= GameConstants.BATTLE_TICK) {
                    GymBattle.tick();
                }
                GymRunner.tick();
                break;
            }
            case GameConstants.GameState.dungeon: {
                DungeonBattle.counter += GameConstants.TICK_TIME;
                if (DungeonBattle.counter >= GameConstants.BATTLE_TICK) {
                    DungeonBattle.tick();
                }
                DungeonRunner.tick();
                break;
            }
            case GameConstants.GameState.battleFrontier: {
                BattleFrontierBattle.counter += GameConstants.TICK_TIME;
                if (BattleFrontierBattle.counter >= GameConstants.BATTLE_FRONTIER_TICK) {
                    BattleFrontierBattle.tick();
                }
                BattleFrontierRunner.tick();
                break;
            }
            case GameConstants.GameState.temporaryBattle: {
                TemporaryBattleBattle.counter += GameConstants.TICK_TIME;
                if (TemporaryBattleBattle.counter >= GameConstants.BATTLE_TICK) {
                    TemporaryBattleBattle.tick();
                }
                TemporaryBattleRunner.tick();
                break;
            }
        }
        // Auto Save
        Save.counter += GameConstants.TICK_TIME;
        if (Save.counter > GameConstants.SAVE_TICK) {
            const old = new Date(player._lastSeen);
            const now = new Date();
            // Check if it's a new day
            if (old.toLocaleDateString() !== now.toLocaleDateString()) {
                SeededDateRand.seedWithDate(now);
                // Give the player a free quest refresh
                this.quests.freeRefresh(true);
                //Refresh the Underground deals
                DailyDeal.generateDeals(this.underground.getDailyDealsMax(), now);
                BerryDeal.generateDeals(now);
                if (this.underground.canAccess() || App.game.quests.isDailyQuestsUnlocked()) {
                    Notifier.notify({
                        title: 'It\'s a new day!',
                        message: `${this.underground.canAccess() ? 'Your Underground deals have been updated.\n' : ''}` +
                            `${App.game.quests.isDailyQuestsUnlocked() ? '<i>You have a free quest refresh.</i>' : ''}`,
                        type: NotificationConstants.NotificationOption.info,
                        timeout: 3e4,
                    });
                }
                // Give the players more Battle Cafe spins
                BattleCafeController.spinsLeft(BattleCafeController.defaultSpins);
                DayOfWeekRequirement.date(now.getDay());
            }
            // Check if it's a new hour
            if (old.getHours() !== now.getHours()) {
                Weather.generateWeather(now);
                RoamingPokemonList.generateIncreasedChanceRoutes(now);
            }
            this.save();
        }
        // Underground
        Underground.counter += GameConstants.TICK_TIME;
        if (Underground.counter >= GameConstants.UNDERGROUND_TICK) {
            Underground.energyTick(Math.max(0, Underground.energyTick() - 1));
            if (Underground.energyTick() == 0) {
                // Check completed in case mine is locked out
                Mine.checkCompleted();
                this.underground.gainEnergy();
                Underground.energyTick(this.underground.getEnergyRegenTime());
            }
            Underground.counter = 0;
        }
        // Farm
        this.farming.update(GameConstants.TICK_TIME / GameConstants.SECOND);
        // Effect Engine (battle items and flutes)
        EffectEngineRunner.counter += GameConstants.TICK_TIME;
        if (EffectEngineRunner.counter >= GameConstants.EFFECT_ENGINE_TICK) {
            EffectEngineRunner.tick();
        }
        FluteEffectRunner.counter += GameConstants.TICK_TIME;
        if (FluteEffectRunner.counter >= GameConstants.EFFECT_ENGINE_TICK) {
            FluteEffectRunner.tick();
        }
        // Game timers
        GameHelper.counter += GameConstants.TICK_TIME;
        if (GameHelper.counter >= GameConstants.MINUTE) {
            GameHelper.tick();
        }
        // Check our save reminder once every 5 minutes
        SaveReminder.counter += GameConstants.TICK_TIME;
        if (SaveReminder.counter >= 5 * GameConstants.MINUTE) {
            SaveReminder.tick();
        }
    }
    save() {
        player._lastSeen = Date.now();
        Save.store(player);
    }
    // Knockout getters/setters
    get gameState() {
        return this._gameState();
    }
    set gameState(value) {
        this._gameState(value);
    }
}
Game.achievementCounter = 0;
/**
 * Class which controls the UI of the game.
 */
class GameController {
    static applyRouteBindings() {
        $('path, rect').hover(function () {
            const id = $(this).attr('data-town');
            if (id && id != 'mapTooltipWrapper') {
                const tooltip = $('#mapTooltip');
                tooltip.text(id);
                tooltip.css('visibility', 'visible');
            }
        }, () => {
            const tooltip = $('#mapTooltip');
            tooltip.text('');
            tooltip.css('visibility', 'hidden');
        });
    }
    static convertKey(key) {
        let newKey = key.length > 1 ? key : key.toUpperCase();
        if (newKey == ' ') {
            newKey = 'Space';
        }
        return newKey;
    }
    static simulateKey(code, type = 'keydown', modifiers = {}) {
        const evtName = type.startsWith('key') ? type : `key${type}`;
        const event = document.createEvent('HTMLEvents');
        Object.defineProperties(event, {
            key: { value: code },
        });
        event.initEvent(evtName, true, false);
        for (const i in modifiers) {
            event[i] = modifiers[i];
        }
        document.dispatchEvent(event);
    }
    static bindToolTips() {
        $('[data-toggle="popover"]').popover();
        $('[data-toggle="tooltip"]').tooltip();
        ko.bindingHandlers.tooltip = {
            init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                const local = ko.utils.unwrapObservable(valueAccessor()), options = {};
                ko.utils.extend(options, ko.bindingHandlers.tooltip.options);
                ko.utils.extend(options, local);
                $(element).tooltip(options);
                ko.utils.domNodeDisposal.addDisposeCallback(element, () => {
                    $(element).tooltip('dispose');
                });
            },
            'update': function (element, valueAccessor) {
                const local = ko.utils.unwrapObservable(valueAccessor());
                const options = {};
                ko.utils.extend(options, ko.bindingHandlers.tooltip.options);
                ko.utils.extend(options, local);
                // Update the config of the tooltip
                const tooltipData = $(element).data('bs.tooltip');
                tooltipData.config.title = options.title;
                // If the tooltip is visible, update its text
                const tooltipInner = tooltipData.tip && tooltipData.tip.querySelector('.tooltip-inner');
                if (tooltipInner) {
                    tooltipInner.innerHTML = tooltipData.config.title || '';
                }
                if (tooltipData && tooltipData.config) {
                    if (tooltipData.config.title === '') {
                        $(element).tooltip('hide');
                    }
                }
            },
            options: {
                placement: 'bottom',
                trigger: 'click',
            },
        };
    }
    static focusedOnEditableElement() {
        const activeEl = document.activeElement;
        const localName = activeEl.localName.toLowerCase();
        const editables = ['textarea', 'input', 'select'];
        return (editables.includes(localName) || activeEl.isContentEditable);
    }
    static addKeyListeners() {
        // Oak Items
        const $oakItemsModal = $('#oakItemsModal');
        $oakItemsModal.on('hidden.bs.modal shown.bs.modal', _ => $oakItemsModal.data('disable-toggle', false));
        const oakItems = App.game.oakItems;
        // Pokeball Selector
        const $pokeballSelector = $('#pokeballSelectorModal');
        const pokeballs = App.game.pokeballs;
        // Underground
        const $undergroundModal = $('#mineModal');
        $undergroundModal.on('hidden.bs.modal shown.bs.modal', _ => $undergroundModal.data('disable-toggle', false));
        const underground = App.game.underground;
        // Farm
        const $farmsModal = $('#farmModal');
        $farmsModal.on('hidden.bs.modal shown.bs.modal', _ => $farmsModal.data('disable-toggle', false));
        const farms = App.game.farming;
        // Hatchery
        const $hatcheryModal = $('#breedingModal');
        $hatcheryModal.on('hidden.bs.modal shown.bs.modal', _ => $hatcheryModal.data('disable-toggle', false));
        const hatchery = App.game.breeding;
        // Ship
        const $shipModal = $('#ShipModal');
        // Shop
        const $shopModal = $('#shopModal');
        $(document).on('keydown', e => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            // Ignore any of our controls if focused on an input element
            if (this.focusedOnEditableElement()) {
                return;
            }
            const key = GameController.convertKey(e.key);
            // Set flags for any key currently pressed down (used to check if key held down currently)
            GameController.keyHeld[key] = true;
            // Set our number key if defined (-1 for 0 indexed)
            const numberKey = (+key) - 1;
            const isNumberKey = !isNaN(numberKey);
            const visibleModals = $('.modal:visible').length;
            // Safari Zone
            if (App.game.gameState === GameConstants.GameState.safari) {
                switch (key) {
                    case 'ArrowUp':
                    case Settings.getSetting('hotkey.dungeon.up').value:
                        Safari.move('up');
                        break;
                    case 'ArrowLeft':
                    case Settings.getSetting('hotkey.dungeon.left').value:
                        Safari.move('left');
                        break;
                    case 'ArrowDown':
                    case Settings.getSetting('hotkey.dungeon.down').value:
                        Safari.move('down');
                        break;
                    case 'ArrowRight':
                    case Settings.getSetting('hotkey.dungeon.right').value:
                        Safari.move('right');
                        break;
                }
                // We don't want to process any other keys while in the Safari zone
                return e.preventDefault();
            }
            // Within modals
            if ((_a = $farmsModal.data('bs.modal')) === null || _a === void 0 ? void 0 : _a._isShown) {
                switch (key) {
                    case Settings.getSetting('hotkey.farm.toggleShovel').value:
                        FarmController.selectedShovel() ? FarmController.selectedShovel(false) : FarmController.selectedShovel(true);
                        FarmController.selectedPlotSafeLock(false);
                        return e.preventDefault();
                    case Settings.getSetting('hotkey.farm.togglePlotSafeLock').value:
                        FarmController.selectedPlotSafeLock() ? FarmController.selectedPlotSafeLock(false) : FarmController.selectedPlotSafeLock(true);
                        FarmController.selectedShovel(false);
                        return e.preventDefault();
                }
            }
            if ((_b = $undergroundModal.data('bs.modal')) === null || _b === void 0 ? void 0 : _b._isShown) {
                switch (key) {
                    case Settings.getSetting('hotkey.underground.hammer').value:
                        Mine.toolSelected(Mine.Tool.Hammer);
                        return e.preventDefault();
                    case Settings.getSetting('hotkey.underground.chisel').value:
                        Mine.toolSelected(Mine.Tool.Chisel);
                        return e.preventDefault();
                    case Settings.getSetting('hotkey.underground.survey').value:
                        Mine.survey();
                        return e.preventDefault();
                    case Settings.getSetting('hotkey.underground.bomb').value:
                        Mine.bomb();
                        return e.preventDefault();
                }
                if (isNumberKey) {
                    if (numberKey === 0) {
                        ItemList.SmallRestore.use();
                    }
                    else if (numberKey === 1) {
                        ItemList.MediumRestore.use();
                    }
                    else if (numberKey === 2) {
                        ItemList.LargeRestore.use();
                    }
                    return e.preventDefault();
                }
            }
            if ((_c = $oakItemsModal.data('bs.modal')) === null || _c === void 0 ? void 0 : _c._isShown) {
                // Toggle oak items
                if (isNumberKey) {
                    if (oakItems.isUnlocked(numberKey)) {
                        if (oakItems.isActive(numberKey)) {
                            oakItems.deactivate(numberKey);
                        }
                        else {
                            oakItems.activate(numberKey);
                        }
                    }
                    return e.preventDefault();
                }
            }
            if ((_d = $pokeballSelector.data('bs.modal')) === null || _d === void 0 ? void 0 : _d._isShown) {
                if (isNumberKey) {
                    // Switch selection type
                    if (GameController.keyHeld[Settings.getSetting('hotkey.pokeballSelection').value]) {
                        (_e = $('#pokeballSelectorBody .clickable.pokeball-selected').eq(numberKey)) === null || _e === void 0 ? void 0 : _e.trigger('click');
                        return e.preventDefault();
                    }
                    // Select Pokeball from pokeball selector (0 = none)
                    if (numberKey < App.game.pokeballs.pokeballs.length) {
                        pokeballs.selectedSelection()(numberKey);
                    }
                    return e.preventDefault();
                }
            }
            if ((_f = $shipModal.data('bs.modal')) === null || _f === void 0 ? void 0 : _f._isShown) {
                if (isNumberKey) {
                    if (numberKey <= player.highestRegion()) {
                        const regionButton = $('.ship-modal-region-button').eq(numberKey);
                        if (regionButton && !regionButton.prop('disabled')) {
                            regionButton.trigger('click');
                        }
                    }
                    return e.preventDefault();
                }
            }
            if ((_g = $shopModal.data('bs.modal')) === null || _g === void 0 ? void 0 : _g._isShown) {
                if (isNumberKey) {
                    if (numberKey <= ShopHandler.shopObservable().items.length) {
                        ShopHandler.setSelected(numberKey);
                    }
                    return e.preventDefault();
                }
                switch (key) {
                    case Settings.getSetting('hotkey.shop.buy').value:
                        ShopHandler.buyItem();
                        return e.preventDefault();
                    case Settings.getSetting('hotkey.shop.max').value:
                        ShopHandler.maxAmount();
                        return e.preventDefault();
                    case Settings.getSetting('hotkey.shop.reset').value:
                        ShopHandler.resetAmount();
                        return e.preventDefault();
                    case Settings.getSetting('hotkey.shop.increase').value:
                        if (GameController.keyHeld.Shift) {
                            switch (Settings.getSetting('shopButtons').value) {
                                case 'original':
                                    ShopHandler.increaseAmount(100);
                                    break;
                                case 'multiplication':
                                    ShopHandler.multiplyAmount(0.1);
                                    break;
                                case 'bigplus':
                                    ShopHandler.increaseAmount(1000);
                                    break;
                            }
                        }
                        else {
                            switch (Settings.getSetting('shopButtons').value) {
                                case 'original':
                                    ShopHandler.increaseAmount(10);
                                    break;
                                case 'multiplication':
                                    ShopHandler.multiplyAmount(10);
                                    break;
                                case 'bigplus':
                                    ShopHandler.increaseAmount(100);
                                    break;
                            }
                        }
                        return e.preventDefault();
                }
            }
            // Only run if no modals are open
            if (visibleModals === 0) {
                // Route Battles
                if (App.game.gameState === GameConstants.GameState.fighting) {
                    const initialRoute = MapHelper.normalizeRoute(player.route(), player.region, false);
                    const firstRoute = Routes.getRoutesByRegion(player.region)[0].number;
                    const lastRoute = Routes.getRoutesByRegion(player.region)[Routes.getRoutesByRegion(player.region).length - 1].number;
                    // Allow '=' to fallthrough to '+' since they share a key on many keyboards
                    switch (key) {
                        case '=':
                        case '+':
                            if (initialRoute + 1 > MapHelper.normalizeRoute(lastRoute, player.region, false)) {
                                MapHelper.moveToRoute(firstRoute, player.region);
                            }
                            else {
                                MapHelper.moveToRoute(Routes.unnormalizeRoute(initialRoute + 1), player.region);
                            }
                            return e.preventDefault();
                        case '-':
                            if (initialRoute - 1 < MapHelper.normalizeRoute(firstRoute, player.region, false)) {
                                MapHelper.moveToRoute(lastRoute, player.region);
                            }
                            else {
                                MapHelper.moveToRoute(Routes.unnormalizeRoute(initialRoute - 1), player.region);
                            }
                            return e.preventDefault();
                    }
                }
                // Dungeons
                if (App.game.gameState === GameConstants.GameState.dungeon) {
                    switch (key) {
                        case 'ArrowUp':
                        case Settings.getSetting('hotkey.dungeon.up').value:
                            DungeonRunner.map.moveUp();
                            return e.preventDefault();
                        case 'ArrowLeft':
                        case Settings.getSetting('hotkey.dungeon.left').value:
                            DungeonRunner.map.moveLeft();
                            return e.preventDefault();
                        case 'ArrowDown':
                        case Settings.getSetting('hotkey.dungeon.down').value:
                            DungeonRunner.map.moveDown();
                            return e.preventDefault();
                        case 'ArrowRight':
                        case Settings.getSetting('hotkey.dungeon.right').value:
                            DungeonRunner.map.moveRight();
                            return e.preventDefault();
                        case Settings.getSetting('hotkey.dungeon.interact').value:
                            if (DungeonRunner.map.currentTile().type() === GameConstants.DungeonTile.entrance) {
                                DungeonRunner.dungeonLeave();
                            }
                            else if (DungeonRunner.map.currentTile().type() === GameConstants.DungeonTile.chest) {
                                DungeonRunner.openChest();
                            }
                            else if (DungeonRunner.map.currentTile().type() === GameConstants.DungeonTile.boss && !DungeonRunner.fightingBoss()) {
                                DungeonRunner.startBossFight();
                            }
                            else if (DungeonRunner.map.currentTile().type() === GameConstants.DungeonTile.ladder) {
                                DungeonRunner.nextFloor();
                            }
                            return e.preventDefault();
                    }
                }
                // Within towns
                if (App.game.gameState === GameConstants.GameState.town) {
                    if (key === Settings.getSetting('hotkey.town.start').value) {
                        if (player.town() instanceof DungeonTown) {
                            DungeonRunner.initializeDungeon(player.town().dungeon);
                        }
                        else {
                            player.town().content[0].protectedOnclick();
                        }
                        return e.preventDefault();
                    }
                    else if (isNumberKey) {
                        // Check if a number higher than 0 and less than our towns content was pressed
                        const filteredConent = player.town().content.filter(c => c.isVisible());
                        if (numberKey < filteredConent.length) {
                            filteredConent[numberKey].protectedOnclick();
                        }
                        else if (player.town().npcs && numberKey < filteredConent.length + player.town().npcs.length) {
                            player.town().npcs[numberKey - filteredConent.length].openDialog();
                        }
                        return e.preventDefault();
                    }
                }
            }
            // Anywhere keys
            switch (key) {
                case Settings.getSetting('hotkey.farm').value:
                    // Open the Farm
                    if (farms.canAccess() && !$farmsModal.data('disable-toggle')) {
                        $('.modal').modal('hide');
                        $farmsModal.data('disable-toggle', true);
                        $farmsModal.modal('toggle');
                        return e.preventDefault();
                    }
                    break;
                case Settings.getSetting('hotkey.hatchery').value:
                    // Open the Hatchery
                    if (hatchery.canAccess() && !$hatcheryModal.data('disable-toggle')) {
                        $('.modal').modal('hide');
                        $hatcheryModal.data('disable-toggle', true);
                        $hatcheryModal.modal('toggle');
                        return e.preventDefault();
                    }
                    break;
                case Settings.getSetting('hotkey.oakItems').value:
                    // Open oak items
                    if (oakItems.canAccess() && !$oakItemsModal.data('disable-toggle')) {
                        $('.modal').modal('hide');
                        $oakItemsModal.data('disable-toggle', true);
                        $oakItemsModal.modal('toggle');
                        return e.preventDefault();
                    }
                    break;
                case Settings.getSetting('hotkey.underground').value:
                    // Open the Underground
                    if (underground.canAccess() && !$undergroundModal.data('disable-toggle')) {
                        $('.modal').modal('hide');
                        $undergroundModal.data('disable-toggle', true);
                        $undergroundModal.modal('toggle');
                        return e.preventDefault();
                    }
                    break;
                case Settings.getSetting('hotkey.forceSave').value:
                    if (GameController.keyHeld.Shift) {
                        Save.store(player);
                        return e.preventDefault();
                    }
                    break;
                default:
                    // Check for a number key being pressed
                    if (isNumberKey) {
                        if (GameController.keyHeld[Settings.getSetting('hotkey.pokeballSelection').value]) {
                            // Open pokeball selector modal using P + (1-4) for each condition
                            if (!((_h = $pokeballSelector.data('bs.modal')) === null || _h === void 0 ? void 0 : _h._isShown)) {
                                $('.modal').modal('hide');
                            }
                            (_j = $('#pokeballSelectorBody .clickable.pokeball-selected').eq(numberKey)) === null || _j === void 0 ? void 0 : _j.trigger('click');
                            return e.preventDefault();
                        }
                    }
            }
            if (key === 'Space') {
                return e.preventDefault();
            }
        });
        $(document).on('keyup', e => {
            // Ignore any of our controls if focused on an input element
            if (this.focusedOnEditableElement()) {
                return;
            }
            const key = GameController.convertKey(e.key);
            // Our key is no longer being held down
            delete GameController.keyHeld[key];
            if (App.game.gameState === GameConstants.GameState.safari) {
                switch (key) {
                    case 'ArrowUp':
                    case Settings.getSetting('hotkey.dungeon.up').value:
                        Safari.stop('up');
                        return e.preventDefault();
                    case 'ArrowLeft':
                    case Settings.getSetting('hotkey.dungeon.left').value:
                        Safari.stop('left');
                        return e.preventDefault();
                    case 'ArrowDown':
                    case Settings.getSetting('hotkey.dungeon.down').value:
                        Safari.stop('down');
                        return e.preventDefault();
                    case 'ArrowRight':
                    case Settings.getSetting('hotkey.dungeon.right').value:
                        Safari.stop('right');
                        return e.preventDefault();
                }
            }
            if (key === 'Space') {
                return e.preventDefault();
            }
        });
    }
}
// Store keys for multi-key combinations
GameController.keyHeld = {};
$(document).ready(() => {
    $('#pokedexModal').on('show.bs.modal', PokedexHelper.updateList);
});
// when stacking modals allow scrolling after top modal hidden
$(document).on('hidden.bs.modal', '.modal', () => {
    $('.modal:visible').length && $(document.body).addClass('modal-open');
});
/// <reference path="../declarations/upgrades/Upgrade.d.ts" />
/**
 * Required modules before porting:
 * Save.ts
 * upgrades/Upgrade.ts
 * towns/Town.ts - Town, TownList
 * worldmap/MapHelper.ts
 * items/Item.ts - ItemList
 */
/**
 * Information about the player.
 * All player variables need to be saved.
 */
class Player {
    constructor(savedPlayer) {
        var _a, _b, _c;
        this._timeTraveller = false;
        this.effectList = {};
        this.effectTimer = {};
        const saved = (savedPlayer != null);
        savedPlayer = savedPlayer || {
            _region: GameConstants.Region.kanto,
            _route: 1,
        };
        this._lastSeen = savedPlayer._lastSeen || 0;
        this._timeTraveller = savedPlayer._timeTraveller || false;
        if (this._lastSeen > Date.now()) {
            Notifier.notify({
                title: 'Welcome Time Traveller!',
                message: 'Please ensure you keep a backup of your old save as travelling through time can cause some serious problems.\n\nAny Pokémon you may have obtained in the future could cease to exist which could corrupt your save file!',
                type: NotificationConstants.NotificationOption.danger,
                timeout: GameConstants.HOUR,
            });
            this._timeTraveller = true;
        }
        this._region = ko.observable(savedPlayer._region);
        this._subregion = ko.observable(savedPlayer._subregion || 0);
        this.subregionObject = ko.pureComputed(() => SubRegions.getSubRegionById(this._region(), this._subregion()));
        this._route = ko.observable(savedPlayer._route);
        // Check that the route is valid, otherwise set it to the regions starting route (route 0 means they are in a town)
        if (this._route() > 0 && !MapHelper.validRoute(this._route(), this._region())) {
            this._route(GameConstants.StartingRoutes[this._region()]);
        }
        // Return player to last town or starter town if their town no longer exist for whatever reason
        this._townName = TownList[savedPlayer._townName] ? savedPlayer._townName : GameConstants.StartingTowns[this._region()];
        this._town = ko.observable(TownList[this._townName]);
        this._town.subscribe(value => this._townName = value.name);
        this.starter = ko.observable(savedPlayer.starter != undefined ? savedPlayer.starter : GameConstants.Starter.None);
        this.regionStarters = new Array();
        if (savedPlayer.regionStarters && savedPlayer.regionStarters[0]) {
            this.regionStarters.push(ko.observable(savedPlayer.regionStarters[0]));
        }
        else {
            switch (this.starter()) {
                case GameConstants.Starter.None:
                    this.regionStarters.push(ko.observable(undefined));
                    break;
                case GameConstants.Starter.Bulbasaur:
                    this.regionStarters.push(ko.observable(0));
                    break;
                case GameConstants.Starter.Charmander:
                    this.regionStarters.push(ko.observable(1));
                    break;
                case GameConstants.Starter.Squirtle:
                    this.regionStarters.push(ko.observable(2));
                    break;
            }
        }
        for (let i = 1; i <= GameConstants.MAX_AVAILABLE_REGION; i++) {
            if (savedPlayer.regionStarters && savedPlayer.regionStarters[i] != undefined) {
                this.regionStarters.push(ko.observable(savedPlayer.regionStarters[i]));
            }
            else if (i < ((_a = savedPlayer.highestRegion) !== null && _a !== void 0 ? _a : 0)) {
                this.regionStarters.push(ko.observable(0));
            }
            else if (i == ((_b = savedPlayer.highestRegion) !== null && _b !== void 0 ? _b : 0)) {
                this.regionStarters.push(ko.observable(undefined));
                if (this._region() != i) {
                    this._region(i);
                    this._subregion(0);
                    this.route(undefined);
                    this._townName = GameConstants.StartingTowns[i];
                    this._town = ko.observable(TownList[this._townName]);
                }
                $('#pickStarterModal').modal('show');
            }
            else {
                this.regionStarters.push(ko.observable(undefined));
            }
        }
        this._itemList = Save.initializeItemlist();
        if (savedPlayer._itemList) {
            for (const key in savedPlayer._itemList) {
                if (this._itemList[key]) {
                    this._itemList[key](savedPlayer._itemList[key]);
                }
            }
        }
        this._itemMultipliers = savedPlayer._itemMultipliers || Save.initializeMultipliers();
        // TODO(@Isha) move to underground classes.
        const mineInventory = (savedPlayer.mineInventory || [])
            // TODO: Convert this to object spread after we're on TS modules
            .map((v) => Object.assign({}, v, {
            amount: ko.observable(v.amount),
            sellLocked: ko.observable(v.sellLocked),
        }));
        this.mineInventory = ko.observableArray(mineInventory);
        this.effectList = Save.initializeEffects(savedPlayer.effectList || {});
        this.effectTimer = Save.initializeEffectTimer();
        this.highestRegion = ko.observable(savedPlayer.highestRegion || 0);
        this.highestSubRegion = ko.observable(savedPlayer.highestSubRegion || 0);
        // Save game origins, useful for tracking down any errors that may not be related to the main game
        this._origins = [...new Set((savedPlayer._origins || [])).add((_c = window.location) === null || _c === void 0 ? void 0 : _c.origin)];
    }
    set itemList(value) {
        this._itemList = value;
    }
    get itemList() {
        return this._itemList;
    }
    amountOfItem(itemName) {
        return this._itemList[itemName]();
    }
    get itemMultipliers() {
        return this._itemMultipliers;
    }
    get route() {
        return this._route;
    }
    set route(value) {
        this._route = value;
    }
    get region() {
        return this._region();
    }
    set region(value) {
        this._region(value);
    }
    get subregion() {
        return this._subregion();
    }
    set subregion(value) {
        if (value < 0) {
            value = Math.max(...SubRegions.getSubRegions(player.region).filter(sr => sr.unlocked()).map(sr => sr.id));
        }
        if (value > Math.max(...SubRegions.getSubRegions(player.region).filter(sr => sr.unlocked()).map(sr => sr.id))) {
            value = 0;
        }
        this._subregion(value);
        if (value > this.highestSubRegion()) {
            this.highestSubRegion(value);
        }
        const subregion = SubRegions.getSubRegionById(this.region, value);
        if (subregion.startRoute) {
            MapHelper.moveToRoute(subregion.startRoute, player.region);
        }
        else if (subregion.startTown) {
            MapHelper.moveToTown(subregion.startTown);
        }
    }
    get town() {
        return this._town;
    }
    set town(value) {
        this._town = value;
    }
    gainItem(itemName, amount) {
        this._itemList[itemName](this._itemList[itemName]() + amount);
    }
    loseItem(itemName, amount) {
        this._itemList[itemName](this._itemList[itemName]() - amount);
    }
    lowerItemMultipliers(multiplierDecreaser, amount = 1) {
        for (const obj in ItemList) {
            const item = ItemList[obj];
            item.decreasePriceMultiplier(amount, multiplierDecreaser);
        }
    }
    // TODO(@Isha) move to underground classes.
    hasMineItems() {
        for (let i = 0; i < this.mineInventory().length; i++) {
            if (this.mineInventory()[i].amount() > 0) {
                return true;
            }
        }
        return false;
    }
    // TODO(@Isha) move to underground classes.
    mineInventoryIndex(id) {
        return player.mineInventory().findIndex(i => i.id == id);
    }
    // TODO(@Isha) move to underground classes.
    getUndergroundItemAmount(id) {
        var _a, _b, _c, _d;
        const mineItem = player.mineInventory().find(i => i.id == id);
        if (mineItem) {
            return mineItem.amount();
        }
        if (((_a = UndergroundItems.getById(id)) === null || _a === void 0 ? void 0 : _a.valueType) == UndergroundItemValueType.EvolutionItem) {
            return (_d = (_c = (_b = player.itemList)[GameConstants.StoneType[UndergroundItems.getById(id).type]]) === null || _c === void 0 ? void 0 : _c.call(_b)) !== null && _d !== void 0 ? _d : 0;
        }
        return 0;
    }
    toJSON() {
        const keep = [
            '_route',
            '_region',
            '_subregion',
            '_townName',
            '_itemList',
            '_itemMultipliers',
            'starter',
            // TODO(@Isha) remove.
            'mineInventory',
            '_lastSeen',
            '_timeTraveller',
            '_origins',
            'effectList',
            'highestRegion',
            'highestSubRegion',
            'regionStarters',
        ];
        const plainJS = ko.toJS(this);
        Object.entries(plainJS._itemMultipliers).forEach(([key, value]) => {
            if (value <= 1) {
                delete plainJS._itemMultipliers[key];
            }
        });
        Object.entries(plainJS._itemList).forEach(([key, value]) => {
            if (!value) {
                delete plainJS._itemList[key];
            }
        });
        Object.entries(plainJS.effectList).forEach(([key, value]) => {
            if (!value) {
                delete plainJS.effectList[key];
            }
        });
        return Save.filter(plainJS, keep);
    }
}
///<reference path="../declarations/Sortable.d.ts"/>
class Save {
    static store(player) {
        localStorage.setItem(`player${Save.key}`, JSON.stringify(player));
        localStorage.setItem(`save${Save.key}`, JSON.stringify(this.getSaveObject()));
        localStorage.setItem(`settings${Save.key}`, JSON.stringify(Settings.toJSON()));
        this.counter = 0;
        console.log('%cGame saved', 'color:#3498db;font-weight:900;');
    }
    static getSaveObject() {
        const saveObject = {};
        Object.keys(App.game).filter(key => App.game[key].saveKey).forEach(key => {
            saveObject[App.game[key].saveKey] = App.game[key].toJSON();
        });
        return saveObject;
    }
    static load() {
        const saved = localStorage.getItem(`player${Save.key}`);
        // Load our settings, or the saved default settings, or no settings
        const settings = localStorage.getItem(`settings${Save.key}`) || localStorage.getItem('settings') || '{}';
        Settings.fromJSON(JSON.parse(settings));
        // Sort modules now, save settings, load settings
        SortModules();
        if (saved !== 'null') {
            return new Player(JSON.parse(saved));
        }
        else {
            return new Player();
        }
    }
    static download() {
        const backupSaveData = { player, save: this.getSaveObject(), settings: Settings.toJSON() };
        try {
            const element = document.createElement('a');
            element.setAttribute('href', `data:text/plain;charset=utf-8,${encodeURIComponent(btoa(JSON.stringify(backupSaveData)))}`);
            const datestr = GameConstants.formatDate(new Date());
            const filename = `[v${App.game.update.version}] PokeClickerSave_${datestr}.txt`;
            element.setAttribute('download', filename);
            element.style.display = 'none';
            document.body.appendChild(element);
            element.click();
            document.body.removeChild(element);
            App.game.saveReminder.lastDownloaded(App.game.statistics.secondsPlayed());
        }
        catch (err) {
            console.error('Error trying to download save', err);
            Notifier.notify({
                title: 'Failed to download save data',
                message: 'Please check the console for errors, and report them on our Discord.',
                type: NotificationConstants.NotificationOption.primary,
                timeout: 6e4,
            });
            try {
                localStorage.backupSave = JSON.stringify(backupSaveData);
            }
            catch (e) { }
        }
    }
    static copySaveToClipboard() {
        const backupSaveData = { player, save: this.getSaveObject(), settings: Settings.toJSON() };
        navigator.clipboard.writeText(btoa(JSON.stringify(backupSaveData)));
        Notifier.notify({
            title: 'Save copied',
            message: 'Please paste the clipboard contents into a new \'.txt\' file.',
            type: NotificationConstants.NotificationOption.info,
        });
    }
    static delete() {
        return __awaiter(this, void 0, void 0, function* () {
            const confirmDelete = yield Notifier.prompt({
                title: 'Delete save file',
                message: 'Are you sure you want delete your save file?\n\nTo confirm, type "DELETE"',
                type: NotificationConstants.NotificationOption.danger,
                timeout: 6e4,
            });
            if (confirmDelete == 'DELETE') {
                localStorage.removeItem(`player${Save.key}`);
                localStorage.removeItem(`save${Save.key}`);
                localStorage.removeItem(`settings${Save.key}`);
                // Prevent the old save from being saved again
                window.onbeforeunload = () => { };
                location.reload();
            }
        });
    }
    /** Filters an object by property names
     * @param     object : any The object you want to filter
     * @param       keep : string[] An array of property names that should be kept
     * @returns {Object} : The original object with only the specified properties
     */
    static filter(object, keep) {
        const filtered = {};
        let prop;
        for (prop in object) {
            if (keep.includes(prop)) {
                filtered[prop] = object[prop];
            }
        }
        return filtered;
    }
    static initializeMultipliers() {
        const res = {};
        for (const obj in ItemList) {
            res[obj] = 1;
        }
        return res;
    }
    static initializeItemlist() {
        const res = {};
        for (const obj in ItemList) {
            res[obj] = ko.observable(0).extend({ numeric: 0 });
        }
        return res;
    }
    static initializeGems(saved) {
        let res;
        if (saved) {
            res = saved.map((type) => {
                return type.map((effectiveness) => {
                    return ko.observable(effectiveness);
                });
            });
        }
        else {
            res = [];
            for (const item in PokemonType) {
                if (!isNaN(Number(item))) {
                    res[item] = [];
                    res[item][GameConstants.TypeEffectiveness.Immune] = ko.observable(0);
                    res[item][GameConstants.TypeEffectiveness.NotVery] = ko.observable(0);
                    res[item][GameConstants.TypeEffectiveness.Neutral] = ko.observable(0);
                    res[item][GameConstants.TypeEffectiveness.Very] = ko.observable(0);
                }
            }
        }
        return res;
    }
    static initializeEffects(saved) {
        const res = {};
        for (const obj in GameConstants.BattleItemType) {
            res[obj] = ko.observable(saved ? saved[obj] || 0 : 0);
        }
        for (const obj in GameConstants.FluteItemType) {
            res[obj] = ko.observable(saved ? saved[obj] || 0 : 0);
        }
        return res;
    }
    static initializeEffectTimer() {
        const res = {};
        for (const obj in GameConstants.BattleItemType) {
            res[obj] = ko.observable('00:00');
        }
        for (const obj in GameConstants.FluteItemType) {
            res[obj] = ko.observable('00:00');
        }
        return res;
    }
    static loadFromFile(file) {
        const fileToRead = file;
        const fr = new FileReader();
        fr.readAsText(fileToRead);
        setTimeout(() => {
            try {
                const decoded = atob(fr.result);
                console.debug('decoded:', decoded);
                const json = JSON.parse(decoded);
                console.debug('json:', json);
                if (decoded && json && json.player && json.save) {
                    localStorage.setItem(`player${Save.key}`, JSON.stringify(json.player));
                    localStorage.setItem(`save${Save.key}`, JSON.stringify(json.save));
                    if (json.settings) {
                        localStorage.setItem(`settings${Save.key}`, JSON.stringify(json.settings));
                    }
                    else {
                        localStorage.removeItem(`settings${Save.key}`);
                    }
                    // Prevent the old save from being saved again
                    window.onbeforeunload = () => { };
                    location.reload();
                }
                else {
                    Notifier.notify({
                        message: 'This is not a valid decoded savefile',
                        type: NotificationConstants.NotificationOption.danger,
                    });
                }
            }
            catch (err) {
                Notifier.notify({
                    message: 'This is not a valid savefile',
                    type: NotificationConstants.NotificationOption.danger,
                });
            }
        }, 1000);
    }
    static convert() {
        const base64 = $('#convertTextArea').val().toString();
        try {
            const json = atob(base64);
            const p = JSON.parse(json);
            Save.convertShinies(p.caughtPokemonList);
            $('#saveModal').modal('hide');
        }
        catch (e) {
            Notifier.notify({
                message: 'Invalid save data.',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    static convertShinies(list) {
        const converted = [];
        list = list.filter(p => p.shiny);
        for (const pokemon of list) {
            const id = +pokemon.id;
            const partyPokemon = App.game.party.getPokemon(id);
            if (partyPokemon) {
                converted.push(pokemon.name);
                partyPokemon.shiny = true;
            }
        }
        if (converted.length > 0) {
            Notifier.notify({
                message: `You have gained the following shiny Pokémon:</br>${converted.join(',</br>')}`,
                type: NotificationConstants.NotificationOption.success,
                timeout: 1e4,
            });
        }
        else {
            Notifier.notify({
                message: 'No new shiny Pokémon to import.',
                type: NotificationConstants.NotificationOption.info,
            });
        }
    }
}
Save.counter = 0;
Save.key = '';
class StartSequenceRunner {
    static start() {
        App.game.gameState = GameConstants.GameState.paused;
        $('#startSequenceModal').modal('show');
    }
    static pickStarter(s) {
        // Reload the achievements in case the user has any challenge modes activated
        AchievementHandler.load();
        App.game.quests.getQuestLine('Tutorial Quests').beginQuest(0);
        this.starterPicked = s;
        $('#pickStarterTutorialModal').modal('hide');
        const dataPokemon = PokemonHelper.getPokemonByName(GameConstants.Starter[this.starterPicked]);
        const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        const gender = PokemonFactory.generateGender(dataPokemon.gender.femaleRatio, dataPokemon.gender.type);
        App.game.gameState = GameConstants.GameState.fighting;
        const battlePokemon = new BattlePokemon(dataPokemon.name, dataPokemon.id, dataPokemon.type1, dataPokemon.type2, 10, 1, 100, 0, new Amount(0, GameConstants.Currency.money), shiny, 0, gender);
        Battle.enemyPokemon(battlePokemon);
        // Show the help information text
        Information.show({
            steps: [
                {
                    element: document.getElementsByClassName('battle-view')[0],
                    intro: 'Click here to deal "Click Attack" damage to Pokémon.',
                },
            ],
        });
        // Set the function to call showCaughtMessage after pokemon is caught
        battlePokemon.isAlive = function () {
            if (battlePokemon.health() <= 0) {
                setTimeout(() => {
                    Information.hide();
                    player.starter(StartSequenceRunner.starterPicked);
                    App.game.profile.pokemon(dataPokemon.id);
                    StartSequenceRunner.showCaughtMessage();
                }, 1000);
                //reset the function so you don't call it too many times :)
                //What a beautiful piece of code
                battlePokemon.isAlive = function () {
                    return false;
                };
            }
            return this.health() > 0;
        };
    }
    static showCaughtMessage() {
        App.game.gameState = GameConstants.GameState.paused;
        $('#starterCaughtModal').modal('show');
        $('#pokeballSelector').css('display', 'block');
        $('#pokemonListContainer').css('display', 'block');
        $('#oakItemsContainer').css('display', 'block');
        $('#questDisplayContainer').css('display', 'block');
    }
}
StartSequenceRunner.starterPicked = GameConstants.Starter.None;
StartSequenceRunner.noStarterCount = 0;
document.addEventListener('DOMContentLoaded', () => {
    $('#startSequenceModal').on('hidden.bs.modal', () => {
        $('#pickStarterTutorialModal').modal('show');
    });
    $('#pickStarterTutorialModal').on('hidden.bs.modal', () => {
        if (StartSequenceRunner.starterPicked == GameConstants.Starter.None) {
            StartSequenceRunner.noStarterCount++;
            const startersCount = StartSequenceRunner.noStarterCount >= 5 ? 'four' : 'three';
            $('#pickStarterTutorialModalText').text(`I can't hold off all ${startersCount}! Please pick the Pokémon you want to fight!`);
            $('#pickStarterTutorialModal').modal('show');
            if (StartSequenceRunner.noStarterCount == 5) {
                // Add Pikachu to the selections
                $('#starterSelection').append(`<div class="col">
                        <input class="image-starter" type="image"
                           src="assets/images/pokemon/25.png"
                           onclick="StartSequenceRunner.pickStarter(GameConstants.Starter.Pikachu)">
                    </div>`);
            }
        }
    });
    $('#starterCaughtModal').on('hidden.bs.modal', () => {
        Save.store(player);
        App.game.gameState = GameConstants.GameState.fighting;
        Information.show({
            steps: [
                {
                    element: document.getElementById('questDisplayContainer'),
                    intro: 'Complete the tutorial quests to continue.',
                },
            ],
        });
    });
});
/// <reference path="./GameConstants.d.ts" />
class Update {
    constructor() {
        this.saveKey = 'update';
        // Loaded from package.json
        this.version = '0.10.0';
        this.saveVersion = '0.0.0';
        this.updateSteps = {
            '0.4.0': ({ playerData, saveData }) => {
                saveData.update = { version: '0.0.0' };
                // Update the save data as it is no longer a part of player data
                saveData.statistics = Object.assign(Object.assign({}, playerData.statistics || {}), { pokemonCaptured: playerData._caughtAmount || 0, pokemonDefeated: playerData._defeatedAmount || 0, totalShinyPokemonCaptured: playerData._shinyCatches || 0, totalPokemonCaptured: playerData.statistics.pokemonCaptured || 0, totalPokemonDefeated: playerData.statistics.pokemonDefeated || 0 });
            },
            '0.4.4': ({ saveData }) => {
                // Just incase statistics is not set
                saveData.statistics = saveData.statistics || {};
                // Rename from the old statistic name
                saveData.statistics = Object.assign(Object.assign({}, saveData.statistics), { clickAttacks: saveData.statistics.clicks || 0, totalDungeonTokens: saveData.statistics.totalTokens || 0, undergroundItemsFound: saveData.statistics.digItems || 0, undergroundLayersMined: saveData.statistics.digDeeper || 0 });
            },
            '0.4.15': ({ playerData, saveData }) => {
                playerData._itemList.Lucky_egg = playerData._itemList.xExp;
                delete playerData._itemList.xExp;
                delete localStorage.mine;
            },
            '0.4.17': ({ saveData }) => {
                // Just incase statistics is not set
                saveData.statistics = saveData.statistics || {};
                // Rename from the old statistic name
                saveData.statistics = Object.assign(Object.assign({}, saveData.statistics), { totalPokemonHatched: saveData.statistics.hatchedEggs || 0 });
            },
            '0.4.18': ({ playerData, saveData }) => {
                // Move quests from player data -> save data
                saveData.quests = {
                    xp: Math.floor(playerData._questXP || 0),
                    refreshes: playerData.questRefreshes || 0,
                    lastRefresh: playerData._lastSeen,
                    questList: new Array(10).fill({}).map((q, index) => ({ index, initial: null })),
                    questLines: [
                        {
                            state: playerData.tutorialComplete ? 2 : 1,
                            name: 'Tutorial Quests',
                            quest: playerData.tutorialProgress || 0,
                        },
                    ],
                };
                // Convert quest the player is currently doing
                (playerData.currentQuests || []).forEach(quest => {
                    saveData.quests.questList[quest.index || 0].initial = quest.initial || null;
                });
                // Convert quest the player has completed
                (playerData.completedQuestList || []).forEach((complete, index) => {
                    if (complete) {
                        saveData.quests.questList[index].notified = true;
                        saveData.quests.questList[index].claimed = true;
                        saveData.quests.questList[index].initial = 0;
                    }
                });
                // If player has defeated the Hoenn Champion, start the deoxys quest line
                saveData.badgeCase = saveData.badgeCase || [];
                // Not using game constants incase the value isn't 39 in the future
                if (saveData.badgeCase[39]) {
                    Update.startQuestLine(saveData, 'Mystery of Deoxys');
                }
            },
            '0.5.0': ({ playerData }) => {
                // Give the players Soothe Bells in place of Time stones
                playerData._itemList = playerData._itemList || {};
                playerData._itemList.Soothe_bell = playerData._itemList.Time_stone || 0;
                delete playerData._itemList.Time_stone;
            },
            '0.5.2': ({ saveData }) => {
                // Calculate hatched amount (we can't calculate the shiny hatches though)
                const pokemonHatched = {};
                saveData.party.caughtPokemon.forEach(p => pokemonHatched[p.id] = p.attackBonus / 25);
                // Rename from the old statistic name, add our new statistics
                saveData.statistics = Object.assign(Object.assign({}, saveData.statistics), { totalBerriesHarvested: saveData.statistics.berriesHarvested.reduce((sum, b) => sum + b, 0) || 0, totalShardsGained: saveData.statistics.totalShards.reduce((sum, b) => sum + b, 0) || 0, shardsGained: saveData.statistics.totalShards || 0, pokemonHatched });
                // If the player has the Soul Badge already
                // Not using game constants incase the badge value isn't 5 in the future
                if (saveData.badgeCase[5]) {
                    Update.startQuestLine(saveData, 'Mining Expedition');
                }
            },
            '0.5.5': ({ saveData }) => {
                // Correct statistics
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 22, 34); // Petalburg Woods
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 30, 35); // New Mauville
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 56, 50); // Hall of Origin
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 33); // Sealed Chamber
            },
            '0.5.7': ({ saveData }) => {
                // Update shinies
                saveData.party.shinyPokemon.forEach(name => {
                    const id = pokemonMap[name].id;
                    if (id) {
                        const pokemon = saveData.party.caughtPokemon.find(p => p.id == id);
                        if (pokemon) {
                            pokemon.shiny = true;
                        }
                    }
                });
            },
            '0.5.8': ({ playerData, saveData }) => {
                // Hardcoded to allow upgrading from an older save, if we change
                // the Routes class in the future. Values are lowest/highest route
                // index
                const regionRoutes = {
                    kanto: [1, 25],
                    johto: [26, 48],
                    hoenn: [101, 134],
                    sinnoh: [201, 230],
                };
                const result = saveData.statistics.routeKills.reduce((acc, nextValue, nextIndex) => {
                    const [region] = Object.entries(regionRoutes).find(([, check]) => (
                    // Find the region that contains this index
                    check[0] <= nextIndex && nextIndex <= check[1])) || ['none'];
                    // Skip over any statistics for the 'none' region that are also 0, since
                    // these are just the gaps in the route numbers
                    if (region === 'none' && nextValue === 0) {
                        return acc;
                    }
                    // Ensure the region has been prepared
                    acc[region] = (acc[region] || {});
                    // Track the route with its number in the statistics
                    acc[region][nextIndex] = nextValue;
                    return acc;
                }, {});
                saveData.statistics.routeKills = result;
                // Refund any shards spent on shard upgrades that have no effect
                // Using magic number incase any of these values change in the future
                const invalidUpgrades = {
                    0: 3,
                    1: 0,
                    2: 0,
                    4: 0,
                    5: 0,
                    9: 0,
                    11: 0,
                    12: 0,
                    15: 0,
                    16: 0,
                    17: 0,
                };
                Object.entries(invalidUpgrades).forEach(([type, effectiveness]) => {
                    const index = +type * 4 + effectiveness;
                    let level = saveData.shards.shardUpgrades[index];
                    // Refund each level of upgrade purchased
                    while (level-- > 0) {
                        const cost = (level + 1) * 500;
                        saveData.shards.shardWallet[type] += cost;
                    }
                });
                // Give breeding slots based on highest region
                saveData.breeding.queueSlots = 0;
                for (let region = 0; region < playerData.highestRegion; region++) {
                    saveData.breeding.queueSlots += Math.max(4, 4 * Math.pow(2, region - 1));
                }
            },
            '0.6.0': ({ saveData }) => {
                // Award Deoxys forms for completed Battle Frontier milestones
                const maxBattleFrontierStage = saveData.statistics.battleFrontierHighestStageCompleted;
                if (maxBattleFrontierStage >= 151) {
                    Update.addPokemonToSaveData(saveData, 386.1); // Deoxys (attack)
                }
                if (maxBattleFrontierStage >= 251) {
                    Update.addPokemonToSaveData(saveData, 386.2); // Deoxys (defense)
                }
                if (maxBattleFrontierStage >= 386) {
                    Update.addPokemonToSaveData(saveData, 386.3); // Deoxys (speed)
                }
                // Update the attack bonus percentages
                saveData.party.caughtPokemon = saveData.party.caughtPokemon.map(p => {
                    p.attackBonusPercent = p.attackBonus;
                    delete p.attackBonus;
                    return p;
                });
                // Update Farm data
                // Refund Farm Points for current berries
                for (let i = 0; i < 8; i++) {
                    const amount = 100 / i;
                    const refundTokens = Math.floor(saveData.farming.berryList[i] / amount);
                    saveData.wallet.currencies[4] += refundTokens;
                    saveData.farming.berryList[i] = 0;
                }
                // Unlock & Give 5 Cheri berries to start off with
                saveData.farming.unlockedBerries = [true];
                saveData.farming.berryList[0] = 5;
                // Refund Farm Points for plots previously unlocked
                saveData.wallet.currencies[4] += saveData.farming.plotList.map((p, i) => p.isUnlocked ? 10 * Math.floor(Math.pow(i, 2)) : 0).reduce((s, a) => s + a, 0);
                // Reset all plots
                delete saveData.farming.plotList;
            },
            '0.6.1': ({ saveData }) => {
                // Only update if save is from v0.6.0+
                if (this.minUpdateVersion('0.6.0', saveData)) {
                    if (saveData.oakItems.purchaseList) {
                        if (saveData.oakItems.purchaseList[OakItemType.Squirtbottle]) {
                            saveData.oakItems[OakItemType[OakItemType.Squirtbottle]].purchased = true;
                        }
                        if (saveData.oakItems.purchaseList[OakItemType.Sprinklotad]) {
                            saveData.oakItems[OakItemType[OakItemType.Sprinklotad]].purchased = true;
                        }
                    }
                }
            },
            '0.6.5': ({ playerData, saveData }) => {
                // Only update if save is from v0.6.0+
                if (this.minUpdateVersion('0.6.0', saveData)) {
                    // nerf amount of proteins used per Pokemon
                    const maxProteins = (playerData.highestRegion + 1) * 5;
                    let proteinsToRefund = 0;
                    saveData.party.caughtPokemon = saveData.party.caughtPokemon.map(p => {
                        if (!p.proteinsUsed || p.proteinsUsed <= maxProteins) {
                            return p;
                        }
                        proteinsToRefund += p.proteinsUsed - maxProteins;
                        p.proteinsUsed = maxProteins;
                        return p;
                    });
                    playerData._itemList.Protein += proteinsToRefund || 0;
                }
            },
            '0.7.1': ({ playerData, saveData }) => {
                var _a, _b;
                saveData.breeding.eggList.map((egg) => {
                    egg.shinyChance = GameConstants.SHINY_CHANCE_BREEDING - (0.5 * GameConstants.SHINY_CHANCE_BREEDING * Math.min(1, egg.shinySteps / egg.steps));
                    return egg;
                });
                // Update underground item IDs
                const itemMap = (id) => {
                    if (id <= 7) { // fossils
                        return id + 199;
                    }
                    else if (id <= 16) { // Diamond Items
                        return id - 7;
                    }
                    else if (id <= 22) { // Evolution Stones
                        return id + 283;
                    }
                    else if (id <= 28) { // Diamond Items
                        return id - 13;
                    }
                    else { // Shard Plates
                        return id + 71;
                    }
                };
                playerData.mineInventory = ((_a = playerData.mineInventory) === null || _a === void 0 ? void 0 : _a.map(i => {
                    i.id = itemMap(i.id);
                    return i;
                })) || [];
                if ((_b = saveData.underground) === null || _b === void 0 ? void 0 : _b.mine) {
                    // Reset the mine
                    delete saveData.underground.mine;
                }
            },
            '0.7.4': ({ playerData, saveData }) => {
                // Clear old quest data
                saveData.quests.questList = [];
                // Update starter selection
                playerData.starter = playerData._starter;
                /*
                 * Challenge Modes
                 */
                // Create empty challenges object
                saveData.challenges = { list: {} };
                // Disable Click Attacks
                if (saveData.statistics.clickAttacks <= 100) {
                    Notifier.notify({
                        title: 'Active Challenge Mode?',
                        message: `Do you want to activate No Click Attack challenge mode?

                    <button class="btn btn-block btn-danger" onclick="App.game.challenges.list.disableClickAttack.activate();" data-dismiss="toast">Activate</button>`,
                        timeout: GameConstants.HOUR,
                    });
                }
                // Disable Battle Items
                Notifier.notify({
                    title: 'Active Challenge Mode?',
                    message: `Do you want to activate No Battle Item challenge mode?

                <button class="btn btn-block btn-danger" onclick="App.game.challenges.list.disableBattleItems.activate(); Object.values(player.effectList).forEach(e => e(0));" data-dismiss="toast">Activate</button>`,
                    timeout: GameConstants.HOUR,
                });
                // Disable Master Balls
                if (!saveData.statistics.pokeballsUsed[3]) {
                    Notifier.notify({
                        title: 'Active Challenge Mode?',
                        message: `Do you want to activate No Masterball challenge mode?

                    <button class="btn btn-block btn-danger" onclick="App.game.challenges.list.disableMasterballs.activate();" data-dismiss="toast">Activate</button>`,
                        timeout: GameConstants.HOUR,
                    });
                }
                // Disable Oak Items
                if (Object.values(saveData.oakItems).every((oi) => !oi.exp)) {
                    Notifier.notify({
                        title: 'Active Challenge Mode?',
                        message: `Do you want to activate No Oak Item challenge mode?

                    <button class="btn btn-block btn-danger" onclick="App.game.challenges.list.disableOakItems.activate();" data-dismiss="toast">Activate</button>`,
                        timeout: GameConstants.HOUR,
                    });
                }
                // Disable Shards
                if (saveData.shards.shardUpgrades.every((s) => !s)) {
                    Notifier.notify({
                        title: 'Active Challenge Mode?',
                        message: `Do you want to activate No Shard challenge mode?

                    <button class="btn btn-block btn-danger" onclick="App.game.challenges.list.disableShards.activate();" data-dismiss="toast">Activate</button>`,
                        timeout: GameConstants.HOUR,
                    });
                }
                // Disable Proteins
                if (saveData.party.caughtPokemon.every(p => !p.proteinsUsed)) {
                    Notifier.notify({
                        title: 'Active Challenge Mode?',
                        message: `Do you want to activate No Protein challenge mode?

                    <button class="btn btn-block btn-danger" onclick="App.game.challenges.list.disableProteins.activate();" data-dismiss="toast">Activate</button>`,
                        timeout: GameConstants.HOUR,
                    });
                }
                // Add Solaceon Ruins
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 43);
                // Multi saves profile
                const firstPokemon = saveData.party.caughtPokemon[0];
                saveData.profile = {
                    name: 'Trainer',
                    pokemon: (firstPokemon === null || firstPokemon === void 0 ? void 0 : firstPokemon.id) || 0,
                    pokemonShiny: (firstPokemon === null || firstPokemon === void 0 ? void 0 : firstPokemon.shiny) || false,
                };
            },
            '0.7.6': ({ playerData, saveData }) => {
                Update.changeHatcheryKey(saveData, 'Lets go Pikachu', 'Let\'s Go Pikachu');
                Update.changeHatcheryKey(saveData, 'Lets go Eevee', 'Let\'s Go Eevee');
                // Check if the Let's Go Pikachu is hidden due to MissingNo (reset breeding status)
                const pikachu = saveData.party.caughtPokemon.find(p => p.id == -8);
                if (pikachu) {
                    pikachu.breeding = !!saveData.breeding.eggList.find((e) => e.pokemon == 'Let\'s Go Pikachu')
                        || !!saveData.breeding.queueList.find((p) => p == 'Let\'s Go Pikachu');
                }
                // Check if the Let's Go Eevee is hidden due to MissingNo (reset breeding status)
                const eevee = saveData.party.caughtPokemon.find(p => p.id == -9);
                if (eevee) {
                    eevee.breeding = !!saveData.breeding.eggList.find((e) => e.pokemon == 'Let\'s Go Eevee')
                        || !!saveData.breeding.queueList.find((p) => p == 'Let\'s Go Eevee');
                }
            },
            '0.8.1': ({ playerData, saveData }) => {
                // Add Weather Institute
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 29);
                // Add Magma Hideout
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 32);
                // Add Aqua Hideout
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 33);
                // Add Team Plasma Assault
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 72);
                // Add Plasma Frigate
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 74);
            },
            '0.8.3': ({ playerData, saveData }) => {
                // If player has defeated the 8th Kalos gym, start the vivillon quest line
                saveData.badgeCase = saveData.badgeCase || [];
                // Not using game constants incase the value isn't 73 in the future
                if (saveData.badgeCase[73]) { // Iceberg badge
                    Update.startQuestLine(saveData, 'The Great Vivillon Hunt!');
                }
                // Add missing key items if the player has the badge
                const badgeToKeyItems = {
                    [5]: 'Safari_ticket',
                    [8]: 'Shard_case',
                };
                Object.keys(badgeToKeyItems).forEach(badge => {
                    const keyItem = badgeToKeyItems[badge];
                    if (saveData.badgeCase[badge]) {
                        saveData.keyItems[keyItem] = true;
                    }
                });
            },
            '0.8.4': ({ playerData, saveData }) => {
                var _a;
                // Update Pokemon names
                Update.changeHatcheryKey(saveData, 'Vivillon', 'Vivillon (Meadow)');
                // Track Battle Frontier milestones earned
                const milestones = [
                    [5, '25 x Pokéball'],
                    [10, '100 x Pokéball'],
                    [20, '100 x Greatball'],
                    [30, '100 x Ultraball'],
                    [35, '100 x xClick'],
                    [40, '100 x xAttack'],
                    [50, '100 x Small Restore'],
                    [100, 'Deoxys'],
                    [110, '10 x Water Stone'],
                    [120, '10 x Leaf Stone'],
                    [130, '10 x Thunder Stone'],
                    [140, '10 x Fire Stone'],
                    [150, '200 x Medium Restore'],
                    [151, 'Deoxys (attack)'],
                    [160, '100 x Lucky Egg'],
                    [170, '100 x Lucky Incense'],
                    [180, '100 x Item Magnet'],
                    [190, '10 x Mystery Egg'],
                    [200, '100 x Large Restore'],
                    [210, '40 x Water Stone'],
                    [220, '40 x Leaf Stone'],
                    [230, '40 x Thunder Stone'],
                    [240, '40 x Moon Stone'],
                    [250, '6400 x Ultraball'],
                    [251, 'Deoxys (defense)'],
                    [300, '100 x Linking Cord'],
                    [386, 'Deoxys (speed)'],
                ];
                const highestStageCompleted = ((_a = saveData.statistics) === null || _a === void 0 ? void 0 : _a.battleFrontierHighestStageCompleted) || 0;
                saveData.battleFrontier = {
                    milestones: milestones.filter(([stage]) => stage <= highestStageCompleted),
                };
            },
            '0.8.9': ({ playerData, saveData }) => {
                var _a, _b, _c;
                // Retroactively track proteins obtained
                let proteinsObtained = 0;
                // Only update if save is from v0.6.0+ (when proteins were added)
                if (this.minUpdateVersion('0.6.0', saveData)) {
                    saveData.party.caughtPokemon.forEach(p => {
                        proteinsObtained += p.proteinsUsed;
                    });
                    proteinsObtained += playerData._itemList.Protein;
                }
                saveData.statistics = Object.assign(Object.assign({}, saveData.statistics), { totalProteinsObtained: proteinsObtained });
                // Only run if save is from v0.8.7 (a forked version which is breaking stuff)
                if (((_a = saveData.update) === null || _a === void 0 ? void 0 : _a.version) == '0.8.7') {
                    // Check if the save has the Vivillon quest line, otherwise it's not from the main website
                    const questLines = ((_c = (_b = saveData.quests) === null || _b === void 0 ? void 0 : _b.questLines) === null || _c === void 0 ? void 0 : _c.length) || 0;
                    if (questLines < 4) {
                        Notifier.notify({
                            title: 'Importing this save will cause errors!',
                            message: 'Please only use saves from the main website https://pokeclicker.com/',
                            type: NotificationConstants.NotificationOption.danger,
                            timeout: GameConstants.DAY,
                        });
                        throw new Error('Importing this save will cause errors');
                    }
                }
            },
            '0.8.12': ({ playerData, saveData }) => {
                // Add Team Rockets Hideout
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 19);
                // Add Radio Tower
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 20);
                // Add Victory Road Johto
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 23);
                // If the player has the Fog Badge already
                // Not using game constants incase the badge value isn't 17 in the future
                if (saveData.badgeCase[17]) {
                    Update.startQuestLine(saveData, 'Team Rocket Again');
                }
                setTimeout(() => __awaiter(this, void 0, void 0, function* () {
                    // Check if player wants to activate the new challenge modes
                    if (!(yield Notifier.confirm({ title: 'Regional Attack Debuff (recommended)', message: 'New challenge mode added Regional Attack Debuff.\n\nLowers Pokémon attack based on native region and highest reached region.\n\nThis is the default and recommended way to play, but is now an optional challenge.\n\nPlease choose if you would like this challenge mode to be enabled or disabled (cannot be re-enabled later)', confirm: 'enable', cancel: 'disable' }))) {
                        App.game.challenges.list.regionalAttackDebuff.disable();
                    }
                    if (!(yield Notifier.confirm({ title: 'Require Complete Pokédex (recommended)', message: 'New challenge mode added Require Complete Pokédex.\n\nRequires a complete regional pokédex before moving on to the next region.\n\nThis is the default and recommended way to play, but is now an optional challenge.\n\nPlease choose if you would like this challenge mode to be enabled or disabled (cannot be re-enabled later)', confirm: 'enable', cancel: 'disable' }))) {
                        App.game.challenges.list.requireCompletePokedex.disable();
                    }
                }), GameConstants.SECOND);
            },
            '0.8.14': ({ playerData, saveData }) => {
                // Start Aqua Magma questline if player has Dynamo Badge already
                if (saveData.badgeCase[29]) {
                    Update.startQuestLine(saveData, 'Land vs. Water');
                }
                // Just incase statistics is not set
                saveData.statistics = saveData.statistics || {};
                // Rename from the old statistic name
                saveData.statistics = Object.assign(Object.assign({}, saveData.statistics), { totalBerriesObtained: saveData.statistics.totalBerriesHarvested || 0, pokeballsObtained: saveData.statistics.pokeballsBought || 0, berriesObtained: saveData.statistics.berriesHarvested || 0 });
            },
            '0.8.15': ({ playerData, saveData }) => {
                var _a, _b, _c, _d;
                // Start Plasma questline if player has Jet Badge already
                if (saveData.badgeCase[58]) {
                    Update.startQuestLine(saveData, 'Quest for the DNA Splicers');
                }
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 2, 1); // Digletts Cave
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 5, 4); // Power Plant
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 31, 28); // Jagged Pass
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 29, 30); // Mt. Chimney
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 32, 34); // New Mauville
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 84, 64); // Pledge Grove
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 78, 79); // Abundant Shrine
                // Shards -> Gems
                //Questlist update
                saveData.quests.questList = ((_a = saveData.quests.questList) === null || _a === void 0 ? void 0 : _a.map(q => {
                    if (q.name == 'GainShardsQuest') {
                        q.name = 'GainGemsQuest';
                    }
                    return q;
                })) || [];
                //Setting gems = shards
                saveData.gems = {
                    gemWallet: saveData.shards.shardWallet || [],
                    gemCollapsed: saveData.shards.shardCollapsed || [],
                    gemUpgrades: saveData.shards.shardUpgrades || [],
                };
                delete saveData.keyItems.Shard_case;
                // Swapping Shard Case for Gem Case
                if (saveData.badgeCase[8]) {
                    saveData.keyItems.Gem_case = true;
                }
                // Just incase statistics is not set
                saveData.statistics = saveData.statistics || {};
                // Rename from the old statistic name
                saveData.statistics = Object.assign(Object.assign({}, saveData.statistics), { totalGemsGained: saveData.statistics.totalShardsGained || 0, gemsGained: saveData.statistics.shardsGained || 0 });
                // Challenge update
                saveData.challenges.list.disableGems = (_d = (_c = (_b = saveData.challenges) === null || _b === void 0 ? void 0 : _b.list) === null || _c === void 0 ? void 0 : _c.disableShards) !== null && _d !== void 0 ? _d : false;
            },
            '0.9.0': ({ playerData, saveData }) => {
                var _a;
                // Migrate event negative ID's to decimals of base form
                const eventIDs = [
                    [-1, 25.08],
                    [-2, 25.09],
                    [-3, 150.1],
                    [-4, 143.1],
                    [-5, 175.1],
                    [-6, 1.2],
                    [-7, 25.1],
                    [-8, 25.11],
                    [-9, 133.1],
                    [-10, 1.1],
                    [-11, 2.1],
                    [-12, 3.1],
                    [-13, 4.1],
                    [-14, 5.1],
                    [-15, 6.1],
                    [-16, 7.1],
                    [-17, 8.1],
                    [-18, 9.1],
                ];
                eventIDs.forEach(([oldID, newID]) => {
                    const pokemon = saveData.party.caughtPokemon.find(p => p.id === oldID);
                    // If player hasn't caught this mon yet, return.
                    if (pokemon == undefined) {
                        return;
                    }
                    // Update our ID
                    pokemon.id = newID;
                    if (!saveData.statistics.pokemonHatched) {
                        saveData.statistics.pokemonHatched = {};
                    }
                    if (!saveData.statistics.shinyPokemonHatched) {
                        saveData.statistics.shinyPokemonHatched = {};
                    }
                    // Update our statistics
                    saveData.statistics.pokemonEncountered[newID] = saveData.statistics.pokemonEncountered[oldID] || 0;
                    saveData.statistics.pokemonDefeated[newID] = saveData.statistics.pokemonDefeated[oldID] || 0;
                    saveData.statistics.pokemonCaptured[newID] = saveData.statistics.pokemonCaptured[oldID] || 0;
                    saveData.statistics.pokemonHatched[newID] = saveData.statistics.pokemonHatched[oldID] || 0;
                    saveData.statistics.shinyPokemonEncountered[newID] = saveData.statistics.shinyPokemonEncountered[oldID] || 0;
                    saveData.statistics.shinyPokemonDefeated[newID] = saveData.statistics.shinyPokemonDefeated[oldID] || 0;
                    saveData.statistics.shinyPokemonCaptured[newID] = saveData.statistics.shinyPokemonCaptured[oldID] || 0;
                    saveData.statistics.shinyPokemonHatched[newID] = saveData.statistics.shinyPokemonHatched[oldID] || 0;
                    // Delete our old statistics
                    delete saveData.statistics.pokemonEncountered[oldID];
                    delete saveData.statistics.pokemonDefeated[oldID];
                    delete saveData.statistics.pokemonCaptured[oldID];
                    delete saveData.statistics.pokemonHatched[oldID];
                    delete saveData.statistics.shinyPokemonEncountered[oldID];
                    delete saveData.statistics.shinyPokemonDefeated[oldID];
                    delete saveData.statistics.shinyPokemonCaptured[oldID];
                    delete saveData.statistics.shinyPokemonHatched[oldID];
                });
                playerData.mineInventory = ((_a = playerData.mineInventory) === null || _a === void 0 ? void 0 : _a.map(i => {
                    i.sellLocked = false;
                    return i;
                })) || [];
                // Start Galactic questline if player has Coal Badge already
                if (saveData.badgeCase[40]) {
                    Update.startQuestLine(saveData, 'A New World');
                }
                // Clear Valley Windworks Clears
                saveData.statistics.dungeonsCleared[44] = 0;
                // Add Team Galactic Eterna Building
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 47);
                // Move Lake Verity
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 53, 52);
                // Move Lake Valor
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 52, 54);
                // Add Team Galactic HQ
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 56);
                // Move Spear Pillar
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 57, 59);
                // Add Sendoff Spring
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 60);
            },
            '0.9.4': ({ playerData, saveData }) => {
                // Modifications relating to smaller save file sizes
                const PartyKeyMap = {
                    'attackBonusPercent': 0,
                    'attackBonusAmount': 1,
                    'proteinsUsed': 2,
                    'exp': 3,
                    'breeding': 4,
                    'shiny': 5,
                    'category': 6,
                    'levelEvolutionTriggered': 7,
                };
                Object.entries(PartyKeyMap).forEach(([oldKey, newKey]) => {
                    saveData.party.caughtPokemon.forEach(p => {
                        p[newKey] = p[oldKey];
                        delete p[oldKey];
                    });
                });
                saveData.farming.mutations = saveData.farming.mutations.map(m => m.hintsSeen || m.hintSeen);
                // Change Ultra Wormhole to a Temporary Battle
                saveData.statistics.temporaryBattleDefeated = new Array();
                saveData.statistics.temporaryBattleDefeated[0] = saveData.statistics.gymsDefeated[84];
                // Remove the Elite_Nihilego Gym, now a temporary battle instead of a gym
                saveData.statistics.gymsDefeated.splice(84, 1);
                saveData.badgeCase.splice(84, 1);
                // Change Ultra Megalopolis to a Temporary Battle
                saveData.statistics.temporaryBattleDefeated[1] = saveData.statistics.gymsDefeated[88];
                // Remove the Elite_ULtraNecrozma Gym, now a temporary battle instead of a gym
                saveData.statistics.gymsDefeated.splice(88, 1);
                saveData.badgeCase.splice(88, 1);
            },
            '0.9.6': ({ playerData, saveData }) => {
                // Set our last save reminder/download to our current in game time
                // This way we won't get a reminder notification for at least 12 hours
                saveData.saveReminder = {
                    lastReminder: saveData.statistics.secondsPlayed,
                    lastDownloaded: saveData.statistics.secondsPlayed,
                };
                // Start Mina's Trial questline if player has cleared Ultra Necrozma already
                if (saveData.statistics.temporaryBattleDefeated[1]) {
                    Update.startQuestLine(saveData, 'Mina\'s Trial');
                }
                // Add Rocket Game Corner
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 4);
                // Add Silph Co.
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 6);
                // Start Team Rocket Kanto questline if player has Cascade Badge already
                if (saveData.badgeCase[2]) {
                    Update.startQuestLine(saveData, 'Team Rocket');
                }
                // Rename Land vs. Water questline, so QuestLineCompletedRequirement will work
                saveData.quests.questLines.forEach(v => {
                    if (v.name === 'Land vs Water') {
                        v.name = 'Land vs. Water';
                    }
                });
                // Add AZ TemporaryBattle
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 0);
                //Replace Poison Barb with Rocky Helmet
                saveData.oakItems.Rocky_Helmet = saveData.oakItems.Poison_Barb;
                delete saveData.oakItems.Poison_Barb;
                // Give the players Dowsing Machines in place of Item Magnets
                playerData._itemList.Dowsing_machine = playerData._itemList.Item_magnet;
                playerData.effectList.Dowsing_machine = playerData.effectList.Item_magnet;
                delete playerData._itemList.Item_magnet;
                delete playerData.effectList.Item_magnet;
                // Start pokerus
                setTimeout(() => __awaiter(this, void 0, void 0, function* () {
                    // Check if player wants to activate the new challenge modes
                    if (!(yield Notifier.confirm({ title: 'Slow EVs', message: 'New challenge mode added: Slow EVs.\n\nDiminishes the rate at which EVs are gained.\n\nThis is an optional challenge and is NOT the recommended way to play.\n\nPlease choose if you would like this challenge mode to be disabled or enabled.\n\nCan be disabled later. Can NOT be enabled later!', confirm: 'Disable', cancel: 'Enable' }))) {
                        App.game.challenges.list.slowEVs.activate();
                    }
                }), GameConstants.SECOND);
            },
            '0.9.7': ({ playerData, saveData }) => {
                // Fix people not getting the pokerus
                if (saveData.keyItems.Pokerus_virus) {
                    let starter;
                    switch (playerData.starter) {
                        case 0:
                            starter = saveData.party.caughtPokemon.find(p => p.id == 1);
                            break;
                        case 1:
                            starter = saveData.party.caughtPokemon.find(p => p.id == 4);
                            break;
                        case 2:
                            starter = saveData.party.caughtPokemon.find(p => p.id == 7);
                            break;
                        case 3:
                            starter = saveData.party.caughtPokemon.find(p => p.id == 25);
                            break;
                    }
                    starter[8] = true;
                }
                // Add Fighting Dojo TemporaryBattle
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 0);
            },
            '0.9.8': ({ playerData, saveData, settingsData }) => {
                var _a, _b, _c, _d, _e;
                // Add names to oak item loadouts
                saveData.oakItemLoadouts = ((_a = saveData.oakItemLoadouts) === null || _a === void 0 ? void 0 : _a.map((list, index) => ({ name: `Loadout ${index + 1}`, loadout: list }))) || [];
                // Fix pokerus & EVs moved from statistics
                saveData.party.caughtPokemon.forEach(p => {
                    var _a;
                    // If has pokerus, set to "contagious"
                    let status = (p[8]) ? 2 : 0;
                    // Get effort points (0 if not infected), Multiply by 100 for finer control
                    const effortPoints = status ? ((_a = saveData.statistics.effortPoints) === null || _a === void 0 ? void 0 : _a[p.id]) * 100 || 0 : 0;
                    // Set to cured if reached required amount of EVs
                    const requiredForCured = saveData.challenges.list.slowEVs ? 500000 : 50000;
                    if (effortPoints >= requiredForCured) {
                        status = 3;
                    }
                    // Update status and EVs
                    p[8] = status;
                    p[9] = effortPoints;
                });
                // Give the players Linking Cords in place of Trade Stones
                playerData._itemList.Linking_cord = playerData._itemList.Trade_stone || 0;
                delete playerData._itemList.Trade_stone;
                // Start Sevii questline if player has Volcano Badge already
                if (saveData.badgeCase[7]) {
                    Update.startQuestLine(saveData, 'Bill\'s Errand');
                }
                // Start Persons of Interest questline if player has Earth Badge already
                if (saveData.badgeCase[8]) {
                    Update.startQuestLine(saveData, 'Persons of Interest');
                }
                // Just incase statistics is not set
                saveData.statistics = saveData.statistics || {};
                // Add new statistic
                saveData.statistics.totalProteinsPurchased = saveData.statistics.totalProteinsObtained || 0;
                // Add Mt. Ember Summit
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 10);
                // Add Berry Forest
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 11);
                // Add Biker Gang Temporary Battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 1);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 2);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 3);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 4);
                // Add Galactic Boss Cyrus Temporary Battle
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 5);
                // Add Ash Ketchum Temporary Battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 7);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 8);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 9);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 10);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 11);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 12);
                // Update settings
                if (settingsData) {
                    // Update our default quest location color
                    if (settingsData['--questAtLocation'] === '#34BF45') {
                        settingsData['--questAtLocation'] = '#55ff00';
                    }
                    // Remove current location color
                    delete settingsData['--currentPlace'];
                    // Split dungeon loot notifications into two
                    settingsData['notification.common_dungeon_item_found'] = (_b = settingsData['notification.dungeon_item_found']) !== null && _b !== void 0 ? _b : true;
                    settingsData['notification.common_dungeon_item_found.desktop'] = (_c = settingsData['notification.dungeon_item_found.desktop']) !== null && _c !== void 0 ? _c : false;
                    settingsData['notification.rare_dungeon_item_found'] = (_d = settingsData['notification.dungeon_item_found']) !== null && _d !== void 0 ? _d : true;
                    settingsData['notification.rare_dungeon_item_found.desktop'] = (_e = settingsData['notification.dungeon_item_found.desktop']) !== null && _e !== void 0 ? _e : false;
                    delete settingsData['notification.dungeon_item_found'];
                    delete settingsData['notification.dungeon_item_found.desktop'];
                }
            },
            '0.9.9': ({ playerData, saveData }) => {
                // Fix pokemon having Pokérus early (key item not unlocked)
                if (!saveData.keyItems.Pokerus_virus) {
                    saveData.party.caughtPokemon.forEach(p => {
                        // Pokérus State
                        p[8] = 0;
                        // Effort Points
                        p[9] = 0;
                    });
                }
            },
            '0.9.10': ({ playerData, saveData }) => {
                var _a;
                // Rename statistic
                saveData.statistics.pokeballsPurchased = saveData.statistics.pokeballsBought;
                // Update total proteins obtained to be equal to the total purchased (or whichever is higher)
                saveData.statistics.totalProteinsObtained = Math.max(saveData.statistics.totalProteinsPurchased, saveData.statistics.totalProteinsObtained);
                // If Pokémon doesn't have Pokérus yet, it shouldn't have Effort Points
                saveData.party.caughtPokemon.forEach(p => {
                    // Check Pokérus state
                    if (!p[8]) {
                        // Reset Effort Points
                        p[9] = 0;
                    }
                });
                // Turn Parfum Palace into a town
                saveData.statistics.dungeonsCleared.splice(96, 1);
                // Filter already earned milestones due to item/Pokémon name updates
                const milestones = [
                    [5, '25 x Poké Ball'],
                    [10, '100 x Poké Ball'],
                    [20, '100 x Great Ball'],
                    [30, '100 x Ultra Ball'],
                    [35, '100 x X Click'],
                    [40, '100 x X Attack'],
                    [50, '100 x Small Restore'],
                    [100, 'Deoxys'],
                    [110, '10 x Water Stone'],
                    [120, '10 x Leaf Stone'],
                    [130, '10 x Thunder Stone'],
                    [140, '10 x Fire Stone'],
                    [150, '200 x Medium Restore'],
                    [151, 'Deoxys (Attack)'],
                    [160, '100 x Lucky Egg'],
                    [170, '100 x Lucky Incense'],
                    [180, '100 x Dowsing Machine'],
                    [190, '10 x Mystery Egg'],
                    [200, '100 x Large Restore'],
                    [210, '40 x Water Stone'],
                    [220, '40 x Leaf Stone'],
                    [230, '40 x Thunder Stone'],
                    [240, '40 x Moon Stone'],
                    [250, '6,400 x Ultra Ball'],
                    [251, 'Deoxys (Defense)'],
                    [300, '100 x Linking Cord'],
                    [386, 'Deoxys (Speed)'],
                ];
                const highestStageCompleted = ((_a = saveData.statistics) === null || _a === void 0 ? void 0 : _a.battleFrontierHighestStageCompleted) || 0;
                saveData.battleFrontier = {
                    milestones: milestones.filter(([stage]) => stage <= highestStageCompleted),
                    checkpoint: saveData.battleFrontier.checkpoint,
                };
                // Update Pokemon name changes for hatchery/queue
                const renamePokemon = Update.changeHatcheryKey;
                renamePokemon(saveData, 'Bulbasaur (clone)', 'Bulbasaur (Clone)');
                renamePokemon(saveData, 'Ivysaur (clone)', 'Ivysaur (Clone)');
                renamePokemon(saveData, 'Venusaur (clone)', 'Venusaur (Clone)');
                renamePokemon(saveData, 'Charmander (clone)', 'Charmander (Clone)');
                renamePokemon(saveData, 'Charmeleon (clone)', 'Charmeleon (Clone)');
                renamePokemon(saveData, 'Charizard (clone)', 'Charizard (Clone)');
                renamePokemon(saveData, 'Pikachu (Original cap)', 'Pikachu (Original Cap)');
                renamePokemon(saveData, 'Pikachu (Hoenn cap)', 'Pikachu (Hoenn Cap)');
                renamePokemon(saveData, 'Pikachu (Sinnoh cap)', 'Pikachu (Sinnoh Cap)');
                renamePokemon(saveData, 'Pikachu (Unova cap)', 'Pikachu (Unova Cap)');
                renamePokemon(saveData, 'Pikachu (Kalos cap)', 'Pikachu (Kalos Cap)');
                renamePokemon(saveData, 'Pikachu (Alola cap)', 'Pikachu (Alola Cap)');
                renamePokemon(saveData, 'Pikachu (Partner cap)', 'Pikachu (Partner Cap)');
                renamePokemon(saveData, 'Castform (sunny)', 'Castform (Sunny)');
                renamePokemon(saveData, 'Castform (rainy)', 'Castform (Rainy)');
                renamePokemon(saveData, 'Castform (snowy)', 'Castform (Snowy)');
                renamePokemon(saveData, 'Deoxys (attack)', 'Deoxys (Attack)');
                renamePokemon(saveData, 'Deoxys (defense)', 'Deoxys (Defense)');
                renamePokemon(saveData, 'Deoxys (speed)', 'Deoxys (Speed)');
                renamePokemon(saveData, 'Burmy (plant)', 'Burmy (Plant)');
                renamePokemon(saveData, 'Burmy (sand)', 'Burmy (Sand)');
                renamePokemon(saveData, 'Burmy (trash)', 'Burmy (Trash)');
                renamePokemon(saveData, 'Wormadam (plant)', 'Wormadam (Plant)');
                renamePokemon(saveData, 'Wormadam (sand)', 'Wormadam (Sand)');
                renamePokemon(saveData, 'Wormadam (trash)', 'Wormadam (Trash)');
                renamePokemon(saveData, 'Cherrim (overcast)', 'Cherrim (Overcast)');
                renamePokemon(saveData, 'Cherrim (sunshine)', 'Cherrim (Sunshine)');
                renamePokemon(saveData, 'Shellos (west)', 'Shellos (West)');
                renamePokemon(saveData, 'Shellos (east)', 'Shellos (East)');
                renamePokemon(saveData, 'Gastrodon (west)', 'Gastrodon (West)');
                renamePokemon(saveData, 'Gastrodon (east)', 'Gastrodon (East)');
                renamePokemon(saveData, 'Rotom (heat)', 'Rotom (Heat)');
                renamePokemon(saveData, 'Rotom (wash)', 'Rotom (Wash)');
                renamePokemon(saveData, 'Rotom (frost)', 'Rotom (Frost)');
                renamePokemon(saveData, 'Rotom (fan)', 'Rotom (Fan)');
                renamePokemon(saveData, 'Rotom (mow)', 'Rotom (Mow)');
                renamePokemon(saveData, 'Rotom (discord)', 'Rotom (Discord)');
                renamePokemon(saveData, 'Giratina (altered)', 'Giratina (Altered)');
                renamePokemon(saveData, 'Shaymin (land)', 'Shaymin (Land)');
                renamePokemon(saveData, 'Shaymin (sky)', 'Shaymin (Sky)');
                renamePokemon(saveData, 'Arceus (normal)', 'Arceus (Normal)');
                renamePokemon(saveData, 'Meloetta (aria)', 'Meloetta (Aria)');
                renamePokemon(saveData, 'Meloetta (pirouette)', 'Meloetta (Pirouette)');
                renamePokemon(saveData, 'Ash Greninja', 'Ash-Greninja');
                renamePokemon(saveData, 'Vivillon (Pokéball)', 'Vivillon (Poké Ball)');
                renamePokemon(saveData, 'Oricorio (Pom-pom)', 'Oricorio (Pom-Pom)');
                renamePokemon(saveData, 'Minior (Blue-core)', 'Minior (Blue Core)');
                renamePokemon(saveData, 'Minior (Green-core)', 'Minior (Green Core)');
                renamePokemon(saveData, 'Minior (Indigo-core)', 'Minior (Indigo Core)');
                renamePokemon(saveData, 'Minior (Orange-core)', 'Minior (Orange Core)');
                renamePokemon(saveData, 'Minior (Red-core)', 'Minior (Red Core)');
                renamePokemon(saveData, 'Minior (Violet-core)', 'Minior (Violet Core)');
                renamePokemon(saveData, 'Minior (Yellow-core)', 'Minior (Yellow Core)');
                // Start Galactic questline if player has Coal Badge already
                // Don't start completed questline again if updating from v0.9.8/9 to v0.9.16+
                const aNewWorld = saveData.quests.questLines.find(ql => ql.name == 'A new world');
                if (saveData.badgeCase[40] && !aNewWorld) {
                    Update.startQuestLine(saveData, 'A New World');
                }
                // Update mine inventory
                playerData.mineInventory.forEach(i => {
                    if (i.valueType == 'Diamond') {
                        // Shards
                        if (i.name.includes('Shard')) {
                            i.valueType = 2;
                        }
                        else { // Diamond items
                            i.valueType = 0;
                        }
                    }
                    // Fossils
                    if (i.valueType == 'Mine Egg') {
                        i.valueType = 3;
                    }
                    // Gems
                    if (i.value == 100) {
                        i.valueType = 1;
                    }
                });
            },
            '0.9.11': ({ playerData, saveData }) => {
                // Add Tohjo Falls
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 27);
                // Add Celebi Temporary Battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 5);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 6);
            },
            '0.9.12': ({ playerData, saveData }) => {
                // Revert player back to Alola if in Galar
                if (playerData._region >= 7) {
                    playerData._region = 6;
                    playerData._subregion = 0;
                    playerData._route = 0;
                    playerData._townName = 'Iki Town Outskirts';
                }
            },
            '0.9.13': ({ playerData, saveData }) => {
                // Add sevii4567 temp battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 5);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 6);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 7);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 8);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 9);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 10);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 11);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 12);
                // Pinkan Ash
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 23);
                // Add sevii4567 dungeons
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 14);
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 15);
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 16);
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 17);
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 18);
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 19);
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 20);
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 21);
                // Add orange league badges
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 40);
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 41);
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 42);
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 43);
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 44);
                // Start Plasma questline if player has Toxic Badge already
                if (saveData.badgeCase[59]) {
                    Update.startQuestLine(saveData, 'Quest for the DNA Splicers');
                }
                // Remove Team Plasma Assault dungeon
                saveData.statistics.dungeonsCleared.splice(90, 1);
                // Add Team Plasma Temporary Battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 16);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 17);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 18);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 19);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 20);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 21);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 22);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 23);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 24);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 25);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 26);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 27);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 28);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 29);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 30);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 31);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 32);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 33);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 34);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 35);
                // Move player out of Team Plasma Assault
                if (playerData._townName == ('Team Plasma Assault')) {
                    playerData._townName = ('Opelucid City');
                }
                // Move player out of Plasma Frigate
                if (playerData._townName == ('Plasma Frigate')) {
                    playerData._townName = ('Humilau City');
                }
                // Move player out of Giant Chasm
                if (playerData._townName == ('Giant Chasm')) {
                    playerData._townName = ('Humilau City');
                }
                // Add Detective Pikachu TemporaryBattles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 36);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 37);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 38);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 39);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 40);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 41);
            },
            '0.9.14': ({ playerData, saveData }) => {
                if (saveData.party.caughtPokemon.filter(p => p.id === 103.02).length) {
                    saveData.wallet.currencies[1] += 50000;
                }
            },
            '0.9.15': ({ playerData, saveData, settingsData }) => {
                // Aegislash and Pumpkaboo line renames
                const renamePokemon = Update.changeHatcheryKey;
                renamePokemon(saveData, 'Aegislash', 'Aegislash (Shield)');
                renamePokemon(saveData, 'Pumpkaboo', 'Pumpkaboo (Average)');
                renamePokemon(saveData, 'Gourgeist', 'Gourgeist (Average)');
                // Add Snorlax Temporary Battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 1);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 2);
                // Add Suicune Temporary Battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 7);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 8);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 9);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 10);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 11);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 12);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 13);
                // Pinkan Berry
                saveData.farming.berryList = Update.moveIndex(saveData.farming.berryList, 35);
                saveData.farming.unlockedBerries = Update.moveIndex(saveData.farming.unlockedBerries, 35);
                saveData.farming.mutations = Update.moveIndex(saveData.farming.mutations, 28);
                saveData.farming.plotList.forEach(p => {
                    if (p.berry >= 35) {
                        p.berry++;
                    }
                });
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 22);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 23);
                // Add Princess Diancie Temporary Battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 53);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 54);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 55);
                // Replace Pokémon names to IDs
                const eggList = saveData.breeding.eggList;
                const queueList = saveData.breeding.queueList;
                Update.changePokemonNameToId(saveData, eggList);
                Update.changePokemonNameToId(saveData, queueList);
                // Adding more Galar badges
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 109);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 110);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 111);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 112);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 113);
            },
            '0.9.16': ({ playerData, saveData }) => {
                // Pinkan Berry
                saveData.statistics.berriesHarvested = Update.moveIndex(saveData.statistics.berriesHarvested, 35);
                // Rename Pinkan Rocket questline and Sinnoh questline
                saveData.quests.questLines.forEach(v => {
                    if (v.name === 'Team Rocket\'s Pinkan Themepark') {
                        v.name = 'Team Rocket\'s Pinkan Theme Park';
                    }
                });
                saveData.quests.questLines.forEach(v => {
                    if (v.name === 'A new world') {
                        v.name = 'A New World';
                    }
                });
            },
            '0.9.17': ({ playerData, saveData, settingsData }) => {
                // Add Sudowoodo Temporary Battle
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 7);
                // Pinkan Berry - Obtained Statistics
                saveData.statistics.berriesObtained = Update.moveIndex(saveData.statistics.berriesObtained, 35);
                // Fix A New World questline for players updating from v0.9.8/9 to v0.9.16+
                const aNewWorld = saveData.quests.questLines.find(ql => ql.name == 'A New World') || {};
                if (aNewWorld.state === 1 && aNewWorld.quest <= 3) {
                    saveData.statistics.temporaryBattleDefeated[27] = 0;
                }
            },
            '0.10.0': ({ playerData, saveData, settingsData }) => {
                var _a;
                // Add Kimono Girls Temporary Battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 25);
                // Create new Pokemon Gender Statistics if they don't exist
                // Male
                if (!saveData.statistics.malePokemonCaptured) {
                    saveData.statistics.malePokemonCaptured = {};
                }
                if (!saveData.statistics.malePokemonDefeated) {
                    saveData.statistics.malePokemonDefeated = {};
                }
                if (!saveData.statistics.malePokemonEncountered) {
                    saveData.statistics.malePokemonEncountered = {};
                }
                if (!saveData.statistics.malePokemonHatched) {
                    saveData.statistics.malePokemonHatched = {};
                }
                // Shiny male
                if (!saveData.statistics.shinyMalePokemonCaptured) {
                    saveData.statistics.shinyMalePokemonCaptured = {};
                }
                if (!saveData.statistics.shinyMalePokemonDefeated) {
                    saveData.statistics.shinyMalePokemonDefeated = {};
                }
                if (!saveData.statistics.shinyMalePokemonEncountered) {
                    saveData.statistics.shinyMalePokemonEncountered = {};
                }
                if (!saveData.statistics.shinyMalePokemonHatched) {
                    saveData.statistics.shinyMalePokemonHatched = {};
                }
                // Female
                if (!saveData.statistics.femalePokemonCaptured) {
                    saveData.statistics.femalePokemonCaptured = {};
                }
                if (!saveData.statistics.femalePokemonDefeated) {
                    saveData.statistics.femalePokemonDefeated = {};
                }
                if (!saveData.statistics.femalePokemonEncountered) {
                    saveData.statistics.femalePokemonEncountered = {};
                }
                if (!saveData.statistics.femalePokemonHatched) {
                    saveData.statistics.femalePokemonHatched = {};
                }
                // Shiny female
                if (!saveData.statistics.shinyFemalePokemonCaptured) {
                    saveData.statistics.shinyFemalePokemonCaptured = {};
                }
                if (!saveData.statistics.shinyFemalePokemonDefeated) {
                    saveData.statistics.shinyFemalePokemonDefeated = {};
                }
                if (!saveData.statistics.shinyFemalePokemonEncountered) {
                    saveData.statistics.shinyFemalePokemonEncountered = {};
                }
                if (!saveData.statistics.shinyFemalePokemonHatched) {
                    saveData.statistics.shinyFemalePokemonHatched = {};
                }
                // Initialize total statistics
                saveData.statistics.totalMalePokemonCaptured = 0;
                saveData.statistics.totalMalePokemonDefeated = 0;
                saveData.statistics.totalMalePokemonEncountered = 0;
                saveData.statistics.totalMalePokemonHatched = 0;
                saveData.statistics.totalShinyMalePokemonCaptured = 0;
                saveData.statistics.totalShinyMalePokemonDefeated = 0;
                saveData.statistics.totalShinyMalePokemonEncountered = 0;
                saveData.statistics.totalShinyMalePokemonHatched = 0;
                saveData.statistics.totalFemalePokemonCaptured = 0;
                saveData.statistics.totalFemalePokemonDefeated = 0;
                saveData.statistics.totalFemalePokemonEncountered = 0;
                saveData.statistics.totalFemalePokemonHatched = 0;
                saveData.statistics.totalShinyFemalePokemonCaptured = 0;
                saveData.statistics.totalShinyFemalePokemonDefeated = 0;
                saveData.statistics.totalShinyFemalePokemonEncountered = 0;
                saveData.statistics.totalShinyFemalePokemonHatched = 0;
                saveData.statistics.totalGenderlessPokemonCaptured = 0;
                saveData.statistics.totalGenderlessPokemonDefeated = 0;
                saveData.statistics.totalGenderlessPokemonEncountered = 0;
                saveData.statistics.totalGenderlessPokemonHatched = 0;
                saveData.statistics.totalShinyGenderlessPokemonCaptured = 0;
                saveData.statistics.totalShinyGenderlessPokemonDefeated = 0;
                saveData.statistics.totalShinyGenderlessPokemonEncountered = 0;
                saveData.statistics.totalShinyGenderlessPokemonHatched = 0;
                // Assign generic Pokemon statistics to the gendered Pokemon ones
                (_a = saveData.party.caughtPokemon) === null || _a === void 0 ? void 0 : _a.forEach(pokemon => {
                    const capturedStatistic = saveData.statistics.pokemonCaptured[pokemon.id] || 0;
                    const defeatedStatistic = saveData.statistics.pokemonDefeated[pokemon.id] || 0;
                    const encounteredStatistic = saveData.statistics.pokemonEncountered[pokemon.id] || 0;
                    const hatchedStatistic = saveData.statistics.pokemonHatched[pokemon.id] || 0;
                    const shinyCapturedStatistic = saveData.statistics.shinyPokemonCaptured[pokemon.id] || 0;
                    const shinyDefeatedStatistic = saveData.statistics.shinyPokemonDefeated[pokemon.id] || 0;
                    const shinyEncounteredStatistic = saveData.statistics.shinyPokemonEncountered[pokemon.id] || 0;
                    const shinyHatchedStatistic = saveData.statistics.shinyPokemonHatched[pokemon.id] || 0;
                    if (pokemonMap[pokemon.id].gender.type == GameConstants.Genders.MaleFemale) { // No genderless
                        if (pokemonMap[pokemon.id].gender.femaleRatio != 1) { // Anything but female-only
                            saveData.statistics.malePokemonCaptured[pokemon.id] = capturedStatistic;
                            saveData.statistics.malePokemonDefeated[pokemon.id] = defeatedStatistic;
                            saveData.statistics.malePokemonEncountered[pokemon.id] = encounteredStatistic;
                            saveData.statistics.malePokemonHatched[pokemon.id] = hatchedStatistic;
                            saveData.statistics.shinyMalePokemonCaptured[pokemon.id] = shinyCapturedStatistic;
                            saveData.statistics.shinyMalePokemonDefeated[pokemon.id] = shinyDefeatedStatistic;
                            saveData.statistics.shinyMalePokemonEncountered[pokemon.id] = shinyEncounteredStatistic;
                            saveData.statistics.shinyMalePokemonHatched[pokemon.id] = shinyHatchedStatistic;
                            // Assign the generic total ones to the male ones
                            saveData.statistics.totalMalePokemonCaptured += capturedStatistic;
                            saveData.statistics.totalMalePokemonDefeated += defeatedStatistic;
                            saveData.statistics.totalMalePokemonEncountered += encounteredStatistic;
                            saveData.statistics.totalMalePokemonHatched += hatchedStatistic;
                            saveData.statistics.totalShinyMalePokemonCaptured += shinyCapturedStatistic;
                            saveData.statistics.totalShinyMalePokemonDefeated += shinyDefeatedStatistic;
                            saveData.statistics.totalShinyMalePokemonEncountered += shinyEncounteredStatistic;
                            saveData.statistics.totalShinyMalePokemonHatched += shinyHatchedStatistic;
                        }
                        else { // Female-only
                            saveData.statistics.femalePokemonCaptured[pokemon.id] = capturedStatistic;
                            saveData.statistics.femalePokemonDefeated[pokemon.id] = defeatedStatistic;
                            saveData.statistics.femalePokemonEncountered[pokemon.id] = encounteredStatistic;
                            saveData.statistics.femalePokemonHatched[pokemon.id] = hatchedStatistic;
                            saveData.statistics.shinyFemalePokemonCaptured[pokemon.id] = shinyCapturedStatistic;
                            saveData.statistics.shinyFemalePokemonDefeated[pokemon.id] = shinyDefeatedStatistic;
                            saveData.statistics.shinyFemalePokemonEncountered[pokemon.id] = shinyEncounteredStatistic;
                            saveData.statistics.shinyFemalePokemonHatched[pokemon.id] = shinyHatchedStatistic;
                            // Assign the generic total ones to the female ones
                            saveData.statistics.totalFemalePokemonCaptured += capturedStatistic;
                            saveData.statistics.totalFemalePokemonDefeated += defeatedStatistic;
                            saveData.statistics.totalFemalePokemonEncountered += encounteredStatistic;
                            saveData.statistics.totalFemalePokemonHatched += hatchedStatistic;
                            saveData.statistics.totalShinyFemalePokemonCaptured += shinyCapturedStatistic;
                            saveData.statistics.totalShinyFemalePokemonDefeated += shinyDefeatedStatistic;
                            saveData.statistics.totalShinyFemalePokemonEncountered += shinyEncounteredStatistic;
                            saveData.statistics.totalShinyFemalePokemonHatched += shinyHatchedStatistic;
                        }
                    }
                    else { // Genderless
                        // Assign the generic total ones to the genderless ones
                        saveData.statistics.totalGenderlessPokemonCaptured += capturedStatistic;
                        saveData.statistics.totalGenderlessPokemonDefeated += defeatedStatistic;
                        saveData.statistics.totalGenderlessPokemonEncountered += encounteredStatistic;
                        saveData.statistics.totalGenderlessPokemonHatched += hatchedStatistic;
                        saveData.statistics.totalShinyGenderlessPokemonCaptured += shinyCapturedStatistic;
                        saveData.statistics.totalShinyGenderlessPokemonDefeated += shinyDefeatedStatistic;
                        saveData.statistics.totalShinyGenderlessPokemonEncountered += shinyEncounteredStatistic;
                        saveData.statistics.totalShinyGenderlessPokemonHatched += shinyHatchedStatistic;
                    }
                });
                // Update Region filter from integer to bitfield.
                if (settingsData.breedingRegionFilter == -2) {
                    settingsData.breedingRegionFilter = Math.pow(2, (playerData.highestRegion + 1)) - 1;
                }
                else {
                    settingsData.breedingRegionFilter = Math.pow(2, settingsData.breedingRegionFilter);
                }
            },
        };
        const saveData = this.getSaveData();
        if (saveData) {
            this.fromJSON(saveData.update, true);
        }
        // Start our update check
        this.checkForNewerVersionOnInterval();
    }
    checkForNewerVersionOnInterval() {
        // Lets check every 3 hours for a newer version
        const checkForNewVersionInterval = setInterval(() => {
            try {
                $.ajax({
                    cache: false,
                    url: './package.json',
                    dataType: 'json',
                    success: result => {
                        // If the website version is newer
                        if (this.isNewerVersion(result.version, this.version)) {
                            clearInterval(checkForNewVersionInterval);
                            Notifier.notify({
                                title: `[UPDATE] v${result.version}`,
                                message: 'A newer version of the game is available:\n\n<a class="btn btn-warning btn-block" href="#" onclick="location.reload(true);">Reload Page</a>',
                                timeout: GameConstants.DAY,
                            });
                        }
                    },
                });
            }
            catch (ಠ_ಠ) {
                console.error('[update] Unable to check for new version', ಠ_ಠ);
            }
        }, GameConstants.HOUR * 3);
    }
    // check if save version is newer or equal to version
    minUpdateVersion(version, saveData) {
        var _a;
        return !this.isOlderVersion((_a = saveData.update) === null || _a === void 0 ? void 0 : _a.version, version);
    }
    // potentially newer version > check against version
    isNewerVersion(version, compareVersion) {
        return compareVersion.localeCompare(version, undefined, { numeric: true }) === -1;
    }
    // potentially older version < check against version
    isOlderVersion(version, compareVersion) {
        return compareVersion.localeCompare(version, undefined, { numeric: true }) === 1;
    }
    getBackupButton() {
        const playerData = this.getPlayerData();
        const saveData = this.getSaveData();
        // Save the data by stringifying it, so that it isn't mutated during update
        const backupSaveData = JSON.stringify({ player: playerData, save: saveData });
        const button = document.createElement('a');
        try {
            button.href = `data:text/plain;charset=utf-8,${encodeURIComponent(btoa(backupSaveData))}`;
            button.className = 'btn btn-block btn-warning';
            button.innerText = 'Click to Backup Save!';
            button.setAttribute('download', `[v${this.saveVersion}] Poke Clicker Backup Save.txt`);
        }
        catch (e) {
            console.error('Failed to create backup button data:', e);
        }
        return [button, backupSaveData];
    }
    automaticallyDownloadBackup(button, settingsData) {
        // Add to body and click, triggering auto download
        if (!(settingsData === null || settingsData === void 0 ? void 0 : settingsData.disableAutoDownloadBackupSaveOnUpdate)) {
            button.style.display = 'none';
            document.body.appendChild(button);
            button.click();
            document.body.removeChild(button);
        }
        button.style.display = '';
    }
    check() {
        if (this.saveVersion === this.version) {
            return;
        }
        // Check if the save is newer than the current client, don't allow it to load.
        if (this.isNewerVersion(this.saveVersion, this.version)) {
            Notifier.notify({
                title: 'Save version is newer than game version!',
                message: `Please update your game before attempting to load this save..\n\nSave version: ${this.saveVersion}\nGame version: ${this.version}`,
                type: NotificationConstants.NotificationOption.danger,
                timeout: GameConstants.DAY,
            });
            throw new Error(`Save is newer than game version\nSave version: ${this.saveVersion}\nGame version: ${this.version}`);
            return;
        }
        const [backupButton, backupSaveData] = this.getBackupButton();
        // Must modify these object when updating
        const playerData = this.getPlayerData();
        const saveData = this.getSaveData();
        const settingsData = this.getSettingsData();
        if (!playerData || !saveData) {
            return;
        }
        const updateResult = Object.entries(this.updateSteps)
            .filter(([version]) => this.isOlderVersion(this.saveVersion, version))
            .sort(([a], [b]) => this.isNewerVersion(a, b) ? 1 : -1)
            .reduce((beforeUpdate, [version, callback]) => {
            // The parse(stringify(...)) will deep-clone the object so
            // that it isn't mutated, and we can log if something fails
            const updateData = JSON.parse(JSON.stringify(beforeUpdate));
            try {
                console.info(`Applying update v${version}`);
                callback(updateData);
                return updateData;
            }
            catch (e) {
                try {
                    localStorage.backupSave = backupSaveData;
                }
                catch (e) { }
                const resetButton = document.createElement('a');
                resetButton.className = 'btn btn-block btn-danger';
                resetButton.innerText = 'Reset your save - This is not reversible';
                resetButton.id = 'failedUpdateResetButton';
                console.error(`Caught error while applying update v${version}`, e, { beforeUpdate, updateData });
                Notifier.notify({
                    title: `Failed to update to v${this.version}!`,
                    message: `Please check the console for errors, and report them on our <a class="text-light" href="https://discord.gg/a6DFe4p"><u>Discord</u></a> along with your save file.\n\n${backupButton.outerHTML}\n${resetButton.outerHTML}`,
                    type: NotificationConstants.NotificationOption.primary,
                    timeout: GameConstants.DAY,
                });
                // On the next tick, set the reset button click handler
                setTimeout(() => {
                    document.getElementById('failedUpdateResetButton').onclick = () => {
                        Notifier.confirm({
                            title: 'Reset save',
                            message: 'Are you sure you want to reset your save?\n\nThis cannot be undone, so please make sure you have a backup first!',
                            type: NotificationConstants.NotificationOption.danger,
                            confirm: 'reset',
                        }).then(confirmed => {
                            if (confirmed) {
                                // Force an autodownload of the backup when resetting the save
                                this.automaticallyDownloadBackup(backupButton, { disableAutoDownloadBackupSaveOnUpdate: false });
                                localStorage.removeItem(`player${Save.key}`);
                                localStorage.removeItem(`save${Save.key}`);
                                localStorage.removeItem(`settings${Save.key}`);
                                location.reload();
                            }
                        });
                    };
                }, 0);
                // Rethrow the error to prevent the game from corrupting the save
                throw e;
            }
        }, { playerData, saveData, settingsData });
        try {
            this.automaticallyDownloadBackup(backupButton, settingsData);
            Notifier.notify({
                title: `[v${this.version}] Game has been updated!`,
                message: `Check the <a class="text-light" href="#changelogModal" data-toggle="modal"><u>changelog</u></a> for details!\n\n${backupButton.outerHTML}`,
                type: NotificationConstants.NotificationOption.primary,
                timeout: 6e4,
            });
        }
        catch (err) {
            console.error('Error trying to convert backup save', err);
            Notifier.notify({
                title: `[v${this.version}] Game has been updated!`,
                message: 'Check the <a class="text-light" href="#changelogModal" data-toggle="modal"><u>changelog</u></a> for details!\n\n<i>Failed to download old save, Please check the console for errors, and report them on our <a class="text-light" href="https://discord.gg/a6DFe4p"><u>Discord</u></a>.</i>',
                type: NotificationConstants.NotificationOption.primary,
                timeout: 6e4,
            });
            try {
                localStorage.backupSave = backupSaveData;
            }
            catch (e) { }
            throw err;
        }
        // Update the save data version to our current version
        updateResult.saveData.update.version = this.version;
        this.setPlayerData(updateResult.playerData);
        this.setSaveData(updateResult.saveData);
        this.setSettingsData(updateResult.settingsData);
    }
    // Replaces Pokémon names to IDs in the save data
    static changePokemonNameToId(saveData, pokemonArray) {
        pokemonArray === null || pokemonArray === void 0 ? void 0 : pokemonArray.forEach(pokemonName => {
            const pokemon = PokemonHelper.getPokemonByName(pokemonName);
            Update.changeHatcheryKey(saveData, pokemonName, pokemon.id);
        });
    }
    getPlayerData() {
        let playerData;
        try {
            playerData = JSON.parse(localStorage.getItem(`player${Save.key}`));
        }
        catch (err) {
            console.warn('Error getting player data', err);
        }
        finally {
            return playerData;
        }
    }
    setPlayerData(playerData) {
        try {
            localStorage.setItem(`player${Save.key}`, JSON.stringify(playerData));
        }
        catch (err) {
            console.error('Error setting player data', err);
        }
    }
    getSaveData() {
        let saveData;
        try {
            saveData = JSON.parse(localStorage.getItem(`save${Save.key}`));
        }
        catch (err) {
            console.warn('Error getting save data', err);
        }
        finally {
            return saveData;
        }
    }
    setSaveData(saveData) {
        try {
            localStorage.setItem(`save${Save.key}`, JSON.stringify(saveData));
        }
        catch (err) {
            console.error('Error setting save data', err);
        }
    }
    getSettingsData() {
        let settingsData;
        try {
            settingsData = JSON.parse(localStorage.getItem(`settings${Save.key}`) || localStorage.settings);
        }
        catch (err) {
            console.warn('Error getting settings data', err);
        }
        finally {
            return settingsData || {};
        }
    }
    setSettingsData(settingsData) {
        try {
            localStorage.setItem(`settings${Save.key}`, JSON.stringify(settingsData));
        }
        catch (err) {
            console.error('Error setting settings data', err);
        }
    }
    fromJSON(json, initial = false) {
        if (!initial) {
            return;
        }
        if (!json) {
            json = { version: '0.0.0' };
        }
        this.saveVersion = json.version || '0.0.0';
        this.check();
    }
    toJSON() {
        return {
            version: this.version,
        };
    }
}
// Used for moving dungeons and other stuff
// Be sure to insert from lowest index to highest index
// Example to get dungeons new index: GameConstants.getDungeonIndex('Aqua Hideout')
Update.moveIndex = (arr, to, from = Infinity, defaultVal = 0) => {
    let temp = arr.splice(from, 1);
    if (!temp.length) {
        temp = [defaultVal];
    }
    const end = arr.splice(to);
    arr = [...arr, ...temp, ...end];
    return arr;
};
Update.addPokemonToSaveData = (saveData, pokemonId) => {
    if (saveData.party.caughtPokemon.filter(p => p.id === pokemonId).length > 0) {
        return;
    }
    const pokemon = PokemonFactory.generatePartyPokemon(pokemonId, false);
    saveData.statistics.pokemonCaptured[pokemonId] = 1;
    saveData.statistics.totalPokemonCaptured++;
    saveData.logbook.logs.unshift({
        date: Date.now(),
        description: `You have captured ${GameHelper.anOrA(pokemon.name)} ${pokemon.name}!`,
        type: {
            display: 'success',
            label: 'CAUGHT',
        },
    });
    saveData.party.caughtPokemon.push(pokemon);
};
// If any pokemon names change in the data rename them,
// note that name isn't used in party.
Update.changeHatcheryKey = (saveData, oldName, newName) => {
    var _a, _b;
    if (!saveData.breeding) {
        return;
    }
    // Fixup eggs
    (_a = saveData.breeding.eggList) === null || _a === void 0 ? void 0 : _a.forEach(egg => {
        if (egg.pokemon == oldName) {
            egg.pokemon = newName;
        }
    });
    // Fixup queue
    saveData.breeding.queueList = ((_b = saveData.breeding.queueList) === null || _b === void 0 ? void 0 : _b.map(p => p == oldName ? newName : p)) || [];
};
Update.startQuestLine = (saveData, questLineName) => {
    const questLine = saveData.quests.questLines.find(ql => ql.name == questLineName);
    if (questLine) {
        // Set to started if not yet started, otherwise leave in it's current state
        questLine.state = questLine.state == 0 ? 1 : questLine.state;
    }
    else {
        // Push the quest, doesn't exist in save data yet
        saveData.quests.questLines.push({ state: 1, name: questLineName, quest: 0 });
    }
};
/**
 * TODO(@Isha) refactor this to no longer be global but App properties.
 * Will be done after the major player refactor.
 */
let player;
/**
 * Start the application when all html elements are loaded.
 */
document.addEventListener('DOMContentLoaded', () => {
    try {
        const settings = localStorage.getItem('settings');
        Settings.fromJSON(JSON.parse(settings));
        document.body.className = `no-select ${Settings.getSetting('theme').observableValue()} ${Settings.getSetting('backgroundImage').observableValue()}`;
        document.getElementById('theme-link').href = `https://bootswatch.com/4/${Settings.getSetting('theme').observableValue()}/bootstrap.min.css`;
    }
    catch (e) { }
    // Load list of saves
    SaveSelector.loadSaves();
});
// Nested modals can be opened while they are in the middle of hiding.
// This should raise their backdrop on top of any existing modals,
// preventing us from getting into that messy situation.
// Copied from https://stackoverflow.com/questions/19305821/multiple-modals-overlay#answer-24914782
$(document).on('show.bs.modal', '.modal', function () {
    const zIndex = Math.max(1040, Math.max(...$('.modal:visible').get().map(e => +e.style.zIndex)) + 10);
    $(this).css('z-index', zIndex);
    // setTimeout with 0 delay because the backdrop doesn't exist yet
    setTimeout(() => {
        $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
    }, 0);
});
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/achievements/Achievement.d.ts" />
class AchievementHandler {
    static setNavigateIndex(index) {
        if (index < 0 || index >= AchievementHandler.numberOfTabs()) {
            return;
        }
        AchievementHandler.navigateIndex(index);
        Settings.setSettingByName('achievementsPage', index);
    }
    static navigateRight() {
        this.setNavigateIndex(AchievementHandler.navigateIndex() + 1);
    }
    static navigateLeft() {
        this.setNavigateIndex(AchievementHandler.navigateIndex() - 1);
    }
    static isNavigateDirectionDisabled(navigateBackward) {
        return navigateBackward
            ? this.navigateIndex() === 0
            : this.navigateIndex() + 1 === this.numberOfTabs();
    }
    static calculateNumberOfTabs() {
        this.numberOfTabs(Math.max(1, Math.ceil(this.achievementListFiltered().length / 10)));
    }
    static getAchievementListWithIndex() {
        return this.getAchievementList().slice(this.navigateIndex() * 10, (this.navigateIndex() * 10) + 10);
    }
    static getAchievementList() {
        const achievementSortValue = Settings.getSetting('achievementSort').observableValue();
        // Checks if the user has selected the default sorting option
        if (achievementSortValue === AchievementSortOptions.default) {
            // ... in this case, returns the filtered list without sorting.
            return this.achievementListFiltered();
        }
        // ... otherwise, returns a copy of the filtered list sorted by provided property.
        const achievementSortedList = [...this.achievementListFiltered()];
        return achievementSortedList.sort(AchievementHandler.compareBy(achievementSortValue, Settings.getSetting('achievementSortDirection').observableValue()));
    }
    static filterAchievementList(retainPage = false) {
        this.achievementListFiltered(this.achievementList.filter((a) => (a.category.isUnlocked() &&
            a.achievable() &&
            (this.filter.status() == -2 || a.unlocked === !!this.filter.status()) &&
            (this.filter.type() == -2 || a.property.achievementType === this.filter.type()) &&
            (this.filter.category() == 'all' || a.category.name === this.filter.category()))));
        this.calculateNumberOfTabs();
        if (!retainPage) {
            this.setNavigateIndex(0);
        }
        else if (this.getAchievementListWithIndex().length === 0 && this.navigateIndex() > 0) {
            this.setNavigateIndex(this.numberOfTabs() - 1);
        }
    }
    static compareBy(option, direction) {
        return function (a, b) {
            let res, dir = (direction) ? -1 : 1;
            const config = AchievementSortOptionConfigs[option];
            const aValue = config.getValue(a);
            const bValue = config.getValue(b);
            if (config.invert) {
                dir *= -1;
            }
            //Compare by provided property
            if (aValue == bValue) {
                //If they are equal according to provided property, sort by name
                return a.name.localeCompare(b.name);
            }
            else if (aValue < bValue) {
                res = -1;
            }
            else if (aValue > bValue) {
                res = 1;
            }
            else {
                res = 0;
            }
            return res * dir;
        };
    }
    static preCheckAchievements() {
        // Check if our achievements are completed, we don't want to re-notify if already done
        for (let i = 0; i < AchievementHandler.achievementList.length; i++) {
            AchievementHandler.achievementList[i].unlocked = AchievementHandler.achievementList[i].isCompleted();
        }
    }
    static checkAchievements() {
        for (let i = 0; i < AchievementHandler.achievementList.length; i++) {
            if (!AchievementHandler.achievementList[i].unlocked) {
                AchievementHandler.achievementList[i].check();
            }
        }
    }
    static addAchievement(name, description, property, bonus, category = GameConstants.ExtraAchievementCategories.global, achievableFunction = null) {
        let categoryObj;
        // ExtraAchievementCategory always starts at finals index
        if (category >= GameConstants.Region.final) {
            categoryObj = AchievementHandler.getAchievementCategoryByExtraCategory(category);
        }
        else {
            categoryObj = AchievementHandler.getAchievementCategoryByRegion(category);
        }
        categoryObj.totalWeight += bonus;
        AchievementHandler.achievementList.push(new Achievement(name, description, property, bonus, categoryObj, achievableFunction));
    }
    static calculateBonus() {
        AchievementHandler.achievementList.forEach((achievement) => {
            if (!achievement.achievable()) {
                return 0;
            }
            achievement.bonus = (achievement.bonusWeight / achievement.category.totalWeight) * achievement.category.achievementBonus;
        });
    }
    static calculateMaxBonus() {
        AchievementHandler.getAchievementCategories().forEach(category => {
            category.totalWeight = AchievementHandler.achievementList.filter(a => a.category == category && a.achievable()).reduce((sum, a) => sum + a.bonusWeight, 0);
        });
        AchievementHandler.calculateBonus();
    }
    static achievementBonus() {
        let sum = 0;
        AchievementHandler.getAchievementCategories().forEach(category => {
            const total = AchievementHandler.achievementList.filter(a => a.category == category && a.isCompleted()).reduce((sum, a) => sum + a.bonusWeight, 0) / category.totalWeight * category.achievementBonus / 100;
            if (!isNaN(total)) {
                sum += total;
            }
        });
        return sum;
    }
    static achievementBonusPercent() {
        return `${(100 * AchievementHandler.achievementBonus()).toFixed(2)}%`;
    }
    static findByName(name) {
        return AchievementHandler.achievementList.find((achievement) => achievement.name === name && achievement.achievable());
    }
    static getAchievementCategories() {
        if (AchievementHandler._achievementCategories) {
            return AchievementHandler._achievementCategories;
        }
        const categories = GameHelper.enumStrings(GameConstants.Region).filter(r => r != 'none' && r != 'final').map(r => new AchievementCategory(r, 100, () => player.highestRegion() >= GameConstants.Region[r]));
        categories.push(new AchievementCategory(GameConstants.ExtraAchievementCategories[GameConstants.ExtraAchievementCategories.global], 150, () => true));
        categories.push(new AchievementCategory(GameConstants.ExtraAchievementCategories[GameConstants.ExtraAchievementCategories.sevii], 50, () => true));
        AchievementHandler._achievementCategories = categories;
        return categories;
    }
    static getAchievementCategoryByRegion(region) {
        return AchievementHandler.getAchievementCategories().find(c => c.name == GameConstants.Region[region]);
    }
    static getAchievementCategoryByExtraCategory(category) {
        return AchievementHandler.getAchievementCategories().find(c => c.name == GameConstants.ExtraAchievementCategories[category]);
    }
    static initialize(multiplier, challenges) {
        /*
         * GENERAL
         */
        AchievementHandler.addAchievement('My First Hundo', 'Obtain 100 Pokédollars.', new MoneyRequirement(100), 0.05);
        AchievementHandler.addAchievement('I Should Buy a Poké Mart', 'Obtain 1,000 Pokédollars.', new MoneyRequirement(1000), 0.10);
        AchievementHandler.addAchievement('A Small Fortune', 'Obtain 10,000 Pokédollars.', new MoneyRequirement(10000), 0.15);
        AchievementHandler.addAchievement('Annual Wage', 'Obtain 100,000 Pokédollars.', new MoneyRequirement(100000), 0.20);
        AchievementHandler.addAchievement('Pfft, I Don\'t Need a Bike Voucher', 'Obtain 1,000,000 Pokédollars.', new MoneyRequirement(1000000), 0.25);
        AchievementHandler.addAchievement('A Billion Poképennies', 'Obtain 10,000,000 Pokédollars.', new MoneyRequirement(10000000), 0.3);
        AchievementHandler.addAchievement('Ready To Retire', 'Obtain 1,000,000,000 Pokédollars.', new MoneyRequirement(1000000000), 0.4);
        AchievementHandler.addAchievement('I Should Go to Space...', 'Obtain 100,000,000,000 Pokédollars.', new MoneyRequirement(100000000000), 0.6);
        AchievementHandler.addAchievement('Dungeon Time', 'Obtain 100 Dungeon Tokens.', new TokenRequirement(100), 0.05);
        AchievementHandler.addAchievement('Token Collector', 'Obtain 1,000 Dungeon Tokens.', new TokenRequirement(1000), 0.10);
        AchievementHandler.addAchievement('Dungeon Grinder', 'Obtain 10,000 Dungeon Tokens.', new TokenRequirement(10000), 0.15);
        AchievementHandler.addAchievement('Dungeon Master', 'Obtain 100,000 Dungeon Tokens.', new TokenRequirement(100000), 0.20);
        AchievementHandler.addAchievement('Dungeon Legend', 'Obtain 1,000,000 Dungeon Tokens.', new TokenRequirement(1000000), 0.25);
        AchievementHandler.addAchievement('Dungeon Myth', 'Obtain 100,000,000 Dungeon Tokens.', new TokenRequirement(100000000), 0.3);
        AchievementHandler.addAchievement('Dungeon God', 'Obtain 10,000,000,000 Dungeon Tokens.', new TokenRequirement(10000000000), 0.6);
        AchievementHandler.addAchievement('Farm Master', 'Obtain 100,000 Farm Points.', new FarmPointsRequirement(100000), 0.20);
        AchievementHandler.addAchievement('Farm Legend', 'Obtain 1,000,000 Farm Points.', new FarmPointsRequirement(1000000), 0.30);
        AchievementHandler.addAchievement('Farm Myth', 'Obtain 20,000,000 Farm Points.', new FarmPointsRequirement(20000000), 0.60);
        AchievementHandler.addAchievement('Startin\' Out', 'Capture your first Pokémon.', new CaughtPokemonRequirement(1), 0.01);
        AchievementHandler.addAchievement('Better Than Season 1 Ash', 'Capture 15 unique Pokémon.', new CaughtPokemonRequirement(15), 0.05);
        AchievementHandler.addAchievement('Wonderful! Do You Like To Collect Things?', 'Capture 50 unique Pokémon.', new CaughtPokemonRequirement(50), 0.10);
        AchievementHandler.addAchievement('Surpassing Ash', 'Capture 100 unique Pokémon.', new CaughtPokemonRequirement(100), 0.20);
        AchievementHandler.addAchievement('Enough for a Zoo', 'Capture 500 unique Pokémon.', new CaughtPokemonRequirement(500), 0.30);
        AchievementHandler.addAchievement('The PC Will Be Filled', 'Capture 1,000 unique Pokémon.', new CaughtPokemonRequirement(1000), 0.40);
        AchievementHandler.addAchievement('I\'d Rather Be Shiny', 'Capture your first Shiny Pokémon.', new ShinyPokemonRequirement(1), 0.03);
        AchievementHandler.addAchievement('These Pokémon Must Be Sick', 'Capture 10 unique Shiny Pokémon.', new ShinyPokemonRequirement(10), 0.06);
        AchievementHandler.addAchievement('Why Am I Doing This?', 'Capture 20 unique Shiny Pokémon.', new ShinyPokemonRequirement(20), 0.09);
        AchievementHandler.addAchievement('Why Am I Still Doing This?!', 'Capture 30 unique Shiny Pokémon.', new ShinyPokemonRequirement(30), 0.12);
        AchievementHandler.addAchievement('Okay Fine, I Can Do a Few More', 'Capture 40 unique Shiny Pokémon.', new ShinyPokemonRequirement(40), 0.15);
        AchievementHandler.addAchievement('Where Did All the Shiny Pokémon Go?', 'Capture 50 unique Shiny Pokémon.', new ShinyPokemonRequirement(50), 0.30);
        AchievementHandler.addAchievement('Nvm, Found Some More', 'Capture 75 unique Shiny Pokémon.', new ShinyPokemonRequirement(75), 0.45);
        AchievementHandler.addAchievement('Just Keep Swimming Just Keep Swimming - Oooo Shiny!', 'Capture 100 unique Shiny Pokémon.', new ShinyPokemonRequirement(100), 0.60);
        AchievementHandler.addAchievement('I Don\'t Know if I Can Handle the Next Batch of Shinies', 'Capture 151 unique Shiny Pokémon!', new ShinyPokemonRequirement(151), 1.00);
        AchievementHandler.addAchievement('Will Need Sunglasses', 'Capture 250 unique Shiny Pokémon!', new ShinyPokemonRequirement(250), 1.20);
        AchievementHandler.addAchievement('What Were the Odds Again?', 'Capture 500 unique Shiny Pokémon!', new ShinyPokemonRequirement(500), 1.30);
        AchievementHandler.addAchievement('Non-Shiny Is Now Becoming Rare', 'Capture 1,000 unique Shiny Pokémon!', new ShinyPokemonRequirement(1000), 1.50);
        AchievementHandler.addAchievement('First Team', 'Capture 100 Pokémon.', new CapturedRequirement(100), 0.05);
        AchievementHandler.addAchievement('Filling the PC', 'Capture 1,000 Pokémon.', new CapturedRequirement(1000), 0.10);
        AchievementHandler.addAchievement('Pokémon Army', 'Capture 10,000 Pokémon.', new CapturedRequirement(10000), 0.15);
        AchievementHandler.addAchievement('Pokémon Collector', 'Capture 100,000 Pokémon.', new CapturedRequirement(100000), 0.25);
        AchievementHandler.addAchievement('You Get a Pokémon, You Get a Pokémon, Everyone Gets a Pokémon!', 'Capture 1,000,000 Pokémon.', new CapturedRequirement(1000000), 0.50);
        AchievementHandler.addAchievement('A Long Road Ahead', 'Defeat 100 Pokémon.', new DefeatedRequirement(100), 0.05);
        AchievementHandler.addAchievement('Highway to Pallet Town', 'Defeat 1,000 Pokémon.', new DefeatedRequirement(1000), 0.10);
        AchievementHandler.addAchievement('Overleveled', 'Defeat 10,000 Pokémon.', new DefeatedRequirement(10000), 0.15);
        AchievementHandler.addAchievement('The Cake Is a Lie, but the Grind Is Real', 'Defeat 100,000 Pokémon.', new DefeatedRequirement(100000), 0.25);
        AchievementHandler.addAchievement('Are There Any Left?', 'Defeat 1,000,000 Pokémon.', new DefeatedRequirement(1000000), 0.50);
        AchievementHandler.addAchievement('Basic Trainer', 'Have 100 Attack.', new AttackRequirement(100), 0.05);
        AchievementHandler.addAchievement('Improving', 'Have 1,000 Attack.', new AttackRequirement(1000), 0.10);
        AchievementHandler.addAchievement('An Unrelenting Force', 'Have 5,000 Attack.', new AttackRequirement(5000), 0.15);
        AchievementHandler.addAchievement('FUS DOH RAH', 'Have 10,000 Attack.', new AttackRequirement(10000), 0.20);
        AchievementHandler.addAchievement('OK, I Have Enough Attack Already...', 'Have 25,000 Attack.', new AttackRequirement(25000), 0.25);
        AchievementHandler.addAchievement('Silver Attack Button!', 'Have 100,000 Attack.', new AttackRequirement(100000), 0.30);
        AchievementHandler.addAchievement('Pesky Roamers, I Need to One-Shot Routes for Them...', 'Have 250,000 Attack.', new AttackRequirement(250000), 0.35);
        AchievementHandler.addAchievement('You Pressed F12 by Any Chance?', 'Have 500,000 Attack.', new AttackRequirement(500000), 0.40);
        AchievementHandler.addAchievement('Left-Left-Right-Right-A-B-A-B - Hey, 1 Million!', 'Have 1,000,000 Attack.', new AttackRequirement(1000000), 0.40);
        AchievementHandler.addAchievement('Can I Beat Diantha Yet?', 'Have 5,000,000 Attack.', new AttackRequirement(5000000), 0.45);
        AchievementHandler.addAchievement('No One Can Challenge Me!', 'Have 20,000,000 Attack.', new AttackRequirement(20000000), 0.60);
        AchievementHandler.addAchievement('A Few Clicks In', 'Click Attack 10 times.', new ClickRequirement(10, 1), 0.02, GameConstants.ExtraAchievementCategories.global, () => !challenges.list.disableClickAttack.active());
        AchievementHandler.addAchievement('Clicking Pro', 'Click Attack 100 times.', new ClickRequirement(100, 1), 0.05, GameConstants.ExtraAchievementCategories.global, () => !challenges.list.disableClickAttack.active());
        AchievementHandler.addAchievement('Ultra Clicker', 'Click Attack 1,000 times.', new ClickRequirement(1000, 1), 0.10, GameConstants.ExtraAchievementCategories.global, () => !challenges.list.disableClickAttack.active());
        AchievementHandler.addAchievement('Need a New Mouse Yet?', 'Click Attack 10,000 times.', new ClickRequirement(10000, 1), 0.25, GameConstants.ExtraAchievementCategories.global, () => !challenges.list.disableClickAttack.active());
        AchievementHandler.addAchievement('Why Is My Voltorb Upside Down?', 'Purchase your first Poké Ball.', new PokeballRequirement(1, GameConstants.Pokeball.Pokeball), 0.01);
        AchievementHandler.addAchievement('Starting a Collection', 'Purchase 10 Poké Balls.', new PokeballRequirement(10, GameConstants.Pokeball.Pokeball), 0.03);
        AchievementHandler.addAchievement('Stocking Up', 'Purchase 100 Poké Balls.', new PokeballRequirement(100, GameConstants.Pokeball.Pokeball), 0.05);
        AchievementHandler.addAchievement('Fully Stocked', 'Purchase 1,000 Poké Balls.', new PokeballRequirement(1000, GameConstants.Pokeball.Pokeball), 0.10);
        AchievementHandler.addAchievement('Maybe Just a Few More for the Bunker', 'Purchase 10,000 Poké Balls.', new PokeballRequirement(10000, GameConstants.Pokeball.Pokeball), 0.15);
        AchievementHandler.addAchievement('Doomsday Bunker Stocked With Poké Balls!', 'Purchase 100,000 Poké Balls.', new PokeballRequirement(100000, GameConstants.Pokeball.Pokeball), 0.20);
        AchievementHandler.addAchievement('Ooooo a Blue One!', 'Purchase your first Great Ball.', new PokeballRequirement(1, GameConstants.Pokeball.Greatball), 0.03);
        AchievementHandler.addAchievement('I Got a Few Shiny Voltorb! Oh, Wait...', 'Obtain 10 Great Balls.', new PokeballRequirement(10, GameConstants.Pokeball.Greatball), 0.05);
        AchievementHandler.addAchievement('Now Shinies Won\'t Run Away So Easily!', 'Obtain 100 Great Balls.', new PokeballRequirement(100, GameConstants.Pokeball.Greatball), 0.10);
        AchievementHandler.addAchievement('Regular Poké Balls Just Aren\'t What They Used To Be', 'Obtain 1,000 Great Balls.', new PokeballRequirement(1000, GameConstants.Pokeball.Greatball), 0.15);
        AchievementHandler.addAchievement('A Great Investment', 'Obtain 10,000 Great Balls.', new PokeballRequirement(10000, GameConstants.Pokeball.Greatball), 0.20);
        AchievementHandler.addAchievement('The Greatest Collection of All Time', 'Obtain 100,000 Great Balls.', new PokeballRequirement(100000, GameConstants.Pokeball.Greatball), 0.30);
        AchievementHandler.addAchievement('They Made One Even Better?', 'Obtain your first Ultra Ball.', new PokeballRequirement(1, GameConstants.Pokeball.Ultraball), 0.05);
        AchievementHandler.addAchievement('Let\'s See How High the Catch Rate Becomes', 'Obtain 10 Ultra Balls.', new PokeballRequirement(10, GameConstants.Pokeball.Ultraball), 0.10);
        AchievementHandler.addAchievement('This Should Be Enough for Those Elusive Roamers...', 'Obtain 100 Ultra Balls.', new PokeballRequirement(100, GameConstants.Pokeball.Ultraball), 0.15);
        AchievementHandler.addAchievement('They Don\'t Work on Ultra Beasts? That\'s False Advertising!', 'Obtain 1,000 Ultra Balls.', new PokeballRequirement(1000, GameConstants.Pokeball.Ultraball), 0.20);
        AchievementHandler.addAchievement('I Don\'t Think I\'ll Ever Be Able To Go Back to the Commoner\'s Great Ball', 'Obtain 10,000 Ultra Balls.', new PokeballRequirement(10000, GameConstants.Pokeball.Ultraball), 0.30);
        AchievementHandler.addAchievement('Just Making Sure No Rare Pokémon Flees', 'Obtain 100,000 Ultra Balls.', new PokeballRequirement(100000, GameConstants.Pokeball.Ultraball), 0.40);
        AchievementHandler.addAchievement('The Ultimate Catching Device', 'Obtain your first Master Ball.', new PokeballRequirement(1, GameConstants.Pokeball.Masterball), 0.20);
        AchievementHandler.addAchievement('Legendaries Hate That Guy', 'Obtain 10 Master Balls.', new PokeballRequirement(10, GameConstants.Pokeball.Masterball), 0.30);
        AchievementHandler.addAchievement('No Pokémon in the World Can Run Away From Me Now!', 'Obtain 100 Master Balls.', new PokeballRequirement(100, GameConstants.Pokeball.Masterball), 0.40);
        AchievementHandler.addAchievement('Can You Do This for Me?', 'Complete your first quest.', new QuestRequirement(1), 0.05);
        AchievementHandler.addAchievement('One More Favor', 'Complete 10 quests.', new QuestRequirement(10), 0.15);
        AchievementHandler.addAchievement('YES MAN!', 'Complete 100 quests.', new QuestRequirement(100), 0.25);
        AchievementHandler.addAchievement('I Just Love Green Coins', 'Complete 1,000 quests.', new QuestRequirement(1000), 0.4);
        AchievementHandler.addAchievement('I Want To Be Ready for the Next Region', 'Complete 5,000 quests.', new QuestRequirement(5000), 0.6);
        AchievementHandler.addAchievement('Oh, Another Quest Slot!', 'Reach Quest Level 5.', new QuestLevelRequirement(5), 0.2);
        AchievementHandler.addAchievement('I Am Getting Good at Questing!', 'Reach Quest Level 10.', new QuestLevelRequirement(10), 0.3);
        AchievementHandler.addAchievement('What Do I Gain From Leveling This?', 'Reach Quest Level 20.', new QuestLevelRequirement(20), 0.5);
        AchievementHandler.addAchievement('Quest Master', 'Reach Quest Level 30.', new QuestLevelRequirement(30), 0.8);
        AchievementHandler.addAchievement('Is That How I Use This?', 'Level 1 Oak Item to the maximum level.', new MaxLevelOakItemRequirement(1), 0.05, GameConstants.ExtraAchievementCategories.global, () => !challenges.list.disableOakItems.active());
        AchievementHandler.addAchievement('I\'ve Got My Hands Full With All of These', 'Level 3 Oak Items to the maximum level.', new MaxLevelOakItemRequirement(3), 0.1, GameConstants.ExtraAchievementCategories.global, () => !challenges.list.disableOakItems.active());
        AchievementHandler.addAchievement('Professor Oak Is the Best!', 'Level 8 Oak Items to the maximum level.', new MaxLevelOakItemRequirement(8), 0.14, GameConstants.ExtraAchievementCategories.global, () => !challenges.list.disableOakItems.active());
        AchievementHandler.addAchievement('Almost Prepared for Anything', 'Level 11 Oak Items to the maximum level.', new MaxLevelOakItemRequirement(11), 0.18, GameConstants.ExtraAchievementCategories.global, () => !challenges.list.disableOakItems.active() && challenges.list.disableClickAttack.active());
        AchievementHandler.addAchievement('Prepared for Anything!', 'Level all 12 Oak Items to the maximum level.', new MaxLevelOakItemRequirement(12), 0.18, GameConstants.ExtraAchievementCategories.global, () => !challenges.list.disableOakItems.active() && !challenges.list.disableClickAttack.active());
        AchievementHandler.addAchievement('Pokémon Nursery', 'Hatch your first egg.', new HatchRequirement(1), 0.01);
        AchievementHandler.addAchievement('A Lot of Running', 'Hatch 10 eggs.', new HatchRequirement(10), 0.04);
        AchievementHandler.addAchievement('Marathon Runner', 'Hatch 100 eggs.', new HatchRequirement(100), 0.15);
        AchievementHandler.addAchievement('Egg Factory', 'Hatch 1,000 eggs.', new HatchRequirement(1000), 0.3);
        AchievementHandler.addAchievement('Offical Easter Bunny', 'Hatch 10,000 eggs.', new HatchRequirement(10000), 0.4);
        AchievementHandler.addAchievement('What Do You Do With All the Eggshells?', 'Hatch 100,000 eggs.', new HatchRequirement(100000), 0.5);
        AchievementHandler.addAchievement('Day Care Is My Home', 'Hatch 250,000 eggs.', new HatchRequirement(250000), 0.7);
        AchievementHandler.addAchievement('Some Nice Help for the Day Care', 'Unlock 5 Hatchery Helpers.', new HatcheryHelperRequirement(5, 0), 0.1);
        AchievementHandler.addAchievement('Why Do They Have To Work in Shifts?', 'Unlock all 11 Hatchery Helpers.', new HatcheryHelperRequirement(11, 0), 0.3);
        AchievementHandler.addAchievement('My Loyal Helpers', 'Get 3 Hatchery Helpers to 10% bonus efficiency.', new HatcheryHelperRequirement(3, 10), 0.4);
        AchievementHandler.addAchievement('Let\'s Try Some Other Helpers Too?', 'Get 5 Hatchery Helpers to 10% bonus efficiency.', new HatcheryHelperRequirement(5, 10), 0.5);
        AchievementHandler.addAchievement('Sam Just Wants To Help', 'Get 10 Hatchery Helpers to 10% bonus efficiency.', new HatcheryHelperRequirement(10, 10), 1);
        AchievementHandler.addAchievement('When Are You Going to Breed Yourself?', 'Get 10 Hatchery Helpers to 25% bonus efficiency.', new HatcheryHelperRequirement(10, 25), 1.3);
        AchievementHandler.addAchievement('My New Dirty Hobby', 'Unlock 3 Plots in the Farm.', new FarmPlotsUnlockedRequirement(3), 0.05);
        AchievementHandler.addAchievement('Allotment Gardener', 'Unlock 9 Plots in the Farm.', new FarmPlotsUnlockedRequirement(9), 0.15);
        AchievementHandler.addAchievement('Horticulture', 'Unlock all 25 Plots in the Farm.', new FarmPlotsUnlockedRequirement(25), 0.25);
        AchievementHandler.addAchievement('Who Planted These Here?', 'Unlock 8 Berries.', new BerriesUnlockedRequirement(8), 0.1);
        AchievementHandler.addAchievement('Farmer in Training', 'Unlock 18 Berries.', new BerriesUnlockedRequirement(18), 0.2);
        AchievementHandler.addAchievement('Farming Apprentice', 'Unlock 36 Berries.', new BerriesUnlockedRequirement(36), 0.3);
        AchievementHandler.addAchievement('Master Farmer', 'Unlock all 68 Berries.', new BerriesUnlockedRequirement(68), 0.4);
        AchievementHandler.addAchievement('Getting Some Help at the Farm', 'Unlock 3 Farm Hands.', new FarmHandRequirement(3), 0.2);
        AchievementHandler.addAchievement('Starting a Farming Empire', 'Unlock 6 Farm Hands.', new FarmHandRequirement(6), 0.3);
        AchievementHandler.addAchievement('Will I Ever Need All This Help?', 'Unlock all 9 Farm Hands.', new FarmHandRequirement(9), 0.4);
        AchievementHandler.addAchievement('Bling', 'Obtain 100 Diamonds.', new DiamondRequirement(100), 0.05);
        AchievementHandler.addAchievement('Bling x10!', 'Obtain 1,000 Diamonds.', new DiamondRequirement(1000), 0.15);
        AchievementHandler.addAchievement('If You Like It, Then You Should\'ve Put a Ring on It', 'Obtain 10,000 Diamonds.', new DiamondRequirement(10000), 0.25);
        AchievementHandler.addAchievement('Just Keep Trading!', 'Obtain 25,000 Diamonds.', new DiamondRequirement(25000), 0.4);
        AchievementHandler.addAchievement('Got All Upgrades Yet?', 'Obtain 100,000 Diamonds.', new DiamondRequirement(100000), 0.6);
        AchievementHandler.addAchievement('Is My Thumb Green Yet?', 'Dig up an item in the Underground for the first time.', new UndergroundItemsFoundRequirement(1), 0.01);
        AchievementHandler.addAchievement('My Shovel Is Starting To Crack', 'Dig up 10 items in the Underground.', new UndergroundItemsFoundRequirement(10), 0.02);
        AchievementHandler.addAchievement('Why Can\'t I Make a Diamond Shovel?', 'Dig up 100 items in the Underground.', new UndergroundItemsFoundRequirement(100), 0.08);
        AchievementHandler.addAchievement('This Is Definitely Not Minecraft', 'Dig up 1,000 items in the Underground.', new UndergroundItemsFoundRequirement(1000), 0.1);
        AchievementHandler.addAchievement('I Wonder How Much Is Down There...', 'Dig up 10,000 items in the Underground.', new UndergroundItemsFoundRequirement(10000), 0.4);
        AchievementHandler.addAchievement('The Earth Is Like Onions', 'Dig deeper into the Underground for the first time.', new UndergroundLayersMinedRequirement(1), 0.01);
        AchievementHandler.addAchievement('This Takes Foreverrrrrrr', 'Dig deeper into the Underground 10 times.', new UndergroundLayersMinedRequirement(10), 0.03);
        AchievementHandler.addAchievement('DigDug Ain\'t Got Nothin\' on Me', 'Dig deeper into the Underground 100 times.', new UndergroundLayersMinedRequirement(100), 0.1);
        AchievementHandler.addAchievement('Both My Thumbs Are Green! This Can\'t Be Healthy', 'Dig deeper into the Underground 1,000 times.', new UndergroundLayersMinedRequirement(1000), 0.3);
        AchievementHandler.addAchievement('Let\'s Try This Out', 'Obtain your first Protein.', new ProteinObtainRequirement(1), 0.01);
        AchievementHandler.addAchievement('Pre-Workout Supplements', 'Obtain 5 Proteins.', new ProteinObtainRequirement(5), 0.02);
        AchievementHandler.addAchievement('Well-Stocked Medicine Cabinet', 'Obtain 10 Proteins.', new ProteinObtainRequirement(10), 0.04);
        AchievementHandler.addAchievement('I Can\'t Hold All These Proteins!', 'Obtain 50 Proteins.', new ProteinObtainRequirement(50), 0.08);
        AchievementHandler.addAchievement('Essential Nutrients', 'Obtain 100 Proteins.', new ProteinObtainRequirement(100), 0.10);
        AchievementHandler.addAchievement('Putting the \'Bulk\' in Bulk-Buy', 'Obtain 500 Proteins.', new ProteinObtainRequirement(500), 0.15);
        AchievementHandler.addAchievement('Protein Stockpile', 'Obtain 1,000 Proteins.', new ProteinObtainRequirement(1000), 0.20);
        AchievementHandler.addAchievement('Fish, Eggs, Nuts, and Cheese', 'Obtain 5,000 Proteins.', new ProteinObtainRequirement(5000), 0.35);
        AchievementHandler.addAchievement('Does This Powder Come With Flavours?', 'Obtain 10,000 Proteins.', new ProteinObtainRequirement(10000), 0.50);
        AchievementHandler.addAchievement('A Literal Mountain of Muscle', 'Obtain 50,000 Proteins.', new ProteinObtainRequirement(50000), 0.70);
        AchievementHandler.addAchievement('Fighting Novice', 'Complete stage 100 in the Battle Frontier.', new BattleFrontierHighestStageRequirement(100), 0.05);
        AchievementHandler.addAchievement('Competent Fighter', 'Complete stage 250 in the Battle Frontier.', new BattleFrontierHighestStageRequirement(250), 0.15);
        AchievementHandler.addAchievement('Unstoppable Fighting Machine', 'Complete stage 500 in the Battle Frontier.', new BattleFrontierHighestStageRequirement(500), 0.25);
        AchievementHandler.addAchievement('Living Legend', 'Complete stage 1,000 in the Battle Frontier.', new BattleFrontierHighestStageRequirement(1000), 0.4);
        AchievementHandler.addAchievement('Where Do They Find These Trainers?', 'Complete stage 2,000 in the Battle Frontier.', new BattleFrontierHighestStageRequirement(2000), 0.5);
        AchievementHandler.addAchievement('Keep On Fighting', 'Complete 500 total stages in the Battle Frontier.', new BattleFrontierTotalStageRequirement(500), 0.05);
        AchievementHandler.addAchievement('Uphill Battle', 'Complete 1,000 total stages in the Battle Frontier.', new BattleFrontierTotalStageRequirement(1000), 0.15);
        AchievementHandler.addAchievement('Don\'t Stop Trying', 'Complete 2,500 total stages in the Battle Frontier.', new BattleFrontierTotalStageRequirement(2500), 0.25);
        AchievementHandler.addAchievement('Need More Battle Points', 'Complete 5,000 total stages in the Battle Frontier.', new BattleFrontierTotalStageRequirement(5000), 0.4);
        AchievementHandler.addAchievement('I Can Do It This Time!', 'Complete 25,000 total stages in the Battle Frontier.', new BattleFrontierTotalStageRequirement(25000), 0.5);
        AchievementHandler.addAchievement('King of the Hill', 'Complete 100,000 total stages in the Battle Frontier.', new BattleFrontierTotalStageRequirement(100000), 0.7);
        AchievementHandler.addAchievement('I Hope It\'s Not Dangerous', 'Infect 20 Pokémon with Pokérus.', new PokerusStatusRequirement(20, GameConstants.Pokerus.Infected), 0.1);
        AchievementHandler.addAchievement('Any Way To Get Rid of It?', 'Infect 50 Pokémon with Pokérus.', new PokerusStatusRequirement(50, GameConstants.Pokerus.Infected), 0.2);
        AchievementHandler.addAchievement('It Is the Flu Season', 'Infect 100 Pokémon with Pokérus.', new PokerusStatusRequirement(100, GameConstants.Pokerus.Infected), 0.3);
        AchievementHandler.addAchievement('Where Is Nurse Joy?', 'Infect 250 Pokémon with Pokérus.', new PokerusStatusRequirement(250, GameConstants.Pokerus.Infected), 0.4);
        AchievementHandler.addAchievement('Infecting the Whole World', 'Infect 1,000 Pokémon with Pokérus.', new PokerusStatusRequirement(1000, GameConstants.Pokerus.Infected), 0.5);
        AchievementHandler.addAchievement('Curing Them One at a Time', 'Have 10 Pokémon Resistant to Pokérus.', new PokerusStatusRequirement(10, GameConstants.Pokerus.Resistant), 0.3);
        AchievementHandler.addAchievement('Pokémon Center Regular', 'Have 50 Pokémon Resistant to Pokérus.', new PokerusStatusRequirement(50, GameConstants.Pokerus.Resistant), 0.5);
        AchievementHandler.addAchievement('Doctor in Training', 'Have 250 Pokémon Resistant to Pokérus.', new PokerusStatusRequirement(250, GameConstants.Pokerus.Resistant), 1);
        AchievementHandler.addAchievement('I Should Open My Own Pokémon Center', 'Have 500 Pokémon Resistant to Pokérus.', new PokerusStatusRequirement(500, GameConstants.Pokerus.Resistant), 1.5);
        /*
         * REGIONAL
         */
        const addGymAchievements = (gyms, category) => {
            gyms.forEach(gym => {
                var _a, _b;
                const gymTitle = gym.includes('Elite') || gym.includes('Champion') ? gym : `${gym} Gym`;
                if ((_b = (_a = GymList[gym]) === null || _a === void 0 ? void 0 : _a.flags) === null || _b === void 0 ? void 0 : _b.achievement) {
                    AchievementHandler.addAchievement(`${gym} Gym Regular`, `Clear ${gymTitle} 10 times.`, new ClearGymRequirement(GameConstants.ACHIEVEMENT_DEFEAT_GYM_VALUES[0], GameConstants.getGymIndex(gym)), 1, category);
                    AchievementHandler.addAchievement(`${gym} Gym Ruler`, `Clear ${gymTitle} 100 times.`, new ClearGymRequirement(GameConstants.ACHIEVEMENT_DEFEAT_GYM_VALUES[1], GameConstants.getGymIndex(gym)), 2, category);
                    AchievementHandler.addAchievement(`${gym} Gym Owner`, `Clear ${gymTitle} 1,000 times.`, new ClearGymRequirement(GameConstants.ACHIEVEMENT_DEFEAT_GYM_VALUES[2], GameConstants.getGymIndex(gym)), 3, category);
                }
            });
        };
        GameHelper.enumNumbers(GameConstants.Region).filter(r => r != GameConstants.Region.none && r <= GameConstants.MAX_AVAILABLE_REGION).forEach(region => {
            var _a;
            // Routes
            Routes.getRoutesByRegion(region).forEach(route => {
                let category = region;
                // Split Sevii islands into it's own achievement pool
                if (region == GameConstants.Region.kanto && (route.subRegion == GameConstants.KantoSubRegions.Sevii123 || route.subRegion == GameConstants.KantoSubRegions.Sevii4567)) {
                    category = GameConstants.ExtraAchievementCategories.sevii;
                }
                const routeName = Routes.getName(route.number, region, true);
                AchievementHandler.addAchievement(`${route.routeName} Traveler`, `Defeat 100 Pokémon on ${routeName}.`, new RouteKillRequirement(GameConstants.ACHIEVEMENT_DEFEAT_ROUTE_VALUES[0], region, route.number), 1, category);
                AchievementHandler.addAchievement(`${route.routeName} Explorer`, `Defeat 1,000 Pokémon on ${routeName}.`, new RouteKillRequirement(GameConstants.ACHIEVEMENT_DEFEAT_ROUTE_VALUES[1], region, route.number), 2, category);
                AchievementHandler.addAchievement(`${route.routeName} Conqueror`, `Defeat 10,000 Pokémon on ${routeName}.`, new RouteKillRequirement(GameConstants.ACHIEVEMENT_DEFEAT_ROUTE_VALUES[2], region, route.number), 3, category);
            });
            // Gyms
            if (GameConstants.RegionGyms[region]) {
                addGymAchievements(GameConstants.RegionGyms[region], region);
            }
            // Dungeons
            (_a = GameConstants.RegionDungeons[region]) === null || _a === void 0 ? void 0 : _a.forEach(dungeon => {
                let category = region;
                // Split Sevii islands into it's own achievement pool
                if (region == GameConstants.Region.kanto && (TownList[dungeon].subRegion == GameConstants.KantoSubRegions.Sevii123 || TownList[dungeon].subRegion == GameConstants.KantoSubRegions.Sevii4567)) {
                    category = GameConstants.ExtraAchievementCategories.sevii;
                }
                AchievementHandler.addAchievement(`${dungeon} Explorer`, `Clear ${dungeon} 10 times.`, new ClearDungeonRequirement(GameConstants.ACHIEVEMENT_DEFEAT_DUNGEON_VALUES[0], GameConstants.getDungeonIndex(dungeon)), 0.8, category);
                AchievementHandler.addAchievement(`${dungeon} Expert`, `Clear ${dungeon} 100 times.`, new ClearDungeonRequirement(GameConstants.ACHIEVEMENT_DEFEAT_DUNGEON_VALUES[1], GameConstants.getDungeonIndex(dungeon)), 1.2, category);
                AchievementHandler.addAchievement(`${dungeon} Hermit`, `Clear ${dungeon} 250 times.`, new ClearDungeonRequirement(GameConstants.ACHIEVEMENT_DEFEAT_DUNGEON_VALUES[2], GameConstants.getDungeonIndex(dungeon)), 1.6, category);
                AchievementHandler.addAchievement(`${dungeon} Dweller`, `Clear ${dungeon} 500 times.`, new ClearDungeonRequirement(GameConstants.ACHIEVEMENT_DEFEAT_DUNGEON_VALUES[3], GameConstants.getDungeonIndex(dungeon)), 2.4, category);
            });
            // Unique Pokémon
            const amt10 = Math.floor(PokemonHelper.calcUniquePokemonsByRegion(region) * .1);
            const amt50 = Math.floor(PokemonHelper.calcUniquePokemonsByRegion(region) * .5);
            const amtAll = Math.floor(PokemonHelper.calcUniquePokemonsByRegion(region));
            // Caught unique pokemon
            AchievementHandler.addAchievement(`${GameConstants.camelCaseToString(GameConstants.Region[region])} Trainer`, `Catch ${amt10} unique Pokémon native to the ${GameConstants.camelCaseToString(GameConstants.Region[region])} region.`, new CaughtUniquePokemonsByRegionRequirement(region, amt10), 2, region);
            AchievementHandler.addAchievement(`${GameConstants.camelCaseToString(GameConstants.Region[region])} Ace`, `Catch ${amt50} unique Pokémon native to the ${GameConstants.camelCaseToString(GameConstants.Region[region])} region.`, new CaughtUniquePokemonsByRegionRequirement(region, amt50), 4, region);
            AchievementHandler.addAchievement(`${GameConstants.camelCaseToString(GameConstants.Region[region])} Master`, `Complete the ${GameConstants.camelCaseToString(GameConstants.Region[region])} Pokédex!`, new CaughtUniquePokemonsByRegionRequirement(region, amtAll), 6, region);
            // Caught unique shiny pokemon
            AchievementHandler.addAchievement(`${GameConstants.camelCaseToString(GameConstants.Region[region])} Shiny Trainer`, `Catch ${amt10} unique Shiny Pokémon native to the ${GameConstants.camelCaseToString(GameConstants.Region[region])} region.`, new CaughtUniqueShinyPokemonsByRegionRequirement(region, amt10), 3, region);
            AchievementHandler.addAchievement(`${GameConstants.camelCaseToString(GameConstants.Region[region])} Shiny Ace`, `Catch ${amt50} unique Shiny Pokémon native to the ${GameConstants.camelCaseToString(GameConstants.Region[region])} region.`, new CaughtUniqueShinyPokemonsByRegionRequirement(region, amt50), 6, region);
            AchievementHandler.addAchievement(`${GameConstants.camelCaseToString(GameConstants.Region[region])} Shiny Master`, `Complete the ${GameConstants.camelCaseToString(GameConstants.Region[region])} Shiny Pokédex!`, new CaughtUniqueShinyPokemonsByRegionRequirement(region, amtAll), 9, region);
        });
        /*
         * MINIREGIONS
         */
        addGymAchievements(GameConstants.RegionGyms[GameConstants.Region.final], GameConstants.ExtraAchievementCategories.sevii);
        AchievementHandler.addAchievement('Sevii Trainer', 'Catch 15 unique Pokémon native to the Sevii Islands.', new SeviiCaughtRequirement(15, false), 3, GameConstants.ExtraAchievementCategories.sevii);
        AchievementHandler.addAchievement('Sevii Master', 'Catch 35 unique Pokémon native to the Sevii Islands.', new SeviiCaughtRequirement(35, false), 6, GameConstants.ExtraAchievementCategories.sevii);
        AchievementHandler.addAchievement('Sevii Shiny Trainer', 'Catch 15 unique Shiny Pokémon native to the Sevii Islands.', new SeviiCaughtRequirement(15, true), 5, GameConstants.ExtraAchievementCategories.sevii);
        AchievementHandler.addAchievement('Sevii Shiny Master', 'Catch 35 unique Shiny Pokémon native to the Sevii Islands.', new SeviiCaughtRequirement(35, true), 9, GameConstants.ExtraAchievementCategories.sevii);
        // load filters, filter the list & calculate number of tabs
        this.load();
        this.filterAchievementList(true);
        this.calculateNumberOfTabs();
        // subscribe to filters so that when the player changes a filter it automatically refilters the list
        Object.keys(this.filter).forEach(e => this.filter[e].subscribe(() => this.filterAchievementList()));
        multiplier.addBonus('exp', () => 1 + this.achievementBonus());
        multiplier.addBonus('money', () => 1 + this.achievementBonus());
        multiplier.addBonus('dungeonToken', () => 1 + this.achievementBonus());
    }
    static load() {
        AchievementHandler.calculateMaxBonus();
        this.achievementListFiltered(this.achievementList.filter(a => a.category.isUnlocked() && a.achievable()));
        AchievementHandler.navigateIndex(Settings.getSetting('achievementsPage').value);
        AchievementHandler.filter.status(Settings.getSetting('achievementsStatus').value);
        AchievementHandler.filter.type(Settings.getSetting('achievementsType').value);
        AchievementHandler.filter.category(Settings.getSetting('achievementsCategory').value);
        // Cycle the pages to make sure they are upto date
        AchievementHandler.navigateRight();
        setTimeout(() => {
            AchievementHandler.navigateLeft();
            AchievementHandler.filterAchievementList();
        }, 1);
    }
}
AchievementHandler.achievementList = [];
AchievementHandler.navigateIndex = ko.observable(0);
AchievementHandler.achievementListFiltered = ko.observableArray([]);
AchievementHandler.numberOfTabs = ko.observable(0);
AchievementHandler.filter = {
    status: ko.observable(-2).extend({ numeric: 0 }),
    type: ko.observable(-2).extend({ numeric: 0 }),
    category: ko.observable('all'),
};
class AchievementTracker {
    constructor() {
        this.name = 'AchievementTracker';
        this.saveKey = 'achievementTracker';
        this.defaults = {
            'trackedAchievement': null,
        };
        this.trackedAchievement = ko.observable(this.defaults.trackedAchievement);
    }
    initialize() {
    }
    canAccess() {
        return App.game.keyItems.hasKeyItem(KeyItemType.Holo_caster);
    }
    update(delta) {
    }
    fromJSON(json) {
        if (json == null) {
            return;
        }
        if (!!json.trackedAchievementName) {
            const achievement = AchievementHandler.findByName(json.trackedAchievementName);
            if (!!achievement) {
                this.trackedAchievement(achievement);
            }
        }
    }
    toJSON() {
        return {
            trackedAchievementName: this.hasTrackedAchievement() ? this.trackedAchievement().name : null,
        };
    }
    trackAchievement(achievement) {
        this.trackedAchievement(achievement);
    }
    hasTrackedAchievement() {
        return this.trackedAchievement() !== null;
    }
}
///<reference path="../../declarations/requirements/AchievementRequirement.d.ts"/>
class CaughtUniquePokemonsByRegionRequirement extends AchievementRequirement {
    constructor(region, amount = 0, option = GameConstants.AchievementOption.more) {
        super(amount || PokemonHelper.calcUniquePokemonsByRegion(region), option, GameConstants.AchievementType['Caught Pokemon']);
        this.region = region;
    }
    getProgress() {
        return Math.min(new Set(App.game.party.caughtPokemon.filter(p => p.id > 0 && PokemonHelper.calcNativeRegion(p.name) === this.region).map(p => Math.floor(p.id))).size, this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} unique Pokémon need to be caught.`;
    }
}
///<reference path="../../declarations/requirements/AchievementRequirement.d.ts"/>
class CaughtUniqueShinyPokemonsByRegionRequirement extends AchievementRequirement {
    constructor(region, amount = 0, option = GameConstants.AchievementOption.more) {
        super(amount || PokemonHelper.calcUniquePokemonsByRegion(region), option, GameConstants.AchievementType['Shiny Pokemon']);
        this.region = region;
    }
    getProgress() {
        return Math.min(new Set(App.game.party.caughtPokemon.filter(p => p.id > 0 && p.shiny && PokemonHelper.calcNativeRegion(p.name) === this.region).map(p => Math.floor(p.id))).size, this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} unique Pokémon need to be caught.`;
    }
}
///<reference path="../../declarations/requirements/Requirement.d.ts"/>
class ItemOwnedRequirement extends Requirement {
    constructor(itemName, value = 1, option = GameConstants.AchievementOption.more) {
        super(value, option);
        this.itemName = itemName;
    }
    getProgress() {
        return Math.min(player.itemList[this.itemName](), this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} ${ItemList[this.itemName].displayName} needs to be purchased first.`;
    }
}
///<reference path="../../declarations/requirements/Requirement.d.ts"/>
class ObtainedPokemonRequirement extends Requirement {
    constructor(pokemon, uncaught = false) {
        const option = uncaught ? GameConstants.AchievementOption.less : GameConstants.AchievementOption.more;
        super(1, option);
        this.pokemonID = pokemon.id;
    }
    getProgress() {
        var _a, _b;
        return Math.min((_b = (_a = App.game) === null || _a === void 0 ? void 0 : _a.statistics) === null || _b === void 0 ? void 0 : _b.pokemonCaptured[this.pokemonID](), this.requiredValue);
    }
    hint() {
        return this.option == GameConstants.AchievementOption.more ?
            `${pokemonMap[this.pokemonID].name} needs to be caught.` :
            `${pokemonMap[this.pokemonID].name} cannot be caught yet.`;
    }
}
///<reference path="../../declarations/requirements/Requirement.d.ts"/>
class QuestLineRequirement extends Requirement {
    constructor(questLineName, option = GameConstants.AchievementOption.more) {
        super(1, option);
        this.questLineName = questLineName;
    }
    getProgress() {
        return +(App.game.quests.getQuestLine(this.questLineName).state() == QuestLineState.ended);
    }
    hint() {
        return `The ${this.questLineName} quest line needs to be completed first.`;
    }
}
///<reference path="../../declarations/requirements/Requirement.d.ts"/>
class StoneUnlockedRequirement extends Requirement {
    constructor(stoneType, option = GameConstants.AchievementOption.more) {
        var _a;
        const stone = ItemList[GameConstants.StoneType[stoneType]];
        const requiredRegion = (_a = stone === null || stone === void 0 ? void 0 : stone.unlockedRegion) !== null && _a !== void 0 ? _a : GameConstants.Region.none;
        super(requiredRegion, option);
        this.stone = stone;
    }
    getProgress() {
        return Math.min(player.highestRegion(), this.requiredValue);
    }
    isCompleted() {
        if (!this.stone) {
            return true;
        }
        return this.stone.unlockedRegion <= player.highestRegion();
    }
    hint() {
        return `You need to reach the ${GameConstants.Region[this.requiredValue]} region.`;
    }
}
/// <reference path="../../declarations/enums/Badges.d.ts"/>
class BadgeCaseController {
    static getDisplayableBadges() {
        const highestRegion = player.highestRegion();
        const result = {};
        GameConstants.RegionGyms.forEach((region, i) => {
            // Optional leagues
            if (i >= GameConstants.Region.final) {
                if (!region.some(gym => App.game.badgeCase.hasBadge(GymList[gym].badgeReward))) {
                    return;
                }
                result[this.optionalLeagueNames[i - GameConstants.Region.final]] = this.regionToBadges(region);
                return;
            }
            // Normal leagues
            if (i > highestRegion) {
                return;
            }
            result[GameConstants.Region[i].charAt(0).toUpperCase() + GameConstants.Region[i].slice(1)] = this.regionToBadges(region);
        });
        return result;
    }
    static regionToBadges(region) {
        return region
            .map(gym => BadgeEnums[GymList[gym].badgeReward])
            .filter(b => !b.startsWith('Elite') && b != 'None');
    }
}
BadgeCaseController.optionalLeagueNames = ['Orange League'];
class BattleFrontier {
    constructor() {
        this.name = 'BattleFrontier';
        this.saveKey = 'battleFrontier';
        this.milestones = BattleFrontierMilestones;
        this.defaults = {};
    }
    initialize() { }
    update(delta) { }
    canAccess() {
        const deoxysQuest = App.game.quests.getQuestLine('Mystery of Deoxys');
        return deoxysQuest.state() == QuestLineState.ended || deoxysQuest.curQuest() >= 3;
    }
    enter() {
        if (!App.game.battleFrontier.canAccess()) {
            return Notifier.notify({
                title: 'Battle Frontier',
                message: 'You must progress further in the "Mystery of Deoxys" quest before you can participate.',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
        BattleFrontierBattle.enemyPokemon(null);
        App.game.gameState = GameConstants.GameState.battleFrontier;
    }
    start(useCheckpoint) {
        BattleFrontierRunner.start(useCheckpoint);
    }
    leave() {
        // Put the user back in the town
        App.game.gameState = GameConstants.GameState.town;
    }
    toJSON() {
        return {
            milestones: this.milestones.milestoneRewards.filter(m => m.obtained()).map(m => [m.stage, m.description]),
            checkpoint: BattleFrontierRunner.checkpoint(),
        };
    }
    fromJSON(json) {
        var _a;
        if (json == null) {
            return;
        }
        (_a = json.milestones) === null || _a === void 0 ? void 0 : _a.forEach(([stage, description]) => {
            var _a;
            (_a = this.milestones.milestoneRewards.find(m => m.stage == stage && m.description == description)) === null || _a === void 0 ? void 0 : _a.obtained(true);
        });
        BattleFrontierRunner.checkpoint(json.checkpoint);
    }
}
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../Battle.ts" />
class BattleFrontierBattle extends Battle {
    // Override pokemon attack method so we can ignore the region multiplier
    static pokemonAttack() {
        var _a;
        // attack twice as fast if we have defeated this stage
        this.alternateAttack = !this.alternateAttack;
        if (this.alternateAttack && BattleFrontierRunner.stage() > App.game.statistics.battleFrontierHighestStageCompleted()) {
            return;
        }
        // Limit pokemon attack speed, Only allow 1 attack per 450ms
        const now = Date.now();
        if (this.lastPokemonAttack > now - 450) {
            return;
        }
        this.lastPokemonAttack = now;
        if (!((_a = this.enemyPokemon()) === null || _a === void 0 ? void 0 : _a.isAlive())) {
            return;
        }
        this.enemyPokemon().damage(App.game.party.calculatePokemonAttack(this.enemyPokemon().type1, this.enemyPokemon().type2, true));
        if (!this.enemyPokemon().isAlive()) {
            this.defeatPokemon();
        }
    }
    /**
     * Award the player with exp, gems and go to the next pokemon
     */
    static defeatPokemon() {
        // This needs to stay as none so the stage number isn't adjusted
        App.game.breeding.progressEggsBattle(BattleFrontierRunner.stage(), GameConstants.Region.none);
        this.enemyPokemon().defeat(true);
        // Next pokemon
        GameHelper.incrementObservable(this.pokemonIndex);
        if (this.pokemonIndex() >= 3) {
            // Move on to next stage, reset timer
            BattleFrontierRunner.nextStage();
            this.pokemonIndex(0);
        }
        // If player still challenging Battle Frontier, keep generating Pokemon
        if (BattleFrontierRunner.started()) {
            // Create the next Pokemon to fight
            this.generateNewEnemy();
        }
        else {
            this.enemyPokemon(null);
        }
    }
    static generateNewEnemy() {
        const enemy = pokemonMap.randomRegion(player.highestRegion());
        // This needs to stay as none so the stage number isn't adjusted
        const health = PokemonFactory.routeHealth(BattleFrontierRunner.stage() + 10, GameConstants.Region.none);
        const level = Math.min(100, BattleFrontierRunner.stage());
        // Don't award money per pokemon defeated, award money at the end
        const money = 0;
        const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        // Give 1 extra gem per pokemon defeated after every 80 stages
        const gems = Math.ceil(BattleFrontierRunner.stage() / 80);
        const gender = PokemonFactory.generateGender(enemy.gender.femaleRatio, enemy.gender.type);
        const enemyPokemon = new BattlePokemon(enemy.name, enemy.id, enemy.type[0], enemy.type[1], health, level, 0, enemy.exp, new Amount(money, GameConstants.Currency.money), shiny, gems, gender);
        this.enemyPokemon(enemyPokemon);
    }
}
BattleFrontierBattle.alternateAttack = false;
BattleFrontierBattle.pokemonIndex = ko.observable(0);
BattleFrontierBattle.totalPokemons = ko.observable(3);
// Looks like we don't need this, unless we want to put a random trainer name or similar
BattleFrontierBattle.trainer = ko.observable(0);
BattleFrontierBattle.counter = 0;
class BattleFrontierMilestone {
    constructor(stage, rewardFunction, requirement, _image, _description) {
        this.stage = stage;
        this.rewardFunction = rewardFunction;
        this.requirement = requirement;
        this._image = _image;
        this._description = _description;
        this.obtained = ko.observable(false);
    }
    isUnlocked() {
        return this.requirement ? this.requirement.isCompleted() : true;
    }
    gain() {
        if (!this.obtained()) {
            this.rewardFunction();
            this.obtained(true);
        }
    }
    get image() {
        return this._image;
    }
    get description() {
        return this._description;
    }
}
class BattleFrontierMilestoneItem extends BattleFrontierMilestone {
    constructor(stage, itemName, amount, requirement) {
        super(stage, () => {
            if (ItemList[itemName]) {
                ItemList[itemName].gain(amount);
            }
        });
        this.requirement = requirement;
        this.itemName = itemName;
        this.amount = amount;
    }
    get image() {
        return ItemList[this.itemName].image;
    }
    get description() {
        return `${this.amount.toLocaleString('en-US')} x ${ItemList[this.itemName].displayName}`;
    }
}
class BattleFrontierMilestonePokemon extends BattleFrontierMilestone {
    constructor(stage, pokemonName, requirement, image = `assets/images/items/pokemonItem/${pokemonName}.png`) {
        super(stage, () => {
            App.game.party.gainPokemonById(pokemonMap[pokemonName].id, PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_BATTLEFRONTIER));
        }, requirement, image, pokemonName);
    }
}
///<reference path="BattleFrontierMilestone.ts"/>
///<reference path="BattleFrontierMilestoneItem.ts"/>
class BattleFrontierMilestones {
    static addMilestone(milestone) {
        this.milestoneRewards.push(milestone);
        // Sort the milestones by lowest to highest stage incase they are added out of order
        this.milestoneRewards.sort((a, b) => a.stage - b.stage);
    }
    static nextMileStone() {
        // Get next reward that is unlocked, not obtained, and earned past the latest stage beaten in the active run.
        return this.milestoneRewards.find(r => r.isUnlocked() && !r.obtained() && (r.stage > (BattleFrontierRunner.checkpoint() - 1)));
    }
    static availableMilestones() {
        return BattleFrontierMilestones.milestoneRewards.filter(r => r.isUnlocked() && !r.obtained() && r.stage > (BattleFrontierRunner.checkpoint() - 1));
    }
    static nextMileStoneStage() {
        // Return the stage number the next reward is unlocked at
        const reward = this.nextMileStone();
        if (reward) {
            return reward.stage;
        }
        else {
            return Infinity;
        }
    }
    static nextMileStoneRewardDescription() {
        // Return the description of the next reward
        const reward = this.nextMileStone();
        if (reward) {
            return reward.description;
        }
        else {
            return 'Nothing';
        }
    }
    static gainReward(defeatedStage) {
        const reward = this.nextMileStone();
        if (reward && reward.stage == defeatedStage) {
            Notifier.notify({
                title: 'Battle Frontier',
                message: `You've successfully defeated stage ${defeatedStage.toLocaleString('en-US')} and earned:\n<span><img src="${reward.image}" height="24px"/> ${reward.description}</span>!`,
                type: NotificationConstants.NotificationOption.info,
                setting: NotificationConstants.NotificationSetting.General.battle_frontier,
                timeout: 1e4,
            });
            App.game.logbook.newLog(LogBookTypes.FRONTIER, `Received ${reward.description} for defeating stage ${defeatedStage.toLocaleString('en-US')} of the Battle Frontier!`);
            reward.gain();
        }
    }
}
BattleFrontierMilestones.milestoneRewards = [];
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(5, 'Pokeball', 25));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(10, 'Pokeball', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(20, 'Greatball', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(30, 'Ultraball', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(35, 'xClick', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(40, 'xAttack', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(50, 'SmallRestore', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestonePokemon(100, 'Deoxys'));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(110, 'Water_stone', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(120, 'Leaf_stone', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(130, 'Thunder_stone', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(140, 'Fire_stone', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(150, 'MediumRestore', 200));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestonePokemon(151, 'Deoxys (Attack)'));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(160, 'Lucky_egg', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(170, 'Lucky_incense', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(180, 'Dowsing_machine', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(190, 'Mystery_egg', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(200, 'LargeRestore', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(210, 'Water_stone', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(220, 'Leaf_stone', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(230, 'Thunder_stone', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(240, 'Moon_stone', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(250, 'Ultraball', 6400));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestonePokemon(251, 'Deoxys (Defense)'));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(300, 'Linking_cord', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(310, 'Dragon_scale', 20));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(320, 'Sun_stone', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(330, 'Kings_rock', 20));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(340, 'Metal_coat', 20));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(350, 'Upgrade', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestonePokemon(386, 'Deoxys (Speed)'));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(400, 'Soothe_bell', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(410, 'Deepsea_tooth', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(420, 'Shiny_stone', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(430, 'Deepsea_scale', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(440, 'Dusk_stone', 40, new MaxRegionRequirement(GameConstants.Region.sinnoh)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(450, 'Prism_scale', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(460, 'Dawn_stone', 40, new MaxRegionRequirement(GameConstants.Region.sinnoh)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(470, 'Razor_claw', 10, new MaxRegionRequirement(GameConstants.Region.sinnoh)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(480, 'Razor_fang', 10, new MaxRegionRequirement(GameConstants.Region.sinnoh)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(490, 'Dubious_disc', 10, new MaxRegionRequirement(GameConstants.Region.sinnoh)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(500, 'Ultraball', 10000));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(525, 'Magmarizer', 15, new MaxRegionRequirement(GameConstants.Region.sinnoh)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(550, 'Electirizer', 15, new MaxRegionRequirement(GameConstants.Region.sinnoh)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(575, 'Protector', 15, new MaxRegionRequirement(GameConstants.Region.sinnoh)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(600, 'Reaper_cloth', 15, new MaxRegionRequirement(GameConstants.Region.sinnoh)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(660, 'Sachet', 15, new MaxRegionRequirement(GameConstants.Region.kalos)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(670, 'Whipped_dream', 15, new MaxRegionRequirement(GameConstants.Region.kalos)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(700, 'Ice_stone', 40, new MaxRegionRequirement(GameConstants.Region.alola)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(1000, 'Masterball', 10));
/// <reference path="../../declarations/GameHelper.d.ts" />
class BattleFrontierRunner {
    constructor() { }
    static tick() {
        if (!this.started()) {
            return;
        }
        if (this.timeLeft() < 0) {
            this.battleLost();
        }
        this.timeLeft(this.timeLeft() - GameConstants.GYM_TICK);
        this.timeLeftPercentage(Math.floor(this.timeLeft() / GameConstants.GYM_TIME * 100));
    }
    static start(useCheckpoint) {
        this.started(true);
        this.stage(useCheckpoint ? this.checkpoint() : 1);
        this.highest(App.game.statistics.battleFrontierHighestStageCompleted());
        BattleFrontierBattle.pokemonIndex(0);
        BattleFrontierBattle.generateNewEnemy();
        BattleFrontierRunner.timeLeft(GameConstants.GYM_TIME);
        BattleFrontierRunner.timeLeftPercentage(100);
        App.game.gameState = GameConstants.GameState.battleFrontier;
    }
    static nextStage() {
        // Gain any rewards we should have earned for defeating this stage
        BattleFrontierMilestones.gainReward(this.stage());
        if (App.game.statistics.battleFrontierHighestStageCompleted() < this.stage()) {
            // Update our highest stage
            App.game.statistics.battleFrontierHighestStageCompleted(this.stage());
        }
        // Move on to the next stage
        GameHelper.incrementObservable(this.stage);
        GameHelper.incrementObservable(App.game.statistics.battleFrontierTotalStagesCompleted);
        BattleFrontierRunner.timeLeft(GameConstants.GYM_TIME);
        BattleFrontierRunner.timeLeftPercentage(100);
        this.checkpoint(this.stage());
    }
    static end() {
        BattleFrontierBattle.enemyPokemon(null);
        this.stage(1);
        this.started(false);
    }
    static battleLost() {
        // Current stage - 1 as the player didn't beat the current stage
        const stageBeaten = this.stage() - 1;
        // Give Battle Points and Money based on how far the user got
        const battleMultiplier = Math.max(stageBeaten / 100, 1);
        let battlePointsEarned = Math.round(stageBeaten * battleMultiplier);
        let moneyEarned = stageBeaten * 100 * battleMultiplier;
        // Award battle points and dollars and retrieve their computed values
        battlePointsEarned = App.game.wallet.gainBattlePoints(battlePointsEarned).amount;
        moneyEarned = App.game.wallet.gainMoney(moneyEarned, true).amount;
        Notifier.notify({
            title: 'Battle Frontier',
            message: `You managed to beat stage ${stageBeaten.toLocaleString('en-US')}.\nYou received <img src="./assets/images/currency/battlePoint.svg" height="24px"/> ${battlePointsEarned.toLocaleString('en-US')}.\nYou received <img src="./assets/images/currency/money.svg" height="24px"/> ${moneyEarned.toLocaleString('en-US')}.`,
            strippedMessage: `You managed to beat stage ${stageBeaten.toLocaleString('en-US')}.\nYou received ${battlePointsEarned.toLocaleString('en-US')} Battle Points.\nYou received ${moneyEarned.toLocaleString('en-US')} Pokédollars.`,
            type: NotificationConstants.NotificationOption.success,
            setting: NotificationConstants.NotificationSetting.General.battle_frontier,
            sound: NotificationConstants.NotificationSound.General.battle_frontier,
            timeout: 30 * GameConstants.MINUTE,
        });
        App.game.logbook.newLog(LogBookTypes.FRONTIER, `Cleared stage ${stageBeaten.toLocaleString('en-US')} of the Battle Frontier and received ${battlePointsEarned.toLocaleString('en-US')} Battle Points.`);
        this.checkpoint(1);
        this.end();
    }
    static battleQuit() {
        Notifier.confirm({
            title: 'Battle Frontier',
            message: 'Are you sure you want to leave?\n\nYou can always return later and start off where you left.',
            type: NotificationConstants.NotificationOption.danger,
            confirm: 'Leave',
        }).then(confirmed => {
            if (confirmed) {
                // Don't give any points, user quit the challenge
                Notifier.notify({
                    title: 'Battle Frontier',
                    message: `Checkpoint set for stage ${this.stage()}.`,
                    type: NotificationConstants.NotificationOption.info,
                    timeout: 1 * GameConstants.MINUTE,
                });
                this.end();
            }
        });
    }
}
BattleFrontierRunner.timeLeft = ko.observable(GameConstants.GYM_TIME);
BattleFrontierRunner.timeLeftPercentage = ko.observable(100);
BattleFrontierRunner.stage = ko.observable(1); // Start at stage 1
BattleFrontierRunner.checkpoint = ko.observable(1); // Start at stage 1
BattleFrontierRunner.highest = ko.observable(1);
BattleFrontierRunner.counter = 0;
BattleFrontierRunner.started = ko.observable(false);
BattleFrontierRunner.timeLeftSeconds = ko.pureComputed(() => {
    return (Math.ceil(BattleFrontierRunner.timeLeft() / 100) / 10).toFixed(1);
});
BattleFrontierRunner.pokemonLeftImages = ko.pureComputed(() => {
    let str = '';
    for (let i = 0; i < 3; i++) {
        str += `<img class="pokeball-smallest" src="assets/images/pokeball/Pokeball.svg"${BattleFrontierBattle.pokemonIndex() > i ? ' style="filter: saturate(0);"' : ''}>`;
    }
    return str;
});
BattleFrontierRunner.hasCheckpoint = ko.computed(() => {
    return BattleFrontierRunner.checkpoint() > 1;
});
/// <reference path="../../declarations/settings/BreedingFilters.d.ts" />
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Feature.d.ts" />
/// <reference path="../../declarations/breeding/EggType.d.ts" />
var Currency = GameConstants.Currency;
class Breeding {
    constructor(multiplier) {
        this.multiplier = multiplier;
        this.name = 'Breeding';
        this.saveKey = 'breeding';
        this.defaults = {
            eggList: [ko.observable(new Egg()), ko.observable(new Egg()), ko.observable(new Egg()), ko.observable(new Egg())],
            eggSlots: 1,
            queueList: [],
            queueSlots: 0,
        };
        this.hatcheryHelpers = new HatcheryHelpers(this);
        this.hatchList = {};
        this.usableQueueSlots = ko.pureComputed(() => {
            const queueSizeSetting = BreedingController.queueSizeLimit();
            return queueSizeSetting > -1 ? queueSizeSetting : this.queueSlots();
        });
        this._eggList = this.defaults.eggList;
        this._eggSlots = ko.observable(this.defaults.eggSlots);
        this._queueList = ko.observableArray(this.defaults.queueList);
        this.queueSlots = ko.observable(this.defaults.queueSlots);
        this._eggList.forEach((egg) => {
            egg.extend({ deferred: true });
        });
        BreedingFilters.category.value(Settings.getSetting('breedingCategoryFilter').value);
        BreedingFilters.region.value(Settings.getSetting('breedingRegionFilter').value);
        BreedingFilters.type1.value(Settings.getSetting('breedingTypeFilter1').value);
        BreedingFilters.type2.value(Settings.getSetting('breedingTypeFilter2').value);
        BreedingFilters.shinyStatus.value(Settings.getSetting('breedingShinyFilter').value);
        BreedingFilters.pokerus.value(Settings.getSetting('breedingPokerusFilter').value);
        BreedingController.displayValue(Settings.getSetting('breedingDisplayFilter').value);
        BreedingController.regionalAttackDebuff(+Settings.getSetting('breedingRegionalAttackDebuffSetting').value);
        BreedingController.queueSizeLimit(+Settings.getSetting('breedingQueueSizeSetting').value);
    }
    initialize() {
        this.hatchList[EggType.Fire] = [
            ['Charmander', 'Vulpix', 'Growlithe', 'Ponyta'],
            ['Cyndaquil', 'Slugma', 'Houndour', 'Magby'],
            ['Torchic', 'Numel'],
            ['Chimchar'],
            ['Tepig', 'Pansear', 'Darumaka'],
            ['Fennekin', 'Litleo'],
            ['Litten', 'Salandit'],
            ['Scorbunny', 'Sizzlipede'],
        ];
        this.hatchList[EggType.Water] = [
            ['Squirtle', 'Lapras', 'Staryu', 'Psyduck'],
            ['Totodile', 'Wooper', 'Marill', 'Qwilfish'],
            ['Mudkip', 'Feebas', 'Clamperl'],
            ['Piplup', 'Finneon', 'Buizel'],
            ['Oshawott', 'Panpour', 'Tympole'],
            ['Froakie', 'Clauncher', 'Skrelp'],
            ['Popplio', 'Wimpod', 'Mareanie'],
            ['Sobble', 'Chewtle', 'Arrokuda'],
        ];
        this.hatchList[EggType.Grass] = [
            ['Bulbasaur', 'Oddish', 'Tangela', 'Bellsprout'],
            ['Chikorita', 'Hoppip', 'Sunkern'],
            ['Treecko', 'Tropius', 'Roselia'],
            ['Turtwig', 'Carnivine', 'Budew'],
            ['Snivy', 'Pansage', 'Maractus'],
            ['Chespin', 'Skiddo', 'Phantump'],
            ['Rowlet', 'Morelull', 'Fomantis'],
            ['Grookey', 'Gossifleur', 'Applin'],
        ];
        this.hatchList[EggType.Fighting] = [
            ['Hitmonlee', 'Hitmonchan', 'Machop', 'Mankey'],
            ['Tyrogue', 'Heracross'],
            ['Makuhita', 'Meditite'],
            ['Riolu', 'Croagunk'],
            ['Throh', 'Sawk', 'Scraggy'],
            ['Pancham', 'Hawlucha'],
            ['Crabrawler', 'Stufful'],
            ['Falinks', 'Clobbopus', 'Galarian Farfetch\'d'],
        ];
        this.hatchList[EggType.Electric] = [
            ['Magnemite', 'Pikachu', 'Voltorb', 'Electabuzz'],
            ['Chinchou', 'Mareep', 'Elekid'],
            ['Plusle', 'Minun', 'Electrike'],
            ['Pachirisu', 'Shinx'],
            ['Blitzle', 'Stunfisk', 'Joltik'],
            ['Helioptile', 'Dedenne'],
            ['Togedemaru'],
            ['Toxel', 'Pincurchin', 'Morpeko'],
        ];
        this.hatchList[EggType.Dragon] = [
            ['Dratini', 'Dragonair', 'Dragonite'],
            [],
            ['Bagon', 'Shelgon', 'Salamence'],
            ['Gible', 'Gabite', 'Garchomp'],
            ['Deino', 'Zweilous', 'Hydreigon'],
            ['Goomy', 'Sliggoo', 'Goodra'],
            ['Turtonator', 'Drampa', 'Jangmo-o', 'Hakamo-o', 'Kommo-o'],
            ['Dreepy', 'Drakloak', 'Dragapult', 'Duraludon'],
        ];
        BreedingController.initialize();
    }
    update(delta) {
    }
    canAccess() {
        return App.game.keyItems.hasKeyItem(KeyItemType.Mystery_egg);
    }
    fromJSON(json) {
        var _a, _b;
        if (json == null) {
            return;
        }
        this.eggSlots = (_a = json.eggSlots) !== null && _a !== void 0 ? _a : this.defaults.eggSlots;
        this._eggList = this.defaults.eggList;
        if (json.eggList !== null) {
            const saveEggList = json.eggList;
            for (let i = 0; i < this._eggList.length; i++) {
                if (saveEggList[i] != null) {
                    const egg = new Egg(null, null, null);
                    egg.fromJSON(saveEggList[i]);
                    this._eggList[i](egg);
                }
            }
        }
        this.queueSlots((_b = json.queueSlots) !== null && _b !== void 0 ? _b : this.defaults.queueSlots);
        this._queueList(json.queueList ? json.queueList : this.defaults.queueList);
        this.hatcheryHelpers.fromJSON(json.hatcheryHelpers || []);
    }
    toJSON() {
        return {
            eggList: this.eggList.map(egg => egg() === null ? new Egg() : egg().toJSON()),
            eggSlots: this.eggSlots,
            queueList: this._queueList(),
            queueSlots: this.queueSlots(),
            hatcheryHelpers: this.hatcheryHelpers.toJSON(),
        };
    }
    canBreedPokemon() {
        return App.game.party.hasMaxLevelPokemon() && (this.hasFreeEggSlot() || this.hasFreeQueueSlot());
    }
    hasFreeEggSlot(isHelper = false) {
        let counter = 0;
        for (let i = 0; i < this._eggList.length; i++) {
            if (!this._eggList[i]().isNone() || (!isHelper && this.hatcheryHelpers.hired()[i])) {
                counter++;
            }
        }
        return counter < this._eggSlots();
    }
    hasFreeQueueSlot() {
        const slots = this.usableQueueSlots();
        return slots && this._queueList().length < slots;
    }
    gainEgg(e, isHelper = false) {
        if (e.isNone()) {
            return false;
        }
        for (let i = 0; i < this._eggList.length; i++) {
            if (this._eggList[i]().isNone() && (isHelper || !this.hatcheryHelpers.hired()[i])) {
                this._eggList[i](e);
                return true;
            }
        }
        console.error(`Error: Could not place ${EggType[e.type]} Egg`);
        return false;
    }
    gainRandomEgg() {
        return this.gainEgg(this.createRandomEgg());
    }
    progressEggsBattle(route, region) {
        route = MapHelper.normalizeRoute(route, region);
        return this.progressEggs(+Math.sqrt(route).toFixed(2));
    }
    progressEggs(amount) {
        amount *= this.getStepMultiplier();
        amount = Math.round(amount);
        let index = this.eggList.length;
        while (index-- > 0) {
            const helper = this.hatcheryHelpers.hired()[index];
            if (helper) {
                continue;
            }
            const egg = this.eggList[index]();
            const partyPokemon = egg.partyPokemon();
            if (!egg.isNone() && partyPokemon && partyPokemon.canCatchPokerus() && partyPokemon.pokerus == GameConstants.Pokerus.Uninfected) {
                partyPokemon.calculatePokerus(index);
            }
            egg.addSteps(amount, this.multiplier);
            if (this._queueList().length && egg.canHatch()) {
                this.hatchPokemonEgg(index);
            }
        }
        this.hatcheryHelpers.addSteps(amount, this.multiplier);
    }
    getStepMultiplier() {
        return this.multiplier.getBonus('eggStep');
    }
    addPokemonToHatchery(pokemon) {
        // If they have a free eggslot, add the pokemon to the egg now
        if (this.hasFreeEggSlot()) {
            return this.gainPokemonEgg(pokemon);
        }
        // If they have a free queue, add the pokemon to the queue now
        if (this.hasFreeQueueSlot()) {
            return this.addToQueue(pokemon);
        }
        let message = 'You don\'t have any free egg slots';
        if (this.queueSlots()) {
            message += '<br/>Your queue is full';
        }
        Notifier.notify({
            message,
            type: NotificationConstants.NotificationOption.warning,
        });
        return false;
    }
    addToQueue(pokemon) {
        const queueSize = this._queueList().length;
        if (queueSize < this.usableQueueSlots()) {
            pokemon.breeding = true;
            this._queueList.push(pokemon.id);
            return true;
        }
        return false;
    }
    removeFromQueue(index) {
        const queueSize = this._queueList().length;
        if (queueSize > index) {
            const pokemonId = this._queueList.splice(index, 1)[0];
            App.game.party._caughtPokemon().find(p => p.id == pokemonId).breeding = false;
            return true;
        }
        return false;
    }
    clearQueue(shouldConfirm = false) {
        if (shouldConfirm) {
            Notifier.confirm({
                title: 'Clear Queue',
                message: 'Are you sure?\n\nAll Pokémon will be removed from your breeding queue.',
                type: NotificationConstants.NotificationOption.warning,
                confirm: 'Clear',
            }).then(confirmed => {
                if (confirmed) {
                    while (this._queueList().length) {
                        this.removeFromQueue(0);
                    }
                }
            });
        }
        else {
            while (this._queueList().length) {
                this.removeFromQueue(0);
            }
        }
    }
    gainPokemonEgg(pokemon, isHelper = false) {
        if (!this.hasFreeEggSlot(isHelper)) {
            Notifier.notify({
                message: 'You don\'t have any free egg slots',
                type: NotificationConstants.NotificationOption.warning,
            });
            return false;
        }
        const egg = this.createEgg(pokemon.id);
        const success = this.gainEgg(egg, isHelper);
        if (success && pokemon instanceof PartyPokemon) {
            pokemon.breeding = true;
        }
        return success;
    }
    hatchPokemonEgg(index) {
        const egg = this._eggList[index]();
        const hatched = egg.hatch();
        if (hatched) {
            this._eggList[index](new Egg());
            this.moveEggs();
            if (this._queueList().length) {
                const nextEgg = this.createEgg(this._queueList.shift());
                this.gainEgg(nextEgg);
                if (!this._queueList().length) {
                    Notifier.notify({
                        message: 'Hatchery queue is empty',
                        type: NotificationConstants.NotificationOption.success,
                        timeout: 1e4,
                        sound: NotificationConstants.NotificationSound.Hatchery.empty_queue,
                        setting: NotificationConstants.NotificationSetting.Hatchery.empty_queue,
                    });
                }
            }
        }
    }
    moveEggs() {
        const tempEggList = App.game.breeding._eggList.filter(egg => egg().type != EggType.None);
        this._eggList.forEach((egg, index) => {
            egg(tempEggList[index] ? tempEggList[index]() : new Egg());
        });
    }
    createEgg(pokemonId, type = EggType.Pokemon) {
        const dataPokemon = PokemonHelper.getPokemonById(pokemonId);
        return new Egg(type, this.getSteps(dataPokemon.eggCycles), pokemonId);
    }
    createTypedEgg(type) {
        const hatchList = this.hatchList[type];
        const hatchable = hatchList.slice(0, player.highestRegion() + 1).filter(list => list.length);
        // highest region has 1/ratio chance, next highest has 1/(ratio ^ 2), etc.
        // Leftover is given to Kanto, making Kanto and Johto equal chance
        const ratio = 2;
        const possibleHatches = GameConstants.expRandomElement(hatchable, ratio);
        const pokemonName = Rand.fromArray(possibleHatches);
        const pokemonId = PokemonHelper.getPokemonByName(pokemonName).id;
        return this.createEgg(pokemonId, type);
    }
    createRandomEgg() {
        const type = +Rand.fromArray(Object.keys(this.hatchList));
        const egg = this.createTypedEgg(type);
        egg.type = EggType.Mystery;
        return egg;
    }
    createFossilEgg(fossil) {
        const pokemonName = GameConstants.FossilToPokemon[fossil];
        const pokemonNativeRegion = PokemonHelper.calcNativeRegion(pokemonName);
        let fossilEgg;
        if (pokemonNativeRegion > player.highestRegion()) {
            Notifier.notify({
                message: 'You must progress further before you can uncover this fossil Pokémon!',
                type: NotificationConstants.NotificationOption.warning,
                timeout: 5e3,
            });
            fossilEgg = new Egg();
        }
        else {
            const pokemonId = PokemonHelper.getPokemonByName(pokemonName).id;
            fossilEgg = this.createEgg(pokemonId, EggType.Fossil);
        }
        return fossilEgg;
    }
    getSteps(eggCycles) {
        if (eggCycles === undefined) {
            return 500;
        }
        else {
            return eggCycles * 40;
        }
    }
    calculateBaseForm(pokemonName) {
        const devolution = pokemonBabyPrevolutionMap[pokemonName];
        // Base form of Pokemon depends on which regions players unlocked
        if (!devolution || PokemonHelper.calcNativeRegion(devolution) > player.highestRegion()) {
            // No devolutions at all
            // No further devolutions in current unlocked regions
            return pokemonName;
        }
        else {
            // Recurse onto its devolution
            return this.calculateBaseForm(devolution);
        }
    }
    getEggSlotCost(slot) {
        return 500 * slot;
    }
    buyEggSlot() {
        const cost = this.nextEggSlotCost();
        if (App.game.wallet.loseAmount(cost)) {
            this.gainEggSlot();
        }
    }
    nextEggSlotCost() {
        return new Amount(this.getEggSlotCost(this.eggSlots + 1), Currency.questPoint);
    }
    // Knockout getters/setters
    get eggSlots() {
        return this._eggSlots();
    }
    set eggSlots(value) {
        this._eggSlots(value);
    }
    get queueList() {
        return this._queueList;
    }
    gainEggSlot() {
        if (this.eggSlots === this.eggList.length) {
            console.error('Cannot gain another eggslot.');
            return;
        }
        this.eggSlots += 1;
    }
    gainQueueSlot(amt = 1) {
        GameHelper.incrementObservable(this.queueSlots, amt);
    }
    queueSlotsGainedFromRegion(region) {
        // bewtween 4 → 32 queue slots gained when completing a region
        return Math.min(32, Math.max(4, 4 * Math.pow(2, region - 1)));
    }
    get eggList() {
        return this._eggList;
    }
    set eggList(value) {
        this._eggList = value;
    }
    getAllCaughtStatus() {
        return GameHelper.enumNumbers(EggType).reduce((status, type) => {
            return this.hatchList[type]
                ? Math.min(status, this.getTypeCaughtStatus(type))
                : status;
        }, CaughtStatus.CaughtShiny);
    }
    getTypeCaughtStatus(type) {
        const hatchList = this.hatchList[type];
        if (!hatchList) {
            return CaughtStatus.NotCaught;
        }
        const hatchable = hatchList.slice(0, player.highestRegion() + 1).flat();
        return hatchable.reduce((status, pname) => {
            return Math.min(status, PartyController.getCaughtStatusByName(pname));
        }, CaughtStatus.CaughtShiny);
    }
    checkCloseModal() {
        if (Settings.getSetting('hideHatchery').value == 'queue' && !this.hasFreeEggSlot() && !this.hasFreeQueueSlot()) {
            $('#breedingModal').modal('hide');
        }
        if (Settings.getSetting('hideHatchery').value == 'egg' && !this.hasFreeEggSlot()) {
            $('#breedingModal').modal('hide');
        }
    }
    updateQueueSizeLimit(size) {
        BreedingController.queueSizeLimit(size);
        if (size == 0) {
            this.clearQueue();
        }
        else if (size > 0) {
            for (let i = this.queueList().length; i > this.usableQueueSlots(); i--) {
                this.removeFromQueue(i - 1);
            }
        }
    }
}
/// <reference path="../../declarations/settings/BreedingFilters.d.ts" />
/// <reference path="../../declarations/enums/CaughtStatus.d.ts"/>
/// <reference path="../../declarations/breeding/EggType.d.ts" />
class BreedingController {
    static initialize() { }
    static openBreedingModal() {
        if (App.game.breeding.canAccess()) {
            $('#breedingModal').modal('show');
        }
        else {
            Notifier.notify({
                message: 'You do not have access to the Day Care yet.\n<i>Clear Route 5 first.</i>',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static getEggImage(egg) {
        let eggType = EggType[egg.type].toLowerCase();
        if (eggType == 'pokemon') {
            const dataPokemon = PokemonHelper.getPokemonById(egg.pokemon);
            eggType = String(PokemonType[dataPokemon.type1]).toLowerCase();
        }
        else if (eggType == 'fossil') {
            eggType = GameConstants.PokemonToFossil[PokemonHelper.getPokemonById(egg.pokemon).name];
        }
        return `assets/images/breeding/${eggType}.png`;
    }
    static getEggCssClass(egg) {
        const animationType = Settings.getSetting('eggAnimation').observableValue();
        if (animationType === 'none') {
            return '';
        }
        if (egg.progress() >= 100) {
            return 'hatching';
        }
        return (animationType === 'almost' && egg.stepsRemaining() <= 50) ? 'hatchingSoon' : '';
    }
    static getEggSpots(pokemonName) {
        const pokemon = pokemonMap[pokemonName];
        const seed = pokemon.id * pokemon.type.reduce((a, b) => a * (b + 1), 1);
        SeededRand.seed(seed);
        SeededRand.seed(SeededRand.intBetween(0, 1000));
        return SeededRand.fromArray(this.spotTypes);
    }
    static visible(partyPokemon) {
        return ko.pureComputed(() => {
            // Only breedable Pokemon
            if (partyPokemon.breeding || partyPokemon.level < 100) {
                return false;
            }
            if (!BreedingFilters.search.value().test(partyPokemon.name)) {
                return false;
            }
            // Check based on category
            if (BreedingFilters.category.value() >= 0) {
                if (partyPokemon.category !== BreedingFilters.category.value()) {
                    return false;
                }
            }
            // Check based on shiny status
            if (BreedingFilters.shinyStatus.value() >= 0) {
                if (+partyPokemon.shiny !== BreedingFilters.shinyStatus.value()) {
                    return false;
                }
            }
            // Check based on native region
            if (!(Math.pow(2, PokemonHelper.calcNativeRegion(partyPokemon.name)) & BreedingFilters.region.value())) {
                return false;
            }
            // check based on Pokerus status
            if (BreedingFilters.pokerus.value() > -1) {
                if (partyPokemon.pokerus !== BreedingFilters.pokerus.value()) {
                    return false;
                }
            }
            // Check if either of the types match
            const type1 = BreedingFilters.type1.value() > -2 ? BreedingFilters.type1.value() : null;
            const type2 = BreedingFilters.type2.value() > -2 ? BreedingFilters.type2.value() : null;
            if (type1 !== null || type2 !== null) {
                const { type: types } = pokemonMap[partyPokemon.name];
                if ([type1, type2].includes(PokemonType.None)) {
                    const type = (type1 == PokemonType.None) ? type2 : type1;
                    if (!BreedingController.isPureType(partyPokemon, type)) {
                        return false;
                    }
                }
                else if ((type1 !== null && !types.includes(type1)) || (type2 !== null && !types.includes(type2))) {
                    return false;
                }
            }
            return true;
        });
    }
    static isPureType(pokemon, type) {
        const pokemonData = pokemonMap[pokemon.name];
        return ((type == null || pokemonData.type[0] === type) && (pokemonData.type[1] == undefined || pokemonData.type[1] == PokemonType.None));
    }
    static getDisplayValue(pokemon) {
        const pokemonData = pokemonMap[pokemon.name];
        switch (this.displayValue()) {
            case 'attack': return `Attack: ${Math.floor(pokemon.attack * BreedingController.calculateRegionalMultiplier(pokemon)).toLocaleString('en-US')}`;
            case 'attackBonus': return `Attack Bonus: ${Math.floor((pokemon.baseAttack * (GameConstants.BREEDING_ATTACK_BONUS / 100) + pokemon.proteinsUsed()) * BreedingController.calculateRegionalMultiplier(pokemon)).toLocaleString('en-US')}`;
            case 'baseAttack': return `Base Attack: ${pokemon.baseAttack.toLocaleString('en-US')}`;
            case 'eggSteps': return `Egg Steps: ${App.game.breeding.getSteps(pokemonData.eggCycles).toLocaleString('en-US')}`;
            case 'timesHatched': return `Hatches: ${App.game.statistics.pokemonHatched[pokemonData.id]().toLocaleString('en-US')}`;
            case 'breedingEfficiency': return `Efficiency: ${((pokemon.baseAttack * (GameConstants.BREEDING_ATTACK_BONUS / 100) + pokemon.proteinsUsed()) * BreedingController.calculateRegionalMultiplier(pokemon) / pokemonMap[pokemon.name].eggCycles).toLocaleString('en-US', { maximumSignificantDigits: 2 })}`;
            case 'stepsPerAttack': return `Steps/Att: ${(App.game.breeding.getSteps(pokemonMap[pokemon.name].eggCycles) / ((pokemon.baseAttack * (GameConstants.BREEDING_ATTACK_BONUS / 100) + pokemon.proteinsUsed()) * BreedingController.calculateRegionalMultiplier(pokemon))).toLocaleString('en-US', { maximumSignificantDigits: 2 })}`;
            case 'dexId': return `#${pokemon.id <= 0 ? '???' : Math.floor(pokemon.id).toString().padStart(3, '0')}`;
            case 'proteins': return `Proteins: ${pokemon.proteinsUsed()}`;
            case 'evs': return `EVs: ${pokemon.evs()}`;
        }
    }
    static calculateRegionalMultiplier(pokemon) {
        // Check if reginal debnuff is active
        if (App.game.challenges.list.regionalAttackDebuff.active()) {
            // Check if regional debuff being applied for sorting
            if (BreedingController.regionalAttackDebuff() > -1 && PokemonHelper.calcNativeRegion(pokemon.name) !== BreedingController.regionalAttackDebuff()) {
                return App.game.party.getRegionAttackMultiplier();
            }
        }
        return 1.0;
    }
}
BreedingController.spotTypes = [
    `<g class="egg-spot">
          <path d="M33.5 104.3c4.4 4.9 9.3 7.3 6.7 9.6-2.6 2.4-8.3.4-12.7-4.4-4.5-4.9-6-10.8-3.4-13.2 2.6-2.3 5 3.2 9.4 8zm59.7 0c-4.5 4.9-9.4 7.3-6.8 9.6 2.6 2.4 8.4.4 12.8-4.4 4.4-4.9 6-10.8 3.3-13.2-2.6-2.3-4.9 3.2-9.3 8zm-1.6-14.8c-6.2 13.5-19 21-28.6 16.6-9.5-4.4-5-12.4 1.2-26 6.3-13.5 12-27.6 21.5-23.2 9.5 4.4 12.2 19 6 32.6zM74.29 37.558C66.497 46.286 70.6 55.4 62.4 55.4c-8.2 0-14.6-6.6-14.6-14.7S54.3 26 62.4 26c5.593.02 15.797 6.422 11.89 11.558z"/>
          <circle cx="35" cy="38" r="3"/>
          <circle cx="46" cy="23" r="1"/>
          <circle cx="40" cy="56" r="2"/>
          <circle cx="67" cy="113" r="2"/>
          <circle cx="59" cy="111" r="2"/>
          <circle cx="83" cy="30" r="3"/>
          <circle cx="93" cy="45" r="3"/>
          <circle cx="44" cy="91" r="4"/>
        </g>`,
    '<path class="egg-spot" fill-rule="evenodd" d="M46.23 117.564l-11.834-9.568-6.735 1.996-2.792-3.385-1.678-3.128 2.058-5.37-8.622-12.541 15.198.785 9.263-12.074 3.95 14.696 14.345 5.078-12.757 8.298zM94.642 78.967L87.3 82.332l-1.462 8.113-5.387-6.125-7.972 1.081 4.012-7.15-3.465-7.445 7.867 1.706 5.83-5.682.85 8.204zM64.436 58.62l-1.438 3.7 2.234 3.282-3.963-.223-2.431 3.139-1.013-3.839-3.736-1.342 3.338-2.15.121-3.967 3.076 2.51zM72.93 124.108l-12.863-7.728 15.24-6.015L78.995 94.4l10.43 12.637 12.201-1.068c-1.781 5.64-18.87 17.67-28.696 18.14zM23.89 37.914l8.54 4.054 8.181-4.736-1.217 9.375 7.032 6.317-9.291 1.74-3.835 8.64-4.526-8.3-9.402-.978 6.495-6.868zM80.06 61.697L76.364 38.23l-21.428-10.26 21.178-10.767L77.63 6.191c14.44 11.002 20.165 23.604 27.66 39.708l-8.85-1.41z"/>',
    '<path class="egg-spot" d="M40.95 26.323l5.938 11.344 5.318-11.344 5.943 11.344 5.314-11.344 5.947 11.344 5.31-11.344 5.95 11.344 5.306-11.344 5.956 11.344 5.3-11.344C93.314 22.008 77.276 1.254 62.799 1.35c-14.462.096-28.375 19.679-33.106 24.972l5.934 11.344zM85.875 115.645L79.937 104.3l-5.318 11.344-5.943-11.344-5.313 11.344-5.948-11.344-5.309 11.344-5.952-11.344-5.304 11.344-5.957-11.344-3.883 8.31 22.214 12.35 19.498-.032 23.073-11.84-4.597-8.788zM14.966 70.986l15.998-12 15.998 12 15.998-12 15.998 12 15.998-12 15.998 12 .064 15.418-16-12-16 12-16-12-16 12-16-12-16 12z"/>',
    '<path class="egg-spot" fill-rule="evenodd" d="M25.319 37.719s23.67-2.3 36.36-2.304c12.688-.003 39.727 2.239 39.727 2.239l5.453 14.088s-30.455-1.188-45.019-1.177c-14.564.01-42.364 1.242-42.364 1.242zM16.49 65.635s29.952 1.066 45.587 1.08c15.635.012 47.726-1.08 47.726-1.08l1.666 14.412s-33.12 2.575-49.154 2.575c-16.036 0-47.059-2.575-47.059-2.575zM18.827 94.849s28.351 2.626 43.196 2.637c14.845.01 45.875-2.572 45.875-2.572l-9.141 14.4s-25.023 3.322-36.917 3.329c-11.895.007-34.261-3.394-34.261-3.394zM40.886 13.262s13.83-1.689 21.343-1.7c7.513-.01 23.734 1.635 23.734 1.635l9.106 12.087s-22-1.805-32.625-1.794c-10.625.01-31.125 1.86-31.125 1.86z"/>',
    `<g class="egg-spot" transform="matrix(.23639 0 0 .224 -1.683 1.746)">
          <ellipse cx="235.48" cy="166.231" rx="14.106" ry="11.187"/>
          <ellipse cx="259.807" cy="181.801" rx="6.322" ry="5.355"/>
          <ellipse cx="200.449" cy="66.977" rx="8.268" ry="7.295"/>
          <ellipse cx="221.857" cy="79.144" rx="5.355" ry="2.919"/>
          <ellipse cx="328.405" cy="81.573" rx="8.758" ry="10.22"/>
          <ellipse cx="399.925" cy="198.343" rx="8.273" ry="7.301"/>
          <path d="M215.529 262.077c8.599 0 15.569-5.881 15.569-13.134 0-4.235-2.412-7.956-6.096-10.361-2.631-1.714-5.887-2.779-9.474-2.779-2.307 0-4.48.447-6.444 1.212-5.374 2.068-9.119 6.616-9.119 11.928-.006 7.252 6.965 13.134 15.564 13.134z"/>
          <ellipse cx="234.507" cy="275.7" rx="7.295" ry="6.812"/>
          <ellipse cx="325.487" cy="272.291" rx="12.65" ry="13.133"/>
          <ellipse cx="356.136" cy="280.075" rx="5.355" ry="4.376"/>
          <ellipse cx="306.024" cy="354.519" rx="13.623" ry="11.677"/>
          <ellipse cx="336.19" cy="376.41" rx="4.865" ry="6.328"/>
          <ellipse cx="244.238" cy="370.088" rx="7.295" ry="4.865"/>
          <ellipse cx="229.635" cy="400.254" rx="14.106" ry="12.65"/>
          <ellipse cx="121.146" cy="333.595" rx="6.812" ry="8.274"/>
          <ellipse cx="93.41" cy="333.595" rx="10.214" ry="14.106"/>
          <ellipse cx="218.448" cy="493.663" rx="14.596" ry="11.677"/>
          <ellipse cx="247.157" cy="509.722" rx="6.328" ry="5.349"/>
          <ellipse cx="335.7" cy="478.095" rx="10.221" ry="10.704"/>
          <path d="M272.53 552.049c116.903-2.87 202.886-90.113 207.546-204.955 2.416-59.518-16.62-146.823-53.094-216.254C401.308 81.977 347.556 0 276.025 0c-71.531 0-125.283 81.977-150.956 130.839-36.475 69.425-60.944 155.615-57.69 215.094 6.214 113.614 86.339 209.032 205.15 206.116zm-50.15-4.936c-.852-.22-1.727-.379-2.57-.605 5.868.855 11.976 2.037 18.365 2.57-5.47-.459-10.704-1.219-15.796-1.965zm123.297-10.408c-21.721 5.258-45.635 14.338-72.85 14.338 27.252 0 51.192-9.092 72.936-14.367a.321.321 0 00-.086.029zm17.765-6.816c-26.225 8.391-56.087 18.797-90.634 18.797-11.065 0-22.577-.6-34.51-1.604 11.933 1.004 23.444 1.488 34.51 1.488 35.557 0 66.204-10.769 92.948-19.625-.753.342-1.554.606-2.314.944zm-87.029 15.658c-10.667 0-21.108-.783-31.279-2.27 69.291-1.897 126.082-26.944 169.27-56.278-35.643 32.853-83.755 58.548-137.99 58.548zm-76.2-508.09c21.586 15.972 49.489 25.922 68.7 25.922 28.218 0 51.095-11.604 60.466-18.299 6.07-4.333 9.384-15.542 7.677-19.122 13.213 9.284 28.287 24.993 43.146 43.69-1.033 13.395-13.456 30.249-32.341 35.757a197.78 197.78 0 01-27.932 6.138c-27.615-1.273-69.175-8.256-107.841-24.866-10.349-4.449-27.368-12.98-38.47-19.98 9.28-11.175 17.924-21.897 26.596-29.24zm-35.315 40.31c.594-.79 1.188-1.615 1.781-2.386.637-.826 1.267-1.61 1.897-2.417 1.01-1.291 2.02-2.588 3.023-3.825 40.38 25.47 94.927 40.054 130.411 44.032 6.426.722 12.418 1.193 17.846 1.438 3.225.147 6.303.233 9.1.233 2.791 0 5.332-.074 7.65-.208a82.138 82.138 0 005.422-.465c6.279-.783 11.316-1.114 15.252-1.114 20.434 0 10.984 8.898-9.412 8.898a277.836 277.836 0 01-37.314 2.54c-52.265 0-106.567-18.083-147.406-44.381.588-.796 1.17-1.567 1.75-2.344zm-37.095 60.851c.569.092 7.346 1.83 7.934 1.83 6.444 0 10.512-8.12 10.512-15.103 0-2.907-6.768-7.607-8.292-9.743 3.231-5.63 7.228-9.327 10.44-14.394 41.23 29.302 100.744 54.387 167.403 54.387 31.023 0 68.843-8.126 105.777-19.271 9.92 19.205 18.121 42.515 25.89 63.28-37.149 11.304-95.962 25.049-158.618 27.864-63.342-14.816-124.934-42.624-169.677-69.21 3.155-6.811 5.259-13.086 8.63-19.64zm-28.952 69.78c.679-1.927 1.334-3.85 2.038-5.77.71-1.94 1.457-3.874 2.185-5.808 4.553-12.081 9.48-24.064 14.792-35.747 42.896 25.435 100.992 51.713 159.866 66.774a526.97 526.97 0 0021.99 5.147 504.921 504.921 0 0022.938 4.266c24.002 3.893 48.709 6.108 73.898 6.108 20.043 0 40.369-1.389 60.863-4.394 5.803 19.572 10.387 38.862 13.508 57.099-31.494 10.992-92.578 29.059-164.824 33.826-36.897-5.275-71.108-15.6-102.442-30.912 37.546 12.73 80.044 19.994 129.45 22.59.936.049 1.818.072 2.625.072 3.012 0 5.416-.324 7.16-.961 3.562-1.303 3.947-3.77 3.947-4.768 0-5.984-11.504-9.217-22.332-9.217-1.621 0-137.785-3.39-226.127-96.994.153-.441.312-.875.465-1.31zm-4.174 12.229c.208-.631.404-1.261.618-1.897.177-.532.336-1.06.514-1.591a509.278 509.278 0 011.512-4.413c84.309 88.055 211.649 97.032 227.192 97.032 18.539 0 26.482 8.824 11.225 8.824-.764 0-1.584-.023-2.467-.066-60.924-3.207-109.773-13.691-150.533-30.748a294.285 294.285 0 01-8.366-3.635 312.484 312.484 0 01-12.748-6.162c-24.413-12.461-50.851-29.614-70.196-47.234 1.034-3.366 2.135-6.732 3.249-10.11zM76.323 346.514c0-16.535-6.44-35.287-2.806-55.172.098-.525.184-1.047.282-1.572-8.058-1.359.288-1.604.288-1.604 3.22-16.873 11.037-36.578 16.44-54.43 25.968 23.415 59.353 43.69 91.507 57.153 30.674 17.854 66.904 32.033 109.665 39.762 2.252.41 4.498.826 6.787 1.201 2.484.402 5.031.74 7.559 1.102 18.744 2.654 38.611 4.174 59.822 4.174 33.115 0 69.314-3.514 108.9-11.336.348 4.15.586 8.195.734 12.148-41.365 50.361-81.941 83.637-144.17 102.584-84.823-2.504-185.466-20.049-254.396-79.113-.361-4.921-.612-9.872-.612-14.897zm53.581 82.933s-5.539 32.393 74.542 32.393c8.789 0 18.611-.393 29.578-1.256 37.864-2.986 69.646-8.646 97.228-17.006 1.525-.459 3.055-.918 4.555-1.396 1.475-.471 2.912-.967 4.363-1.449 58.066-19.5 97.039-51.941 135.459-98.146.025 1.303.1 2.656.1 3.934 0 32.027-7.705 61.965-21.385 88.307-.281.539-.557 1.076-.844 1.615-.287.545-.562 1.102-.857 1.646-7 12.863-15.471 24.799-25.184 35.668-48.996 38.732-116.632 66.636-193.64 66.636-1.48 0-2.999-.072-4.492-.084-40.839-9.223-76.839-35.965-103.381-65.041-5.314-24.291 3.958-45.821 3.958-45.821z"/>
        </g>`,
    `<g class="egg-spot" transform="matrix(.23247 0 0 .22628 -1.175 1.165)">
          <ellipse cx="235.48" cy="166.231" rx="14.106" ry="11.187"/>
          <ellipse cx="259.807" cy="181.801" rx="6.322" ry="5.355"/>
          <ellipse cx="200.449" cy="66.977" rx="8.268" ry="7.295"/>
          <ellipse cx="221.857" cy="79.144" rx="5.355" ry="2.919"/>
          <ellipse cx="328.405" cy="81.573" rx="8.758" ry="10.22"/>
          <ellipse cx="399.925" cy="198.343" rx="8.273" ry="7.301"/>
          <path d="M215.529 262.077c8.599 0 15.569-5.881 15.569-13.134 0-4.235-2.412-7.956-6.096-10.361-2.631-1.714-5.887-2.779-9.474-2.779-2.307 0-4.48.447-6.444 1.212-5.374 2.068-9.119 6.616-9.119 11.928-.006 7.252 6.965 13.134 15.564 13.134z"/>
          <ellipse cx="234.507" cy="275.7" rx="7.295" ry="6.812"/>
          <ellipse cx="325.487" cy="272.291" rx="12.65" ry="13.133"/>
          <ellipse cx="356.136" cy="280.075" rx="5.355" ry="4.376"/>
          <ellipse cx="306.024" cy="354.519" rx="13.623" ry="11.677"/>
          <ellipse cx="336.19" cy="376.41" rx="4.865" ry="6.328"/>
          <ellipse cx="244.238" cy="370.088" rx="7.295" ry="4.865"/>
          <ellipse cx="229.635" cy="400.254" rx="14.106" ry="12.65"/>
          <ellipse cx="121.146" cy="333.595" rx="6.812" ry="8.274"/>
          <ellipse cx="93.41" cy="333.595" rx="10.214" ry="14.106"/>
          <ellipse cx="218.448" cy="493.663" rx="14.596" ry="11.677"/>
          <ellipse cx="247.157" cy="509.722" rx="6.328" ry="5.349"/>
          <ellipse cx="335.7" cy="478.095" rx="10.221" ry="10.704"/>
          <path d="M274.533 549.808c118.845 0 206.087-107.5 211.94-203.176 3.639-59.455-23.017-146.361-59.491-215.792C401.308 81.977 347.556 0 276.025 0c-71.531 0-125.283 81.977-150.956 130.839-36.475 69.425-60.982 155.532-57.577 215.007 5.032 87.901 88.197 203.962 207.04 203.962zm-52.542-8.433c-.851-.221-1.726-.379-2.57-.605 5.869.855 11.977 2.037 18.366 2.57-5.471-.459-10.704-1.219-15.796-1.965zm123.686-4.67c-21.721 5.258-46.023 8.6-73.238 8.6 27.252 0 51.58-3.354 73.324-8.629a.321.321 0 00-.086.029zm17.765-6.816c-26.225 8.391-56.475 13.059-91.022 13.059-11.065 0-22.577-.6-34.511-1.604 11.934 1.004 23.445 1.488 34.511 1.488 35.557 0 66.592-5.031 93.336-13.887-.753.342-1.554.606-2.314.944zm-87.417 17.344c-10.667 0-21.797-6.556-31.968-8.044 69.291-1.896 127.159-22.856 170.347-52.19-35.643 32.853-84.143 60.234-138.379 60.234zM202.857 38.629c21.585 15.973 46.845 24.75 66.056 24.75 28.218 0 51.095-11.604 60.466-18.299 6.07-4.333 11.471-14.077 9.764-17.657 13.213 9.284 27.51 22.534 42.37 41.23-1.034 13.396-14.767 31.244-33.652 36.752a197.78 197.78 0 01-27.932 6.138c-27.615-1.273-69.175-8.256-107.841-24.866-10.349-4.449-25.113-13.446-36.215-20.447 9.279-11.175 18.312-20.257 26.984-27.6zm-35.704 38.672c.594-.79 1.188-1.616 1.78-2.387.638-.826 1.268-1.609 1.898-2.417 1.01-1.29 2.02-2.588 3.023-3.825 40.379 25.471 92.672 40.521 128.156 44.499 6.426.722 12.418 1.193 17.846 1.438 3.225.147 6.303.233 9.1.233 2.791 0 5.332-.074 7.65-.208a82.138 82.138 0 005.422-.465c6.279-.783 11.316-1.114 15.252-1.114 20.434 0 10.984 8.898-9.412 8.898a277.836 277.836 0 01-37.314 2.54c-52.265 0-104.312-18.55-145.151-44.848.588-.796 1.169-1.567 1.75-2.344zM130.77 137.09c.57.092 1.132.19 1.72.19 6.444 0 11.677-5.66 11.677-12.644 0-2.907-.942-5.557-2.466-7.693 3.231-5.63 6.289-11.134 9.502-16.2 41.23 29.301 97.938 54.853 164.597 54.853 31.023 0 72.264-5.68 109.198-16.826 9.92 19.205 18.898 39.646 26.666 60.411-37.148 11.304-86.848 38.148-162.653 26.954-63.342-14.816-123.618-42.577-168.361-69.163 3.155-6.81 6.748-13.328 10.12-19.882zm-31.09 71.524c.678-1.928 1.333-3.85 2.037-5.77.71-1.94 1.457-3.875 2.185-5.809 4.553-12.08 10.13-25.565 15.442-37.248 42.896 25.435 99.514 53 158.388 68.061a526.97 526.97 0 0021.99 5.147 504.921 504.921 0 0022.938 4.266c24.002 3.893 48.709 6.108 73.898 6.108 20.043 0 47.024-2.556 67.518-5.561 5.803 19.572 10.387 38.862 13.508 57.099-31.494 10.992-99.233 30.226-171.479 34.993-36.897-5.275-71.108-15.6-102.442-30.912 37.546 12.73 80.044 19.994 129.45 22.59.936.049 1.818.072 2.625.072 3.012 0 5.416-.324 7.16-.961 3.562-1.303 3.947-3.77 3.947-4.768 0-5.984-11.504-9.217-22.332-9.217-1.621 0-136.957-3.175-225.299-96.78.153-.44.312-.875.465-1.31zm-4.175 12.228c.208-.63.404-1.26.618-1.897.177-.532.336-1.059.514-1.59a509.278 509.278 0 011.512-4.414c84.31 88.055 210.821 96.818 226.364 96.818 18.539 0 26.482 8.824 11.225 8.824-.764 0-1.584-.023-2.467-.066-60.924-3.207-109.773-13.691-150.533-30.748a294.285 294.285 0 01-8.366-3.635 312.484 312.484 0 01-12.748-6.162c-24.413-12.461-50.023-29.4-69.368-47.02 1.034-3.366 2.135-6.732 3.25-10.11zM76.323 346.514c-.26-38.552 4.085-75.637 15.033-112.564 25.967 23.415 58.524 43.476 90.678 56.939 30.674 17.854 66.904 32.033 109.665 39.762 2.252.41 4.498.826 6.787 1.201 2.484.402 5.031.74 7.559 1.102 18.744 2.654 38.611 4.174 59.822 4.174 33.115 0 73.79-3.514 113.377-11.336.348 4.15-.677 8.195-.529 12.148-41.365 50.361-85.155 83.637-147.384 102.584-84.823-2.504-185.466-20.049-254.396-79.113-.361-4.921-.612-9.872-.612-14.897zM204.446 461.84c8.789 0 18.611-.393 29.578-1.256 37.864-2.986 69.646-8.646 97.228-17.006 1.525-.459 3.055-.918 4.555-1.396 1.475-.471 2.912-.967 4.363-1.449 58.066-19.5 100.253-51.941 138.673-98.146.025 1.303.1 2.656.1 3.934 0 32.027-10.919 61.965-24.599 88.307-.281.539-.557 1.076-.844 1.615-.287.545-.562 1.102-.857 1.646-7 12.863-15.471 24.799-25.184 35.668-48.996 38.732-117.709 62.549-194.717 62.549-1.48 0-2.999-.072-4.492-.084-40.839-9.223-75.762-31.878-102.304-60.954-2.38-29.645 73.993-13.431 78.5-13.428z"/>
        </g>`,
    `<g class="egg-spot">
          <path d="M38.755 40.315s2.728 2.396.637 4.348c-2.093 1.952-4.273-1.065-3.455-3.993.818-2.927 1.455-4.435 1.455-4.435-6.002 1.952-2.092 14.639 2.546 9.228 4.639-5.414-1.183-5.148-1.183-5.148zM79.225 38.807c-2.183-1.331-5.73.266-6.91 3.815-1.183 3.55 1.545 7.72 5.365 5.945-4.548 0-3.911-7.452-.455-8.073 3.455-.621 1.546 1.774.455 3.195 3.819-.623 3.728-3.55 1.545-4.882zM52.852 57.794c-4.82 2.396-3.912 8.963 1.727 8.874.728.089 1.727 0-.091-.976-1.82-.977-5.456-4.172-.182-5.591 5.275-1.42 4.457.976 3.82 2.395-.636 1.421-.274 2.485-.274 2.485 4.094-3.636-.18-9.58-5-7.187zM35.21 105.708c2.91-2.04 4.637-.355 4.637-.355-1.364-4.527-6.639-3.463-7.184.887-.546 4.348 3.91 5.766 5.911 4.791 2.001-.976.728-.976-.636-.798-1.365.178-5.64-2.483-2.729-4.525zM84.83 100.197c-2.002.975-.729.975.636.798 1.363-.177 5.638 2.485 2.728 4.525-2.911 2.04-4.638.355-4.638.355 1.365 4.524 6.639 3.46 7.184-.888.545-4.346-3.91-5.767-5.91-4.79z"/>
          <path d="M63.245 2.434c-16.684 0-28.671 16.657-34.66 27.777-8.507 15.8-15.209 35.886-13.673 49.356 2.077 18.224 10.936 32.017 25.464 40.416.695.353 1.399.692 2.115 1.011.165.071.332.14.497.21.441.19.885.375 1.333.554 5.916 2.355 11.978 3.834 18.834 3.834s13.193-1.663 19.109-4.018c.448-.178.892-.364 1.333-.554.166-.07.333-.138.497-.21 16.87-7.367 27.395-23.951 27.67-41.612.212-13.555-4.799-33.189-13.307-48.988C92.467 19.09 79.93 2.434 63.245 2.434zm-1.571 4.787s-.364.088-1.456.088c-1.09 0-2.82 1.685-1.273 4.346 1.546 2.664 4.91.534 5.093-.798.18-1.331 1.182-.444 1.363 0 .183 2.928-5 5.59-7.639.975-2.636-4.613 2.366-7.718 3.912-4.611zm2.364 115.435c-4.365.443-4.274-4.436-.365-4.88 0 0-.636 1.953-.91 2.485-.273.532 1.273.978 1.273.978s4.367.973.002 1.417zm22.43-5.062c-9.392-.498-17.257-8.627-26.29-8.534-13.479.137-8.88 7.755-16.67 10.212-12.938-5.582-22.557-16.812-27.685-30.06.24.048.496.068.77.052C21.2 88.983 22.48 72.136 30.825 74.1c8.347 1.965.289 21.058 17.267 25.41 16.98 4.353 25.18-10.95 36.548-9.966 7.428.642 17.128 4.1 22.959 3.443-3.55 10.57-11.135 19.28-21.13 24.606zm-55.169-47.11c-2.91.709-5.274-.178-7.003-2.485-1.727-2.306 1.546-4.614 3.002-4.88 1.456-.266 1.09.621-.636 2.485-1.73 1.863-.185 4.88 4.637 4.88zm38.923 19.342c-.818.71-4.911 1.684-6.73-1.952-1.82-3.638 4.178-8.757 7.001-4.348.91 1.419 0 1.153-1.727 0s-3.82.976-3.82 3.283 3.002 3.815 5.276 3.017zm28.231-33.413c-7.914 3.65 11.08 18.812-1.583 22.323-12.663 3.51-8.2-13.337-16.98-15.162-8.777-1.824-15.828 17.27-27.915 14.32-12.088-2.948-3.022-17.689-9.497-22.463-6.475-4.773-6.475 2.667-13.094 2.106-3.236-.275-7.606-3.04-9.156-6.738 2.247-6.614 5.077-13.241 8.335-19.29.582-1.082 1.165-2.11 1.746-3.113.222-.062.438-.108.674-.2 6.475-2.528 9.914-15.163 18.98-12.496s-6.046 12.917-3.743 24.288c2.302 11.372 19.715 11.23 20.146-1.124.433-12.353-.72-23.444 6.187-23.866 6.906-.42 6.763 19.234 16.98 19.234 2.988 0 5.066-3.063 6.41-4.695 6.118 11.368 11.94 26.766 13.959 38.291-4.123-3.049-5.137-14.327-11.449-11.415z"/>
        </g>`,
    '<path class="egg-spot" d="M63.187.81c-16.35 0-28.638 17.91-34.506 29.08-8.338 15.87-15.439 35.786-14.545 49.374 1.585 24.082 21.885 46.908 49.051 46.908s48.447-20.638 48.447-46.984c0-13.617-5.603-33.43-13.94-49.299C91.825 18.72 79.538.81 63.187.81zM43.395 119.606c-8.1-6.974-22.392-21.252-27.463-42.637.15-3.515.64-7.385 1.43-11.456 5.82 35.759 43.511 53.595 45.002 58.597.012.038.03.166.037.202a2.366 2.366 0 00-.037-.158c-6.804-.112-13.203-1.912-18.916-4.503-.018-.017-.035-.03-.053-.045zm18.842 5.528h-.025c.014-.023.023-.05.034-.074l.039-.009c-.016.027-.031.056-.048.083zm15.6-3.056c-.027.022.165-.18.138-.157-3.628 1.153-7.616 1.95-11.614 2.205-.853.516-1.757.504-2.566.504-.55 0-1.054.256-1.466.367.012-.03.021-.062.031-.095.266-.07.577-.164.905-.27h.529c.808 0 1.712-.01 2.566-.527-1.05.067-2.104.025-3.175.025 1.07 0 2.126-.046 3.175-.113 3.35-2.024 5.867-6.731-1.72-13.988C53.75 99.61 25.183 86.386 19.335 57.154c1.945-7.1 5.007-15.489 8.222-22.33.474 13.783 6.85 30.937 20.844 43.844 23.427 21.603 38.053 36.2 29.437 43.41zm20.856-13.38c-2.655 3.047-6.636 6.11-10.063 8.35 4.215-4.44 6.055-12.33-3.546-22.698-14.001-15.122-44.24-35.282-48.722-58.802-.778-4.081-1.945-8.936-1.88-12.562C38.33 16.87 42.092 12.46 45.608 9.32c-2.034 6.805-.331 16.317 6.153 25.668 14.412 20.787 54.015 48.988 46.931 73.71zm12.181-28.905c0 5.667-2.418 10.897-4.343 15.835 1.655-13.69-8.246-27.115-28.73-50.28C61.483 26.892 53.8 13.244 55.201 4.086c2.129-.912 4.052-1.39 5.711-1.606 1.33 7.816 8.03 20.74 25.57 36.987 10.764 9.97 19.361 18.978 23.042 27.21.818 4.506 1.35 9.363 1.35 13.116zM84.522 23.227C75.65 13.732 70.421 7.511 67.518 2.86 77.088 5.35 86.306 10.386 96.8 30.36c1.493 2.841 3.572 7.47 4.868 10.505-4.263-5.295-11.59-11.692-17.147-17.639z"/>',
    '<path class="egg-spot" d="M63.3 1.17c-16.811 0-29.443 18.438-35.476 29.428-8.57 15.612-13.581 34.995-13.581 48.393 0 25.923 21.13 46.336 49.059 46.336 27.928 0 47.805-20.306 47.805-46.23 0-13.397-3.757-32.888-12.328-48.499C92.744 19.608 80.111 1.17 63.3 1.17zm0 1.395c6.121 0 13.698 4.2 18.553 8.237-14.646 5.785-30.725 5.456-39.9 2.528C47.42 7.986 55.968 2.565 63.3 2.565zm47.085 64.241c.663 3.545 1.089 6.91 1.231 9.97a44.156 44.156 0 010 4.575 43.287 43.287 0 01-1.029 7.455c-.57.238-1.135.464-1.7.691a41.637 41.637 0 01-8.002 15.886c-17.289 8.375-52.141 18.235-83.214-16.063a97.862 97.862 0 01-2.018-2.297 43.634 43.634 0 01-.728-7.917c0-.755.021-1.534.06-2.331.053-1.15.155-2.347.283-3.575l.165.13c-.114 1.18-.103 2.337-.103 3.446 0 .796-.06 1.576-.06 2.33 0 .755.06 1.502.06 2.245 0 1.934.156 3.825.496 5.674.67.786 1.257 1.552 1.93 2.297-.821-3.27-1.355-6.688-1.355-10.222 0-1.53-.45-3.042-.298-4.721 15.25 11.905 45.384 34.125 92.785 15.118.565-.227.956-.453 1.526-.691.548-2.409.856-4.897.856-7.455 0-.743.06-1.49.06-2.244 0-.754-.06-1.535-.06-2.33 0-3.042-.392-6.384-1.046-9.904.052-.023.11-.046.16-.067zm.606.532c-.03.01-.05.022-.08.033.001.011.003.02.006.032-11.602 4.596-53.088 16.484-95.096-1.188a102.18 102.18 0 011.3-5.71c27.63 7.305 55.476 9.174 89.87-8.396 1.748 5.208 3.109 10.377 4 15.229zM24.594 39.5a117.77 117.77 0 013.348-6.75c16.27 3.792 40.06 4.126 67.047-6.31a102.394 102.394 0 013.213 5.45c2.267 4.13 4.323 8.536 6.13 13.02-13.997 4.945-45.311 10.116-79.738-5.41z"/>',
    `<g class="egg-spot">
          <path d="M42.381 32.138c-1.862-.684-4.343 1.02-5.541 3.807-1.2 2.786-.661 5.6 1.2 6.284 1.86.684 4.343-1.02 5.542-3.807 1.198-2.786.661-5.6-1.2-6.284zM56.099 36.168c-2.133-.303-4.292 2.04-4.823 5.23-.53 3.19.767 6.023 2.899 6.326 2.132.303 4.291-2.039 4.822-5.229.531-3.19-.767-6.023-2.898-6.327zM86.034 32.138c-1.862.684-2.4 3.498-1.201 6.284 1.199 2.787 3.68 4.491 5.542 3.807 1.862-.684 2.4-3.498 1.201-6.284-1.199-2.787-3.68-4.491-5.542-3.807zM72.317 36.168c-2.131.304-3.43 3.135-2.898 6.327.531 3.19 2.69 5.532 4.822 5.229 2.133-.303 3.43-3.135 2.898-6.327-.53-3.191-2.69-5.532-4.822-5.229zM41.069 79.936c-1.976-.217-3.96 2.03-4.434 5.02-.473 2.991.744 5.59 2.719 5.807 1.974.217 3.96-2.03 4.433-5.02.474-2.99-.742-5.59-2.718-5.807zM27.883 71.405c-1.983-.135-3.869 2.194-4.212 5.202-.344 3.007.984 5.553 2.967 5.688 1.983.134 3.868-2.195 4.212-5.202.344-3.008-.986-5.554-2.967-5.688zM56.453 84.26c-2.153.084-3.842 2.773-3.775 6.006.068 3.233 1.868 5.785 4.02 5.7 2.154-.085 3.843-2.773 3.775-6.006-.067-3.233-1.867-5.786-4.02-5.7zM87.459 79.936c-1.975.217-3.192 2.818-2.719 5.807.474 2.989 2.46 5.237 4.434 5.02 1.976-.217 3.193-2.818 2.718-5.807-.473-2.99-2.457-5.237-4.433-5.02zM97.678 77.093c.344 3.007 2.229 5.336 4.212 5.202 1.983-.135 3.311-2.68 2.967-5.688-.344-3.008-2.23-5.337-4.212-5.202-1.982.134-3.31 2.68-2.967 5.688zM72.075 84.26c-2.153-.086-3.953 2.467-4.02 5.7-.068 3.233 1.62 5.921 3.774 6.006 2.153.085 3.953-2.467 4.02-5.7.069-3.233-1.621-5.923-3.774-6.007z"/>
          <path d="M63.527 1.075c-16.46 0-28.827 18.564-34.733 29.63a121.073 121.073 0 00-3.753 7.718c-.098.082-.189.223-.255.491l-.045.179c-6.096 13.884-9.971 29.262-9.971 40.435 0 26.102 21.416 46.63 48.757 46.546 24.775-.075 48.53-21.578 48.757-46.546.122-13.488-5.486-33.258-13.874-48.974C92.506 19.487 79.987 1.075 63.527 1.075zm.151 1.475c8.983 0 18.427 7.344 24.427 14.699-5.366 4.738-15.089 8.438-24.519 8.557-9.625.12-18.953-4.651-23.986-9.825 5.94-7.135 15.306-13.43 24.078-13.43zm-.151 121.446c-19.364 0-36.096-12.163-43.23-27.998 7.829 9.72 24.715 19.52 43.279 19.52 18.324 0 34.684-8.959 42.636-18.541-6.923 15.631-23.475 27.02-42.685 27.02zm38.72-61.7l4.153-8.472c.828 2.69 1.67 5.738 2.283 8.35-1.024 1.095-1.74 3.398-1.111 5.579.431 1.494 1.427 3.034 2.456 3.972.358 2.765.888 5.69.888 8.105 0 2.825-1.26 5.274-1.774 7.937-6.299 10.95-24.583 22.795-45.566 22.795-21.08 0-39.988-12.181-46.22-23.174-.494-2.616-1.066-5.09-1.066-7.86 0-2.465.197-5.147.57-7.974 1.037-.998 2.082-2.457 2.469-3.801.634-2.199-.097-4.592-1.14-5.68.817-3.487 1.39-7.455 2.588-11.056l5.832 11.279c.255.74 1.09 1.203 1.865 1.03l6.654-1.476c.776-.172 1.749.225 2.173.886l5.502 8.572a1.404 1.404 0 001.963.407l6.716-4.452c.66-.437 1.67-.365 2.258.162l9.448 8.472c.587.527 1.544.53 2.136.009l9.614-8.488c.591-.522 1.607-.593 2.27-.16l6.805 4.464c.661.434 1.544.25 1.97-.41l5.543-8.576c.427-.66 1.401-1.056 2.176-.884l6.678 1.478c.774.168 1.61-.293 1.867-1.034zm-3.808-9.601c-.26.74-1.102 1.225-1.885 1.084l-5.323-.96c-.782-.14-1.741.293-2.145.967l-3.702 6.215a1.47 1.47 0 01-1.977.517l-5.877-3.314c-.69-.39-1.733-.284-2.329.233l-9.799 8.491c-.595.517-1.56.513-2.151-.01l-9.586-8.47c-.591-.522-1.63-.63-2.32-.242l-5.877 3.315a1.47 1.47 0 01-1.977-.519l-3.703-6.215c-.401-.674-1.361-1.107-2.144-.966l-5.323.96c-.782.14-1.626-.345-1.885-1.084l-5.444-11.778c1.3-3.074 2.788-6.235 4.296-9.125.951-.747 2.414-1.285 2.958-2.184.69-1.14.56-2.948.627-4.167a87.66 87.66 0 014.47-6.606c4.794 6.135 15.033 11.683 26.24 11.683 10.768 0 21.55-4.456 26.875-10.219 1.226 1.679 2.134 3.594 3.168 5.239-.112 1.374.277 3.272 1.124 4.672.789 1.302 2.11 2.514 3.326 3.172a124.128 124.128 0 014.346 9.419z"/>
        </g>`,
    `<g class="egg-spot" transform="matrix(.23542 0 0 .22728 -.969 1.67)">
          <ellipse cx="269.74" cy="104.67" rx="11.897" ry="16.169"/>
          <ellipse cx="109.885" cy="255.069" rx="10.067" ry="10.374"/>
          <ellipse cx="173.031" cy="270.932" rx="10.979" ry="12.203"/>
          <circle cx="256.318" cy="279.782" r="13.728"/>
          <ellipse cx="328.926" cy="275.204" rx="11.285" ry="12.204"/>
          <ellipse cx="385.365" cy="263.301" rx="10.985" ry="10.679"/>
          <ellipse cx="443.633" cy="247.138" rx="10.68" ry="12.815"/>
          <ellipse cx="116.599" cy="426.215" rx="11.897" ry="15.557"/>
          <ellipse cx="218.185" cy="446.956" rx="13.421" ry="15.558"/>
          <ellipse cx="343.571" cy="439.33" rx="11.897" ry="15.258"/>
          <ellipse cx="443.333" cy="417.672" rx="7.932" ry="11.291"/>
          <path d="M273.057 0c-70.778 0-122.373 76.64-147.771 124.982-29.056 60.924-62.074 159.143-59.872 218.029 4.08 109.096 90.066 203.115 207.649 203.115 117.584 0 204.702-115.153 206.515-204.054 1.202-58.917-27.641-146.779-57.15-212.628C397.018 81.102 343.834 0 273.057 0zM129.543 128.091c4.976-9.474 11.077-20.276 18.165-31.45-.24 1.186-.404 2.422-.404 3.726 0 7.417 4.094 13.427 9.149 13.427 5.055 0 9.149-6.01 9.149-13.427s-4.094-13.42-9.15-13.42c-1.021 0-1.988.3-2.906.758 7.289-10.826 15.465-21.75 24.456-31.965 6.07 10.251 19.063 34.946 25.544 35.809 9.149 1.224 53.69-43.317 69.554-42.705 15.863.606 45.147 39.045 56.744 36.61 11.592-2.442 8.489-45.436 14.59-49.096.478-.288 1.322-.367 2.319-.361 13.115 11.157 25 24.547 35.472 38.427-1.12-.532-2.338-.845-3.616-.845-5.393 0-9.762 5.19-9.762 11.592 0 6.4 4.369 11.59 9.762 11.59 5.392 0 9.76-5.188 9.76-11.59 0-.961-.127-1.88-.311-2.772 11.842 16.708 21.615 33.586 28.966 47.583 1.542 2.938 3.035 5.942 4.535 8.94-1.824 6.892-4.37 12.339-8.177 12.76-10.985 1.225-53.642-24.117-64.622-22.287-10.98 1.83-64.063 57.351-75.661 57.962-11.591.606-59.187-54.303-72.002-55.527-12.815-1.218-50.643 45.766-61.622 44.548-4.737-.526-15.612-15.877-20.966-25.852 3.544-7.637 7.203-15.147 11.034-22.435zm342.379 208.564c.067 2.29.17 4.615.17 6.83 0 48.084-19.089 90.753-48.343 124.003-9.302-7.771-19.284-15.061-24.345-15.35-10.979-.605-57.963 58.576-70.166 60.404-12.209 1.83-44.541-42.1-54.915-42.1-10.373 0-50.031 42.713-61.01 43.324-10.986.605-57.357-59.799-66.506-61.01-4.798-.643-14.443 6.768-23.868 15.367-25.379-28.578-43.165-64.488-47.382-104.734 6.867-8.715 15.876-17.407 20.607-17.407 9.762 0 50.031 61.016 65.894 62.234 15.863 1.217 40.882-50.645 54.915-50.037 14.033.611 64.676 55.525 78.097 56.139 13.428.605 53.69-57.969 62.234-61.018 8.543-3.047 45.147 42.1 56.133 41.488 10.979-.611 39.657-65.895 46.977-67.111 2.73-.458 7.983 4.045 11.508 8.978zm-4.634-64.883c-151.226 66.99-317.58 37.062-390.5 5.71C81.41 254.867 88.098 231 96.44 207.26c34.223 13.317 97.021 30.722 175.443 30.722 78.097 0 140.277-20.323 174.708-36.835 8.67 23.733 15.685 47.742 20.698 70.625z"/>
        </g>`,
    '<path class="egg-spot" d="M61.892 123.597c-3.004 0-3.004-6.067 0-6.067 4.507 0 4.507 6.067 0 6.067zM107.53 98.87c-5.809 5.263-12.104 9.592-19.742 12.159-1.843.618-2.627-2.31-.8-2.926 8.99-3.02 16.267-8.508 22.483-15.45a45.794 45.794 0 01-1.94 6.217zm2.594-29.112c.75 4.411 1.16 8.57 1.16 12.273 0 1.306-.066 2.592-.168 3.868-8.319 12.886-22.583 21.18-39.21 21.264-4.843.024-4.84-7.56 0-7.585 18.545-.095 33.88-12.313 38.218-29.82zm-7.511-26.22a144.69 144.69 0 012.95 8.16c-16.047 17.408-41.682 21.95-63.335 10.126-4.262-2.327-.47-8.875 3.791-6.548 19.716 10.766 43.202 5.612 56.594-11.738zm-12.18 33.292c-3.004 0-3.004-6.068 0-6.068 4.506 0 4.506 6.068 0 6.068zm-10.515 5.057c-3.004 0-3.004-6.067 0-6.067 4.507 0 4.507 6.067 0 6.067zm-13.52 1.516c-3.004 0-3.004-6.067 0-6.067 4.507 0 4.507 6.067 0 6.067zm13.52-38.93c4.506 0 4.506 6.066 0 6.066-3.004 0-3.004-6.067 0-6.067zm.374-36.032a51.532 51.532 0 014.284 4.256c-2.857 2.724-6.423 4.643-10.363 5.415-3.785.742-5.399-5.105-1.597-5.85 2.965-.58 5.569-1.878 7.676-3.821zm-.374 20.863c-4.506 0-4.506-6.066 0-6.066 3.004 0 3.004 6.066 0 6.066zM50.761 5.183c.696.196 1.399.37 2.111.513 3.207.639 16.318 2.212 19.47-2.56.85.392 1.68.827 2.486 1.304-2.084 3.173-6.677 4.57-10.83 4.925-5.653.482-11.02-.308-16.122-2.08a36.332 36.332 0 012.885-2.102zM61.892 19.95c-4.506 0-4.506-6.067 0-6.067 3.005 0 3.005 6.067 0 6.067zM39.51 15.902c8.533 6.87 18.806 9.936 29.71 8.974 2.788-.246 2.765 4.306 0 4.55-11.863 1.047-23.088-2.501-32.37-9.953a78.876 78.876 0 012.66-3.57zm-5.613 8.049c14.332 10.682 32.796 13.816 49.991 8.403 2.782-.876 3.963 3.517 1.2 4.388-18.404 5.794-38.091 2.339-53.491-8.898a105.886 105.886 0 012.3-3.893zm-4.62 8.25C40.312 40.972 53.68 45.351 67.91 44.904c3.877-.121 3.865 5.946 0 6.067-15.125.475-29.417-4.173-41.3-13.203.85-1.897 1.745-3.751 2.667-5.569zm-9.47 24.081c8.081 10.025 21.692 14.659 34.08 17.295 1.895.403 1.253 3.367-.646 2.964-12.477-2.655-25.89-7.346-34.403-16.76.307-1.17.63-2.337.968-3.499zm-4.165 22.003C28.32 86.51 42.837 92.115 57.92 93.318c17.233 1.374 36.935-.255 44.503-18.59.734-1.778 3.643-1 2.898.807-6.955 16.85-23.091 21.609-39.99 21.202-17.816-.43-34.804-5.602-49.82-14.959.005-1.122.056-2.295.132-3.493zm27.813 32.91c2.59.438 2.67 3.27 1.269 4.844 2.773.652 5.578 1.201 8.4 1.726 2.046.38 1.176 3.587-.858 3.208-8.042-1.496-14.683-3.464-21.82-7.866-.427-.262-.82-.53-1.227-.796-4.75-5.365-10.392-11.288-12.237-18.466 6.58 8.788 15.15 15.434 26.473 17.35z"/>',
    '<path class="egg-spot" d="M105.568 53.032c.12.79.139 1.573.057 2.346-.148 1.372-.596 2.605-1.33 3.624-1.087 1.507-2.505 2.24-4.068 2.427a4.075 4.075 0 01-1.973-.26c-1.248-.478-2.195-1.325-2.966-2.466a7.18 7.18 0 01-1.224-3.64c-.04-.742.068-1.44.362-2.104.539-1.21 1.67-2.096 3.045-2.155.838-.034 1.648.238 2.376.867.496.427.871.97 1.138 1.596.093.22.16.445.175.683.05.748-.392 1.397-1.042 1.496-.614.094-1.24-.322-1.52-.986-.038-.09-.075-.183-.122-.267-.145-.265-.359-.396-.625-.4a.949.949 0 00-.45.101c-.425.217-.652.574-.65 1.105 0 .413.077.812.236 1.198.346.84.877 1.452 1.62 1.862.344.188.706.286 1.09.283.202-.001.396-.044.592-.097a3.297 3.297 0 001.312-.681c.656-.562 1.074-1.347 1.26-2.298.196-1.003.111-2.037-.22-3.06a6.478 6.478 0 00-.847-1.711c-.713-1.022-1.626-1.74-2.689-2.087-1.3-.422-2.504-.342-3.608.097-.32.128-.623.29-.906.483-.51.345-.932.777-1.31 1.256-.83 1.053-1.29 2.232-1.428 3.583-.118 1.146.013 2.238.323 3.348a9.94 9.94 0 00.61 1.626c.73 1.521 1.69 2.772 3.076 3.729a7.606 7.606 0 003.699 1.348c.569.052 1.147.02 1.728-.087a6.924 6.924 0 002.496-.99c1.89-1.209 3.316-3.157 3.958-5.76.05-.208.086-.42.124-.631.447 1.579.862 3.166 1.245 4.76-.377.694-.792 1.36-1.278 1.963-1.192 1.478-2.597 2.536-4.106 3.2-1.16.51-2.32.751-3.467.766a8.222 8.222 0 01-1.26-.08 9.1 9.1 0 01-1.18-.243c-.743-.207-1.446-.5-2.116-.864-1.57-.85-2.814-2.008-3.855-3.432a14.198 14.198 0 01-2.325-4.903 12.596 12.596 0 01-.284-1.438 12.575 12.575 0 01-.12-1.536 10.844 10.844 0 01.532-3.568 9.976 9.976 0 011.687-3.125c.694-.873 1.527-1.59 2.574-2.094a6.948 6.948 0 011.458-.509 7.574 7.574 0 012.823-.101 7.926 7.926 0 013.371 1.341c1.598 1.106 2.804 2.688 3.513 4.6.233.61.39 1.242.488 1.885zM48.65 7.772c.266-.6.718-1.236 1.346-1.87 3.46-2.352 6.607-3.61 9.276-4.227a23.43 23.43 0 018.17.136c2.372.462 4.368 1.268 5.86 2.248 2.758 1.841 3.191 3.704 1.836 4.426-.833.475-2.168.562-4.04.475-1.276-.057-2.645-.194-4.111-.33a18.632 18.632 0 01-1.534-.197c-1.596-.288-2.852-.796-2.824-1.423.025-.586 1.347-1.114 3.186-1.036.246.012.494.026.734.034.746.025 1.219-.057 1.436-.268.126-.125.162-.269.09-.429-.217-.486-.992-.935-2.457-1.191a14.09 14.09 0 00-3.482-.161c-2.54.202-4.403.91-5.56 1.79-.537.409-.799.814-.813 1.189-.008.198.09.37.203.54.276.415.753.758 1.454 1.05 1.17.488 2.722.77 4.563 1.075 1.941.323 3.92.631 5.982 1.029 1.236.238 2.437.493 3.619.75 2.304.502 4.264.991 5.955 1.14 2.058.188 3.45-.02 4.178-.962.208-.273.338-.61.378-1.008.034-.332-.005-.709-.102-1.112 1.994 1.807 4.058 3.992 6.169 6.63-.22.68-.583 1.198-1.059 1.544-.415.304-.907.473-1.468.539-.966.115-2.086-.076-3.387-.442-1.503-.42-3.151-1.048-5.067-1.759-2.84-1.046-5.779-2.005-9.07-2.695a61.427 61.427 0 00-3.181-.578 69.678 69.678 0 00-3.906-.476c-2.302-.218-4.432-.311-6.396-.484-2.89-.24-4.855-.654-5.865-1.861-.434-.516-.494-1.219-.113-2.085zm-5.43 3.907c.073.38.198.726.376 1.03.29.498.742.856 1.3 1.12.83.39 1.867.561 3.104.61 2.932.115 6.292-.201 10.177-.08a61.17 61.17 0 015.552.41c.879.108 1.754.24 2.626.397 1.103.198 2.189.43 3.27.718 1.391.374 2.758.832 4.092 1.37 1.052.424 2.067.893 3.047 1.332.645.288 1.28.594 1.907.918 2.325 1.193 4.318 2.495 6.15 3.4 1.693.841 3.127 1.226 4.433.96a3.874 3.874 0 001.219-.47c.429-.252.816-.615 1.155-1.098.171-.247.328-.53.47-.838a102.238 102.238 0 014.147 6.774c-.33.893-.707 1.689-1.122 2.343-.57.918-1.197 1.562-1.841 1.977-1.986.747-3.914.22-5.51-.773-1.49-1.131-2.963-2.8-4.696-4.584-1.41-1.462-2.94-2.888-4.64-4.116a35.453 35.453 0 00-4.584-2.8 26.92 26.92 0 00-5.41-2.058c-.802-.21-1.612-.39-2.428-.54a38.275 38.275 0 00-3.081-.438 41.428 41.428 0 00-2.88-.187c-3.51-.104-6.83.255-10.105.907-2.386.474-4.531 1.06-6.482 1.377-1.495.242-2.789.279-3.878-.116a3.492 3.492 0 01-1.092-.636 3.673 3.673 0 01-.579-.654c1.803-2.408 3.574-4.473 5.304-6.255zM34.52 22.85c.125.138.259.268.4.389.35.298.733.514 1.12.706a5.096 5.096 0 002.037.52 6.888 6.888 0 001.749-.143c.974-.198 1.998-.59 3.119-1.092 1.553-.698 3.204-1.565 5.01-2.321a30.323 30.323 0 014.813-1.598 19.387 19.387 0 011.793-.35c.762-.105 1.276.077 1.52.483.313.547-.075 1.271-.77 1.8a2.354 2.354 0 00-.106.088c-.202.108-.398.22-.594.34-.016.002-.033.004-.047.01a3.611 3.611 0 01-.586.193c-.712.182-1.412.404-2.098.664-2.026.767-3.961 1.904-5.772 3.298-2.13 1.628-3.949 3.5-5.729 4.962-1.427 1.171-2.778 1.73-4.171 1.974-1.07.114-1.127.101-1.7.052-.264-.068-.534-.006-.797-.078-.464-.122-.928-.29-1.382-.613-.698-.496-1.369-1.221-1.973-2.224a106.056 106.056 0 014.164-7.06zM19.112 58.372c.272-.277.508-.614.705-1.023.174-.365.284-.755.326-1.155a1.3 1.3 0 00-.19-.85c.294-1.004.493-2.058.81-3.054.69.463 1.308 1.29 1.54 2.202.175.697.192 1.403.08 2.131a7.898 7.898 0 01-.247 1.112 7.455 7.455 0 01-1.16 2.327c-.768 1.026-1.649 1.736-2.744 2.042-.014.005-.029.003-.044.006.288-1.25.596-2.497.924-3.738zm-1.46 6.214a5.663 5.663 0 002.44-.818c1.26-.76 2.196-1.868 2.966-3.275.268-.491.497-1.002.683-1.528.377-1.056.6-2.12.624-3.27.028-1.358-.233-2.586-.817-3.74-.265-.525-.572-1.01-.963-1.42a5.056 5.056 0 00-.774-.654c-.057-.037-.117-.061-.175-.095.323-.945.655-1.887.998-2.825.268.147.61.337.85.524.822.64 1.443 1.462 1.932 2.42.532 1.042.89 2.14 1.083 3.322.2 1.219.21 2.402.068 3.603-.06.506-.148 1.008-.262 1.505-.109.472-.235.934-.39 1.386-.58 1.699-1.36 3.17-2.462 4.54-1.021 1.269-2.185 2.245-3.589 2.876-.6.269-1.219.464-1.862.57a6.2 6.2 0 01-.95.076c.176-1.049.378-2.116.6-3.197zm-1.355 8.803c.105-1.076.243-2.182.403-3.307.186.005.373.011.557.005.356-.014.712-.037 1.06-.087 2.067-.3 3.76-1.343 5.277-2.88 1.153-1.166 2.045-2.475 2.794-3.939.3-.589.569-1.194.803-1.811.244-.637.455-1.285.633-1.942a17.2 17.2 0 00.636-4.745c-.013-1.88-.297-3.675-1.021-5.44a9.662 9.662 0 00-1.263-2.213 8.576 8.576 0 00-.864-.966 9.362 9.362 0 00-.886-.751 9.394 9.394 0 00-.953-.621c.37-.96.75-1.914 1.14-2.865.352.184.775.432 1.093.658.196.14.376.298.565.447.04.032.085.064.127.095.301.29.602.582.903.87.03.04.06.08.094.116.266.27.493.57.716.874.346.475.651.977.913 1.5 1.196 2.408 1.623 4.892 1.707 7.49a21.403 21.403 0 01-.564 5.602 22.643 22.643 0 01-.462 1.673 22.314 22.314 0 01-1.956 4.46c-1.524 2.609-3.508 5.033-6.165 6.55a9.555 9.555 0 01-1.816.785 8.612 8.612 0 01-1.111.27c-.215.036-.43.07-.646.108-.038.005-.074.02-.11.03l-1.002.071c-.101-.007-.202-.021-.302-.021-.1 0-.2-.012-.3-.016zm17.34 40.672c-.02.022-.06.023-.08.042a45.521 45.521 0 01-6.603-6.128c.71.118 1.511.492 2.443 1.086.83.528 1.651 1.17 2.51 1.88.3.25.587.506.852.794.829.898 1.274 1.859.877 2.326zm9.526 5.068c-.025.194-.09.375-.172.55a48.278 48.278 0 01-5.208-2.72c.004-.02.012-.034.014-.053.097-.452.039-.958-.184-1.531-.37-.955-1.093-1.93-2.015-3.006-.974-1.136-2.019-2.225-3.131-3.358a79.192 79.192 0 00-1.995-1.974c-1.303-1.238-2.478-2.276-3.677-2.946-1.31-.735-2.415-1.002-3.389-.72a43.48 43.48 0 01-3.08-5.364c.36-.237.736-.422 1.134-.502.483-.098.978-.08 1.487.032.877.19 1.756.641 2.68 1.286 1.067.745 2.117 1.694 3.247 2.84 1.674 1.691 3.262 3.443 5.046 5.282.574.588 1.142 1.176 1.719 1.76.71.718 1.412 1.42 2.107 2.122 1.24 1.251 2.393 2.413 3.374 3.606 1.452 1.746 2.235 3.236 2.043 4.696zm10.29 2.402a5.025 5.025 0 01-.666 1.313 50.407 50.407 0 01-5.63-1.535c.178-.283.315-.589.406-.908.15-.521.133-1.06.004-1.605-.192-.807-.623-1.605-1.238-2.423-1.464-1.944-3.44-3.72-5.597-5.792-1.022-.98-2.044-1.95-3.077-2.96-.485-.473-.966-.95-1.443-1.43a77.103 77.103 0 01-1.787-1.846 65.996 65.996 0 01-2.206-2.51c-.568-.676-1.116-1.354-1.684-1.988-.374-.417-.745-.837-1.112-1.26-1.368-1.57-2.598-3.04-3.906-4.162-1.21-1.038-2.402-1.673-3.669-1.83a4.928 4.928 0 00-1.255.002c-.47.06-.937.207-1.401.448a4.91 4.91 0 00-.726.469 43.185 43.185 0 01-1.604-5.854c.433-.397.873-.74 1.311-1.013.723-.458 1.43-.72 2.108-.831.437-.071.87-.114 1.27-.032.054.012.111-.001.168-.002l1.31.345c.05.028.1.061.153.087.234.114.475.205.704.339.49.289.954.656 1.402 1.083 1.163 1.112 2.165 2.602 3.224 4.272.865 1.365 1.732 2.783 2.692 4.153a149.963 149.963 0 002.499 3.46 42.515 42.515 0 002.893 3.49c.438.472.883.933 1.335 1.389a81.2 81.2 0 001.716 1.682 90.53 90.53 0 001.636 1.512c2.016 1.82 4.043 3.452 6.16 5.124 1.544 1.216 2.99 2.349 4.162 3.566.899.933 1.566 1.877 1.874 2.907.114.382.168.772.164 1.17-.006.397-.07.791-.19 1.17zm10.806.326c-.251.685-.657 1.405-1.178 2.132a53.151 53.151 0 01-5.868-.399c.647-.992.95-1.99.957-2.908a5.972 5.972 0 00-.128-1.218 6.009 6.009 0 00-.69-1.851 7.364 7.364 0 00-.946-1.303c-.6-.664-1.343-1.267-2.201-1.849-1.196-.809-2.551-1.54-3.937-2.329a54.613 54.613 0 01-3.5-2.13 21.21 21.21 0 01-1.188-.841c-.485-.376-.659-.798-.545-1.234.16-.579.824-.89 1.537-.847l.113.003c.178.045.357.087.537.125.011.009.019.017.032.021.158.062.3.142.44.233.499.327 1.01.637 1.533.928 1.541.865 3.226 1.602 4.981 2.28 2.057.8 4.08 1.48 5.826 2.375 1.399.715 2.538 1.55 3.354 2.604.07.088.161.165.243.246l.583.986c.009.047.01.096.026.137.088.24.177.48.262.719.15.422.237.876.264 1.358.045.842-.107 1.766-.507 2.762zm19.873-35.936c-.082.902-.213 1.8-.393 2.69-.547 2.703-1.504 5.215-2.922 7.5-2.477 3.985-5.803 6.712-9.974 8.166a16.44 16.44 0 01-2.805.703c-.612.098-1.225.247-1.844.26-.082.002-.164.092-.244.092H63.9c-.087 0-.172-.086-.258-.092-.388-.031-.778-.081-1.164-.128a17.877 17.877 0 01-2.464-.493 16.808 16.808 0 01-5.847-2.875c-1.462-1.11-2.734-2.45-3.863-3.962a16.113 16.113 0 01-2.286-4.268 24.412 24.412 0 01-1.38-7.482 20.572 20.572 0 01.63-5.487c.809-3.12 2.255-5.825 4.342-8.106 1.524-1.664 3.277-2.946 5.262-3.84a14.113 14.113 0 014.742-1.215 14.015 14.015 0 013.595.202 14.84 14.84 0 013.286 1.03c2.484 1.104 4.546 2.826 6.149 5.197 1.726 2.553 2.674 5.433 2.88 8.61.056.847.037 1.693-.04 2.537a16.14 16.14 0 01-.447 2.617c-.523 2.018-1.4 3.822-2.66 5.396a13.154 13.154 0 01-4.369 3.532c-1.541.784-3.155 1.213-4.852 1.252a11.192 11.192 0 01-5.802-1.483 10.33 10.33 0 01-3.352-3.027c-1.347-1.903-2.052-4.078-2.225-6.475-.055-.77-.036-1.54.041-2.308a13.13 13.13 0 01.575-2.76c.52-1.593 1.306-2.996 2.423-4.16 1.645-1.72 3.622-2.58 5.865-2.724a6.11 6.11 0 012.835.5c1.793.768 3.147 2.1 4.092 3.945a8.965 8.965 0 01.834 5.738c-.208 1.117-.645 2.105-1.35 2.942-1.294 1.534-3.305 2.23-5.169 1.768-1.138-.282-2.075-.93-2.78-1.968-.48-.705-.765-1.504-.905-2.37a2.62 2.62 0 01-.006-.912c.178-.96.963-1.69 1.9-1.67.885.018 1.654.728 1.823 1.701.024.131.044.264.08.392.108.398.352.637.716.725.216.054.442.054.658.002.666-.162 1.115-.588 1.287-1.332.133-.58.142-1.166.018-1.75-.267-1.27-.916-2.244-1.908-2.938a3.175 3.175 0 00-1.508-.569 3.542 3.542 0 00-.853.036 4.98 4.98 0 00-1.956.678c-1.014.615-1.743 1.525-2.243 2.667-.529 1.204-.74 2.48-.688 3.814.03.8.16 1.578.4 2.33.467 1.467 1.256 2.667 2.438 3.528 1.441 1.05 3.035 1.516 4.757 1.472a7.224 7.224 0 001.491-.198c.887-.211 1.715-.589 2.506-1.074 1.736-1.064 3.033-2.585 3.83-4.605.674-1.708.884-3.498.728-5.345a12.402 12.402 0 00-.539-2.725c-.81-2.558-2.22-4.606-4.29-6.066-1.67-1.18-3.511-1.8-5.483-1.963a9.843 9.843 0 00-2.47.117 10.695 10.695 0 00-3.458 1.218c-2.588 1.45-4.5 3.636-5.767 6.515a14.91 14.91 0 00-1.153 4.299c-.084.703-.12 1.41-.11 2.118.013.896.1 1.784.241 2.666.183 1.148.454 2.268.837 3.353.303.857.67 1.68 1.16 2.43.322.493.67.97 1.04 1.431 1.379 1.712 3.004 3.048 4.911 3.958 1.765.84 3.617 1.244 5.53 1.33.632.028 1.264.02 1.895-.02a14.461 14.461 0 002.096-.291c1.362-.289 2.67-.78 3.88-1.458 2.708-1.517 4.806-3.749 6.31-6.662 1.337-2.594 2-5.4 2.097-8.376a22.672 22.672 0 00-.197-3.821 21.065 21.065 0 00-.812-3.613c-.936-2.912-2.412-5.438-4.481-7.521-2.732-2.753-5.962-4.288-9.621-4.738a23.378 23.378 0 00-1.864-.14 20.186 20.186 0 00-3.047.096c-.785.085-1.56.216-2.329.41a14.465 14.465 0 00-3.532 1.393c-1.566.872-2.938 2.03-4.155 3.42-1.05 1.2-1.952 2.524-2.74 3.941-.286.513-.55 1.041-.822 1.563-.348.666-.868 1.04-1.564 1.09-.924.067-1.736-.622-1.953-1.58-.014-.045-.048-.095-.048-.145v-.746c0-.016.025-.032.028-.049.042-.226.124-.437.225-.64.355-.72.734-1.427 1.137-2.122 1.17-2.01 2.524-3.847 4.143-5.437 1.898-1.866 4.045-3.26 6.452-4.162 3.056-.938 6.07-1.64 8.43-1.44.388.029.778.157 1.166.186.682.048 1.36.19 2.034.309 1.175.21 2.327.551 3.454.978 5.168 1.958 9.34 6.044 11.738 11.477 1.32 2.994 2.014 6.173 2.144 9.496a26.51 26.51 0 01-.09 3.515zm24.524-16.533c-1.764 1.572-3.66 2.566-5.556 3.037a11.568 11.568 0 01-4.341.23c-.117-.015-.239-.016-.357-.026l-1.167-.232c-.04-.016-.082-.036-.126-.05l-.746-.21a11.642 11.642 0 01-1.27-.444 12.552 12.552 0 01-2.036-1.07c-2.93-1.934-4.958-4.659-6.422-7.493a20.984 20.984 0 01-1.739-4.745 19.406 19.406 0 01-.484-3.106c-.1-1.405-.053-2.806.19-4.283.425-2.565 1.237-4.964 2.943-7.163.378-.484.8-.934 1.26-1.344.301-.267.604-.529.951-.754.045-.03.083-.067.124-.1l1.17-.72.163-.073c.238-.117.471-.244.718-.351.545-.236 1.11-.425 1.688-.566 1.538-.378 3.24-.432 5.085-.053 1.297.267 2.603.754 3.885 1.423a139.234 139.234 0 011.85 4.652 8.684 8.684 0 00-1.12-1c-.413-.3-.842-.578-1.287-.832-1.64-.93-3.32-1.41-4.937-1.45a8.988 8.988 0 00-4.015.836c-.39.179-.769.38-1.134.603a9.258 9.258 0 00-2.897 2.815c-1.072 1.638-1.631 3.372-1.882 5.238-.224 1.663-.147 3.22.154 4.814.128.686.295 1.364.5 2.031.2.656.44 1.3.718 1.929.698 1.573 1.58 3.016 2.788 4.36 1.59 1.768 3.448 3.077 5.838 3.705.403.106.819.186 1.234.257.681.115 1.375.182 2.089.178a10.054 10.054 0 001.679-.14 9.438 9.438 0 002.725-.908c1.26-.642 2.436-1.592 3.48-2.809.481-.56.919-1.171 1.323-1.815.27 1.27.52 2.53.731 3.763a16.752 16.752 0 01-1.77 1.866z"/>',
];
// Value displayed at bottom of image
BreedingController.displayValue = ko.observable('attack');
// Applied regional debuff
BreedingController.regionalAttackDebuff = ko.observable(-1);
// Queue size limit setting
BreedingController.queueSizeLimit = ko.observable(-1);
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Saveable.d.ts" />
/// <reference path="../../declarations/breeding/EggType.d.ts" />
class Egg {
    constructor(type = EggType.None, totalSteps = 0, pokemon = 0, // MissingNo.
    steps = 0, shinyChance = GameConstants.SHINY_CHANCE_BREEDING, notified = false) {
        this.type = type;
        this.totalSteps = totalSteps;
        this.pokemon = pokemon;
        this.shinyChance = shinyChance;
        this.notified = notified;
        this.saveKey = 'egg';
        this.defaults = {};
        this.steps = ko.observable(steps);
        this.partyPokemon = ko.observable();
        this.init();
    }
    init(initial = false) {
        this.progress = ko.pureComputed(function () {
            return this.steps() / this.totalSteps * 100;
        }, this);
        this.progressText = ko.pureComputed(function () {
            return `${this.steps().toLocaleString('en-US')} / ${this.totalSteps.toLocaleString('en-US')}`;
        }, this);
        this.stepsRemaining = ko.pureComputed(function () {
            return this.totalSteps - this.steps();
        }, this);
        if (this.pokemon) {
            const dataPokemon = PokemonHelper.getPokemonById(this.pokemon);
            this.pokemonType1 = dataPokemon.type1;
            this.pokemonType2 = dataPokemon.type2 === PokemonType.None ? dataPokemon.type1 : dataPokemon.type2;
        }
        else {
            this.pokemonType1 = PokemonType.Normal;
            this.pokemonType2 = PokemonType.Normal;
        }
        this.setPartyPokemon();
    }
    setPartyPokemon() {
        var _a;
        if (!this.partyPokemon() && ((_a = App.game) === null || _a === void 0 ? void 0 : _a.party)) {
            this.partyPokemon(this.type !== EggType.None ? App.game.party.getPokemon(PokemonHelper.getPokemonById(this.pokemon).id) : null);
        }
    }
    isNone() {
        return this.type === EggType.None;
    }
    updateShinyChance(steps, multiplier) {
        const stepsChance = GameConstants.SHINY_CHANCE_BREEDING / multiplier.getBonus('shiny');
        const newChance = ((this.shinyChance * this.steps()) + (stepsChance * steps)) / (this.steps() + steps);
        this.shinyChance = newChance;
    }
    addSteps(amount, multiplier, helper = false) {
        if (this.isNone() || this.notified) {
            return;
        }
        if (!+amount) {
            amount = 1;
        }
        this.updateShinyChance(amount, multiplier);
        this.steps(this.steps() + amount);
        if (this.canHatch() && !helper) {
            if (this.type == EggType.Pokemon) {
                Notifier.notify({
                    message: `${PokemonHelper.getPokemonById(this.pokemon).name} is ready to hatch!`,
                    type: NotificationConstants.NotificationOption.success,
                    sound: NotificationConstants.NotificationSound.Hatchery.ready_to_hatch,
                    setting: NotificationConstants.NotificationSetting.Hatchery.ready_to_hatch,
                });
            }
            else {
                Notifier.notify({
                    message: 'An egg is ready to hatch!',
                    type: NotificationConstants.NotificationOption.success,
                    sound: NotificationConstants.NotificationSound.Hatchery.ready_to_hatch,
                    setting: NotificationConstants.NotificationSetting.Hatchery.ready_to_hatch,
                });
            }
            this.notified = true;
        }
    }
    canHatch() {
        return !this.isNone() && this.steps() >= this.totalSteps;
    }
    hatch(efficiency = 100, helper = false) {
        if (!this.canHatch()) {
            return false;
        }
        const shiny = PokemonFactory.generateShiny(this.shinyChance, true);
        const partyPokemon = this.partyPokemon();
        // If the party pokemon exist, increase it's damage output
        const pokemonID = PokemonHelper.getPokemonById(this.pokemon).id;
        const gender = PokemonFactory.generateGenderById(pokemonID);
        if (partyPokemon) {
            // Increase attack
            partyPokemon.attackBonusPercent += Math.max(1, Math.round(GameConstants.BREEDING_ATTACK_BONUS * (efficiency / 100)));
            partyPokemon.attackBonusAmount += Math.max(0, Math.round(partyPokemon.proteinsUsed() * (efficiency / 100)));
            // If breeding (not store egg), reset level, reset evolution check
            if (partyPokemon.breeding) {
                if (partyPokemon.evolutions !== undefined) {
                    partyPokemon.evolutions.forEach(evo => evo instanceof LevelEvolution ? evo.triggered = false : undefined);
                }
                partyPokemon.exp = 0;
                partyPokemon.level = 1;
                partyPokemon.breeding = false;
                partyPokemon.level = partyPokemon.calculateLevelFromExp();
                partyPokemon.checkForLevelEvolution();
                if (partyPokemon.pokerus == GameConstants.Pokerus.Infected) {
                    partyPokemon.pokerus = GameConstants.Pokerus.Contagious;
                }
                if (partyPokemon.evs() >= 50 && partyPokemon.pokerus == GameConstants.Pokerus.Contagious) {
                    partyPokemon.pokerus = GameConstants.Pokerus.Resistant;
                }
            }
        }
        if (shiny) {
            Notifier.notify({
                message: `✨ You hatched a shiny ${PokemonHelper.getPokemonById(this.pokemon).name}! ✨`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.General.shiny_long,
                setting: NotificationConstants.NotificationSetting.Hatchery.hatched_shiny,
            });
            App.game.logbook.newLog(LogBookTypes.SHINY, `You hatched a shiny ${PokemonHelper.getPokemonById(this.pokemon).name}! ${App.game.party.alreadyCaughtPokemon(pokemonID, true) ? '(duplicate)' : ''}`);
        }
        else {
            Notifier.notify({
                message: `You hatched ${GameHelper.anOrA(PokemonHelper.getPokemonById(this.pokemon).name)} ${PokemonHelper.getPokemonById(this.pokemon).name}!`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Hatchery.hatched,
            });
        }
        App.game.party.gainPokemonById(pokemonID, shiny, undefined, gender);
        // Capture base form if not already caught. This helps players get Gen2 Pokemon that are base form of Gen1
        const pokemonName = PokemonHelper.getPokemonById(this.pokemon).name;
        const baseFormName = App.game.breeding.calculateBaseForm(pokemonName);
        const baseForm = PokemonHelper.getPokemonByName(baseFormName);
        if (pokemonName != baseFormName && !App.game.party.alreadyCaughtPokemon(baseForm.id)) {
            Notifier.notify({
                message: `You also found ${GameHelper.anOrA(baseFormName)} ${baseFormName} nearby!`,
                type: NotificationConstants.NotificationOption.success,
                sound: NotificationConstants.NotificationSound.General.new_catch,
                setting: NotificationConstants.NotificationSetting.General.new_catch,
            });
            App.game.party.gainPokemonById(baseForm.id, PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_BREEDING));
        }
        // Update statistics
        PokemonHelper.incrementPokemonStatistics(pokemonID, GameConstants.STATISTIC_HATCHED, shiny, gender);
        App.game.oakItems.use(OakItemType.Blaze_Cassette);
        return true;
    }
    toJSON() {
        return {
            totalSteps: this.totalSteps,
            steps: this.steps(),
            shinyChance: this.shinyChance,
            pokemon: this.pokemon,
            type: this.type,
            notified: this.notified,
        };
    }
    fromJSON(json) {
        this.totalSteps = json.totalSteps;
        this.steps = ko.observable(json.steps);
        this.shinyChance = json.shinyChance;
        this.pokemon = json.pokemon;
        this.type = json.type;
        this.notified = json.notified;
        this.init(true);
    }
}
const HatcheryHelperSkills = [
    'energy',
    'efficiency',
    'accuracy',
    'cost',
];
const HatcheryHelperCalcHatchBonus = (hatched) => Math.min(50, Math.floor(Math.sqrt(hatched / 50) * 10) / 10);
const HatcheryHelperMinBonusMap = {};
// Generate our bonus amounts map
(() => {
    let bonus = -1;
    for (let hatched = 0; bonus < 50; hatched++) {
        const b = HatcheryHelperCalcHatchBonus(hatched);
        if (b > bonus) {
            HatcheryHelperMinBonusMap[b] = hatched;
            bonus = b;
        }
    }
})();
class HatcheryHelper {
    // public level: number;
    // public experience: number;
    constructor(name, cost, stepEfficiencyBase, // 1 - 200
    attackEfficiencyBase, unlockRequirement) {
        this.name = name;
        this.cost = cost;
        this.stepEfficiencyBase = stepEfficiencyBase;
        this.attackEfficiencyBase = attackEfficiencyBase;
        this.unlockRequirement = unlockRequirement;
        this.trainerSprite = 0;
        this.hired = ko.observable(false).extend({ boolean: null });
        this.sortOption = ko.observable(SortOptions.id).extend({ numeric: 0 });
        this.sortDirection = ko.observable(false).extend({ boolean: null });
        this.hatched = ko.observable(0).extend({ numeric: 0 });
        this.hatchBonus = ko.observable(0).extend({ numeric: 1 });
        this.stepEfficiency = ko.observable(0).extend({ numeric: 1 });
        this.attackEfficiency = ko.observable(0).extend({ numeric: 1 });
        this.prevBonus = ko.observable(0).extend({ numeric: 0 });
        this.nextBonus = ko.observable(1).extend({ numeric: 0 });
        SeededRand.seed(parseInt(this.name, 36));
        this.trainerSprite = SeededRand.intBetween(0, 118);
        this.tooltip = ko.pureComputed(() => `<strong>${this.name}</strong><br/>
            Cost: <img src="assets/images/currency/${GameConstants.Currency[this.cost.currency]}.svg" width="20px">&nbsp;${(this.cost.amount).toLocaleString('en-US')}/hatch<br/>
            Step Efficiency: ${this.stepEfficiency()}%<br/>
            Attack Efficiency: ${this.attackEfficiency()}%<br/>
            Hatched: ${this.hatched().toLocaleString('en-US')}<br/>`);
        // Update our bonus values
        this.updateBonus();
        // Update our bonus values whenever our hatched amount changes
        this.hatched.subscribe((hatched) => {
            if (hatched >= this.nextBonus() || hatched <= this.prevBonus()) {
                this.updateBonus();
            }
        });
    }
    updateBonus() {
        this.hatchBonus(HatcheryHelperCalcHatchBonus(this.hatched()));
        this.stepEfficiency(this.stepEfficiencyBase + this.hatchBonus());
        this.attackEfficiency(this.attackEfficiencyBase + this.hatchBonus());
        this.prevBonus(HatcheryHelperMinBonusMap[this.hatchBonus()] || 0);
        this.nextBonus(HatcheryHelperMinBonusMap[((this.hatchBonus() * 10) + 1) / 10] || 1);
    }
    isUnlocked() {
        var _a, _b;
        return (_b = (_a = this.unlockRequirement) === null || _a === void 0 ? void 0 : _a.isCompleted()) !== null && _b !== void 0 ? _b : true;
    }
    // String for currency in Notifications and Logs
    currencyString() {
        switch (GameConstants.Currency[this.cost.currency]) {
            case 'money':
                return 'Pokédollars';
            default:
                return `${GameConstants.camelCaseToString(GameConstants.Currency[this.cost.currency])}s`;
        }
    }
    hire() {
        // Check the player has enough Currency to hire this Hatchery Helper
        if (!App.game.wallet.hasAmount(this.cost)) {
            Notifier.notify({
                title: `[HATCHERY HELPER] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
                message: `You don't have enough ${this.currencyString()} to hire me...\nCost: <img src="./assets/images/currency/${GameConstants.Currency[this.cost.currency]}.svg" height="24px"/> ${this.cost.amount.toLocaleString('en-US')}`,
                type: NotificationConstants.NotificationOption.warning,
                timeout: 30 * GameConstants.SECOND,
            });
            return;
        }
        // Hatchery helper is hired
        this.hired(true);
        Notifier.notify({
            title: `[HATCHERY HELPER] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
            message: 'Thanks for hiring me,\nI won\'t let you down!',
            type: NotificationConstants.NotificationOption.success,
            timeout: 30 * GameConstants.SECOND,
        });
    }
    fire() {
        Notifier.notify({
            title: `[HATCHERY HELPER] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
            message: 'Thanks for the work.\nLet me know when you\'re hiring again!',
            type: NotificationConstants.NotificationOption.info,
            timeout: 30 * GameConstants.SECOND,
        });
        this.hired(false);
        return;
    }
    charge() {
        // Charge the player if they can afford it, otherwise notify that they cannot
        if (!App.game.wallet.loseAmount(this.cost)) {
            Notifier.notify({
                title: `[HATCHERY HELPER] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
                message: `It looks like you are a little short on ${this.currencyString()} right now...\nLet me know when you're hiring again!\nCost: <img src="./assets/images/currency/${GameConstants.Currency[this.cost.currency]}.svg" height="24px"/> ${this.cost.amount.toLocaleString('en-US')}`,
                type: NotificationConstants.NotificationOption.danger,
                timeout: 30 * GameConstants.MINUTE,
            });
            this.hired(false);
            App.game.logbook.newLog(LogBookTypes.OTHER, `You ran out of ${this.currencyString()} to pay Hatchery Helper ${this.name}!`);
            return;
        }
    }
    toJSON() {
        return {
            name: this.name,
            hired: this.hired(),
            sortOption: this.sortOption(),
            sortDirection: this.sortDirection(),
            hatched: this.hatched(),
        };
    }
    fromJSON(json) {
        if (!json) {
            return;
        }
        this.hired(json.hired || false);
        this.sortOption(json.sortOption || 0);
        this.sortDirection(json.sortDirection || false);
        this.hatched(json.hatched || 0);
    }
}
class HatcheryHelpers {
    constructor(hatchery) {
        this.hatchery = hatchery;
        this.MAX_HIRES = 3;
        this.requirement = new HatchRequirement(100);
        this.available = ko.pureComputed(() => HatcheryHelpers.list.filter(f => f.isUnlocked()));
        this.hired = ko.pureComputed(() => HatcheryHelpers.list.filter(f => f.hired()));
        this.canHire = ko.pureComputed(() => this.hired().length < Math.min(this.MAX_HIRES, this.hatchery.eggSlots));
    }
    static add(helper) {
        this.list.push(helper);
    }
    isUnlocked() {
        return this.requirement.isCompleted();
    }
    addSteps(amount, multiplier) {
        // Add steps and attack based on efficiency
        this.hired().forEach((helper, index) => {
            // Calculate how many steps should be applied
            const steps = Math.max(1, Math.round(amount * (helper.stepEfficiency() / 100)));
            // Add steps to the egg we are managing
            let egg = this.hatchery.eggList[index]();
            egg.addSteps(steps, multiplier, true);
            // Check if the egg is ready to hatch
            if (egg.canHatch()) {
                const hatched = egg.hatch(helper.attackEfficiency(), true);
                if (hatched) {
                    // Reset egg
                    this.hatchery.eggList[index](new Egg());
                    egg = this.hatchery.eggList[index]();
                }
            }
            // Check if egg slot empty
            if (egg.isNone()) {
                // Get the currently selected region
                const currentRegion = +Settings.getSetting('breedingRegionalAttackDebuffSetting').value;
                // Check if there's a pokemon we can chuck into an egg
                const pokemon = [...App.game.party.caughtPokemon]
                    .sort(PartyController.compareBy(helper.sortOption(), helper.sortDirection(), currentRegion))
                    .find(p => BreedingController.visible(p)());
                if (pokemon) {
                    this.hatchery.gainPokemonEgg(pokemon, true);
                    // Charge the player when we put a pokemon in the hatchery
                    helper.charge();
                    // Increment our hatched counter
                    GameHelper.incrementObservable(helper.hatched, 1);
                }
            }
        });
    }
    toJSON() {
        return this.available().map(f => f.toJSON());
    }
    fromJSON(json) {
        if (!json || !json.length) {
            return;
        }
        HatcheryHelpers.list.forEach(f => {
            const data = json === null || json === void 0 ? void 0 : json.find(_f => _f.name == f.name);
            if (data) {
                f.fromJSON(data);
            }
        });
    }
}
HatcheryHelpers.list = [];
// Note: Mostly Gender-neutral names used as the trainer sprite is (seeded) randomly generated, or check the sprite
HatcheryHelpers.add(new HatcheryHelper('Sam', new Amount(1000, GameConstants.Currency.money), 10, 10, new HatchRequirement(100)));
HatcheryHelpers.add(new HatcheryHelper('Blake', new Amount(10000, GameConstants.Currency.money), 10, 20, new HatchRequirement(500)));
HatcheryHelpers.add(new HatcheryHelper('Jasmine', new Amount(50000, GameConstants.Currency.money), 15, 50, new ItemOwnedRequirement('HatcheryHelperJasmine')));
HatcheryHelpers.add(new HatcheryHelper('Parker', new Amount(1000, GameConstants.Currency.dungeonToken), 15, 25, new HatchRequirement(1000)));
HatcheryHelpers.add(new HatcheryHelper('Dakota', new Amount(10000, GameConstants.Currency.dungeonToken), 50, 50, new ItemOwnedRequirement('HatcheryHelperDakota')));
HatcheryHelpers.add(new HatcheryHelper('Cameron', new Amount(75, GameConstants.Currency.farmPoint), 75, 75, new ItemOwnedRequirement('HatcheryHelperCameron')));
HatcheryHelpers.add(new HatcheryHelper('Justice', new Amount(10, GameConstants.Currency.questPoint), 100, 50, new QuestRequirement(200)));
HatcheryHelpers.add(new HatcheryHelper('Carey', new Amount(20, GameConstants.Currency.questPoint), 50, 125, new ItemOwnedRequirement('HatcheryHelperCarey')));
HatcheryHelpers.add(new HatcheryHelper('Aiden', new Amount(5, GameConstants.Currency.diamond), 100, 100, new UndergroundLayersMinedRequirement(100)));
HatcheryHelpers.add(new HatcheryHelper('Kris', new Amount(10, GameConstants.Currency.diamond), 150, 100, new ItemOwnedRequirement('HatcheryHelperKris')));
HatcheryHelpers.add(new HatcheryHelper('Noel', new Amount(25, GameConstants.Currency.battlePoint), 100, 200, new ItemOwnedRequirement('HatcheryHelperNoel')));
class Discord {
    constructor() {
        this.saveKey = 'discord';
        this.defaults = {
            ID: null,
        };
        this.ID = ko.observable(null);
        this.codes = [
            new DiscordPokemonCode(pokemonMap['Unown (D)'], 700, 'An alternate form of Unown.'),
            new DiscordPokemonCode(pokemonMap['Unown (I)'], 700, 'An alternate form of Unown.'),
            new DiscordPokemonCode(pokemonMap['Unown (S)'], 700, 'An alternate form of Unown.'),
            new DiscordPokemonCode(pokemonMap['Unown (C)'], 700, 'An alternate form of Unown.'),
            new DiscordPokemonCode(pokemonMap['Unown (O)'], 700, 'An alternate form of Unown.'),
            new DiscordPokemonCode(pokemonMap['Unown (R)'], 700, 'An alternate form of Unown.'),
            new DiscordPokemonCode(pokemonMap['Surfing Pikachu'], 1500, 'It\'s a Pikachu on a surfboard!'),
            new DiscordPokemonCode(pokemonMap['Rotom (Discord)'], 10000, 'A Discord-style Rotom!'),
        ];
        // Check if code provided by Discord, which means the user has logged in, and we need to get their details
        const search = new URLSearchParams(location.search);
        const discordID = search.get('discordID');
        if (discordID) {
            this.ID(discordID);
            Notifier.notify({
                message: 'Successfully logged in to Discord!',
                type: NotificationConstants.NotificationOption.success,
                timeout: GameConstants.MINUTE,
            });
            window.history.replaceState('', '', `${location.origin + location.pathname}`);
        }
    }
    get enabled() {
        // This was done like this so es/tslint doesn't throw errors
        try {
            return !!JSON.parse('true');
        }
        catch (e) {
            return false;
        }
    }
    login() {
        // This will be updated from our config values
        location.href = `https://discord.pokeclicker.com/proxy?action=login&redirect_uri=${encodeURIComponent(location.origin + location.pathname)}`;
    }
    logout() {
        this.ID(this.defaults.id);
        // Save now
        Save.store(player);
    }
    calcCode(code) {
        const discordID = +App.game.discord.ID() || false;
        if (!discordID) {
            return;
        }
        // reverse the string (for names that are similar - forms)
        const codeSeed = code.name.split('').reverse()
            // map to the character code
            .map(l => l.charCodeAt(0))
            // multiply the numbers (should be random enough)
            .reduce((s, b) => s * (b / 10), 1);
        SeededRand.seed(discordID + codeSeed);
        const arr = [];
        for (let i = 0; i < 14; i++) {
            let int;
            while (int == undefined || int.length != 1) {
                int = SeededRand.intBetween(0, 35).toString(36);
            }
            arr.push(int);
        }
        arr[4] = '-';
        arr[9] = '-';
        return arr.join('').toUpperCase();
    }
    findCodeMatch(enteredCode) {
        return this.codes.find(code => enteredCode.toUpperCase() == this.calcCode(code));
    }
    enterCode(enteredCode) {
        // Discord integration disabled
        if (!this.enabled) {
            Notifier.notify({
                message: 'Discord integration not enabled',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        // User not logged in to Discord
        if (!this.ID()) {
            Notifier.notify({
                message: 'You must sign in to Discord before attempting to use this code',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        // Try find a matching code
        const code = this.findCodeMatch(enteredCode);
        // No code found
        if (!code) {
            Notifier.notify({
                message: `Invalid code ${enteredCode}`,
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        // Claim the code
        code.claim();
        return true;
    }
    loadCodes(codes) {
        codes.forEach(code => {
            const c = this.codes.find(c => c.name == code.name);
            if (c) {
                c.claimed = code.claimed;
            }
        });
    }
    fromJSON(json) {
        if (!json || !json.ID) {
            return;
        }
        this.ID(json.ID || this.defaults.ID);
        this.loadCodes(json.codes || []);
    }
    toJSON() {
        return {
            ID: this.ID(),
            codes: this.codes.filter(c => c.claimed),
        };
    }
}
class DiscordCode {
    // Image, Price and Description fields are not currently used on the website,
    // the data is there so the Discord bot and website can share the same dataset
    constructor(name, image, price, description, claimFunction = () => true) {
        this.name = name;
        this.image = image;
        this.price = price;
        this.description = description;
        this.claimFunction = claimFunction;
        this.claimed = false;
    }
    claim() {
        if (this.claimed) {
            Notifier.notify({
                title: `[Discord Code] ${this.name}`,
                message: 'Already claimed!',
                type: NotificationConstants.NotificationOption.warning,
            });
            return;
        }
        if (this.claimFunction()) {
            this.claimed = true;
            Notifier.notify({
                title: `[Discord Code] ${this.name}`,
                message: 'Successfully claimed!',
                type: NotificationConstants.NotificationOption.success,
            });
        }
    }
    toJSON() {
        return {
            name: this.name,
            image: this.image,
            price: this.price,
            description: this.description,
            claimed: this.claimed,
        };
    }
}
class DiscordPokemonCode extends DiscordCode {
    constructor(pokemon, price, description) {
        const image = `assets/images/pokemon/${pokemon.id}.png`;
        const claimFunction = () => {
            if (pokemon.nativeRegion > player.highestRegion()) {
                Notifier.notify({
                    message: 'You need to progress further to unlock this pokemon.',
                    type: NotificationConstants.NotificationOption.warning,
                });
                return false;
            }
            const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_SHOP);
            App.game.party.gainPokemonById(pokemon.id, shiny, true);
            // Notify that the code was activated successfully
            Notifier.notify({
                message: `You obtained a${shiny ? ' shiny' : ''} ${pokemon.name}!`,
                type: NotificationConstants.NotificationOption.success,
                timeout: 1e4,
            });
            return true;
        };
        super(pokemon.name, image, price, description, claimFunction);
    }
}
class DungeonBossPokemon {
    constructor(name, baseHealth, level, options) {
        this.name = name;
        this.baseHealth = baseHealth;
        this.level = level;
        this.options = options;
    }
}
class Trainer {
    constructor(trainerClass, team, name, subTrainerClass) {
        this.trainerClass = trainerClass;
        this.team = team;
        this.subTrainerClass = subTrainerClass;
        this.name = name ? `${trainerClass} ${name}` : trainerClass;
    }
    get image() {
        const imageName = this.subTrainerClass ? `${this.trainerClass} ${this.subTrainerClass}` : this.trainerClass;
        return `assets/images/trainers/${imageName}.png`;
    }
}
///<reference path="../trainers/Trainer.ts"/>
class DungeonTrainer extends Trainer {
    constructor(trainerClass, team, options, name, subTrainerClass) {
        super(trainerClass, team, name, subTrainerClass);
        this.options = options;
    }
}
class GymPokemon {
    constructor(name, maxHealth, level) {
        this.name = name;
        this.maxHealth = maxHealth;
        this.level = level;
    }
}
///<reference path="../../declarations/enums/Badges.d.ts"/>
///<reference path="DungeonBossPokemon.ts"/>
///<reference path="../../declarations/requirements/GymBadgeRequirement.d.ts"/>
///<reference path="../../declarations/requirements/MultiRequirement.d.ts"/>
///<reference path="../../declarations/requirements/SeededDateRequirement.d.ts"/>
///<reference path="../../declarations/requirements/DayOfWeekRequirement.d.ts"/>
///<reference path="../../declarations/utilities/SeededDateRand.d.ts"/>
///<reference path="../achievements/ObtainedPokemonRequirement.ts"/>
///<reference path="./DungeonTrainer.ts"/>
///<reference path="../gym/GymPokemon.ts"/>
// These should add up to 1 if you want to keep it easy to judge chances
const baseLootTierChance = {
    common: 0.75,
    rare: 0.2,
    epic: 0.04,
    legendary: 0.0099,
    mythic: 0.0001,
};
const nerfedLootTierChance = {
    common: 0.75,
    rare: 0.24,
    epic: 0.009,
    legendary: 0.00099,
    mythic: 0.00001,
};
// Should sum to 0
const lootRedistribution = {
    common: -1,
    rare: 0.33,
    epic: 0.4,
    legendary: 0.2,
    mythic: 0.07,
};
// Max amount to take from common and redistibute @ 500 clears
const lootRedistibuteAmount = 0.15;
// Gain a gym badge after first completion of a dungeon
const DungeonGainGymBadge = (gym, badge) => {
    // Check that the player hasn't already obtained the badge
    if (!App.game.badgeCase.hasBadge(badge)) {
        // Set the set to our expected gym
        // This updates our modal values
        GymRunner.gymObservable(gym);
        GymBattle.gym = gym;
        // Give the player the badge
        App.game.badgeCase.gainBadge(badge);
        // Show the modal
        $('#receiveBadgeModal').modal('show');
    }
};
class Dungeon {
    constructor(name, enemyList, lootTable, baseHealth, bossList, tokenCost, difficultyRoute, // Closest route in terms of difficulty, used for egg steps, dungeon tokens etc.
    rewardFunction = () => { }, optionalParameters = {}) {
        this.name = name;
        this.enemyList = enemyList;
        this.lootTable = lootTable;
        this.baseHealth = baseHealth;
        this.bossList = bossList;
        this.tokenCost = tokenCost;
        this.difficultyRoute = difficultyRoute;
        this.rewardFunction = rewardFunction;
        this.optionalParameters = optionalParameters;
    }
    isUnlocked() {
        // Player requires the Dungeon Ticket to access the dungeons
        if (!App.game.keyItems.hasKeyItem(KeyItemType.Dungeon_ticket)) {
            Notifier.notify({
                message: 'You need the Dungeon Ticket to access dungeons.\n<i>Check out the shop at Viridian City.</i>',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        return true;
    }
    /**
     * Finds the possible Bosses in the dungeon
     * @param includeTrainers Whether to include Trainer Bosses. Defaults to true
     * @param ignoreRequirement Whether to check if requirements are met. Defaults to false
     */
    availableBosses(includeTrainers = true, ignoreRequirement = false) {
        // TODO: HLXII - We need this check as this method is called somewhere during initialization when App isn't initialized yet
        // the requirement.isCompleted call can sometimes use the App object, which will cause this to crash
        // Once App is moved to modules, this check might be able to be removed.
        if (!App.game) {
            return [];
        }
        if (includeTrainers) {
            return this.bossList.filter(boss => {
                var _a;
                return (!ignoreRequirement && ((_a = boss.options) === null || _a === void 0 ? void 0 : _a.requirement)) ? boss.options.requirement.isCompleted() : true;
            });
        }
        else {
            return this.bossList.filter(b => {
                var _a;
                if (b instanceof DungeonBossPokemon) {
                    return (!ignoreRequirement && ((_a = b.options) === null || _a === void 0 ? void 0 : _a.requirement)) ? b.options.requirement.isCompleted() : true;
                }
                return false;
            }).map(b => b);
        }
    }
    /**
     * Retreives the weights for all the possible bosses
     */
    get bossWeightList() {
        return this.availableBosses().map((boss) => {
            var _a, _b;
            return (_b = (_a = boss.options) === null || _a === void 0 ? void 0 : _a.weight) !== null && _b !== void 0 ? _b : 1;
        });
    }
    /**
     * Returns the possible enemies in the dungeon.
     * @param ignoreRequirement Whether to check if requirements are met. Defaults to false
     */
    availableMinions(ignoreRequirement = false) {
        return this.enemyList.filter((enemy) => {
            var _a;
            if (typeof enemy === 'string') {
                return true;
            }
            else {
                return (!ignoreRequirement && ((_a = enemy.options) === null || _a === void 0 ? void 0 : _a.requirement)) ? enemy.options.requirement.isCompleted() : true;
            }
        });
    }
    /**
     * Gets all available Pokemon in the dungeon
     */
    allAvailablePokemon() {
        const encounterInfo = [];
        // Handling minions
        this.enemyList.forEach((enemy) => {
            var _a;
            // Handling Pokemon
            if (typeof enemy === 'string' || enemy.hasOwnProperty('pokemon')) {
                let pokemonName;
                if (enemy.hasOwnProperty('pokemon')) {
                    // Check if requirements have been met
                    if ((_a = enemy.options) === null || _a === void 0 ? void 0 : _a.requirement) {
                        if (!enemy.options.requirement.isCompleted()) {
                            return;
                        }
                    }
                    pokemonName = enemy.pokemon;
                }
                else {
                    pokemonName = enemy;
                }
                encounterInfo.push(pokemonName);
                // Handling Trainers
            }
            else { /* We don't include Trainers */ }
        });
        // Handling Bosses
        this.bossList.forEach((boss) => {
            var _a;
            // Handling Pokemon
            if (boss instanceof DungeonBossPokemon) {
                if ((_a = boss.options) === null || _a === void 0 ? void 0 : _a.requirement) {
                    if (!boss.options.requirement.isCompleted()) {
                        return;
                    }
                }
                const pokemonName = boss.name;
                encounterInfo.push(pokemonName);
                // Handling Trainer
            }
            else { /* We don't include Trainers */ }
        });
        return encounterInfo;
    }
    getRandomLootTier(clears, highestRegion) {
        const tierWeights = this.getLootTierWeights(clears, highestRegion);
        return Rand.fromWeightedArray(Object.keys(tierWeights), Object.values(tierWeights));
    }
    getRandomLoot(tier) {
        const lootTable = this.lootTable[tier].filter((loot) => !loot.requirement || loot.requirement.isCompleted());
        return Rand.fromWeightedArray(lootTable, lootTable.map((loot) => { var _a; return (_a = loot.weight) !== null && _a !== void 0 ? _a : 1; }));
    }
    getLootTierWeights(clears, highestRegion) {
        var _a, _b;
        if (((_b = (_a = this.optionalParameters) === null || _a === void 0 ? void 0 : _a.dungeonRegionalDifficulty) !== null && _b !== void 0 ? _b : GameConstants.getDungeonRegion(this.name)) < highestRegion - 2) {
            return Object.entries(nerfedLootTierChance).reduce((chances, [tier, chance]) => {
                if (tier in this.lootTable &&
                    this.lootTable[tier].some((loot) => !loot.requirement || loot.requirement.isCompleted())) {
                    chances[tier] = chance;
                }
                return chances;
            }, {});
        }
        const timesCleared = Math.min(500, Math.max(1, clears));
        const redist = lootRedistibuteAmount * timesCleared / 500;
        const updatedChances = Object.entries(baseLootTierChance).reduce((chances, [tier, chance]) => {
            if (tier in this.lootTable &&
                this.lootTable[tier].some((loot) => !loot.requirement || loot.requirement.isCompleted())) {
                chances[tier] = chance + (redist * lootRedistribution[tier]);
            }
            return chances;
        }, {});
        return updatedChances;
    }
    /**
     * Retrieves the weights for all the possible enemies
     */
    get weightList() {
        return this.availableMinions().map((enemy) => {
            var _a, _b, _c;
            if (typeof enemy === 'string') {
                return 1;
            }
            else if (enemy.hasOwnProperty('pokemon')) {
                return (_a = enemy.options.weight) !== null && _a !== void 0 ? _a : 1;
            }
            else {
                return (_c = (_b = enemy.options) === null || _b === void 0 ? void 0 : _b.weight) !== null && _c !== void 0 ? _c : 1;
            }
        });
    }
    /**
     * Returns the possible minion Pokemon in the dungeon.
     * Filters out Trainers and collapses DetailedPokemon
     */
    get pokemonList() {
        // Filtering out Trainers
        return this.enemyList.filter((enemy) => {
            return !enemy.hasOwnProperty('name');
        }).map((enemy) => {
            // Collapsing DetailedPokemon
            if (typeof enemy === 'string') {
                return enemy;
            }
            else if (enemy.hasOwnProperty('pokemon')) {
                return enemy.pokemon;
            }
        });
    }
    /**
     * Returns the possible boss Pokemon in the dungeon.
     * Filters out Trainers
     */
    get bossPokemonList() {
        // Filtering out Trainers
        return this.bossList.filter((enemy) => {
            return enemy instanceof DungeonBossPokemon;
        }).map((enemy) => {
            return enemy.name;
        });
    }
    /**
     * Gets all possible Pokemon in the dungeon
     */
    get allPokemon() {
        return this.pokemonList.concat(this.bossPokemonList);
    }
    /**
     * Gets all non-boss Pokemon encounters in the dungeon
     * Used for generating the dungeon encounter list view
     */
    get normalEncounterList() {
        const encounterInfo = [];
        // Handling minions
        this.enemyList.forEach((enemy) => {
            var _a, _b, _c, _d;
            // Handling Pokemon
            if (typeof enemy === 'string' || enemy.hasOwnProperty('pokemon')) {
                let pokemonName;
                let hideEncounter = false;
                if (enemy.hasOwnProperty('pokemon')) {
                    pokemonName = enemy.pokemon;
                    hideEncounter = ((_a = enemy.options) === null || _a === void 0 ? void 0 : _a.hide) ? (((_b = enemy.options) === null || _b === void 0 ? void 0 : _b.requirement) ? !((_c = enemy.options) === null || _c === void 0 ? void 0 : _c.requirement.isCompleted()) : (_d = enemy.options) === null || _d === void 0 ? void 0 : _d.hide) : false;
                }
                else {
                    pokemonName = enemy;
                }
                const encounter = {
                    image: `assets/images/${(App.game.party.alreadyCaughtPokemonByName(pokemonName, true) ? 'shiny' : '')}pokemon/${pokemonMap[pokemonName].id}.png`,
                    shiny: App.game.party.alreadyCaughtPokemonByName(pokemonName, true),
                    hide: hideEncounter,
                    uncaught: !App.game.party.alreadyCaughtPokemonByName(pokemonName),
                    lock: false,
                    lockMessage: '',
                };
                encounterInfo.push(encounter);
                // Handling Trainers
            }
            else { /* We don't display minion Trainers */ }
        });
        return encounterInfo;
    }
    /**
     * Gets all boss encounters in the dungeon
     * Used for generating the dungeon encounter list view
     */
    get bossEncounterList() {
        const encounterInfo = [];
        // Handling Bosses
        this.bossList.forEach((boss) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
            // Handling Pokemon
            if (boss instanceof DungeonBossPokemon) {
                const pokemonName = boss.name;
                const encounter = {
                    image: `assets/images/${(App.game.party.alreadyCaughtPokemonByName(pokemonName, true) ? 'shiny' : '')}pokemon/${pokemonMap[pokemonName].id}.png`,
                    shiny: App.game.party.alreadyCaughtPokemonByName(pokemonName, true),
                    hide: ((_a = boss.options) === null || _a === void 0 ? void 0 : _a.hide) ? (((_b = boss.options) === null || _b === void 0 ? void 0 : _b.requirement) ? !((_c = boss.options) === null || _c === void 0 ? void 0 : _c.requirement.isCompleted()) : (_d = boss.options) === null || _d === void 0 ? void 0 : _d.hide) : false,
                    uncaught: !App.game.party.alreadyCaughtPokemonByName(pokemonName),
                    lock: ((_e = boss.options) === null || _e === void 0 ? void 0 : _e.requirement) ? !((_f = boss.options) === null || _f === void 0 ? void 0 : _f.requirement.isCompleted()) : false,
                    lockMessage: ((_g = boss.options) === null || _g === void 0 ? void 0 : _g.requirement) ? (_h = boss.options) === null || _h === void 0 ? void 0 : _h.requirement.hint() : '',
                };
                encounterInfo.push(encounter);
                // Handling Trainer
            }
            else {
                const encounter = {
                    image: boss.image,
                    shiny: false,
                    hide: ((_j = boss.options) === null || _j === void 0 ? void 0 : _j.hide) ? (((_k = boss.options) === null || _k === void 0 ? void 0 : _k.requirement) ? !((_l = boss.options) === null || _l === void 0 ? void 0 : _l.requirement.isCompleted()) : (_m = boss.options) === null || _m === void 0 ? void 0 : _m.hide) : false,
                    uncaught: false,
                    lock: ((_o = boss.options) === null || _o === void 0 ? void 0 : _o.requirement) ? !((_p = boss.options) === null || _p === void 0 ? void 0 : _p.requirement.isCompleted()) : false,
                    lockMessage: ((_q = boss.options) === null || _q === void 0 ? void 0 : _q.requirement) ? (_r = boss.options) === null || _r === void 0 ? void 0 : _r.requirement.hint() : '',
                };
                encounterInfo.push(encounter);
            }
        });
        return encounterInfo;
    }
}
/**
 * Data list that contains all dungeons, accessible by name.
 */
const dungeonList = {};
// Kanto Dungeons
dungeonList['Viridian Forest'] = new Dungeon('Viridian Forest', [
    { pokemon: 'Caterpie', options: { weight: 4 } },
    { pokemon: 'Metapod', options: { weight: 4 } },
    { pokemon: 'Weedle', options: { weight: 4 } },
    { pokemon: 'Kakuna', options: { weight: 4 } },
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Weedle', 50, 6),
        new GymPokemon('Caterpie', 50, 6),
    ], { weight: 1 }, 'Rick'),
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Weedle', 50, 7),
        new GymPokemon('Kakuna', 50, 7),
        new GymPokemon('Weedle', 50, 7),
    ], { weight: 1 }, 'Doug'),
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Caterpie', 50, 7),
        new GymPokemon('Caterpie', 50, 8),
    ], { weight: 1 }, 'Anthony'),
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Metapod', 50, 7),
        new GymPokemon('Caterpie', 50, 7),
        new GymPokemon('Metapod', 50, 7),
    ], { weight: 1 }, 'Charlie'),
], {
    common: [
        { loot: 'xAttack', weight: 2 },
        { loot: 'Pecha' },
    ],
    epic: [{ loot: 'Pokeball' }],
    mythic: [{ loot: 'SmallRestore' }],
}, 102, [
    new DungeonBossPokemon('Pikachu', 510, 7),
    new DungeonTrainer('Bug Catcher', [new GymPokemon('Weedle', 510, 9)], { weight: 1 }, 'Sammy'),
], 50, 1);
dungeonList['Mt. Moon'] = new Dungeon('Mt. Moon', [
    { pokemon: 'Clefairy', options: { weight: 11 } },
    { pokemon: 'Zubat', options: { weight: 11 } },
    { pokemon: 'Paras', options: { weight: 11 } },
    { pokemon: 'Geodude', options: { weight: 11 } },
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Weedle', 75, 11),
        new GymPokemon('Kakuna', 75, 11),
    ], { weight: 1 }, 'Kent'),
    new DungeonTrainer('Lass', [new GymPokemon('Clefairy', 75, 14)], { weight: 1 }, 'Iris'),
    new DungeonTrainer('Super Nerd', [
        new GymPokemon('Magnemite', 75, 11),
        new GymPokemon('Voltorb', 75, 11),
    ], { weight: 1 }, 'Jovan'),
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Caterpie', 75, 10),
        new GymPokemon('Metapod', 75, 10),
        new GymPokemon('Caterpie', 75, 10),
    ], { weight: 1 }, 'Robby'),
    new DungeonTrainer('Lass', [
        new GymPokemon('Oddish', 75, 11),
        new GymPokemon('Bellsprout', 75, 11),
    ], { weight: 1 }, 'Miriam'),
    new DungeonTrainer('Youngster', [
        new GymPokemon('Rattata', 75, 10),
        new GymPokemon('Rattata', 75, 10),
        new GymPokemon('Zubat', 75, 10),
    ], { weight: 1 }, 'Josh'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Geodude', 75, 10),
        new GymPokemon('Geodude', 75, 10),
        new GymPokemon('Onix', 75, 10),
    ], { weight: 1 }, 'Marcos'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Sandshrew', 75, 11),
        new GymPokemon('Rattata', 75, 11),
        new GymPokemon('Zubat', 75, 11),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Zubat', 75, 13),
        new GymPokemon('Ekans', 75, 13),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Rattata', 75, 13),
        new GymPokemon('Sandshrew', 75, 13),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Rattata', 75, 13),
        new GymPokemon('Zubat', 75, 13),
    ], { weight: 1 }, undefined, '(male)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Dowsing_machine' },
    ],
    mythic: [
        { loot: 'Greatball', weight: 2 },
        { loot: 'SmallRestore' },
        { loot: 'Star Piece' },
    ],
}, 834, [
    new DungeonTrainer('Super Nerd', [
        new GymPokemon('Grimer', 2780, 12),
        new GymPokemon('Voltorb', 2780, 12),
        new GymPokemon('Koffing', 2780, 12),
    ], { weight: 1 }, 'Miguel'),
], 75, 4, () => {
    const item = Rand.boolean() ? 'Dome Fossil' : 'Helix Fossil';
    Underground.gainMineItem(UndergroundItems.getByName(item).id, 1);
    Notifier.notify({
        message: `You were awarded a ${GameConstants.humanifyString(item)} for defeating the Super Nerd!`,
        type: NotificationConstants.NotificationOption.success,
        setting: NotificationConstants.NotificationSetting.Dungeons.rare_dungeon_item_found,
    });
});
dungeonList['Diglett\'s Cave'] = new Dungeon('Diglett\'s Cave', ['Diglett'], {
    common: [
        { loot: 'xClick' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Yellow Shard' },
    ],
    mythic: [
        { loot: 'Wiki', weight: 2 },
        { loot: 'Max Revive' },
    ],
}, 2962, [new DungeonBossPokemon('Dugtrio', 16040, 31)], 250, 11);
dungeonList['Rock Tunnel'] = new Dungeon('Rock Tunnel', [
    { pokemon: 'Zubat', options: { weight: 14 } },
    { pokemon: 'Mankey', options: { weight: 14 } },
    { pokemon: 'Geodude', options: { weight: 14 } },
    { pokemon: 'Machop', options: { weight: 14 } },
    new DungeonTrainer('PokéManiac', [
        new GymPokemon('Cubone', 500, 23),
        new GymPokemon('Slowpoke', 500, 23),
    ], { weight: 1 }, 'Ashton'),
    new DungeonTrainer('PokéManiac', [new GymPokemon('Slowpoke', 500, 25)], { weight: 1 }, 'Winston'),
    new DungeonTrainer('Picnicker', [
        new GymPokemon('Oddish', 500, 22),
        new GymPokemon('Bulbasaur', 500, 22),
    ], { weight: 1 }, 'Martha'),
    new DungeonTrainer('PokéManiac', [
        new GymPokemon('Charmander', 500, 22),
        new GymPokemon('Cubone', 500, 22),
    ], { weight: 1 }, 'Steve'),
    new DungeonTrainer('Hiker', [new GymPokemon('Geodude', 500, 25)], { weight: 1 }, 'Allen'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Machop', 500, 20),
        new GymPokemon('Onix', 500, 20),
    ], { weight: 1 }, 'Eric'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Geodude', 500, 19),
        new GymPokemon('Onix', 500, 19),
        new GymPokemon('Geodude', 500, 19),
        new GymPokemon('Geodude', 500, 19),
    ], { weight: 1 }, 'Lenny'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Onix', 500, 20),
        new GymPokemon('Onix', 500, 20),
        new GymPokemon('Geodude', 500, 20),
    ], { weight: 1 }, 'Oliver'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Geodude', 500, 21),
        new GymPokemon('Graveler', 500, 21),
    ], { weight: 1 }, 'Lucas'),
    new DungeonTrainer('Picnicker', [
        new GymPokemon('Jigglypuff', 500, 21),
        new GymPokemon('Pidgey', 500, 21),
        new GymPokemon('Meowth', 500, 21),
    ], { weight: 1 }, 'Sofia'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Geodude', 500, 21),
        new GymPokemon('Geodude', 500, 21),
        new GymPokemon('Graveler', 500, 21),
    ], { weight: 1 }, 'Dudley'),
    new DungeonTrainer('PokéManiac', [
        new GymPokemon('Slowpoke', 500, 20),
        new GymPokemon('Slowpoke', 500, 20),
        new GymPokemon('Slowpoke', 500, 20),
    ], { weight: 1 }, 'Cooper'),
    new DungeonTrainer('Picnicker', [
        new GymPokemon('Bellsprout', 500, 22),
        new GymPokemon('Clefairy', 500, 22),
    ], { weight: 1 }, 'Leah'),
    new DungeonTrainer('Picnicker', [
        new GymPokemon('Meowth', 500, 20),
        new GymPokemon('Oddish', 500, 20),
        new GymPokemon('Pidgey', 500, 20),
    ], { weight: 1 }, 'Dana'),
], {
    common: [
        { loot: 'xClick', weight: 2 },
        { loot: 'Leppa', weight: 2 },
        { loot: 'Pokeball', weight: 2 },
        { loot: 'Geodude' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
    ],
    legendary: [
        { loot: 'Greatball' },
        { loot: 'MediumRestore' },
        { loot: 'Oval Stone' },
        { loot: 'Revive' },
    ],
    mythic: [
        { loot: 'Star Piece', weight: 1.5 },
        { loot: 'Heart Scale' },
    ],
}, 4117, [
    new DungeonBossPokemon('Onix', 20585, 17),
    new DungeonTrainer('Picnicker', [
        new GymPokemon('Pidgey', 5147, 19),
        new GymPokemon('Rattata', 5147, 19),
        new GymPokemon('Rattata', 5147, 19),
        new GymPokemon('Bellsprout', 5147, 19),
    ], { weight: 1 }, 'Ariana'),
], 500, 9);
dungeonList['Rocket Game Corner'] = new Dungeon('Rocket Game Corner', [
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Drowzee', 2910, 21),
        new GymPokemon('Machop', 2910, 21),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Raticate', 2910, 21),
        new GymPokemon('Raticate', 2910, 21),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Rattata', 1455, 19),
        new GymPokemon('Raticate', 1455, 19),
        new GymPokemon('Raticate', 1455, 19),
        new GymPokemon('Rattata', 1455, 19),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Grimer', 1940, 20),
        new GymPokemon('Koffing', 1940, 20),
        new GymPokemon('Koffing', 1940, 20),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Grimer', 2910, 22),
        new GymPokemon('Koffing', 2910, 22),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Zubat', 1164, 17),
        new GymPokemon('Koffing', 1164, 17),
        new GymPokemon('Grimer', 1164, 17),
        new GymPokemon('Zubat', 1164, 17),
        new GymPokemon('Raticate', 1164, 17),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Machop', 2910, 21),
        new GymPokemon('Machop', 2910, 21),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Rattata', 1940, 20),
        new GymPokemon('Raticate', 1940, 20),
        new GymPokemon('Drowzee', 1940, 20),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Koffing', 2910, 21),
        new GymPokemon('Zubat', 2910, 21),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Sandshrew', 1940, 23),
        new GymPokemon('Ekans', 1940, 23),
        new GymPokemon('Sandslash', 1940, 23),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Ekans', 1940, 23),
        new GymPokemon('Sandshrew', 1940, 23),
        new GymPokemon('Arbok', 1940, 23),
    ], { weight: 1 }, undefined, '(male)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [{ loot: 'Pokeball' }],
    legendary: [
        { loot: 'Greatball', weight: 2 },
        { loot: 'Revive' },
        { loot: 'Nestball' },
    ],
    mythic: [
        { loot: 'LargeRestore' },
        { loot: 'Max Revive' },
        { loot: 'Star Piece' },
    ],
}, 5820, [
    new DungeonTrainer('Team Rocket Boss', [
        new GymPokemon('Onix', 9501, 25),
        new GymPokemon('Rhyhorn', 9501, 24),
        new GymPokemon('Kangaskhan', 10101, 29),
    ], { weight: 1 }, 'Giovanni', '(giovanni)'),
], 625, 7);
dungeonList['Pokémon Tower'] = new Dungeon('Pokémon Tower', [
    { pokemon: 'Gastly', options: { weight: 21.3 } },
    { pokemon: 'Haunter', options: { weight: 21.3 } },
    { pokemon: 'Cubone', options: { weight: 21.3 } },
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 23)], { weight: 1 }, 'Hope'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 22)], { weight: 1 }, 'Patricia'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 24)], { weight: 1 }, 'Carly'),
    new DungeonTrainer('Channeler', [
        new GymPokemon('Gastly', 750, 23),
        new GymPokemon('Gastly', 750, 23),
    ], { weight: 1 }, 'Laurel'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 22)], { weight: 1 }, 'Jody'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 24)], { weight: 1 }, 'Paula'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 22)], { weight: 1 }, 'Ruth'),
    new DungeonTrainer('Channeler', [new GymPokemon('Haunter', 750, 23)], { weight: 1 }, 'Tammy'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 24)], { weight: 1 }, 'Karina'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 22)], { weight: 1 }, 'Janae'),
    new DungeonTrainer('Channeler', [
        new GymPokemon('Gastly', 750, 22),
        new GymPokemon('Gastly', 750, 22),
        new GymPokemon('Gastly', 750, 22),
    ], { weight: 1 }, 'Angelica'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 24)], { weight: 1 }, 'Jennifer'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 24)], { weight: 1 }, 'Emilia'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Zubat', 750, 25),
        new GymPokemon('Zubat', 750, 25),
        new GymPokemon('Golbat', 750, 25),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Koffing', 750, 26),
        new GymPokemon('Drowzee', 750, 26),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Zubat', 750, 23),
        new GymPokemon('Rattata', 750, 23),
        new GymPokemon('Raticate', 750, 23),
        new GymPokemon('Zubat', 750, 23),
    ], { weight: 1 }, undefined, '(male)'),
], {
    common: [
        { loot: 'xAttack', weight: 2 },
        { loot: 'Chesto' },
    ],
    rare: [{ loot: 'Green Shard' }],
    legendary: [
        { loot: 'Greatball' },
        { loot: 'MediumRestore' },
        { loot: 'Star Piece' },
        { loot: 'Revive' },
    ],
    mythic: [
        { loot: 'Rare Bone' },
        { loot: 'Ultraball' },
        { loot: 'LargeRestore' },
    ],
}, 7523, [new DungeonBossPokemon('Marowak', 37615, 30)], 750, 7);
dungeonList['Silph Co.'] = new Dungeon('Silph Co.', [
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Golbat', 2103, 25),
        new GymPokemon('Zubat', 2103, 25),
        new GymPokemon('Zubat', 2103, 25),
        new GymPokemon('Raticate', 2103, 25),
        new GymPokemon('Zubat', 2103, 25),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Magnemite', 3505, 28),
        new GymPokemon('Voltorb', 3505, 28),
        new GymPokemon('Magneton', 3505, 28),
    ], { weight: 1 }, 'Jerry', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Cubone', 5258, 29),
        new GymPokemon('Zubat', 5258, 29),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Grimer', 2629, 26),
        new GymPokemon('Weezing', 2629, 26),
        new GymPokemon('Koffing', 2629, 26),
        new GymPokemon('Weezing', 2629, 26),
    ], { weight: 1 }, 'Connor', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Raticate', 3505, 28),
        new GymPokemon('Hypno', 3505, 28),
        new GymPokemon('Raticate', 3505, 28),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Electrode', 5258, 29),
        new GymPokemon('Weezing', 5258, 29),
    ], { weight: 1 }, 'Jose', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Ekans', 3505, 28),
        new GymPokemon('Zubat', 3505, 28),
        new GymPokemon('Cubone', 3505, 28),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Machop', 5258, 29),
        new GymPokemon('Drowzee', 5258, 29),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Electrode', 10515, 33)], { weight: 1 }, 'Rodney', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Hypno', 10515, 33)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Juggler', [
        new GymPokemon('Kadabra', 5258, 29),
        new GymPokemon('Mr. Mime', 5258, 29),
    ], { weight: 1 }, 'Dalton'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Magneton', 2629, 26),
        new GymPokemon('Magnemite', 2629, 26),
        new GymPokemon('Koffing', 2629, 26),
        new GymPokemon('Weezing', 2629, 26),
    ], { weight: 1 }, 'Beau', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Arbok', 10515, 33)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Machop', 5258, 29),
        new GymPokemon('Machoke', 5258, 29),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Zubat', 3505, 28),
        new GymPokemon('Zubat', 3505, 28),
        new GymPokemon('Golbat', 3505, 28),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Voltorb', 2103, 25),
        new GymPokemon('Koffing', 2103, 25),
        new GymPokemon('Magneton', 2103, 25),
        new GymPokemon('Magnemite', 2103, 25),
        new GymPokemon('Koffing', 2103, 25),
    ], { weight: 1 }, 'Taylor', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Cubone', 5258, 29),
        new GymPokemon('Cubone', 5258, 29),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Raticate', 2629, 26),
        new GymPokemon('Zubat', 2629, 26),
        new GymPokemon('Golbat', 2629, 26),
        new GymPokemon('Rattata', 2629, 26),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Electrode', 5258, 29),
        new GymPokemon('Muk', 5258, 29),
    ], { weight: 1 }, 'Joshua', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Sandshrew', 5258, 29),
        new GymPokemon('Sandslash', 5258, 29),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Raticate', 2629, 26),
        new GymPokemon('Golbat', 2629, 26),
        new GymPokemon('Arbok', 2629, 26),
        new GymPokemon('Koffing', 2629, 26),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Weezing', 3505, 28),
        new GymPokemon('Golbat', 3505, 28),
        new GymPokemon('Koffing', 3505, 28),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Grimer', 5258, 29),
        new GymPokemon('Electrode', 5258, 29),
    ], { weight: 1 }, 'Parker', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Golbat', 3505, 28),
        new GymPokemon('Drowzee', 3505, 28),
        new GymPokemon('Hypno', 3505, 28),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Drowzee', 3505, 28),
        new GymPokemon('Grimer', 3505, 28),
        new GymPokemon('Machop', 3505, 28),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Voltorb', 3505, 28),
        new GymPokemon('Magneton', 3505, 28),
        new GymPokemon('Koffing', 3505, 28),
    ], { weight: 1 }, 'Ed', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Machoke', 10515, 33)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Magnemite', 5258, 29),
        new GymPokemon('Koffing', 5258, 29),
    ], { weight: 1 }, 'Travis', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Rattata', 2103, 25),
        new GymPokemon('Zubat', 2103, 25),
        new GymPokemon('Ekans', 2103, 25),
        new GymPokemon('Rattata', 2103, 25),
        new GymPokemon('Rattata', 2103, 25),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Cubone', 3505, 32),
        new GymPokemon('Drowzee', 3505, 32),
        new GymPokemon('Marowak', 3505, 32),
    ], { weight: 1 }, undefined, '(male)'),
], {
    common: [
        { loot: 'Dowsing_machine', weight: 3 },
        { loot: 'Lucky_incense', weight: 2 },
        { loot: 'Pokeball' },
        { loot: 'Electrode' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Red Shard' },
    ],
    legendary: [{ loot: 'Greatball' }],
    mythic: [{ loot: 'Ultraball' }],
}, 10515, [
    new DungeonTrainer('Team Rocket Boss', [
        new GymPokemon('Nidorino', 12144, 37),
        new GymPokemon('Rhyhorn', 12144, 37),
        new GymPokemon('Kangaskhan', 12144, 35),
        new GymPokemon('Nidoqueen', 16144, 41),
    ], { weight: 1 }, 'Giovanni', '(giovanni)'),
], 875, 7);
dungeonList['Power Plant'] = new Dungeon('Power Plant', ['Pikachu', 'Magnemite', 'Magneton', 'Voltorb', 'Electrode'], {
    common: [
        { loot: 'Lucky_incense', weight: 4 },
        { loot: 'Cheri', weight: 2 },
        { loot: 'Electrode' },
    ],
    rare: [{ loot: 'Yellow Shard' }],
    mythic: [{ loot: 'Max Revive' }],
}, 13507, [
    new DungeonBossPokemon('Electabuzz', 67535, 35),
    new DungeonBossPokemon('Zapdos', 101302, 50),
], 1000, 18);
dungeonList['Seafoam Islands'] = new Dungeon('Seafoam Islands', ['Zubat', 'Golbat', 'Psyduck', 'Golduck', 'Slowpoke', 'Slowbro', 'Krabby', 'Horsea', 'Magikarp'], {
    common: [
        { loot: 'xAttack', weight: 2 },
        { loot: 'Aspear' },
    ],
    rare: [{ loot: 'Blue Shard' }],
    legendary: [{ loot: 'Revive' }],
    mythic: [{ loot: 'Ultraball' }],
}, 17226, [
    new DungeonBossPokemon('Seel', 86130, 35),
    new DungeonBossPokemon('Articuno', 129195, 50),
], 1250, 19);
dungeonList['Pokémon Mansion'] = new Dungeon('Pokémon Mansion', [
    { pokemon: 'Rattata', options: { weight: 3.11 } },
    { pokemon: 'Raticate', options: { weight: 3.11 } },
    { pokemon: 'Vulpix', options: { weight: 3.11 } },
    { pokemon: 'Growlithe', options: { weight: 3.11 } },
    { pokemon: 'Grimer', options: { weight: 3.11 } },
    { pokemon: 'Muk', options: { weight: 3.11 } },
    { pokemon: 'Koffing', options: { weight: 3.11 } },
    { pokemon: 'Weezing', options: { weight: 3.11 } },
    { pokemon: 'Ditto', options: { weight: 3.11 } },
    new DungeonTrainer('Youngster', [
        new GymPokemon('Ekans', 1500, 33),
        new GymPokemon('Ekans', 1500, 33),
        new GymPokemon('Raticate', 1500, 34),
    ], { weight: 1 }, 'Johnson'),
    new DungeonTrainer('Burglar', [
        new GymPokemon('Charmander', 1500, 34),
        new GymPokemon('Charmeleon', 1500, 34),
    ], { weight: 1 }, 'Arnie'),
    new DungeonTrainer('Burglar', [new GymPokemon('Ninetales', 1500, 38)], { weight: 1 }, 'Simon'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Magnemite', 1500, 33),
        new GymPokemon('Magneton', 1500, 33),
        new GymPokemon('Voltorb', 1500, 33),
    ], { weight: 1 }, 'Braydon', '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Electrode', 1500, 29),
        new GymPokemon('Weezing', 1500, 29),
    ], { weight: 1 }, 'Ted', '(male)'),
    new DungeonTrainer('Burglar', [
        new GymPokemon('Growlithe', 1500, 34),
        new GymPokemon('Ponyta', 1500, 34),
    ], { weight: 1 }, 'Lewis'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Magnemite', 1500, 34),
        new GymPokemon('Electrode', 1500, 34),
    ], { weight: 1 }, 'Ivan', '(male)'),
], {
    common: [
        { loot: 'xAttack', weight: 2 },
        { loot: 'Rawst' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
    ],
    epic: [{ loot: 'Figy' }],
    legendary: [{ loot: 'Ultraball' }],
    mythic: [{ loot: 'Max Revive' }],
}, 17760, [new DungeonBossPokemon('Magmar', 88800, 40)], 1500, 20);
dungeonList['Mt. Ember Summit'] = new Dungeon('Mt. Ember Summit', [
    { pokemon: 'Spearow', options: { weight: 1.5 } },
    { pokemon: 'Fearow', options: { weight: 1.5 } },
    { pokemon: 'Machop', options: { weight: 1.5 } },
    { pokemon: 'Machoke', options: { weight: 1.5 } },
    { pokemon: 'Geodude', options: { weight: 1.5 } },
    { pokemon: 'Graveler', options: { weight: 1.5 } },
    { pokemon: 'Ponyta', options: { weight: 1.5 } },
    { pokemon: 'Rapidash', options: { weight: 1.5 } },
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Bellsprout', 18120, 38),
        new GymPokemon('Gloom', 18120, 38),
        new GymPokemon('Gloom', 18120, 38),
    ], { weight: 1 }, 'Beth', '(female)'),
    new DungeonTrainer('Crush Girl', [
        new GymPokemon('Hitmonchan', 18120, 38),
        new GymPokemon('Hitmonchan', 18120, 38),
    ], { weight: 1 }, 'Jocelyn'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Exeggcute', 18120, 37),
        new GymPokemon('Exeggutor', 18120, 40),
    ], { weight: 1 }, 'Logan', '(male)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Token_collector' },
    ],
    rare: [{ loot: 'Red Shard' }],
    legendary: [{ loot: 'Ultraball' }],
}, 18120, [
    new DungeonBossPokemon('Magmar', 101427, 40),
    new DungeonBossPokemon('Moltres', 184462, 50),
], 1750, 27);
dungeonList['Berry Forest'] = new Dungeon('Berry Forest', ['Pidgey', 'Pidgeotto', 'Oddish', 'Gloom', 'Venonat', 'Psyduck', 'Golduck', 'Poliwag', 'Bellsprout', 'Weepinbell', 'Slowpoke', 'Slowbro', 'Drowzee', 'Exeggcute', 'Goldeen', 'Magikarp'], {
    common: [
        { loot: 'xClick' },
        { loot: 'Cheri' },
        { loot: 'Chesto' },
        { loot: 'Pecha' },
        { loot: 'Rawst' },
        { loot: 'Aspear' },
        { loot: 'Leppa' },
        { loot: 'Oran' },
        { loot: 'Sitrus' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Razz' },
        { loot: 'Persim' },
        { loot: 'Bluk' },
        { loot: 'Nanab' },
        { loot: 'Wepear' },
        { loot: 'Iapapa' },
    ],
    mythic: [{ loot: 'Lum', requirement: new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Berry Forest')) }],
}, 18120, [
    new DungeonBossPokemon('Venomoth', 101427, 30),
    new DungeonBossPokemon('Hypno', 101427, 30),
], 1750, 29);
dungeonList['Victory Road'] = new Dungeon('Victory Road', [
    { pokemon: 'Arbok', options: { weight: 4.88 } },
    { pokemon: 'Sandslash', options: { weight: 4.88 } },
    { pokemon: 'Zubat', options: { weight: 4.88 } },
    { pokemon: 'Golbat', options: { weight: 4.88 } },
    { pokemon: 'Primeape', options: { weight: 4.88 } },
    { pokemon: 'Machop', options: { weight: 4.88 } },
    { pokemon: 'Geodude', options: { weight: 4.88 } },
    { pokemon: 'Onix', options: { weight: 4.88 } },
    { pokemon: 'Marowak', options: { weight: 4.88 } },
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Persian', 2000, 42),
        new GymPokemon('Ponyta', 2000, 42),
        new GymPokemon('Rapidash', 2000, 42),
        new GymPokemon('Vulpix', 2000, 42),
        new GymPokemon('Ninetales', 2000, 42),
    ], { weight: 1 }, 'Naomi', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Raticate', 2000, 42),
        new GymPokemon('Ivysaur', 2000, 42),
        new GymPokemon('Wartortle', 2000, 42),
        new GymPokemon('Charmeleon', 2000, 42),
        new GymPokemon('Charizard', 2000, 42),
    ], { weight: 1 }, 'Rolando', '(male)'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Machoke', 2000, 43),
        new GymPokemon('Machop', 2000, 43),
        new GymPokemon('Machoke', 2000, 43),
    ], { weight: 1 }, 'Daisuke'),
    new DungeonTrainer('Juggler', [
        new GymPokemon('Drowzee', 2000, 41),
        new GymPokemon('Hypno', 2000, 41),
        new GymPokemon('Kadabra', 2000, 41),
        new GymPokemon('Kadabra', 2000, 41),
    ], { weight: 1 }, 'Nelson'),
    new DungeonTrainer('Tamer', [
        new GymPokemon('Persian', 2000, 44),
        new GymPokemon('Golduck', 2000, 44),
    ], { weight: 1 }, 'Vincent'),
    new DungeonTrainer('Juggler', [new GymPokemon('Mr. Mime', 2000, 48)], { weight: 1 }, 'Gregory'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Exeggutor', 2000, 42),
        new GymPokemon('Sandslash', 2000, 42),
        new GymPokemon('Cloyster', 2000, 42),
        new GymPokemon('Electrode', 2000, 42),
        new GymPokemon('Arcanine', 2000, 42),
    ], { weight: 1 }, 'George', '(male)'),
    new DungeonTrainer('PokéManiac', [
        new GymPokemon('Charmeleon', 2000, 40),
        new GymPokemon('Lapras', 2000, 40),
        new GymPokemon('Lickitung', 2000, 40),
    ], { weight: 1 }, 'Dawson'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Clefairy', 2000, 42),
        new GymPokemon('Jigglypuff', 2000, 42),
        new GymPokemon('Persian', 2000, 42),
        new GymPokemon('Dewgong', 2000, 42),
        new GymPokemon('Chansey', 2000, 42),
    ], { weight: 1 }, 'Alexa', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Kingler', 2000, 41),
        new GymPokemon('Poliwhirl', 2000, 42),
        new GymPokemon('Tentacruel', 2000, 42),
        new GymPokemon('Seadra', 2000, 42),
        new GymPokemon('Blastoise', 2000, 42),
    ], { weight: 1 }, 'Colby', '(male)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Bellsprout', 2000, 42),
        new GymPokemon('Weepinbell', 2000, 42),
        new GymPokemon('Victreebel', 2000, 42),
        new GymPokemon('Paras', 2000, 42),
        new GymPokemon('Parasect', 2000, 42),
    ], { weight: 1 }, 'Caroline', '(female)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
    ],
    legendary: [
        { loot: 'Ultraball' },
        { loot: 'SmallRestore' },
    ],
    mythic: [
        { loot: 'Max Revive', weight: 2 },
        { loot: 'Star Piece' },
        { loot: 'Heart Scale' },
    ],
}, 24595, [
    new DungeonBossPokemon('Machoke', 122975, 42),
    new DungeonTrainer('Cool Couple', [
        new GymPokemon('Nidoking', 61488, 45),
        new GymPokemon('Nidoqueen', 61488, 45),
    ], { weight: 1 }, 'Ray & Tyra'),
], 2000, 23);
dungeonList['Cerulean Cave'] = new Dungeon('Cerulean Cave', ['Golbat', 'Parasect', 'Psyduck', 'Golduck', 'Primeape', 'Poliwag', 'Machoke', 'Slowpoke', 'Slowbro', 'Magneton', 'Electrode', 'Goldeen', 'Magikarp', 'Ditto'], {
    common: [
        { loot: 'Pokeball', weight: 2 },
        { loot: 'Token_collector', weight: 2 },
        { loot: 'Lucky_incense', weight: 2 },
        { loot: 'Graveler' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [{ loot: 'Greatball' }],
    legendary: [{ loot: 'Ultraball' }],
    mythic: [
        { loot: 'LargeRestore' },
        { loot: 'Max Revive', weight: 2 },
        { loot: 'Protein', requirement: new ClearDungeonRequirement(500, GameConstants.getDungeonIndex('Cerulean Cave')) },
    ],
}, 28735, [
    new DungeonBossPokemon('Kadabra', 183675, 60),
    new DungeonBossPokemon('Mewtwo', 255512, 100),
], 2500, 23);
dungeonList['Ruby Path'] = new Dungeon('Ruby Path', ['Geodude', 'Graveler', 'Machop', 'Machoke', 'Slugma'], {
    common: [
        { loot: 'xAttack', weight: 3 },
        { loot: 'Rawst', weight: 3 },
        { loot: 'Geodude' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Grey Shard' },
    ],
}, 720600, [new DungeonBossPokemon('Magcargo', 3703000, 20)], 43000, 30, () => { }, { dungeonRegionalDifficulty: GameConstants.Region.hoenn });
dungeonList['Icefall Cave'] = new Dungeon('Icefall Cave', ['Zubat', 'Golbat', 'Seel', 'Psyduck', 'Slowpoke', 'Swinub', 'Delibird', 'Sneasel', 'Wooper', 'Marill', 'Magikarp', 'Poliwag', 'Goldeen', 'Poliwhirl', 'Tentacool', 'Tentacruel', 'Horsea', 'Krabby', 'Shellder', 'Staryu', 'Seadra', 'Kingler', 'Dewgong', 'Gyarados', 'Lapras'], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'xClick' },
        { loot: 'Aspear' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Purple Shard' },
    ],
    epic: [
        { loot: 'Ultraball' },
        { loot: 'Splash Plate' },
        { loot: 'Icicle Plate' },
    ],
    legendary: [
        { loot: 'LargeRestore' },
        { loot: 'Never_Melt_Ice' },
    ],
}, 720600, [
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Zubat', 250000, 20),
        new GymPokemon('Zubat', 250000, 20),
        new GymPokemon('Golbat', 250000, 20),
    ], { weight: 1 }, undefined, '(male)'),
], 43000, 30, () => { }, { dungeonRegionalDifficulty: GameConstants.Region.hoenn });
dungeonList['Sunburst Island'] = new Dungeon('Sunburst Island', ['Hoppip', 'Tentacool', 'Tentacruel', 'Magikarp', 'Horsea', 'Krabby', 'Qwilfish', 'Remoraid', 'Gyarados', 'Seadra', 'Kingler', 'Psyduck', 'Slowpoke'], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Red Shard' },
    ],
    epic: [
        { loot: 'Splash Plate' },
        { loot: 'Flame Plate' },
    ],
    legendary: [
        { loot: 'Heat Rock' },
        { loot: 'Icy Rock' },
    ],
}, 720600, [new DungeonBossPokemon('Crystal Onix', 4500000, 20)], 43000, 31, () => { }, { dungeonRegionalDifficulty: GameConstants.Region.hoenn });
dungeonList['Lost Cave'] = new Dungeon('Lost Cave', [
    'Gastly', 'Haunter', 'Zubat', 'Golbat', 'Murkrow', 'Misdreavus',
    new DungeonTrainer('Ruin Maniac', [
        new GymPokemon('Onix', 200600, 20),
        new GymPokemon('Graveler', 200600, 20),
        new GymPokemon('Marowak', 200600, 20),
    ], { weight: 0.75 }, 'Lawson'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Natu', 200600, 20),
        new GymPokemon('Natu', 200600, 20),
        new GymPokemon('Xatu', 200600, 20),
    ], { weight: 0.75 }, 'Laura', '(female)'),
], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'xAttack' },
    ],
    rare: [
        { loot: 'Purple Shard' },
        { loot: 'Grey Shard' },
    ],
    epic: [
        { loot: 'Toxic Plate' },
        { loot: 'Spooky Plate' },
    ],
    legendary: [
        { loot: 'Max Revive' },
        { loot: 'Silk_Scarf' },
    ],
}, 720600, [
    new DungeonTrainer('Lady', [
        new GymPokemon('Persian', 1800000, 49),
        new GymPokemon('Persian', 1800000, 49),
    ], { weight: 1 }, 'Selphy'),
], 36000, 33, () => { }, { dungeonRegionalDifficulty: GameConstants.Region.hoenn });
dungeonList['Pattern Bush'] = new Dungeon('Pattern Bush', [
    'Spinarak', 'Ledyba', 'Caterpie', 'Weedle', 'Metapod', 'Kakuna',
    new DungeonTrainer('Youngster', [
        new GymPokemon('Farfetch\'d', 720600, 20),
        new GymPokemon('Farfetch\'d', 720600, 20),
    ], { weight: 0.125 }, 'Cordell'),
    new DungeonTrainer('Pokémon Breeder', [new GymPokemon('Chansey', 720600, 20)], { weight: 0.125 }, 'Bethany', '(female)'),
    new DungeonTrainer('Bug Catcher', [new GymPokemon('Heracross', 720600, 20)], { weight: 0.125 }, 'Garett'),
    new DungeonTrainer('Lass', [new GymPokemon('Snubbull', 720600, 20)], { weight: 0.125 }, 'Joanna'),
    new DungeonTrainer('Youngster', [
        new GymPokemon('Weepinbell', 200000, 20),
        new GymPokemon('Weepinbell', 200000, 20),
        new GymPokemon('Victreebel', 200000, 20),
    ], { weight: 0.125 }, 'Nash'),
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Venonat', 200000, 20),
        new GymPokemon('Venomoth', 200000, 20),
    ], { weight: 0.125 }, 'Vance'),
    new DungeonTrainer('Ruin Maniac', [
        new GymPokemon('Sandslash', 200000, 20),
        new GymPokemon('Onix', 200000, 20),
        new GymPokemon('Sandslash', 200000, 20),
    ], { weight: 0.125 }, 'Layton'),
    new DungeonTrainer('Picnicker', [
        new GymPokemon('Paras', 200000, 20),
        new GymPokemon('Paras', 200000, 20),
        new GymPokemon('Parasect', 200000, 20),
    ], { weight: 0.125 }, 'Marcy'),
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Yanma', 200000, 20),
        new GymPokemon('Beedrill', 200000, 20),
        new GymPokemon('Yanma', 200000, 20),
        new GymPokemon('Beedrill', 200000, 20),
    ], { weight: 0.125 }, 'Jonah'),
    new DungeonTrainer('Lass', [
        new GymPokemon('Hoppip', 200000, 20),
        new GymPokemon('Hoppip', 200000, 20),
        new GymPokemon('Skiploom', 200000, 20),
        new GymPokemon('Skiploom', 200000, 20),
    ], { weight: 0.125 }, 'Dalia'),
    new DungeonTrainer('Pokémon Breeder', [
        new GymPokemon('Clefairy', 200000, 20),
        new GymPokemon('Clefairy', 200000, 20),
        new GymPokemon('Clefable', 200000, 20),
    ], { weight: 0.125 }, 'Allison', '(female)'),
    new DungeonTrainer('Camper', [
        new GymPokemon('Pinsir', 200000, 20),
        new GymPokemon('Heracross', 200000, 20),
    ], { weight: 0.125 }, 'Riley'),
], {
    common: [
        { loot: 'Cheri' },
        { loot: 'Chesto' },
        { loot: 'Pecha' },
        { loot: 'Rawst' },
        { loot: 'Aspear' },
        { loot: 'Leppa' },
        { loot: 'Oran' },
        { loot: 'Sitrus' },
    ],
    rare: [{ loot: 'Green Shard' }],
    epic: [
        { loot: 'Persim' },
        { loot: 'Razz' },
        { loot: 'Bluk' },
        { loot: 'Nanab' },
        { loot: 'Wepear' },
        { loot: 'Pinap' },
        { loot: 'Figy' },
        { loot: 'Wiki' },
        { loot: 'Mago' },
        { loot: 'Aguav' },
        { loot: 'Iapapa' },
    ],
    mythic: [{ loot: 'Lum', requirement: new ClearDungeonRequirement(150, GameConstants.getDungeonIndex('Pattern Bush')) }],
}, 500000, [new DungeonBossPokemon('Heracross', 3703000, 20)], 43000, 35, () => { }, { dungeonRegionalDifficulty: GameConstants.Region.hoenn });
dungeonList['Altering Cave'] = new Dungeon('Altering Cave', ['Zubat', 'Mareep', 'Pineco', 'Houndour', 'Teddiursa', 'Aipom', 'Shuckle'], {
    common: [
        { loot: 'xAttack' },
        { loot: 'xClick' },
    ],
    rare: [
        { loot: 'Grey Shard' },
        { loot: 'Ochre Shard' },
    ],
    legendary: [
        { loot: 'SmallRestore', weight: 3 },
        { loot: 'MediumRestore', weight: 2 },
        { loot: 'LargeRestore' },
    ],
}, 720600, [
    new DungeonBossPokemon('Stantler', 3703000, 20),
    new DungeonBossPokemon('Smeargle', 3703000, 20),
], 43000, 36, () => { }, { dungeonRegionalDifficulty: GameConstants.Region.hoenn });
// All Unown except "EFHP"
SeededRand.seed(4567);
const TanobyUnownList = SeededRand.shuffleArray('ABCDGIJKLMNOQRSTUVWXYZ!?'.split(''));
dungeonList['Tanoby Ruins'] = new Dungeon('Tanoby Ruins', [
    'Tentacool', 'Tentacruel', 'Mantine', 'Magikarp', 'Horsea', 'Krabby', 'Qwilfish', 'Remoraid', 'Gyarados', 'Seadra', 'Psyduck', 'Kingler',
    new DungeonTrainer('Ruin Maniac', [new GymPokemon('Onix', 1940, 20)], { weight: 0.75 }, 'Brandon'),
    new DungeonTrainer('Gentleman', [
        new GymPokemon('Marowak', 200000, 20),
        new GymPokemon('Golduck', 200000, 20),
    ], { weight: 0.75 }, 'Clifford'),
    new DungeonTrainer('Painter', [new GymPokemon('Smeargle', 200000, 20)], { weight: 0.75 }, 'Allison'),
    new DungeonTrainer('Ruin Maniac', [
        new GymPokemon('Geodude', 200000, 20),
        new GymPokemon('Graveler', 200000, 20),
        new GymPokemon('Graveler', 200000, 20),
    ], { weight: 0.75 }, 'Benjamin'),
], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'Lucky_incense' },
    ],
    rare: [{ loot: 'Grey Shard' }],
    epic: [{ loot: 'Mind Plate' }],
    mythic: [{ loot: 'Heart Scale' }],
}, 720600, [
    ...TanobyUnownList.map((char) => new DungeonBossPokemon(`Unown (${char})`, 4100000, 30, {
        hide: true,
        requirement: new SeededDateRequirement(() => SeededDateRand.fromArray(TanobyUnownList) == char),
    })),
], 43000, 39, () => { }, { dungeonRegionalDifficulty: GameConstants.Region.hoenn });
dungeonList['Pinkan Mountain'] = new Dungeon('Pinkan Mountain', ['Pinkan Rattata', 'Pinkan Nidoran(M)', 'Pinkan Nidoran(F)', 'Pinkan Mankey', 'Pinkan Rhyhorn'], {
    common: [
        { loot: 'Pecha', weight: 6 },
        { loot: 'Persim' },
        { loot: 'Nanab' },
        { loot: 'Mago' },
    ],
    rare: [
        { loot: 'Purple Shard' },
        { loot: 'Pink Shard', requirement: new MaxRegionRequirement(GameConstants.Region.kalos) },
    ],
    epic: [
        { loot: 'Mind Plate' },
        { loot: 'Qualot' },
        { loot: 'Magost' },
        { loot: 'Watmel' },
    ],
    mythic: [{ loot: 'Heart Scale' }],
}, 1503000, [
    new DungeonBossPokemon('Pinkan Primeape', 7000000, 40),
    new DungeonBossPokemon('Pinkan Rhydon', 7000000, 40),
    new DungeonBossPokemon('Pinkan Nidoking', 7000000, 40),
], 89500, 42, () => { }, { dungeonRegionalDifficulty: GameConstants.Region.hoenn });
// Johto Dungeons
dungeonList['Sprout Tower'] = new Dungeon('Sprout Tower', [
    { pokemon: 'Rattata', options: { weight: 8 } },
    { pokemon: 'Gastly', options: { weight: 8 } },
    { pokemon: 'Hoothoot', options: { weight: 8 } },
    new DungeonTrainer('Sage', [
        new GymPokemon('Bellsprout', 2500, 3),
        new GymPokemon('Bellsprout', 2500, 3),
        new GymPokemon('Bellsprout', 2500, 3),
    ], { weight: 1 }, 'Nico'),
    new DungeonTrainer('Sage', [
        new GymPokemon('Bellsprout', 2500, 3),
        new GymPokemon('Bellsprout', 2500, 3),
        new GymPokemon('Bellsprout', 2500, 3),
    ], { weight: 1 }, 'Chow'),
    new DungeonTrainer('Sage', [
        new GymPokemon('Bellsprout', 2500, 3),
        new GymPokemon('Bellsprout', 2500, 3),
        new GymPokemon('Bellsprout', 2500, 3),
    ], { weight: 1 }, 'Edmond'),
    new DungeonTrainer('Sage', [new GymPokemon('Bellsprout', 2500, 6)], { weight: 1 }, 'Jin'),
    new DungeonTrainer('Sage', [new GymPokemon('Bellsprout', 2500, 6)], { weight: 1 }, 'Neal'),
    new DungeonTrainer('Sage', [
        new GymPokemon('Bellsprout', 2500, 7),
        new GymPokemon('Hoothoot', 2500, 7),
    ], { weight: 1 }, 'Troy'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Lucky_incense' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
    ],
    legendary: [
        { loot: 'Meadow Plate', weight: 2 },
        { loot: 'SmallRestore' },
        { loot: 'Miracle_Seed' },
    ],
}, 56735, [
    new DungeonTrainer('Sage', [
        new GymPokemon('Bellsprout', 86000, 7),
        new GymPokemon('Bellsprout', 86000, 7),
        new GymPokemon('Hoothoot', 87000, 10),
    ], { weight: 1 }, 'Li'),
], 2500, 31);
// All Unown except "E?!"
SeededRand.seed(1337);
const AlphUnownList = SeededRand.shuffleArray('ABCDFGHIJKLMNOPQRSTUVWXYZ'.split(''));
dungeonList['Ruins of Alph'] = new Dungeon('Ruins of Alph', [
    { pokemon: 'Poliwag', options: { weight: 0.6 } },
    { pokemon: 'Poliwhirl', options: { weight: 0.6 } },
    { pokemon: 'Magikarp', options: { weight: 0.6 } },
    { pokemon: 'Natu', options: { weight: 0.6 } },
    { pokemon: 'Wooper', options: { weight: 0.6 } },
    { pokemon: 'Quagsire', options: { weight: 0.6 } },
    { pokemon: 'Smeargle', options: { weight: 0.6 } },
    new DungeonTrainer('Psychic', [new GymPokemon('Girafarig', 3000, 26)], { weight: 1 }, 'Nathan', '(male)'),
], {
    common: [
        { loot: 'Oran', weight: 2 },
        { loot: 'Greatball' },
        { loot: 'Pecha' },
        { loot: 'Sitrus' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
    ],
    epic: [{ loot: 'Leppa' }],
    legendary: [
        { loot: 'SmallRestore', weight: 2 },
        { loot: 'Star Piece' },
        { loot: 'Miracle_Seed' },
    ],
    mythic: [
        { loot: 'LargeRestore' },
        { loot: 'Max Revive' },
    ],
}, 60600, [
    new DungeonBossPokemon('Unown (A)', 280000, 14, {
        hide: true,
        requirement: new ObtainedPokemonRequirement(pokemonMap['Unown (A)'], true),
    }),
    ...AlphUnownList.map((char) => new DungeonBossPokemon(`Unown (${char})`, 280000, 14, {
        hide: true,
        requirement: new SeededDateRequirement(() => SeededDateRand.fromArray(AlphUnownList) == char),
    })),
], 3000, 32);
dungeonList['Union Cave'] = new Dungeon('Union Cave', [
    { pokemon: 'Rattata', options: { weight: 1.5 } },
    { pokemon: 'Sandshrew', options: { weight: 1.5 } },
    { pokemon: 'Zubat', options: { weight: 1.5 } },
    { pokemon: 'Geodude', options: { weight: 1.5 } },
    { pokemon: 'Onix', options: { weight: 1.5 } },
    { pokemon: 'Goldeen', options: { weight: 1.5 } },
    { pokemon: 'Magikarp', options: { weight: 1.5 } },
    { pokemon: 'Wooper', options: { weight: 1.5 } },
    new DungeonTrainer('Hiker', [
        new GymPokemon('Geodude', 2000, 4),
        new GymPokemon('Geodude', 3000, 6),
        new GymPokemon('Geodude', 4000, 8),
    ], { weight: 1 }, 'Russell'),
    new DungeonTrainer('Firebreather', [
        new GymPokemon('Koffing', 3000, 6),
        new GymPokemon('Koffing', 3000, 6),
    ], { weight: 1 }, 'Bill'),
    new DungeonTrainer('PokéManiac', [new GymPokemon('Slowpoke', 3000, 10)], { weight: 1 }, 'Larry'),
], {
    common: [
        { loot: 'xAttack', weight: 2 },
        { loot: 'xClick', weight: 2 },
        { loot: 'Geodude' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [{ loot: 'Greatball' }],
    legendary: [
        { loot: 'SmallRestore' },
        { loot: 'Revive' },
        { loot: 'Soft_Sand', weight: 3 },
    ],
    mythic: [
        { loot: 'Ultraball' },
        { loot: 'LargeRestore' },
    ],
}, 63600, [
    new DungeonTrainer('Hiker', [new GymPokemon('Onix', 300000, 11)], { weight: 1 }, 'Daniel'),
    new DungeonTrainer('Firebreather', [new GymPokemon('Vulpix', 300000, 9)], { weight: 1 }, 'Ray'),
    new DungeonBossPokemon('Lapras', 450000, 20, {
        hide: true,
        requirement: new MultiRequirement([
            new GymBadgeRequirement(BadgeEnums.Fog),
            new DayOfWeekRequirement(GameConstants.DayOfWeek.Friday),
        ])
    }),
], 3000, 32);
dungeonList['Slowpoke Well'] = new Dungeon('Slowpoke Well', [
    { pokemon: 'Zubat', options: { weight: 6 } },
    { pokemon: 'Slowpoke', options: { weight: 6 } },
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Rattata', 3500, 9),
        new GymPokemon('Rattata', 3500, 9),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Zubat', 3500, 9),
        new GymPokemon('Ekans', 3500, 11),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Rattata', 3500, 7),
        new GymPokemon('Zubat', 3500, 9),
        new GymPokemon('Zubat', 3500, 9),
    ], { weight: 1 }, undefined, '(male)'),
], {
    common: [
        { loot: 'Token_collector', weight: 2 },
        { loot: 'Dowsing_machine' },
    ],
    rare: [{ loot: 'Grey Shard' }],
    epic: [
        { loot: 'Greatball' },
        { loot: 'Lureball' },
    ],
    legendary: [
        { loot: 'Splash Plate', weight: 2 },
        { loot: 'MediumRestore' },
        { loot: 'Poison_Barb' },
    ],
}, 67900, [
    new DungeonTrainer('Rocket Executive', [new GymPokemon('Koffing', 320000, 14)], { weight: 1 }, 'Proton', '(proton)'),
], 3500, 33);
dungeonList['Ilex Forest'] = new Dungeon('Ilex Forest', [
    { pokemon: 'Caterpie', options: { weight: 0.5 } },
    { pokemon: 'Metapod', options: { weight: 0.5 } },
    { pokemon: 'Weedle', options: { weight: 0.5 } },
    { pokemon: 'Kakuna', options: { weight: 0.5 } },
    { pokemon: 'Zubat', options: { weight: 0.5 } },
    { pokemon: 'Oddish', options: { weight: 0.5 } },
    { pokemon: 'Paras', options: { weight: 0.5 } },
    { pokemon: 'Hoothoot', options: { weight: 0.5 } },
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Ledyba', 4000, 8),
        new GymPokemon('Paras', 4000, 10),
    ], { weight: 1 }, 'Wayne'),
], {
    common: [
        { loot: 'xAttack', weight: 2 },
        { loot: 'Lucky_egg' },
    ],
    rare: [{ loot: 'Green Shard' }],
    legendary: [
        { loot: 'Revive' },
        { loot: 'Insect Plate' },
        { loot: 'MediumRestore' },
        { loot: 'Silver_Powder' },
    ],
    mythic: [{ loot: 'Zap Plate' }],
}, 82200, [
    new DungeonBossPokemon('Noctowl', 340000, 30),
    new DungeonBossPokemon('Beedrill', 340000, 30),
    new DungeonBossPokemon('Butterfree', 340000, 30),
    new DungeonBossPokemon('Celebi', 800000, 50, { hide: true, requirement: new QuestLineStepCompletedRequirement('Unfinished Business', 12) }),
], 4000, 34);
dungeonList['Burned Tower'] = new Dungeon('Burned Tower', ['Rattata', 'Raticate', 'Zubat', 'Koffing'], {
    common: [
        { loot: 'Dowsing_machine', weight: 2 },
        { loot: 'xAttack' },
    ],
    rare: [{ loot: 'Red Shard' }],
    legendary: [
        { loot: 'Revive' },
        { loot: 'Flame Plate' },
        { loot: 'Ultraball' },
        { loot: 'Charcoal' },
    ],
}, 88500, [new DungeonBossPokemon('Golbat', 360000, 35), new DungeonBossPokemon('Weezing', 320000, 35), new DungeonBossPokemon('Shuckle', 610000, 50)], 4500, 37);
dungeonList['Tin Tower'] = new Dungeon('Tin Tower', ['Rattata', 'Gastly'], {
    common: [
        { loot: 'xClick' },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Grey Shard' },
    ],
    legendary: [
        { loot: 'MediumRestore' },
        { loot: 'Ultraball' },
        { loot: 'Flame Plate' },
        { loot: 'Spooky Plate' },
        { loot: 'Sky Plate' },
        { loot: 'Sharp_Beak' },
    ],
    mythic: [{ loot: 'Max Revive' }],
}, 88500, [
    new DungeonBossPokemon('Raticate', 380000, 35),
    new DungeonBossPokemon('Haunter', 380000, 35),
    new DungeonBossPokemon('Ho-Oh', 1410000, 100, { hide: true, requirement: new QuestLineStepCompletedRequirement('Rainbow Guardian', 1) }),
], 4500, 37);
dungeonList['Whirl Islands'] = new Dungeon('Whirl Islands', ['Zubat', 'Golbat', 'Seel', 'Krabby', 'Horsea'], {
    common: [
        { loot: 'Lucky_incense' },
        { loot: 'Token_collector' },
    ],
    rare: [{ loot: 'Blue Shard' }],
    legendary: [
        { loot: 'Revive' },
        { loot: 'Ultraball' },
        { loot: 'Mind Plate' },
        { loot: 'Sky Plate' },
        { loot: 'Mystic_Water' },
    ],
    mythic: [{ loot: 'Max Revive' }],
}, 92800, [
    new DungeonBossPokemon('Dewgong', 400000, 40),
    new DungeonBossPokemon('Kingler', 400000, 40),
    new DungeonBossPokemon('Lugia', 1410000, 100, { hide: true, requirement: new QuestLineStepCompletedRequirement('Whirl Guardian', 9) }),
], 5000, 41);
dungeonList['Mt. Mortar'] = new Dungeon('Mt. Mortar', [
    { pokemon: 'Rattata', options: { weight: 0.5 } },
    { pokemon: 'Raticate', options: { weight: 0.5 } },
    { pokemon: 'Zubat', options: { weight: 0.5 } },
    { pokemon: 'Golbat', options: { weight: 0.5 } },
    { pokemon: 'Geodude', options: { weight: 0.5 } },
    { pokemon: 'Graveler', options: { weight: 0.5 } },
    { pokemon: 'Marill', options: { weight: 0.5 } },
    new DungeonTrainer('PokéManiac', [
        new GymPokemon('Nidoking', 5500, 17),
        new GymPokemon('Nidoqueen', 5500, 17),
    ], { weight: 1 }, 'Miller'),
    new DungeonTrainer('Super Nerd', [new GymPokemon('Slowpoke', 5500, 19)], { weight: 1 }, 'Markus'),
    new DungeonTrainer('Super Nerd', [new GymPokemon('Seadra', 5500, 39)], { weight: 1 }, 'Hugh'),
], {
    common: [
        { loot: 'xAttack', weight: 6 },
        { loot: 'Graveler' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Grey Shard' },
    ],
    epic: [
        { loot: 'Iron Plate' },
        { loot: 'Stone Plate' },
        { loot: 'Earth Plate' },
        { loot: 'Draco Plate' },
    ],
    legendary: [
        { loot: 'Ultraball' },
        { loot: 'LargeRestore' },
        { loot: 'Revive' },
        { loot: 'Black_Belt' },
    ],
    mythic: [{ loot: 'Max Revive' }],
}, 104100, [
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Hitmonlee', 210000, 34),
        new GymPokemon('Hitmonchan', 210000, 34),
    ], { weight: 1 }, 'Kiyo'),
    new DungeonBossPokemon('Tyrogue', 420000, 45, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Mortar')) }),
], 5500, 42, () => {
    BagHandler.gainItem({ type: ItemType.item, id: 'Fighting_egg' }, 1);
    Notifier.notify({
        message: 'You were awarded a Fighting Egg for defeating Black Belt Kiyo.',
        type: NotificationConstants.NotificationOption.success,
        setting: NotificationConstants.NotificationSetting.Dungeons.rare_dungeon_item_found,
    });
});
dungeonList['Team Rocket\'s Hideout'] = new Dungeon('Team Rocket\'s Hideout', [
    { pokemon: 'Geodude', options: { weight: 0.5 } },
    { pokemon: 'Voltorb', options: { weight: 0.5 } },
    { pokemon: 'Electrode', options: { weight: 0.5 } },
    { pokemon: 'Koffing', options: { weight: 0.5 } },
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Rattata', 5500, 16),
        new GymPokemon('Rattata', 5500, 16),
        new GymPokemon('Rattata', 5500, 16),
        new GymPokemon('Rattata', 5500, 16),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Magnemite', 5500, 20),
        new GymPokemon('Magnemite', 5500, 20),
        new GymPokemon('Magnemite', 5500, 20),
    ], { weight: 1 }, 'Jed', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Drowzee', 5500, 17),
        new GymPokemon('Zubat', 5500, 19),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Zubat', 5500, 16),
        new GymPokemon('Grimer', 5500, 17),
        new GymPokemon('Rattata', 5500, 18),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Venonat', 5500, 18),
        new GymPokemon('Venonat', 5500, 18),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Golbat', 5500, 18)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Rattata', 5500, 17),
        new GymPokemon('Zubat', 5500, 17),
        new GymPokemon('Rattata', 5500, 17),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Ekans', 5500, 18),
        new GymPokemon('Gloom', 5500, 18),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Raticate', 5500, 19)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Koffing', 5500, 22),
        new GymPokemon('Koffing', 5500, 22),
    ], { weight: 1 }, 'Ross', '(male)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Ditto', 5500, 24)], { weight: 1 }, 'Mitch', '(male)'),
], {
    common: [
        { loot: 'xAttack', weight: 3 },
        { loot: 'Token_collector', weight: 3 },
        { loot: 'Electrode' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Purple Shard' },
    ],
    legendary: [
        { loot: 'Ultraball', weight: 2 },
        { loot: 'Revive', weight: 2 },
        { loot: 'LargeRestore' },
        { loot: 'Dread Plate' },
        { loot: 'Splash Plate' },
        { loot: 'Black_Glasses' },
    ],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Team Rocket\'s Hideout')) }],
}, 104100, [
    new DungeonTrainer('Rocket Executive', [
        new GymPokemon('Zubat', 140000, 22),
        new GymPokemon('Koffing', 140000, 22),
        new GymPokemon('Raticate', 140000, 24),
    ], { weight: 1 }, 'Petrel', '(petrel)'),
    new DungeonTrainer('Rocket Executive', [
        new GymPokemon('Arbok', 140000, 23),
        new GymPokemon('Gloom', 140000, 23),
        new GymPokemon('Murkrow', 140000, 25),
    ], { weight: 1 }, 'Ariana', '(ariana)'),
], 5500, 43);
dungeonList['Radio Tower'] = new Dungeon('Radio Tower', [
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Rattata', 5750, 27)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Muk', 5750, 23),
        new GymPokemon('Koffing', 5750, 23),
        new GymPokemon('Rattata', 5750, 25),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Koffing', 5750, 24),
        new GymPokemon('Muk', 5750, 24),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Burglar', [
        new GymPokemon('Growlithe', 5500, 26),
        new GymPokemon('Koffing', 5500, 24),
    ], { weight: 1 }, 'Eddie'),
    new DungeonTrainer('Burglar', [
        new GymPokemon('Koffing', 5500, 23),
        new GymPokemon('Magmar', 5500, 25),
        new GymPokemon('Koffing', 5500, 23),
    ], { weight: 1 }, 'Duncan'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Gloom', 5750, 25),
        new GymPokemon('Gloom', 5750, 25),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Raticate', 5750, 24),
        new GymPokemon('Golbat', 5750, 24),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Grimer', 5750, 26),
        new GymPokemon('Weezing', 5750, 23),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Koffing', 5750, 25),
        new GymPokemon('Koffing', 5750, 25),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Raticate', 5750, 24),
        new GymPokemon('Raticate', 5750, 24),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Arbok', 5750, 26)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Rattata', 5750, 21),
        new GymPokemon('Rattata', 5750, 21),
        new GymPokemon('Rattata', 5750, 21),
        new GymPokemon('Rattata', 5750, 21),
        new GymPokemon('Rattata', 5750, 21),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Grimer', 5750, 23),
        new GymPokemon('Grimer', 5750, 23),
        new GymPokemon('Muk', 5750, 25),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Zubat', 5750, 26),
        new GymPokemon('Zubat', 5750, 26),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Koffing', 5750, 23),
        new GymPokemon('Zubat', 5750, 23),
        new GymPokemon('Rattata', 5750, 23),
        new GymPokemon('Grimer', 5750, 23),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Magnemite', 5500, 27),
        new GymPokemon('Magnemite', 5500, 27),
        new GymPokemon('Magnemite', 5500, 27),
    ], { weight: 1 }, 'Marc', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Weezing', 5750, 26)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Raticate', 5750, 24),
        new GymPokemon('Koffing', 5750, 26),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Zubat', 5750, 22),
        new GymPokemon('Golbat', 5750, 24),
        new GymPokemon('Grimer', 5750, 22),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Porygon', 5750, 30)], { weight: 1 }, 'Rich', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Ekans', 5750, 21),
        new GymPokemon('Oddish', 5750, 23),
        new GymPokemon('Ekans', 5750, 21),
        new GymPokemon('Gloom', 5750, 24),
    ], { weight: 1 }, undefined, '(female)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Lucky_egg' },
    ],
    rare: [{ loot: 'Yellow Shard' }],
    epic: [
        { loot: 'Persim' },
        { loot: 'Razz' },
        { loot: 'Bluk' },
        { loot: 'Nanab' },
        { loot: 'Wepear' },
        { loot: 'Pinap' },
        { loot: 'Figy' },
        { loot: 'Wiki' },
        { loot: 'Mago' },
        { loot: 'Aguav' },
        { loot: 'Iapapa' },
    ],
    legendary: [
        { loot: 'Ultraball' },
        { loot: 'Magnet' },
        { loot: 'Pink_Bow' },
    ],
    mythic: [
        { loot: 'Max Revive' },
        { loot: 'Lum', requirement: new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Radio Tower')) },
    ],
}, 112000, [
    new DungeonTrainer('Rocket Executive', [
        new GymPokemon('Houndour', 143000, 33),
        new GymPokemon('Koffing', 143000, 32),
        new GymPokemon('Houndoom', 144000, 35),
    ], { weight: 1 }, 'Archer', '(archer)'),
    new DungeonTrainer('Rocket Executive', [new GymPokemon('Golbat', 430000, 36)], { weight: 1 }, 'Proton', '(proton)'),
    new DungeonTrainer('Rocket Executive', [
        new GymPokemon('Koffing', 71000, 30),
        new GymPokemon('Koffing', 71000, 30),
        new GymPokemon('Koffing', 71000, 30),
        new GymPokemon('Koffing', 71000, 30),
        new GymPokemon('Weezing', 72000, 32),
        new GymPokemon('Koffing', 71000, 30),
    ], { weight: 1 }, 'Petrel', '(petrel)'),
    new DungeonTrainer('Rocket Executive', [
        new GymPokemon('Arbok', 143000, 32),
        new GymPokemon('Gloom', 143000, 32),
        new GymPokemon('Murkrow', 144000, 32),
    ], { weight: 1 }, 'Ariana', '(ariana)'),
], 5750, 43);
dungeonList['Ice Path'] = new Dungeon('Ice Path', ['Zubat', 'Jynx', 'Swinub'], {
    common: [
        { loot: 'xClick' },
        { loot: 'Lucky_egg' },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Yellow Shard' },
        { loot: 'Purple Shard' },
    ],
    legendary: [
        { loot: 'Icicle Plate' },
        { loot: 'Revive' },
        { loot: 'Never_Melt_Ice' },
    ],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(450, GameConstants.getDungeonIndex('Ice Path')) }],
}, 120400, [new DungeonBossPokemon('Delibird', 440000, 50)], 6000, 44);
dungeonList['Dark Cave'] = new Dungeon('Dark Cave', ['Zubat', 'Golbat', 'Geodude', 'Graveler', 'Wobbuffet'], {
    common: [
        { loot: 'Pokeball' },
        { loot: 'Dowsing_machine' },
    ],
    rare: [{ loot: 'Purple Shard' }],
    legendary: [
        { loot: 'Dread Plate', weight: 2 },
        { loot: 'Revive' },
        { loot: 'Star Piece' },
        { loot: 'SmallRestore' },
        { loot: 'Silk_Scarf' },
    ],
    mythic: [
        { loot: 'Heart Scale' },
        { loot: 'Max Revive' },
    ],
}, 127000, [new DungeonBossPokemon('Dunsparce', 460000, 55)], 6500, 45);
dungeonList['Tohjo Falls'] = new Dungeon('Tohjo Falls', ['Rattata', 'Raticate', 'Zubat', 'Slowpoke', 'Goldeen', 'Magikarp'], {
    common: [
        { loot: 'Token_collector' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Grey Shard' },
        { loot: 'Purple Shard' },
    ],
    legendary: [
        { loot: 'Greatball' },
        { loot: 'Hard Stone' },
        { loot: 'SmallRestore' },
    ],
    mythic: [{ loot: 'Max Revive' }],
}, 127750, [
    new DungeonBossPokemon('Golbat', 480000, 55),
    new DungeonBossPokemon('Seaking', 480000, 55),
], 6750, 45);
dungeonList['Victory Road Johto'] = new Dungeon('Victory Road Johto', ['Golbat', 'Graveler', 'Onix', 'Rhyhorn'], {
    common: [
        { loot: 'Dowsing_machine', weight: 6 },
        { loot: 'Graveler' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Grey Shard' },
        { loot: 'Purple Shard' },
    ],
    legendary: [
        { loot: 'Earth Plate', weight: 2 },
        { loot: 'Ultraball', weight: 2 },
        { loot: 'SmallRestore', weight: 2 },
        { loot: 'LargeRestore' },
    ],
    mythic: [{ loot: 'Max Revive' }],
}, 128500, [
    new DungeonBossPokemon('Sandslash', 500000, 55),
    new DungeonBossPokemon('Rhydon', 500000, 55),
], 7000, 26);
dungeonList['Mt. Silver'] = new Dungeon('Mt. Silver', ['Ponyta', 'Doduo', 'Tangela', 'Sneasel', 'Ursaring', 'Donphan', 'Teddiursa', 'Phanpy', 'Quagsire', 'Misdreavus'], {
    common: [
        { loot: 'Token_collector' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Grey Shard' },
        { loot: 'Purple Shard' },
    ],
    legendary: [
        { loot: 'Fist Plate', weight: 2 },
        { loot: 'Zap Plate', weight: 2 },
        { loot: 'Ultraball', weight: 2 },
        { loot: 'LargeRestore' },
        { loot: 'Revive' },
        { loot: 'Star Piece' },
        { loot: 'Spell_Tag' },
    ],
    mythic: [
        { loot: 'Max Revive' },
        { loot: 'Heart Scale' },
        { loot: 'Protein', requirement: new ClearDungeonRequirement(450, GameConstants.getDungeonIndex('Mt. Silver')) },
    ],
}, 130500, [new DungeonBossPokemon('Larvitar', 840000, 60)], 10000, 28);
// Hoenn Dungeons
dungeonList['Petalburg Woods'] = new Dungeon('Petalburg Woods', [
    { pokemon: 'Poochyena', options: { weight: 1.33 } },
    { pokemon: 'Wurmple', options: { weight: 1.33 } },
    { pokemon: 'Silcoon', options: { weight: 1.33 } },
    { pokemon: 'Cascoon', options: { weight: 1.33 } },
    { pokemon: 'Taillow', options: { weight: 1.33 } },
    { pokemon: 'Shroomish', options: { weight: 1.33 } },
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Wurmple', 12000, 3),
        new GymPokemon('Wurmple', 12000, 3),
        new GymPokemon('Wurmple', 12000, 3),
        new GymPokemon('Wurmple', 12000, 3),
    ], { weight: 1 }, 'Lyle'),
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Nincada', 12000, 6),
        new GymPokemon('Nincada', 12000, 6),
    ], { weight: 1 }, 'James'),
], {
    common: [
        { loot: 'Pokeball' },
        { loot: 'Token_collector' },
    ],
    rare: [{ loot: 'Green Shard' }],
    epic: [
        { loot: 'Meadow Plate' },
        { loot: 'Insect Plate' },
        { loot: 'Iron Plate' },
        { loot: 'Greatball' },
    ],
    legendary: [
        { loot: 'SmallRestore' },
        { loot: 'Miracle_Seed' },
    ],
}, 380000, [
    new DungeonBossPokemon('Slakoth', 860000, 10, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Petalburg Woods')) }),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Poochyena', 860000, 9)], { weight: 1 }, undefined, '(male)'),
], 12000, 101);
dungeonList['Rusturf Tunnel'] = new Dungeon('Rusturf Tunnel', [
    { pokemon: 'Whismur', options: { weight: 4 } },
    new DungeonTrainer('Hiker', [
        new GymPokemon('Geodude', 14000, 16),
        new GymPokemon('Geodude', 14000, 16),
        new GymPokemon('Machop', 14000, 16),
    ], { weight: 1 }, 'Mike'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Pokeball' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
    ],
    legendary: [
        { loot: 'Stone Plate', weight: 2 },
        { loot: 'Iron Plate', weight: 2 },
        { loot: 'Earth Plate', weight: 2 },
        { loot: 'Revive' },
        { loot: 'Star Piece' },
        { loot: 'Hard Stone' },
    ],
    mythic: [{ loot: 'Heart Scale' }],
}, 400000, [
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Poochyena', 900000, 11)], { weight: 1 }, undefined, '(male)'),
], 14000, 101);
dungeonList['Granite Cave'] = new Dungeon('Granite Cave', ['Zubat', 'Abra', 'Geodude', 'Makuhita', 'Aron', 'Sableye'], {
    common: [
        { loot: 'Pokeball' },
        { loot: 'xAttack' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Iron Plate' },
        { loot: 'Earth Plate' },
        { loot: 'Everstone' },
        { loot: 'Revive' },
    ],
    legendary: [
        { loot: 'MediumRestore' },
        { loot: 'Star Piece' },
        { loot: 'Hard Stone' },
    ],
    mythic: [{ loot: 'Heart Scale' }],
}, 410000, [new DungeonBossPokemon('Mawile', 960000, 20), new DungeonBossPokemon('Nosepass', 660000, 20)], 16000, 101);
dungeonList['Fiery Path'] = new Dungeon('Fiery Path', ['Machop', 'Grimer', 'Koffing', 'Slugma', 'Numel'], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Dowsing_machine' },
    ],
    rare: [{ loot: 'Red Shard' }],
    legendary: [
        { loot: 'Flame Plate' },
        { loot: 'Draco Plate' },
    ],
}, 424000, [new DungeonBossPokemon('Torkoal', 1200000, 20)], 17000, 101);
dungeonList['Meteor Falls'] = new Dungeon('Meteor Falls', [
    { pokemon: 'Zubat', options: { weight: 0.8 } },
    { pokemon: 'Golbat', options: { weight: 0.8 } },
    { pokemon: 'Goldeen', options: { weight: 0.8 } },
    { pokemon: 'Magikarp', options: { weight: 0.8 } },
    { pokemon: 'Barboach', options: { weight: 0.8 } },
    new DungeonTrainer('Old Couple', [
        new GymPokemon('Medicham', 18000, 39),
        new GymPokemon('Hariyama', 18000, 39),
    ], { weight: 1 }, 'John and Jay'),
], {
    common: [
        { loot: 'Lucky_incense', weight: 6 },
        { loot: 'Pokeball', weight: 4 },
        { loot: 'Greatball' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
    ],
    epic: [
        { loot: 'Stone Plate' },
        { loot: 'Iron Plate' },
        { loot: 'Sky Plate' },
        { loot: 'Draco Plate' },
    ],
    mythic: [{ loot: 'Star Piece' }],
}, 443000, [
    new DungeonBossPokemon('Solrock', 1240000, 20),
    new DungeonBossPokemon('Lunatone', 1240000, 20),
    new DungeonTrainer('Dragon Tamer', [
        new GymPokemon('Altaria', 640000, 37),
        new GymPokemon('Altaria', 640000, 37),
    ], { weight: 1 }, 'Nicolas'),
], 18000, 101);
dungeonList['Mt. Chimney Crater'] = new Dungeon('Mt. Chimney Crater', [
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Numel', 20000, 20)], { weight: 2 }, undefined, '(female)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Zubat', 20000, 20)], { weight: 2 }, undefined, '(male)'),
    new DungeonTrainer('Magma Admin', [
        new GymPokemon('Numel', 18000, 18),
        new GymPokemon('Poochyena', 20000, 20),
        new GymPokemon('Numel', 22000, 22),
        new GymPokemon('Zubat', 22000, 22),
    ], { weight: 1 }, 'Tabitha'),
], {
    common: [
        { loot: 'xAttack', weight: 2 },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
    ],
    legendary: [{ loot: 'Flame Plate' }],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Mt. Chimney Crater')) }],
}, 460000, [
    new DungeonTrainer('Magma Leader', [
        new GymPokemon('Mightyena', 450000, 24),
        new GymPokemon('Zubat', 450000, 24),
        new GymPokemon('Camerupt', 470000, 25),
    ], { weight: 1 }, 'Maxie'),
], 20000, 101);
dungeonList['Jagged Pass'] = new Dungeon('Jagged Pass', [
    { pokemon: 'Machop', options: { weight: 0.8 } },
    { pokemon: 'Numel', options: { weight: 0.8 } },
    { pokemon: 'Spoink', options: { weight: 0.8 } },
    new DungeonTrainer('Hiker', [
        new GymPokemon('Geodude', 22000, 20),
        new GymPokemon('Baltoy', 22000, 20),
    ], { weight: 1 }, 'Eric'),
    new DungeonTrainer('Picnicker', [
        new GymPokemon('Shroomish', 22000, 19),
        new GymPokemon('Oddish', 22000, 19),
        new GymPokemon('Swablu', 22000, 19),
    ], { weight: 1 }, 'Diana'),
    new DungeonTrainer('Picnicker', [new GymPokemon('Shroomish', 22000, 21)], { weight: 1 }, 'Autumn'),
    new DungeonTrainer('Triathlete', [new GymPokemon('Magnemite', 22000, 21)], { weight: 1 }, 'Julio', '(malecycling)'),
    new DungeonTrainer('Camper', [
        new GymPokemon('Zigzagoon', 22000, 20),
        new GymPokemon('Taillow', 22000, 20),
    ], { weight: 1 }, 'Ethan'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Green Shard' },
    ],
    epic: [{ loot: 'Greatball' }],
    legendary: [
        { loot: 'Dread Plate' },
        { loot: 'Stone Plate' },
    ],
}, 460000, [
    new DungeonTrainer('Team Magma Grunt', [
        new GymPokemon('Mightyena', 700000, 22),
        new GymPokemon('Zubat', 700000, 22),
    ], { weight: 1 }, undefined, '(male)'),
], 22000, 101);
dungeonList['New Mauville'] = new Dungeon('New Mauville', ['Magnemite', 'Voltorb'], {
    common: [
        { loot: 'Lucky_incense', weight: 3 },
        { loot: 'Cheri', weight: 3 },
        { loot: 'Voltorb' },
    ],
    rare: [{ loot: 'Yellow Shard' }],
    epic: [
        { loot: 'Razz' },
        { loot: 'Ultraball' },
    ],
    legendary: [{ loot: 'Zap Plate' }],
}, 460000, [
    new DungeonBossPokemon('Magneton', 1650000, 20),
    new DungeonBossPokemon('Electrode', 1650000, 20),
], 24000, 101);
dungeonList['Weather Institute'] = new Dungeon('Weather Institute', [
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Carvanha', 39000, 28)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Zubat', 39000, 27),
        new GymPokemon('Poochyena', 39000, 27),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Poochyena', 39000, 27),
        new GymPokemon('Carvanha', 39000, 27),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Zubat', 39000, 27),
        new GymPokemon('Poochyena', 39000, 27),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Poochyena', 39000, 26),
        new GymPokemon('Zubat', 39000, 26),
        new GymPokemon('Carvanha', 39000, 26),
    ], { weight: 1 }, undefined, '(male)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Damp Rock' },
        { loot: 'Smooth Rock' },
        { loot: 'Heat Rock' },
        { loot: 'Icy Rock' },
    ],
    legendary: [{ loot: 'Splash Plate' }],
}, 470000, [
    new DungeonTrainer('Aqua Admin', [
        new GymPokemon('Carvanha', 910000, 28),
        new GymPokemon('Mightyena', 910000, 28),
    ], { weight: 1 }, 'Shelly', '(shelly)'),
    new DungeonBossPokemon('Castform', 1820000, 20, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Weather Institute')) }),
], 26000, 101);
dungeonList['Mt. Pyre'] = new Dungeon('Mt. Pyre', [
    { pokemon: 'Shuppet', options: { weight: 12 } },
    { pokemon: 'Duskull', options: { weight: 12 } },
    { pokemon: 'Vulpix', options: { weight: 12 } },
    { pokemon: 'Wingull', options: { weight: 12 } },
    { pokemon: 'Meditite', options: { weight: 12 } },
    new DungeonTrainer('PokéManiac', [new GymPokemon('Rhyhorn', 28000, 31)], { weight: 1 }, 'Mark'),
    new DungeonTrainer('Hex Maniac', [new GymPokemon('Spoink', 28000, 31)], { weight: 1 }, 'Leah'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Hariyama', 28000, 31)], { weight: 1 }, 'Zander'),
    new DungeonTrainer('Young Couple', [
        new GymPokemon('Delcatty', 28000, 31),
        new GymPokemon('Manectric', 28000, 31),
    ], { weight: 1 }, 'Dez & Luke'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Wobbuffet', 28000, 26),
        new GymPokemon('Natu', 28000, 26),
        new GymPokemon('Kadabra', 28000, 26),
    ], { weight: 1 }, 'Kayla', '(female)'),
    new DungeonTrainer('Pokémon Breeder', [
        new GymPokemon('Skitty', 15000, 26),
        new GymPokemon('Poochyena', 15000, 26),
        new GymPokemon('Zigzagoon', 15000, 26),
        new GymPokemon('Lotad', 15000, 26),
        new GymPokemon('Seedot', 15000, 26),
        new GymPokemon('Taillow', 15000, 26),
    ], { weight: 1 }, 'Gabrielle', '(female)'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Ralts', 28000, 26),
        new GymPokemon('Ralts', 28000, 26),
        new GymPokemon('Kirlia', 28000, 26),
    ], { weight: 1 }, 'William', '(male)'),
    new DungeonTrainer('Hex Maniac', [new GymPokemon('Shuppet', 28000, 32)], { weight: 1 }, 'Tasha'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Hariyama', 28000, 32)], { weight: 1 }, 'Atsushi'),
    new DungeonTrainer('Hex Maniac', [new GymPokemon('Sableye', 28000, 32)], { weight: 1 }, 'Valerie'),
    new DungeonTrainer('Psychic', [new GymPokemon('Wobbuffet', 28000, 32)], { weight: 1 }, 'Cedric', '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Carvanha', 28000, 32)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Zubat', 28000, 32)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Poochyena', 28000, 30),
        new GymPokemon('Carvanha', 28000, 30),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Wailmer', 28000, 30),
        new GymPokemon('Zubat', 28000, 30),
    ], { weight: 1 }, undefined, '(female)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Blue Shard' },
    ],
    epic: [{ loot: 'Ultraball' }],
    legendary: [
        { loot: 'Spooky Plate' },
        { loot: 'Fist Plate' },
        { loot: 'Mind Plate' },
    ],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Mt. Pyre')) }],
}, 480000, [
    new DungeonBossPokemon('Shuppet', 1880000, 20),
    new DungeonBossPokemon('Duskull', 1890000, 20),
    new DungeonBossPokemon('Chimecho', 1880000, 20),
], 28000, 101);
dungeonList['Magma Hideout'] = new Dungeon('Magma Hideout', [
    { pokemon: 'Geodude', options: { weight: 12 } },
    { pokemon: 'Graveler', options: { weight: 12 } },
    { pokemon: 'Torkoal', options: { weight: 12 } },
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Poochyena', 29000, 29)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Numel', 29000, 29)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Mightyena', 29000, 29)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Magma Grunt', [
        new GymPokemon('Baltoy', 29000, 28),
        new GymPokemon('Numel', 29000, 28),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Zubat', 29000, 29)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Numel', 29000, 29)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Mightyena', 29000, 29)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Baltoy', 29000, 29)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Baltoy', 29000, 29)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Magma Admin', [
        new GymPokemon('Numel', 6000, 26),
        new GymPokemon('Mightyena', 8000, 28),
        new GymPokemon('Zubat', 10000, 30),
        new GymPokemon('Camerupt', 13000, 33),
    ], { weight: 1 }, 'Tabitha'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Figy', weight: 2 },
        { loot: 'Pinap' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
    ],
    legendary: [
        { loot: 'Flame Plate' },
        { loot: 'Dread Plate' },
        { loot: 'Nestball' },
    ],
}, 490000, [
    new DungeonTrainer('Magma Leader', [
        new GymPokemon('Mightyena', 630000, 37),
        new GymPokemon('Crobat', 640000, 38),
        new GymPokemon('Camerupt', 650000, 39),
    ], { weight: 1 }, 'Maxie'),
], 29000, 101);
dungeonList['Aqua Hideout'] = new Dungeon('Aqua Hideout', [
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Poochyena', 30000, 32)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Carvanha', 30000, 32)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Zubat', 30000, 31),
        new GymPokemon('Carvanha', 30000, 31),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Poochyena', 30000, 31),
        new GymPokemon('Zubat', 30000, 31),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Carvanha', 30000, 32)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Zubat', 30000, 32)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Zubat', 30000, 32)], { weight: 1 }, undefined, '(female)'),
], {
    common: [
        { loot: 'Token_collector', weight: 4 },
        { loot: 'Pokeball', weight: 2 },
        { loot: 'Electrode' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [
        { loot: 'Lureball' },
        { loot: 'Diveball' },
    ],
    legendary: [
        { loot: 'Dread Plate', weight: 2 },
        { loot: 'Splash Plate', weight: 2 },
        { loot: 'Duskball' },
        { loot: 'Nestball' },
    ],
    mythic: [{ loot: 'Max Revive' }],
}, 490000, [
    new DungeonTrainer('Aqua Admin', [
        new GymPokemon('Mightyena', 900000, 34),
        new GymPokemon('Golbat', 900000, 34),
    ], { weight: 1 }, 'Matt', '(matt)'),
], 30000, 101);
dungeonList['Shoal Cave'] = new Dungeon('Shoal Cave', ['Zubat', 'Golbat', 'Spheal', 'Tentacool', 'Magikarp', 'Wailmer'], {
    common: [
        { loot: 'xClick', weight: 2 },
        { loot: 'Lucky_incense' },
    ],
    rare: [{ loot: 'Ochre Shard' }],
    legendary: [
        { loot: 'Icicle Plate', weight: 2 },
        { loot: 'Star Piece' },
        { loot: 'Revive' },
    ],
    mythic: [
        { loot: 'Max Revive' },
        { loot: 'Heart Scale' },
        { loot: 'Never_Melt_Ice' },
    ],
}, 490000, [new DungeonBossPokemon('Snorunt', 1900000, 20)], 30000, 101);
dungeonList['Cave of Origin'] = new Dungeon('Cave of Origin', ['Zubat', 'Golbat', 'Sableye', 'Mawile'], {
    common: [{ loot: 'xAttack' }],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Ochre Shard' },
    ],
    legendary: [{ loot: 'Revive' }],
    mythic: [
        { loot: 'Protein', requirement: new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Cave of Origin')) },
        { loot: 'Lum', requirement: new ClearDungeonRequirement(150, GameConstants.getDungeonIndex('Cave of Origin')) },
    ],
}, 590000, [
    new DungeonBossPokemon('Exploud', 2000000, 50),
    new DungeonBossPokemon('Kyogre', 4700000, 100, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion) }),
    new DungeonBossPokemon('Groudon', 4700000, 100, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion) }),
], 34000, 101);
dungeonList['Seafloor Cavern'] = new Dungeon('Seafloor Cavern', [
    { pokemon: 'Zubat', options: { weight: 4.8 } },
    { pokemon: 'Golbat', options: { weight: 4.8 } },
    { pokemon: 'Tentacool', options: { weight: 4.8 } },
    { pokemon: 'Magikarp', options: { weight: 4.8 } },
    { pokemon: 'Wailmer', options: { weight: 4.8 } },
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Poochyena', 32000, 36)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Carvanha', 32000, 36)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Zubat', 32000, 36)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Carvanha', 32000, 36)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Mightyena', 32000, 35),
        new GymPokemon('Golbat', 32000, 35),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Aqua Admin', [
        new GymPokemon('Sharpedo', 32000, 37),
        new GymPokemon('Mightyena', 32000, 37),
    ], { weight: 1 }, 'Shelly', '(shelly)'),
], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Token_collector' },
    ],
    rare: [{ loot: 'Blue Shard' }],
    epic: [{ loot: 'Bluk' }],
    legendary: [
        { loot: 'Splash Plate' },
        { loot: 'Earth Plate' },
    ],
    mythic: [{ loot: 'Heart Scale' }],
}, 530000, [
    new DungeonTrainer('Aqua Leader', [
        new GymPokemon('Mightyena', 700000, 41),
        new GymPokemon('Crobat', 700000, 41),
        new GymPokemon('Sharpedo', 900000, 43),
    ], { weight: 1 }, 'Archie'),
], 32000, 101);
dungeonList['Sky Pillar'] = new Dungeon('Sky Pillar', ['Golbat', 'Sableye', 'Claydol', 'Banette', 'Mawile', 'Altaria'], {
    common: [
        { loot: 'xAttack', weight: 4 },
        { loot: 'Greatball' },
    ],
    rare: [
        { loot: 'Yellow Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [{ loot: 'Ultraball' }],
    legendary: [
        { loot: 'Sky Plate' },
        { loot: 'Mind Plate' },
        { loot: 'Draco Plate' },
    ],
}, 720000, [
    new DungeonBossPokemon('Dusclops', 3200000, 20),
    new DungeonBossPokemon('Rayquaza', 5824002, 100),
], 34000, 101);
dungeonList['Sealed Chamber'] = new Dungeon('Sealed Chamber', ['Zubat', 'Magikarp', 'Tentacool', 'Wailmer', 'Horsea'], {
    common: [
        { loot: 'xClick' },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [
        { loot: 'Greatball' },
        { loot: 'Diveball' },
    ],
    legendary: [
        { loot: 'Stone Plate', weight: 2 },
        { loot: 'Icicle Plate', weight: 2 },
        { loot: 'Iron Plate', weight: 2 },
        { loot: 'Hard Stone' },
    ],
}, 500000, [
    new DungeonBossPokemon('Golbat', 4500000, 20, { hide: true, requirement: new QuestLineStepCompletedRequirement('The Three Golems', 8, GameConstants.AchievementOption.less) }),
    new DungeonBossPokemon('Regirock', 4500000, 20, { requirement: new QuestLineStepCompletedRequirement('The Three Golems', 8) }),
    new DungeonBossPokemon('Regice', 4500000, 20, { requirement: new QuestLineStepCompletedRequirement('The Three Golems', 8) }),
    new DungeonBossPokemon('Registeel', 4500000, 20, { requirement: new QuestLineStepCompletedRequirement('The Three Golems', 8) }),
], 36000, 101);
dungeonList['Victory Road Hoenn'] = new Dungeon('Victory Road Hoenn', [
    { pokemon: 'Zubat', options: { weight: 4 } },
    { pokemon: 'Golbat', options: { weight: 4 } },
    { pokemon: 'Goldeen', options: { weight: 4 } },
    { pokemon: 'Magikarp', options: { weight: 4 } },
    { pokemon: 'Whismur', options: { weight: 4 } },
    { pokemon: 'Loudred', options: { weight: 4 } },
    { pokemon: 'Makuhita', options: { weight: 4 } },
    { pokemon: 'Hariyama', options: { weight: 4 } },
    { pokemon: 'Aron', options: { weight: 4 } },
    { pokemon: 'Lairon', options: { weight: 4 } },
    { pokemon: 'Mawile', options: { weight: 4 } },
    { pokemon: 'Meditite', options: { weight: 4 } },
    { pokemon: 'Medicham', options: { weight: 4 } },
    { pokemon: 'Barboach', options: { weight: 4 } },
    { pokemon: 'Whiscash', options: { weight: 4 } },
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Magneton', 37000, 43),
        new GymPokemon('Muk', 37000, 43),
    ], { weight: 1 }, 'Albert', '(male)'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Roselia', 37000, 45)], { weight: 1 }, 'Hope', '(female)'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Claydol', 37000, 45)], { weight: 1 }, 'Shannon', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Swellow', 37000, 42),
        new GymPokemon('Mawile', 37000, 42),
        new GymPokemon('Kadabra', 37000, 42),
    ], { weight: 1 }, 'Samuel', '(male)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Sandslash', 37000, 42),
        new GymPokemon('Ninetales', 37000, 42),
        new GymPokemon('Tropius', 37000, 42),
    ], { weight: 1 }, 'Julie', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Claydol', 37000, 43),
        new GymPokemon('Lanturn', 37000, 43),
    ], { weight: 1 }, 'Dianne', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Medicham', 37000, 43),
        new GymPokemon('Claydol', 37000, 43),
    ], { weight: 1 }, 'Felix', '(male)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Skarmory', 37000, 43),
        new GymPokemon('Sableye', 37000, 43),
    ], { weight: 1 }, 'Caroline', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Dodrio', 30000, 42),
        new GymPokemon('Kadabra', 30000, 42),
        new GymPokemon('Electrode', 30000, 42),
        new GymPokemon('Shiftry', 30000, 42),
    ], { weight: 1 }, 'Vito', '(male)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Torkoal', 37000, 42),
        new GymPokemon('Medicham', 37000, 42),
        new GymPokemon('Ludicolo', 37000, 42),
    ], { weight: 1 }, 'Michelle', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Lunatone', 37000, 43),
        new GymPokemon('Solrock', 37000, 43),
    ], { weight: 1 }, 'Mitchell', '(male)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Sableye', 37000, 43),
        new GymPokemon('Absol', 37000, 43),
    ], { weight: 1 }, 'Halle', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Cacturne', 37000, 43),
        new GymPokemon('Pelipper', 37000, 43),
    ], { weight: 1 }, 'Edgar', '(male)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Gardevoir', 37000, 43),
        new GymPokemon('Slaking', 37000, 43),
    ], { weight: 1 }, 'Katelynn', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Slaking', 37000, 43),
        new GymPokemon('Dusclops', 37000, 43),
    ], { weight: 1 }, 'Quincy', '(male)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [{ loot: 'Ultraball' }],
    legendary: [
        { loot: 'Mind Plate' },
        { loot: 'Flame Plate' },
    ],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Victory Road Hoenn')) }],
}, 560000, [
    new DungeonTrainer('PKMN Trainer', [
        new GymPokemon('Altaria', 680000, 44),
        new GymPokemon('Delcatty', 670000, 43),
        new GymPokemon('Roselia', 680000, 44),
        new GymPokemon('Magneton', 650000, 41),
        new GymPokemon('Gardevoir', 690000, 45),
    ], { weight: 1 }, 'Wally', '(wally)'),
], 37000, 101);
// Sinnoh
dungeonList['Oreburgh Gate'] = new Dungeon('Oreburgh Gate', [
    { pokemon: 'Zubat', options: { weight: 1.1 } },
    { pokemon: 'Golbat', options: { weight: 1.1 } },
    { pokemon: 'Psyduck', options: { weight: 1.1 } },
    { pokemon: 'Golduck', options: { weight: 1.1 } },
    { pokemon: 'Geodude', options: { weight: 1.1 } },
    { pokemon: 'Magikarp', options: { weight: 1.1 } },
    { pokemon: 'Barboach', options: { weight: 1.1 } },
    new DungeonTrainer('Camper', [
        new GymPokemon('Starly', 720600, 7),
        new GymPokemon('Shinx', 720600, 7),
    ], { weight: 1 }, 'Curtis'),
    new DungeonTrainer('Picnicker', [new GymPokemon('Bidoof', 720600, 9)], { weight: 1 }, 'Diana'),
], {
    common: [
        { loot: 'xAttack', weight: 2 },
        { loot: 'Dowsing_machine' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
    ],
    epic: [
        { loot: 'Earth Plate' },
        { loot: 'Fist Plate' },
    ],
}, 720600, [
    new DungeonBossPokemon('Gyarados', 3703000, 14),
    new DungeonBossPokemon('Whiscash', 3703000, 14),
], 39000, 203);
dungeonList['Valley Windworks'] = new Dungeon('Valley Windworks', [
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Glameow', 756000, 13)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Zubat', 756000, 13)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Glameow', 756000, 11),
        new GymPokemon('Stunky', 756000, 11),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Stunky', 756000, 13)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Zubat', 756000, 11),
        new GymPokemon('Zubat', 756000, 11),
    ], { weight: 1 }, undefined, '(male)'),
], {
    common: [
        { loot: 'Lucky_incense' },
        { loot: 'Pokeball' },
        { loot: 'Greatball' },
    ],
    rare: [{ loot: 'Yellow Shard' }],
    epic: [{ loot: 'Zap Plate' }],
    legendary: [{ loot: 'SmallRestore' }],
}, 756000, [
    new DungeonTrainer('Commander', [
        new GymPokemon('Zubat', 1901500, 15),
        new GymPokemon('Purugly', 1901500, 17),
    ], { weight: 1 }, 'Mars', '(mars)'),
    new DungeonBossPokemon('Drifloon', 3803000, 14, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Valley Windworks')) }),
], 43000, 204);
dungeonList['Eterna Forest'] = new Dungeon('Eterna Forest', [
    { pokemon: 'Gastly', options: { weight: 1.8 } },
    { pokemon: 'Hoothoot', options: { weight: 1.8 } },
    { pokemon: 'Wurmple', options: { weight: 1.8 } },
    { pokemon: 'Silcoon', options: { weight: 1.8 } },
    { pokemon: 'Cascoon', options: { weight: 1.8 } },
    { pokemon: 'Bidoof', options: { weight: 1.8 } },
    { pokemon: 'Kricketot', options: { weight: 1.8 } },
    { pokemon: 'Budew', options: { weight: 1.8 } },
    { pokemon: 'Buneary', options: { weight: 1.8 } },
    new DungeonTrainer('Bookworms', [
        new GymPokemon('Wurmple', 812000, 9),
        new GymPokemon('Silcoon', 812000, 11),
        new GymPokemon('Beautifly', 812000, 13),
        new GymPokemon('Pachirisu', 812000, 14),
    ], { weight: 1 }, 'Jack & Briana'),
    new DungeonTrainer('Melded Minds', [
        new GymPokemon('Abra', 812000, 15),
        new GymPokemon('Abra', 812000, 15),
    ], { weight: 1 }, 'Linsey & Elijah', '(both)'),
    new DungeonTrainer('Bug Buds', [
        new GymPokemon('Wurmple', 812000, 9),
        new GymPokemon('Cascoon', 812000, 11),
        new GymPokemon('Dustox', 812000, 13),
        new GymPokemon('Burmy (Plant)', 812000, 12),
        new GymPokemon('Kricketune', 812000, 12),
    ], { weight: 1 }, 'Philip & Donald'),
    new DungeonTrainer('Melded Minds', [
        new GymPokemon('Meditite', 812000, 15),
        new GymPokemon('Psyduck', 812000, 15),
    ], { weight: 1 }, 'Kody & Rachael', '(both)'),
], {
    common: [
        { loot: 'Cheri' },
        { loot: 'Oran' },
        { loot: 'Razz' },
        { loot: 'Bluk' },
        { loot: 'Greatball' },
    ],
    rare: [{ loot: 'Green Shard' }],
    epic: [
        { loot: 'Insect Plate' },
        { loot: 'Meadow Plate' },
    ],
    legendary: [
        { loot: 'SmallRestore' },
        { loot: 'Silver_Powder' },
    ],
}, 812000, [
    new DungeonBossPokemon('Beautifly', 3950000, 30),
    new DungeonBossPokemon('Dustox', 3950000, 30),
], 48000, 205);
dungeonList['Old Chateau'] = new Dungeon('Old Chateau', ['Gastly', 'Haunter', 'Gengar'], {
    common: [
        { loot: 'xClick' },
        { loot: 'Dowsing_machine' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
    ],
    epic: [
        { loot: 'Dread Plate' },
        { loot: 'Spooky Plate' },
        { loot: 'Zap Plate' },
    ],
    legendary: [{ loot: 'Odd Keystone' }],
}, 853000, [new DungeonBossPokemon('Rotom', 4200000, 100)], 52500, 205);
dungeonList['Team Galactic Eterna Building'] = new Dungeon('Team Galactic Eterna Building', [
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Zubat', 877000, 17),
        new GymPokemon('Stunky', 877000, 17),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Zubat', 877000, 16),
        new GymPokemon('Glameow', 877000, 18),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Glameow', 877000, 19)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Croagunk', 877000, 19)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Stunky', 877000, 16),
        new GymPokemon('Croagunk', 877000, 16),
        new GymPokemon('Glameow', 877000, 16),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Kadabra', 877000, 20)], { weight: 1 }, 'Travon', '(male)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Yellow Shard' },
        { loot: 'Red Shard' },
    ],
    epic: [{ loot: 'Toxic Plate' }],
    legendary: [{ loot: 'Revive' }],
}, 877000, [
    new DungeonTrainer('Commander', [
        new GymPokemon('Zubat', 2150000, 21),
        new GymPokemon('Skuntank', 2150000, 23),
    ], { weight: 1 }, 'Jupiter', '(jupiter)'),
    new DungeonBossPokemon('Rotom (Heat)', 4300000, 100, { requirement: new MultiRequirement([
            new ObtainedPokemonRequirement(pokemonMap.Rotom),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Galactic Eterna Building')),
        ]) }),
    new DungeonBossPokemon('Rotom (Wash)', 4300000, 100, { requirement: new MultiRequirement([
            new ObtainedPokemonRequirement(pokemonMap.Rotom),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Galactic Eterna Building')),
        ]) }),
    new DungeonBossPokemon('Rotom (Frost)', 4300000, 100, { requirement: new MultiRequirement([
            new ObtainedPokemonRequirement(pokemonMap.Rotom),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Galactic Eterna Building')),
        ]) }),
    new DungeonBossPokemon('Rotom (Fan)', 4300000, 100, { requirement: new MultiRequirement([
            new ObtainedPokemonRequirement(pokemonMap.Rotom),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Galactic Eterna Building')),
        ]) }),
    new DungeonBossPokemon('Rotom (Mow)', 4300000, 100, { requirement: new MultiRequirement([
            new ObtainedPokemonRequirement(pokemonMap.Rotom),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Galactic Eterna Building')),
        ]) }),
], 54250, 205);
dungeonList['Wayward Cave'] = new Dungeon('Wayward Cave', [
    { pokemon: 'Zubat', options: { weight: 6.7 } },
    { pokemon: 'Geodude', options: { weight: 6.7 } },
    { pokemon: 'Onix', options: { weight: 6.7 } },
    new DungeonTrainer('Mountain Men', [
        new GymPokemon('Geodude', 903000, 20),
        new GymPokemon('Geodude', 903000, 20),
        new GymPokemon('Onix', 903000, 22),
    ], { weight: 1 }, 'Reginald & Lorenzo'),
    new DungeonTrainer('Siblings', [
        new GymPokemon('Buneary', 903000, 22),
        new GymPokemon('Staravia', 903000, 17),
        new GymPokemon('Ponyta', 903000, 20),
        new GymPokemon('Shellos (West)', 903000, 20),
    ], { weight: 1 }, 'Cassidy & Wayne'),
    new DungeonTrainer('Nature Friends', [
        new GymPokemon('Psyduck', 903000, 22),
        new GymPokemon('Aipom', 903000, 22),
    ], { weight: 1 }, 'Tori & Diego'),
    new DungeonTrainer('Nature Friends', [
        new GymPokemon('Hoothoot', 903000, 22),
        new GymPokemon('Buizel', 903000, 20),
        new GymPokemon('Shinx', 903000, 20),
    ], { weight: 1 }, 'Ana & Parker'),
    new DungeonTrainer('Amateur Archaeologists', [
        new GymPokemon('Gible', 903000, 22),
        new GymPokemon('Geodude', 903000, 19),
        new GymPokemon('Bronzor', 903000, 21),
    ], { weight: 1 }, 'Terry & Gerald'),
], {
    common: [
        { loot: 'Token_collector' },
        { loot: 'Rawst', weight: 2 },
        { loot: 'Razz' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Green Shard' },
    ],
    epic: [
        { loot: 'Greatball' },
        { loot: 'Earth Plate' },
        { loot: 'Draco Plate' },
    ],
    legendary: [
        { loot: 'Revive', weight: 2 },
        { loot: 'SmallRestore', weight: 2 },
        { loot: 'MediumRestore' },
    ],
}, 903000, [new DungeonBossPokemon('Bronzor', 4400000, 100)], 56500, 206);
dungeonList['Mt. Coronet South'] = new Dungeon('Mt. Coronet South', ['Clefairy', 'Zubat', 'Machop', 'Geodude', 'Magikarp', 'Cleffa', 'Barboach', 'Chingling'], {
    common: [
        { loot: 'xAttack', weight: 2 },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [{ loot: 'Stone Plate' }],
    legendary: [{ loot: 'Revive', weight: 2 }],
}, 951500, [
    new DungeonBossPokemon('Nosepass', 4000000, 35),
    new DungeonBossPokemon('Meditite', 4000000, 50),
    new DungeonBossPokemon('Bronzor', 4000000, 50),
], 60500, 207);
// All Unown except "FHP?!"
SeededRand.seed(420);
const SolaceonUnownList = SeededRand.shuffleArray('ABCDEGIJKLMNOQRSTUVWXYZ'.split(''));
dungeonList['Solaceon Ruins'] = new Dungeon('Solaceon Ruins', [
    { pokemon: 'Zubat', options: { weight: 0.8 } },
    { pokemon: 'Geodude', options: { weight: 0.8 } },
    { pokemon: 'Natu', options: { weight: 0.8 } },
    { pokemon: 'Bronzor', options: { weight: 0.8 } },
    { pokemon: 'Hippopotas', options: { weight: 0.8 } },
    new DungeonTrainer('Ruin Maniac', [
        new GymPokemon('Geodude', 960000, 19),
        new GymPokemon('Geodude', 960000, 21),
        new GymPokemon('Bronzor', 960000, 23),
    ], { weight: 1 }, 'Karl'),
], {
    common: [
        { loot: 'Lucky_incense', weight: 2 },
        { loot: 'Persim' },
    ],
    rare: [{ loot: 'Crimson Shard' }],
    epic: [
        { loot: 'Mind Plate' },
        { loot: 'Sky Plate' },
    ],
}, 960000, [
    ...SolaceonUnownList.map((char) => new DungeonBossPokemon(`Unown (${char})`, 4100000, 30, {
        hide: true,
        requirement: new SeededDateRequirement(() => SeededDateRand.fromArray(SolaceonUnownList) == char),
    })),
], 62500, 209);
dungeonList['Iron Island'] = new Dungeon('Iron Island', [
    { pokemon: 'Zubat', options: { weight: 3.3 } },
    { pokemon: 'Golbat', options: { weight: 3.3 } },
    { pokemon: 'Tentacool', options: { weight: 3.3 } },
    { pokemon: 'Tentacruel', options: { weight: 3.3 } },
    { pokemon: 'Geodude', options: { weight: 3.3 } },
    { pokemon: 'Graveler', options: { weight: 3.3 } },
    { pokemon: 'Onix', options: { weight: 3.3 } },
    { pokemon: 'Steelix', options: { weight: 3.3 } },
    { pokemon: 'Wingull', options: { weight: 3.3 } },
    { pokemon: 'Pelipper', options: { weight: 3.3 } },
    { pokemon: 'Finneon', options: { weight: 3.3 } },
    new DungeonTrainer('Camper', [
        new GymPokemon('Aipom', 983000, 34),
        new GymPokemon('Floatzel', 983000, 36),
    ], { weight: 1 }, 'Lawrence'),
    new DungeonTrainer('Picnicker', [new GymPokemon('Raichu', 983000, 37)], { weight: 1 }, 'Summer'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Magnemite', 983000, 34),
        new GymPokemon('Magnemite', 983000, 36),
    ], { weight: 1 }, 'Noel', '(male)'),
    new DungeonTrainer('Worker', [new GymPokemon('Steelix', 983000, 37)], { weight: 1 }, 'Braden', '(male)'),
    new DungeonTrainer('Mountain Men', [
        new GymPokemon('Nosepass', 983000, 35),
        new GymPokemon('Onix', 983000, 33),
        new GymPokemon('Steelix', 983000, 34),
        new GymPokemon('Graveler', 983000, 35),
        new GymPokemon('Rhyhorn', 983000, 35),
    ], { weight: 1 }, 'Damon & Maurice'),
    new DungeonTrainer('Crush Kin', [
        new GymPokemon('Toxicroak', 983000, 38),
        new GymPokemon('Medicham', 983000, 38),
    ], { weight: 1 }, 'Kendal & Tyler'),
    new DungeonTrainer('Co-workers', [
        new GymPokemon('Geodude', 983000, 33),
        new GymPokemon('Geodude', 983000, 33),
        new GymPokemon('Machoke', 983000, 36),
        new GymPokemon('Magnemite', 983000, 34),
        new GymPokemon('Graveler', 983000, 34),
        new GymPokemon('Machop', 983000, 34),
    ], { weight: 1 }, 'Brendon & Quentin'),
    new DungeonTrainer('Ace Duo', [
        new GymPokemon('Quagsire', 983000, 35),
        new GymPokemon('Staraptor', 983000, 36),
        new GymPokemon('Hippopotas', 983000, 38),
        new GymPokemon('Lopunny', 983000, 38),
        new GymPokemon('Medicham', 983000, 35),
        new GymPokemon('Kirlia', 983000, 36),
    ], { weight: 1 }, 'Jonah & Brenda'),
], {
    common: [
        { loot: 'Dowsing_machine', weight: 2 },
        { loot: 'Pokeball' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Iron Plate', weight: 2 },
        { loot: 'Ultraball', weight: 2 },
        { loot: 'Revive' },
        { loot: 'Duskball' },
    ],
    legendary: [
        { loot: 'Star Piece' },
        { loot: 'Magnet' },
    ],
}, 983000, [
    new DungeonTrainer('Galactic Grunts', [
        new GymPokemon('Zubat', 701667, 34),
        new GymPokemon('Houndour', 701667, 34),
        new GymPokemon('Golbat', 701667, 34),
        new GymPokemon('Glameow', 701667, 34),
        new GymPokemon('Croagunk', 701667, 34),
        new GymPokemon('Stunky', 701667, 34),
    ], { weight: 1 }, undefined, '(male)'),
], 66500, 218, () => {
    BagHandler.gainItem({ type: ItemType.item, id: 'Fighting_egg' }, 1);
    Notifier.notify({
        message: 'You were awarded a Fighting Egg for defeating the Galactic Grunts.',
        type: NotificationConstants.NotificationOption.success,
        setting: NotificationConstants.NotificationSetting.Dungeons.rare_dungeon_item_found,
    });
});
dungeonList['Lake Valor'] = new Dungeon('Lake Valor', [
    { pokemon: 'Psyduck', options: { weight: 2 } },
    { pokemon: 'Golduck', options: { weight: 2 } },
    { pokemon: 'Goldeen', options: { weight: 2 } },
    { pokemon: 'Magikarp', options: { weight: 2 } },
    { pokemon: 'Staravia', options: { weight: 2 } },
    { pokemon: 'Bibarel', options: { weight: 2 } },
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Glameow', 1015000, 35),
        new GymPokemon('Murkrow', 1015000, 35),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Golbat', 1015000, 37)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Croagunk', 1015000, 33),
        new GymPokemon('Houndour', 1015000, 33),
        new GymPokemon('Stunky', 1015000, 33),
        new GymPokemon('Glameow', 1015000, 33),
    ], { weight: 1 }, undefined, '(male)'),
], {
    common: [
        { loot: 'Token_collector', weight: 2 },
        { loot: 'Sitrus' },
    ],
    rare: [{ loot: 'Blue Shard' }],
    epic: [
        { loot: 'Mind Plate' },
        { loot: 'Lureball' },
    ],
}, 1015000, [
    new DungeonTrainer('Commander', [
        new GymPokemon('Golbat', 1533334, 38),
        new GymPokemon('Bronzor', 1533334, 38),
        new GymPokemon('Toxicroak', 1533334, 40),
    ], { weight: 1 }, 'Saturn', '(saturn)'),
    new DungeonBossPokemon('Azelf', 10060000, 50, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Distortion World')) }),
], 69500, 218);
dungeonList['Lake Verity'] = new Dungeon('Lake Verity', [
    { pokemon: 'Psyduck', options: { weight: 2.7 } },
    { pokemon: 'Golduck', options: { weight: 2.7 } },
    { pokemon: 'Goldeen', options: { weight: 2.7 } },
    { pokemon: 'Magikarp', options: { weight: 2.7 } },
    { pokemon: 'Starly', options: { weight: 2.7 } },
    { pokemon: 'Bidoof', options: { weight: 2.7 } },
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Glameow', 1068735, 33),
        new GymPokemon('Golbat', 1068735, 33),
        new GymPokemon('Murkrow', 1068735, 36),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Croagunk', 1068735, 37)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Stunky', 1068735, 35),
        new GymPokemon('Houndour', 1068735, 35),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Houndour', 1068735, 34),
        new GymPokemon('Glameow', 1068735, 36),
    ], { weight: 1 }, undefined, '(female)'),
], {
    common: [
        { loot: 'xAttack', weight: 2 },
        { loot: 'Sitrus' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Lime Shard' },
    ],
    epic: [{ loot: 'Mind Plate' }],
}, 1068735, [
    new DungeonTrainer('Commander', [
        new GymPokemon('Golbat', 1606667, 38),
        new GymPokemon('Bronzor', 1606667, 38),
        new GymPokemon('Purugly', 1606667, 40),
    ], { weight: 1 }, 'Mars', '(mars)'),
], 72500, 218);
dungeonList['Mt. Coronet North'] = new Dungeon('Mt. Coronet North', ['Clefairy', 'Zubat', 'Machop', 'Geodude', 'Magikarp', 'Noctowl', 'Meditite', 'Barboach', 'Chingling', 'Bronzor', 'Snover'], {
    common: [
        { loot: 'xClick', weight: 2 },
        { loot: 'Greatball' },
    ],
    rare: [
        { loot: 'Yellow Shard' },
        { loot: 'Crimson Shard' },
    ],
    epic: [
        { loot: 'Stone Plate' },
        { loot: 'Draco Plate' },
    ],
    legendary: [
        { loot: 'Ultraball', weight: 4 },
        { loot: 'Light Clay', weight: 2 },
        { loot: 'LargeRestore', weight: 2 },
        { loot: 'Star Piece' },
        { loot: 'Never_Melt_Ice' },
        { loot: 'Soft_Sand' },
    ],
    mythic: [
        { loot: 'Max Revive' },
        { loot: 'Protein', requirement: new ClearDungeonRequirement(350, GameConstants.getDungeonIndex('Mt. Coronet North')) },
    ],
}, 1111500, [
    new DungeonBossPokemon('Graveler', 4960000, 35),
    new DungeonBossPokemon('Feebas', 4960000, 50),
    new DungeonBossPokemon('Medicham', 4960000, 50),
], 74500, 218);
dungeonList['Lake Acuity'] = new Dungeon('Lake Acuity', ['Psyduck', 'Golduck', 'Goldeen', 'Magikarp', 'Gyarados', 'Sneasel', 'Snorunt', 'Bibarel', 'Snover'], {
    common: [
        { loot: 'Lucky_egg', weight: 2 },
        { loot: 'Sitrus' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
    ],
    epic: [
        { loot: 'Mind Plate' },
        { loot: 'Icicle Plate' },
    ],
}, 1261800, [
    new DungeonTrainer('Commander', [
        new GymPokemon('Golbat', 1690000, 38),
        new GymPokemon('Bronzor', 1690000, 38),
        new GymPokemon('Skuntank', 1690000, 40),
    ], { weight: 1 }, 'Jupiter', '(jupiter)'),
    new DungeonBossPokemon('Uxie', 10070000, 50, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Distortion World')) }),
], 78000, 217);
dungeonList['Team Galactic HQ'] = new Dungeon('Team Galactic HQ', [
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Glameow', 1295400, 41)], { weight: 2 }, undefined, '(female)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Glameow', 1295400, 37),
        new GymPokemon('Murkrow', 1295400, 38),
        new GymPokemon('Croagunk', 1295400, 39),
    ], { weight: 2 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Kirlia', 1295400, 40),
        new GymPokemon('Kadabra', 1295400, 40),
    ], { weight: 2 }, 'Frederick', '(male)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Stunky', 1295400, 41)], { weight: 2 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Murkrow', 1295400, 41),
        new GymPokemon('Stunky', 1295400, 41),
    ], { weight: 2 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Golbat', 1295400, 40),
        new GymPokemon('Golbat', 1295400, 38),
    ], { weight: 2 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Golbat', 1295400, 39),
        new GymPokemon('Houndour', 1295400, 39),
    ], { weight: 2 }, undefined, '(female)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Porygon2', 1295400, 42)], { weight: 2 }, 'Darrius', '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Stunky', 1295400, 38),
        new GymPokemon('Croagunk', 1295400, 40),
    ], { weight: 2 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Croagunk', 1295400, 38),
        new GymPokemon('Stunky', 1295400, 38),
        new GymPokemon('Glameow', 1295400, 38),
    ], { weight: 2 }, undefined, '(female)'),
    new DungeonTrainer('Commander', [
        new GymPokemon('Golbat', 1295400, 42),
        new GymPokemon('Bronzor', 1295400, 42),
        new GymPokemon('Toxicroak', 1295400, 42),
    ], { weight: 1 }, 'Saturn', '(saturn)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Dowsing_machine' },
    ],
    rare: [
        { loot: 'Crimson Shard' },
        { loot: 'Lime Shard' },
    ],
    epic: [
        { loot: 'Sky Plate' },
        { loot: 'Ultraball' },
    ],
    legendary: [{ loot: 'LargeRestore' }],
    mythic: [
        { loot: 'Max Revive' },
        { loot: 'Protein', requirement: new ClearDungeonRequirement(350, GameConstants.getDungeonIndex('Team Galactic HQ')) },
    ],
}, 1295400, [
    new DungeonTrainer('Galactic Boss', [
        new GymPokemon('Sneasel', 1725000, 44),
        new GymPokemon('Crobat', 1725000, 44),
        new GymPokemon('Honchkrow', 1725000, 46),
    ], { weight: 1 }, 'Cyrus', '(cyrus)'),
], 82500, 217);
dungeonList['Spear Pillar'] = new Dungeon('Spear Pillar', [
    { pokemon: 'Clefairy', options: { weight: 3 } },
    { pokemon: 'Golbat', options: { weight: 3 } },
    { pokemon: 'Machoke', options: { weight: 3 } },
    { pokemon: 'Graveler', options: { weight: 3 } },
    { pokemon: 'Nosepass', options: { weight: 3 } },
    { pokemon: 'Noctowl', options: { weight: 3 } },
    { pokemon: 'Medicham', options: { weight: 3 } },
    { pokemon: 'Chimecho', options: { weight: 3 } },
    { pokemon: 'Absol', options: { weight: 3 } },
    { pokemon: 'Chingling', options: { weight: 3 } },
    { pokemon: 'Bronzong', options: { weight: 3 } },
    { pokemon: 'Snover', options: { weight: 3 } },
    { pokemon: 'Abomasnow', options: { weight: 3 } },
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Stunky', 1322100, 43)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Murkrow', 1322100, 43)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Houndour', 1322100, 40),
        new GymPokemon('Golbat', 1322100, 40),
        new GymPokemon('Houndour', 1322100, 40),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Stunky', 1322100, 42),
        new GymPokemon('Golbat', 1322100, 40),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Golbat', 1322100, 43)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Murkrow', 1322100, 39),
        new GymPokemon('Glameow', 1322100, 42),
        new GymPokemon('Murkrow', 1322100, 39),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Croagunk', 1322100, 38),
        new GymPokemon('Croagunk', 1322100, 42),
        new GymPokemon('Stunky', 1322100, 40),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Houndour', 1322100, 40),
        new GymPokemon('Glameow', 1322100, 42),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Glameow', 1322100, 41),
        new GymPokemon('Golbat', 1322100, 41),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Golbat', 1322100, 39),
        new GymPokemon('Croagunk', 1322100, 40),
        new GymPokemon('Murkrow', 1322100, 41),
    ], { weight: 1 }, undefined, '(female)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Dowsing_machine' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Iron Plate' },
        { loot: 'Draco Plate' },
        { loot: 'Splash Plate' },
    ],
}, 1322100, [
    new DungeonTrainer('Commanders', [
        new GymPokemon('Bronzor', 880000, 44),
        new GymPokemon('Golbat', 880000, 44),
        new GymPokemon('Purugly', 880000, 46),
        new GymPokemon('Bronzor', 880000, 44),
        new GymPokemon('Golbat', 880000, 44),
        new GymPokemon('Skuntank', 880000, 46),
    ], { weight: 1 }, 'Mars & Jupiter', '(marsjupiter)'),
    new DungeonBossPokemon('Palkia', 11880000, 100, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion) }),
    new DungeonBossPokemon('Dialga', 11880000, 100, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion) }),
], 84500, 217);
dungeonList['Distortion World'] = new Dungeon('Distortion World', ['Golbat', 'Gastly', 'Duskull', 'Dusclops', 'Chimecho', 'Chingling', 'Bronzor', 'Bronzong'], {
    common: [
        { loot: 'xClick', weight: 4 },
        { loot: 'Lucky_incense', weight: 2 },
        { loot: 'Banette' },
    ],
    rare: [{ loot: 'Lime Shard' }],
    legendary: [
        { loot: 'Rare Bone' },
        { loot: 'Odd Keystone' },
        { loot: 'Ultraball' },
    ],
}, 1350400, [
    new DungeonTrainer('Galactic Boss', [
        new GymPokemon('Houndoom', 1128000, 45),
        new GymPokemon('Honchkrow', 1128000, 47),
        new GymPokemon('Crobat', 1128000, 46),
        new GymPokemon('Gyarados', 1128000, 46),
        new GymPokemon('Weavile', 1128000, 47),
    ], { weight: 1 }, 'Cyrus', '(cyrus)'),
    new DungeonBossPokemon('Giratina (Altered)', 11880000, 45, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion) }),
], 86500, 217);
dungeonList['Victory Road Sinnoh'] = new Dungeon('Victory Road Sinnoh', [
    { pokemon: 'Golbat', options: { weight: 9.3 } },
    { pokemon: 'Graveler', options: { weight: 9.3 } },
    { pokemon: 'Onix', options: { weight: 9.3 } },
    { pokemon: 'Rhyhorn', options: { weight: 9.3 } },
    { pokemon: 'Magneton', options: { weight: 9.3 } },
    { pokemon: 'Floatzel', options: { weight: 9.3 } },
    new DungeonTrainer('Psychic', [
        new GymPokemon('Haunter', 1503000, 43),
        new GymPokemon('Gengar', 1503000, 46),
        new GymPokemon('Gardevoir', 1503000, 46),
    ], { weight: 1 }, 'Bryce', '(male)'),
    new DungeonTrainer('Bird Keeper', [
        new GymPokemon('Noctowl', 1503000, 45),
        new GymPokemon('Togetic', 1503000, 47),
    ], { weight: 1 }, 'Hana'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Blissey', 1503000, 45),
        new GymPokemon('Glalie', 1503000, 46),
        new GymPokemon('Magnezone', 1503000, 48),
    ], { weight: 1 }, 'Mariah', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Mamoswine', 1503000, 45),
        new GymPokemon('Mothim', 1503000, 46),
        new GymPokemon('Rampardos', 1503000, 48),
    ], { weight: 1 }, 'Omar', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Clefable', 1503000, 47),
        new GymPokemon('Torterra', 1503000, 48),
    ], { weight: 1 }, 'Sydney', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Staraptor', 1503000, 47),
        new GymPokemon('Lickilicky', 1503000, 47),
    ], { weight: 1 }, 'Clayton', '(male)'),
    new DungeonTrainer('Double Team', [
        new GymPokemon('Staraptor', 1503000, 50),
        new GymPokemon('Ambipom', 1503000, 50),
    ], { weight: 1 }, 'Al & Kay'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Machamp', 1503000, 48)], { weight: 1 }, 'Miles'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Chimecho', 1503000, 44),
        new GymPokemon('Absol', 1503000, 45),
        new GymPokemon('Dusknoir', 1503000, 46),
    ], { weight: 1 }, 'Valencia', '(female)'),
    new DungeonTrainer('Double Team', [
        new GymPokemon('Lumineon', 1503000, 50),
        new GymPokemon('Rapidash', 1503000, 50),
    ], { weight: 1 }, 'Pat & Jo'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Rhydon', 1503000, 47),
        new GymPokemon('Carnivine', 1503000, 48),
    ], { weight: 1 }, 'Henry', '(male)'),
    new DungeonTrainer('Dragon Tamer', [
        new GymPokemon('Altaria', 1503000, 45),
        new GymPokemon('Gabite', 1503000, 47),
    ], { weight: 1 }, 'Ondrej'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Porygon-Z', 1503000, 46),
        new GymPokemon('Tangrowth', 1503000, 46),
        new GymPokemon('Empoleon', 1503000, 46),
    ], { weight: 1 }, 'Edgar', '(male)'),
    new DungeonTrainer('Dragon Tamer', [
        new GymPokemon('Gible', 1503000, 43),
        new GymPokemon('Swablu', 1503000, 45),
        new GymPokemon('Gabite', 1503000, 47),
    ], { weight: 1 }, 'Clinton'),
], {
    common: [
        { loot: 'Lucky_incense', weight: 3 },
        { loot: 'Oran', weight: 3 },
        { loot: 'Graveler' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Crimson Shard' },
        { loot: 'Lime Shard' },
        { loot: 'White Shard' },
        { loot: 'Black Shard' },
    ],
    legendary: [
        { loot: 'Ultraball' },
        { loot: 'Repeatball' },
    ],
    mythic: [
        { loot: 'Max Revive' },
        { loot: 'Heart Scale' },
        { loot: 'Protein', requirement: new ClearDungeonRequirement(350, GameConstants.getDungeonIndex('Victory Road Sinnoh')) },
    ],
}, 1503000, [
    new DungeonBossPokemon('Rhydon', 7000000, 100),
    new DungeonBossPokemon('Steelix', 7000000, 100),
], 89500, 223);
dungeonList['Sendoff Spring'] = new Dungeon('Sendoff Spring', ['Golbat', 'Golduck', 'Graveler', 'Goldeen', 'Magikarp', 'Staravia', 'Bibarel', 'Chingling'], {
    common: [
        { loot: 'xClick' },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'White Shard' },
        { loot: 'Black Shard' },
    ],
    epic: [
        { loot: 'Spooky Plate' },
        { loot: 'Draco Plate' },
    ],
}, 2603000, [
    new DungeonBossPokemon('Seaking', 10000000, 100),
    new DungeonBossPokemon('Gyarados', 10000000, 100),
    new DungeonBossPokemon('Dusclops', 10000000, 100),
], 96500, 230);
dungeonList['Hall of Origin'] = new Dungeon('Hall of Origin', ['Slowpoke', 'Spearow', 'Garchomp', 'Slakoth', 'Eevee', 'Breloom', 'Absol'], {
    common: [
        { loot: 'Dowsing_machine', weight: 4 },
        { loot: 'Cheri', weight: 2 },
        { loot: 'Ditto' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Crimson Shard' },
        { loot: 'Lime Shard' },
        { loot: 'White Shard' },
        { loot: 'Black Shard' },
    ],
    epic: [
        { loot: 'Draco Plate' },
        { loot: 'Dread Plate' },
        { loot: 'Earth Plate' },
        { loot: 'Fist Plate' },
        { loot: 'Flame Plate' },
        { loot: 'Icicle Plate' },
        { loot: 'Insect Plate' },
        { loot: 'Iron Plate' },
        { loot: 'Meadow Plate' },
        { loot: 'Mind Plate' },
        { loot: 'Pixie Plate' },
        { loot: 'Sky Plate' },
        { loot: 'Splash Plate' },
        { loot: 'Spooky Plate' },
        { loot: 'Stone Plate' },
        { loot: 'Toxic Plate' },
        { loot: 'Zap Plate' },
    ],
}, 2653000, [
    new DungeonBossPokemon('Arceus (Normal)', 13000000, 100),
    new DungeonBossPokemon('Slaking', 10000000, 100),
    new DungeonBossPokemon('Snorlax', 10000000, 100),
    new DungeonBossPokemon('Shuckle', 10000000, 100),
    new DungeonBossPokemon('Blissey', 10000000, 100),
], 106500, 230);
dungeonList['Fullmoon Island'] = new Dungeon('Fullmoon Island', ['Illumise', 'Minun', 'Hypno', 'Luvdisc'], {
    common: [
        { loot: 'xClick', weight: 2 },
        { loot: 'Nanab' },
    ],
    rare: [{ loot: 'White Shard' }],
    epic: [{ loot: 'Mind Plate' }],
}, 2603000, [new DungeonBossPokemon('Clefable', 11000000, 100)], 96500, 230);
dungeonList['Newmoon Island'] = new Dungeon('Newmoon Island', ['Volbeat', 'Plusle', 'Absol', 'Luvdisc'], {
    common: [
        { loot: 'Lucky_egg', weight: 2 },
        { loot: 'Nanab' },
    ],
    rare: [{ loot: 'Black Shard' }],
    epic: [{ loot: 'Dread Plate' }],
}, 2603000, [new DungeonBossPokemon('Darkrai', 11000000, 100)], 96500, 230);
dungeonList['Flower Paradise'] = new Dungeon('Flower Paradise', ['Gloom', 'Bellsprout', 'Tangela', 'Skiploom', 'Lombre', 'Seedot', 'Roselia'], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Mago' },
        { loot: 'Aguav' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
    ],
    epic: [
        { loot: 'Meadow Plate' },
        { loot: 'Sky Plate' },
    ],
}, 2603000, [
    new DungeonBossPokemon('Parasect', 9900000, 50),
    new DungeonBossPokemon('Breloom', 11000000, 50),
    new DungeonBossPokemon('Shaymin (Land)', 11000000, 50),
    new DungeonBossPokemon('Shaymin (Sky)', 11000000, 50, { requirement: new ObtainedPokemonRequirement(pokemonMap['Shaymin (Land)']) }),
], 96500, 230);
dungeonList['Snowpoint Temple'] = new Dungeon('Snowpoint Temple', ['Golbat', 'Sneasel', 'Smoochum'], {
    common: [
        { loot: 'Token_collector', weight: 2 },
        { loot: 'Aspear' },
    ],
    rare: [
        { loot: 'Yellow Shard' },
        { loot: 'White Shard' },
    ],
    epic: [{ loot: 'Icicle Plate' }],
    legendary: [
        { loot: 'LargeRestore' },
        { loot: 'Never_Melt_Ice' },
    ],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(350, GameConstants.getDungeonIndex('Snowpoint Temple')) }],
}, 2603000, [
    new DungeonBossPokemon('Jynx', 10000000, 100),
    new DungeonBossPokemon('Regigigas', 11000000, 100),
], 96500, 230);
dungeonList['Stark Mountain'] = new Dungeon('Stark Mountain', [
    { pokemon: 'Fearow', options: { weight: 4 } },
    { pokemon: 'Golbat', options: { weight: 4 } },
    { pokemon: 'Graveler', options: { weight: 4 } },
    { pokemon: 'Weezing', options: { weight: 4 } },
    { pokemon: 'Rhyhorn', options: { weight: 4 } },
    { pokemon: 'Rhydon', options: { weight: 4 } },
    { pokemon: 'Slugma', options: { weight: 4 } },
    { pokemon: 'Magcargo', options: { weight: 4 } },
    { pokemon: 'Numel', options: { weight: 4 } },
    { pokemon: 'Camerupt', options: { weight: 4 } },
    { pokemon: 'Machoke', options: { weight: 4 } },
    new DungeonTrainer('Dragon Tamer', [new GymPokemon('Dragonite', 2603000, 60)], { weight: 1 }, 'Darien'),
    new DungeonTrainer('Commander', [
        new GymPokemon('Bronzong', 2603000, 58),
        new GymPokemon('Golbat', 2603000, 58),
        new GymPokemon('Purugly', 2603000, 60),
    ], { weight: 1 }, 'Mars', '(mars)'),
    new DungeonTrainer('Commander', [
        new GymPokemon('Bronzong', 2603000, 58),
        new GymPokemon('Golbat', 2603000, 58),
        new GymPokemon('Skuntank', 2603000, 60),
    ], { weight: 1 }, 'Jupiter', '(jupiter)'),
    new DungeonTrainer('Ace Duo', [
        new GymPokemon('Primeape', 2603000, 58),
        new GymPokemon('Banette', 2603000, 59),
        new GymPokemon('Electabuzz', 2603000, 58),
        new GymPokemon('Jumpluff', 2603000, 58),
        new GymPokemon('Ampharos', 2603000, 59),
        new GymPokemon('Onix', 2603000, 58),
    ], { weight: 1 }, 'Keenan & Kassandra'),
    new DungeonTrainer('Ace Duo', [
        new GymPokemon('Pupitar', 2603000, 58),
        new GymPokemon('Torterra', 2603000, 61),
        new GymPokemon('Drapion', 2603000, 61),
    ], { weight: 1 }, 'Stefan & Jasmin'),
    new DungeonTrainer('Fight & Flight', [
        new GymPokemon('Staravia', 2603000, 55),
        new GymPokemon('Fearow', 2603000, 57),
        new GymPokemon('Noctowl', 2603000, 59),
        new GymPokemon('Breloom', 2603000, 58),
        new GymPokemon('Toxicroak', 2603000, 58),
    ], { weight: 1 }, 'Krystal & Ray'),
    new DungeonTrainer('Ace Duo', [
        new GymPokemon('Glalie', 2603000, 59),
        new GymPokemon('Crobat', 2603000, 60),
        new GymPokemon('Luxray', 2603000, 58),
        new GymPokemon('Ursaring', 2603000, 59),
        new GymPokemon('Gliscor', 2603000, 58),
    ], { weight: 1 }, 'Abel & Monique'),
    new DungeonTrainer('Melded Minds', [
        new GymPokemon('Lunatone', 2603000, 57),
        new GymPokemon('Gardevoir', 2603000, 59),
        new GymPokemon('Solrock', 2603000, 57),
        new GymPokemon('Gallade', 2603000, 59),
    ], { weight: 1 }, 'Chelsey & Sterling', '(both)'),
    new DungeonTrainer('Dragon Warriors', [
        new GymPokemon('Raticate', 2603000, 57),
        new GymPokemon('Drifblim', 2603000, 58),
        new GymPokemon('Shiftry', 2603000, 59),
        new GymPokemon('Bagon', 2603000, 57),
        new GymPokemon('Shelgon', 2603000, 57),
        new GymPokemon('Vibrava', 2603000, 57),
    ], { weight: 1 }, 'Harlan & Kenny'),
    new DungeonTrainer('Ace Duo', [
        new GymPokemon('Loudred', 2603000, 58),
        new GymPokemon('Rampardos', 2603000, 59),
        new GymPokemon('Pelipper', 2603000, 58),
        new GymPokemon('Wigglytuff', 2603000, 58),
        new GymPokemon('Gardevoir', 2603000, 59),
        new GymPokemon('Medicham', 2603000, 58),
    ], { weight: 1 }, 'Skylar & Narasha'),
    new DungeonTrainer('Hidden Dragons', [
        new GymPokemon('Gible', 2603000, 57),
        new GymPokemon('Gabite', 2603000, 57),
        new GymPokemon('Dragonair', 2603000, 57),
        new GymPokemon('Machamp', 2603000, 60),
    ], { weight: 1 }, 'Drake & Jarrett'),
], {
    common: [
        { loot: 'Token_collector', weight: 2 },
        { loot: 'Rawst' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Black Shard' },
    ],
    epic: [
        { loot: 'Flame Plate' },
        { loot: 'Iron Plate' },
    ],
    legendary: [
        { loot: 'Ultraball' },
        { loot: 'Revive' },
        { loot: 'Star Piece', weight: 2 },
        { loot: 'LargeRestore' },
    ],
    mythic: [{ loot: 'Max Revive' }],
}, 2603000, [
    new DungeonBossPokemon('Skarmory', 10000000, 100),
    new DungeonBossPokemon('Heatran', 11000000, 100),
], 96500, 230);
// Unova
dungeonList['Floccesy Ranch'] = new Dungeon('Floccesy Ranch', [
    { pokemon: 'Psyduck', options: { weight: 2 } },
    { pokemon: 'Mareep', options: { weight: 2 } },
    { pokemon: 'Azurill', options: { weight: 2 } },
    { pokemon: 'Patrat', options: { weight: 2 } },
    { pokemon: 'Lillipup', options: { weight: 2 } },
    { pokemon: 'Pidove', options: { weight: 2 } },
    new DungeonTrainer('Lass', [
        new GymPokemon('Purrloin', 126500, 6),
        new GymPokemon('Sewaddle', 126500, 6),
    ], { weight: 1 }, 'Molly'),
    new DungeonTrainer('Janitor', [
        new GymPokemon('Lillipup', 126500, 6),
        new GymPokemon('Mareep', 126500, 6),
    ], { weight: 1 }, 'Orville'),
    new DungeonTrainer('Youngster', [
        new GymPokemon('Patrat', 126500, 6),
        new GymPokemon('Psyduck', 126500, 6),
    ], { weight: 1 }, 'Kenny'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Pokeball' },
        { loot: 'Cheri' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Nanab' },
        { loot: 'Wepear' },
    ],
}, 2503000, [new DungeonBossPokemon('Riolu', 13000000, 100)], 126500, 20);
dungeonList['Liberty Garden'] = new Dungeon('Liberty Garden', ['Vulpix', 'Sunkern', 'Abra', 'Wingull', 'Pidove', 'Sentret'], {
    common: [
        { loot: 'Token_collector' },
        { loot: 'Figy', weight: 2 },
        { loot: 'Greatball' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
    ],
    epic: [
        { loot: 'Flame Plate' },
        { loot: 'Mind Plate' },
    ],
    legendary: [{ loot: 'Ultraball' }],
}, 2703000, [
    new DungeonBossPokemon('Victini', 14000000, 100),
    new DungeonBossPokemon('Chimecho', 14000000, 100),
    new DungeonBossPokemon('Kadabra', 14000000, 100),
], 136500, 20);
dungeonList['Castelia Sewers'] = new Dungeon('Castelia Sewers', [
    { pokemon: 'Rattata', options: { weight: 5.6 } },
    { pokemon: 'Zubat', options: { weight: 5.6 } },
    { pokemon: 'Grimer', options: { weight: 5.6 } },
    { pokemon: 'Muk', options: { weight: 5.6 } },
    { pokemon: 'Trubbish', options: { weight: 5.6 } },
    new DungeonTrainer('Janitor', [
        new GymPokemon('Lillipup', 146500, 16),
        new GymPokemon('Trubbish', 146500, 16),
    ], { weight: 1 }, 'Felix'),
    new DungeonTrainer('Doctor', [new GymPokemon('Sewaddle', 146500, 17)], { weight: 1 }, 'Heath'),
    new DungeonTrainer('Worker', [new GymPokemon('Drilbur', 146500, 17)], { weight: 1 }, 'Zack', '(male)'),
    new DungeonTrainer('Worker', [new GymPokemon('Timburr', 146500, 17)], { weight: 1 }, 'Scott', '(male)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Grimer', 146500, 17)], { weight: 1 }, 'Caroline', '(female)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Magnemite', 146500, 17)], { weight: 1 }, 'Clarke', '(male)'),
    new DungeonTrainer('Janitor', [
        new GymPokemon('Marill', 146500, 31),
        new GymPokemon('Cinccino', 146500, 31),
    ], { weight: 1 }, 'Brady'),
], {
    common: [
        { loot: 'xClick', weight: 2 },
        { loot: 'xAttack' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
    ],
    epic: [
        { loot: 'Toxic Plate' },
        { loot: 'Mind Plate' },
    ],
    legendary: [
        { loot: 'MediumRestore', weight: 2 },
        { loot: 'SmallRestore' },
        { loot: 'Ultraball' },
        { loot: 'Revive' },
        { loot: 'Rare Bone' },
        { loot: 'LargeRestore' },
        { loot: 'Twisted_Spoon' },
    ],
    mythic: [{ loot: 'Heart Scale' }],
}, 2603000, [
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Sandile', 15000000, 16)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Scraggy', 15000000, 16)], { weight: 1 }, undefined, '(female)'),
], 146500, 4);
dungeonList['Relic Passage'] = new Dungeon('Relic Passage', [
    { pokemon: 'Rattata', options: { weight: 8 } },
    { pokemon: 'Raticate', options: { weight: 8 } },
    { pokemon: 'Roggenrola', options: { weight: 8 } },
    { pokemon: 'Woobat', options: { weight: 8 } },
    { pokemon: 'Timburr', options: { weight: 8 } },
    new DungeonTrainer('Scientist', [new GymPokemon('Grimer', 176500, 18)], { weight: 1 }, 'Terrance', '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Venipede', 176500, 17),
        new GymPokemon('Koffing', 176500, 17),
    ], { weight: 1 }, 'Lumina', '(female)'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Herdier', 176500, 18)], { weight: 1 }, 'Kendall', '(male)'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Sandslash', 176500, 32)], { weight: 1 }, 'Eileen', '(female)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Drilbur', 176500, 31),
        new GymPokemon('Roggenrola', 176500, 31),
    ], { weight: 1 }, 'Keith'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Raticate', 176500, 32)], { weight: 1 }, 'Randall', '(male)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Roggenrola', 176500, 31),
        new GymPokemon('Timburr', 176500, 31),
    ], { weight: 1 }, 'Tobias'),
    new DungeonTrainer('Psychic', [new GymPokemon('Swoobat', 176500, 33)], { weight: 1 }, 'Tully', '(male)'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Watchog', 176500, 32)], { weight: 1 }, 'Annie', '(female)'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Baltoy', 176500, 32),
        new GymPokemon('Yamask', 176500, 32),
    ], { weight: 1 }, 'Ena', '(female)'),
], {
    common: [
        { loot: 'Lucky_egg', weight: 2 },
        { loot: 'Dowsing_machine' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [{ loot: 'Stone Plate' }],
    legendary: [{ loot: 'Hard Stone' }],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Relic Passage')) }],
}, 3203000, [
    new DungeonBossPokemon('Onix', 21000000, 100),
    new DungeonBossPokemon('Drilbur', 21000000, 100),
], 156500, 5);
dungeonList['Relic Castle'] = new Dungeon('Relic Castle', [
    { pokemon: 'Sandshrew', options: { weight: 1.33 } },
    { pokemon: 'Sandslash', options: { weight: 1.33 } },
    { pokemon: 'Sandile', options: { weight: 1.33 } },
    { pokemon: 'Baltoy', options: { weight: 1.33 } },
    { pokemon: 'Krokorok', options: { weight: 1.33 } },
    { pokemon: 'Yamask', options: { weight: 1.33 } },
    new DungeonTrainer('Psychic', [new GymPokemon('Gothita', 156500, 23)], { weight: 1 }, 'Dua', '(female)'),
    new DungeonTrainer('Psychic', [new GymPokemon('Solosis', 156500, 23)], { weight: 1 }, 'Low', '(male)'),
], {
    common: [
        { loot: 'Token_collector' },
        { loot: 'Mago', weight: 2 },
        { loot: 'Greatball' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Earth Plate' },
        { loot: 'Insect Plate' },
        { loot: 'Flame Plate' },
    ],
    legendary: [
        { loot: 'Revive' },
        { loot: 'Ultraball' },
        { loot: 'MediumRestore', weight: 2 },
        { loot: 'LargeRestore' },
    ],
    mythic: [
        { loot: 'Heart Scale' },
        { loot: 'Darmanitan (Zen)' },
    ],
}, 2803000, [
    new DungeonTrainer('Psychic', [new GymPokemon('Sigilyph', 16000000, 23)], { weight: 1 }, 'Perry', '(male)'),
    new DungeonBossPokemon('Volcarona', 21000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Relic Passage')) }),
], 166500, 25);
dungeonList['Lostlorn Forest'] = new Dungeon('Lostlorn Forest', [
    { pokemon: 'Roselia', options: { weight: 2.67 } },
    { pokemon: 'Combee', options: { weight: 2.67 } },
    { pokemon: 'Sewaddle', options: { weight: 2.67 } },
    { pokemon: 'Venipede', options: { weight: 2.67 } },
    { pokemon: 'Cottonee', options: { weight: 2.67 } },
    { pokemon: 'Petilil', options: { weight: 2.67 } },
    new DungeonTrainer('Pokémon Breeder', [
        new GymPokemon('Tranquill', 166500, 24),
        new GymPokemon('Liepard', 166500, 24),
    ], { weight: 1 }, 'Galen', '(male)'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Trubbish', 166500, 26)], { weight: 1 }, 'Serenity', '(female)'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Emolga', 166500, 26)], { weight: 1 }, 'Forrest', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Larvesta', 166500, 51),
        new GymPokemon('Pinsir', 166500, 51),
        new GymPokemon('Heracross', 166500, 51),
        new GymPokemon('Leavanny', 166500, 51),
        new GymPokemon('Scolipede', 166500, 51),
    ], { weight: 1 }, 'Murphy', '(male)'),
], {
    common: [
        { loot: 'Iapapa' },
        { loot: 'xClick', weight: 2 },
        { loot: 'Greatball', weight: 2 },
        { loot: 'Foongus' },
    ],
    rare: [{ loot: 'Green Shard' }],
    legendary: [
        { loot: 'Ultraball' },
        { loot: 'Zoroark', requirement: new ClearDungeonRequirement(50, GameConstants.getDungeonIndex('Lostlorn Forest')) },
    ],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Lostlorn Forest')) }],
}, 3003000, [
    new DungeonBossPokemon('Heracross', 18000000, 100),
    new DungeonBossPokemon('Pinsir', 18000000, 100),
    new DungeonBossPokemon('Emolga', 19000000, 100),
], 176500, 16);
dungeonList['Chargestone Cave'] = new Dungeon('Chargestone Cave', [
    { pokemon: 'Nosepass', options: { weight: 8.8 } },
    { pokemon: 'Boldore', options: { weight: 8.8 } },
    { pokemon: 'Joltik', options: { weight: 8.8 } },
    { pokemon: 'Ferroseed', options: { weight: 8.8 } },
    { pokemon: 'Klink', options: { weight: 8.8 } },
    new DungeonTrainer('Guitarist', [new GymPokemon('Emolga', 186500, 30)], { weight: 1 }, 'Anna', '(female)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Magneton', 186500, 30)], { weight: 1 }, 'Ronald', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Klink', 186500, 33),
        new GymPokemon('Unfezant', 186500, 33),
        new GymPokemon('Sandslash', 186500, 33),
    ], { weight: 1 }, 'Corky', '(male)'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Ampharos', 186500, 34)], { weight: 1 }, 'Louis', '(male)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Aron', 186500, 32),
        new GymPokemon('Nosepass', 186500, 32),
    ], { weight: 1 }, 'Otto'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Minccino', 186500, 33),
        new GymPokemon('Excadrill', 186500, 33),
    ], { weight: 1 }, 'Briana', '(female)'),
    new DungeonTrainer('Doctor', [
        new GymPokemon('Solosis', 186500, 32),
        new GymPokemon('Gothita', 186500, 32),
    ], { weight: 1 }, 'Kit'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Joltik', 186500, 32),
        new GymPokemon('Golbat', 186500, 32),
    ], { weight: 1 }, 'Lumi', '(female)'),
    new DungeonTrainer('Guitarist', [new GymPokemon('Zebstrika', 186500, 33)], { weight: 1 }, 'Beverly', '(female)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Onix', 186500, 32),
        new GymPokemon('Boldore', 186500, 32),
    ], { weight: 1 }, 'Jeremy'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Stoutland', 186500, 33),
        new GymPokemon('Krokorok', 186500, 33),
        new GymPokemon('Ferroseed', 186500, 33),
    ], { weight: 1 }, 'Vicki', '(female)'),
], {
    common: [
        { loot: 'Lucky_egg', weight: 2 },
        { loot: 'Dowsing_machine', weight: 2 },
        { loot: 'Aguav' },
    ],
    rare: [{ loot: 'Yellow Shard' }],
    epic: [
        { loot: 'Zap Plate' },
        { loot: 'Timerball' },
    ],
    legendary: [
        { loot: 'Star Piece', weight: 2 },
        { loot: 'Magnet' },
        { loot: 'Revive' },
        { loot: 'LargeRestore' },
    ],
}, 3403000, [
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Tirtouga', 12000000, 34),
        new GymPokemon('Magmar', 12000000, 34),
    ], { weight: 1 }, 'Mary', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Archen', 12000000, 34),
        new GymPokemon('Electabuzz', 12000000, 34),
    ], { weight: 1 }, 'Shaye', '(male)'),
    new DungeonBossPokemon('Drilbur', 22000000, 100),
    new DungeonBossPokemon('Tynamo', 22000000, 100),
], 186500, 6);
dungeonList['Mistralton Cave'] = new Dungeon('Mistralton Cave', [
    { pokemon: 'Boldore', options: { weight: 4 } },
    { pokemon: 'Woobat', options: { weight: 4 } },
    { pokemon: 'Aron', options: { weight: 4 } },
    { pokemon: 'Lairon', options: { weight: 4 } },
    new DungeonTrainer('Hiker', [new GymPokemon('Boldore', 196500, 32)], { weight: 1 }, 'Shelby'),
    new DungeonTrainer('Hiker', [new GymPokemon('Onix', 196500, 32)], { weight: 1 }, 'Jebediah'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Tirtouga', 196500, 33),
        new GymPokemon('Axew', 196500, 33),
    ], { weight: 1 }, 'Geoff', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Archen', 196500, 33),
        new GymPokemon('Axew', 196500, 33),
    ], { weight: 1 }, 'Belle', '(female)'),
], {
    common: [
        { loot: 'xClick', weight: 2 },
        { loot: 'Greatball' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Green Shard' },
    ],
    epic: [
        { loot: 'Draco Plate' },
        { loot: 'Fist Plate' },
        { loot: 'Iron Plate' },
    ],
    legendary: [
        { loot: 'Ultraball' },
        { loot: 'Revive' },
        { loot: 'Hard Stone' },
        { loot: 'Duskball' },
        { loot: 'LargeRestore' },
    ],
}, 3603000, [
    new DungeonBossPokemon('Drilbur', 23000000, 100),
    new DungeonBossPokemon('Axew', 24000000, 100),
    new DungeonBossPokemon('Cobalion', 25000000, 100),
], 196500, 6);
dungeonList['Celestial Tower'] = new Dungeon('Celestial Tower', [
    { pokemon: 'Golbat', options: { weight: 8 } },
    { pokemon: 'Haunter', options: { weight: 8 } },
    { pokemon: 'Elgyem', options: { weight: 8 } },
    { pokemon: 'Misdreavus', options: { weight: 8 } },
    new DungeonTrainer('Psychic', [new GymPokemon('Musharna', 206500, 36)], { weight: 1 }, 'Joyce', '(female)'),
    new DungeonTrainer('School Kid', [new GymPokemon('Litwick', 206500, 35)], { weight: 1 }, 'Alberta', '(female)'),
    new DungeonTrainer('Pokéfan', [new GymPokemon('Clefairy', 206500, 35)], { weight: 1 }, 'Jude', '(male)'),
    new DungeonTrainer('Pokéfan', [new GymPokemon('Cubchoo', 206500, 35)], { weight: 1 }, 'Georgia', '(female)'),
    new DungeonTrainer('Psychic', [new GymPokemon('Espeon', 206500, 36)], { weight: 1 }, 'Micki', '(male)'),
    new DungeonTrainer('Nurse', [new GymPokemon('Leavanny', 206500, 35)], { weight: 1 }, 'Dixie'),
    new DungeonTrainer('Socialite', [new GymPokemon('Roselia', 206500, 35)], { weight: 1 }, 'Grace'),
    new DungeonTrainer('Gentleman', [new GymPokemon('Umbreon', 206500, 35)], { weight: 1 }, 'Daniel'),
], {
    common: [
        { loot: 'Lucky_egg', weight: 2 },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Spooky Plate' },
        { loot: 'Mind Plate' },
    ],
    legendary: [
        { loot: 'Revive', weight: 2 },
        { loot: 'LargeRestore' },
        { loot: 'Spell_Tag' },
    ],
}, 3803000, [
    new DungeonBossPokemon('Litwick', 25000000, 100),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Elgyem', 14000000, 35),
        new GymPokemon('Duosion', 14000000, 35),
    ], { weight: 1 }, 'Bryce', '(male)'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Yamask', 14000000, 35),
        new GymPokemon('Gothorita', 14000000, 35),
    ], { weight: 1 }, 'Sarah', '(female)'),
], 206500, 7);
dungeonList['Reversal Mountain'] = new Dungeon('Reversal Mountain', [
    { pokemon: 'Skarmory', options: { weight: 5.2 } },
    { pokemon: 'Numel', options: { weight: 5.2 } },
    { pokemon: 'Camerupt', options: { weight: 5.2 } },
    { pokemon: 'Spoink', options: { weight: 5.2 } },
    { pokemon: 'Grumpig', options: { weight: 5.2 } },
    { pokemon: 'Trapinch', options: { weight: 5.2 } },
    { pokemon: 'Drifblim', options: { weight: 5.2 } },
    { pokemon: 'Skorupi', options: { weight: 5.2 } },
    { pokemon: 'Boldore', options: { weight: 5.2 } },
    { pokemon: 'Woobat', options: { weight: 5.2 } },
    new DungeonTrainer('Cyclist', [new GymPokemon('Zebstrika', 226500, 37)], { weight: 1 }, 'Jeremiah', '(male)'),
    new DungeonTrainer('Cyclist', [new GymPokemon('Unfezant', 226500, 37)], { weight: 1 }, 'Adalaide', '(female)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Gurdurr', 226500, 37),
        new GymPokemon('Crustle', 226500, 37),
    ], { weight: 1 }, 'Markus'),
    new DungeonTrainer('Backpacker', [
        new GymPokemon('Golbat', 226500, 37),
        new GymPokemon('Swanna', 226500, 37),
    ], { weight: 1 }, 'Kiyo', '(male)'),
    new DungeonTrainer('Doctor', [new GymPokemon('Swoobat', 226500, 38)], { weight: 1 }, 'Derek'),
    new DungeonTrainer('Backpacker', [
        new GymPokemon('Golbat', 226500, 37),
        new GymPokemon('Darmanitan', 226500, 37),
    ], { weight: 1 }, 'Kumiko', '(female)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Boldore', 226500, 37),
        new GymPokemon('Excadrill', 226500, 37),
    ], { weight: 1 }, 'Jared'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Vibrava', 226500, 39),
        new GymPokemon('Camerupt', 226500, 39),
    ], { weight: 1 }, 'Ray', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Grumpig', 226500, 37),
        new GymPokemon('Drifblim', 226500, 37),
    ], { weight: 1 }, 'Cora', '(female)'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Gurdurr', 226500, 37),
        new GymPokemon('Scraggy', 226500, 37),
        new GymPokemon('Scraggy', 226500, 37),
    ], { weight: 1 }, 'Corey'),
    new DungeonTrainer('Battle Girl', [
        new GymPokemon('Riolu', 226500, 37),
        new GymPokemon('Gurdurr', 226500, 37),
        new GymPokemon('Riolu', 226500, 37),
    ], { weight: 1 }, 'Chan'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Banette', 226500, 38),
        new GymPokemon('Golduck', 226500, 38),
    ], { weight: 1 }, 'Eliza', '(female)'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Watchog', 226500, 38),
        new GymPokemon('Camerupt', 226500, 38),
    ], { weight: 1 }, 'Lewis', '(male)'),
], {
    common: [
        { loot: 'Persim', weight: 4 },
        { loot: 'Dowsing_machine', weight: 2 },
        { loot: 'Ultraball' },
    ],
    rare: [{ loot: 'Red Shard' }],
    epic: [
        { loot: 'Iron Plate' },
        { loot: 'Flame Plate' },
    ],
    legendary: [
        { loot: 'Revive', weight: 2 },
        { loot: 'LargeRestore' },
        { loot: 'Star Piece' },
    ],
}, 4003000, [
    new DungeonBossPokemon('Cacturne', 24000000, 100),
    new DungeonBossPokemon('Excadrill', 26000000, 100),
    new DungeonBossPokemon('Heatran', 30000000, 100, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion) }),
], 226500, 14);
dungeonList['Seaside Cave'] = new Dungeon('Seaside Cave', [
    { pokemon: 'Golduck', options: { weight: 3.5 } },
    { pokemon: 'Seel', options: { weight: 3.5 } },
    { pokemon: 'Shellder', options: { weight: 3.5 } },
    { pokemon: 'Luvdisc', options: { weight: 3.5 } },
    { pokemon: 'Boldore', options: { weight: 3.5 } },
    { pokemon: 'Woobat', options: { weight: 3.5 } },
    { pokemon: 'Tynamo', options: { weight: 3.5 } },
    { pokemon: 'Frillish', options: { weight: 3.5 } },
    new DungeonTrainer('Battle Girl', [new GymPokemon('Heracross', 246500, 47)], { weight: 1 }, 'Tia'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Vibrava', 246500, 46),
        new GymPokemon('Gligar', 246500, 46),
    ], { weight: 1 }, 'Johan', '(male)'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Onix', 246500, 46),
        new GymPokemon('Lairon', 246500, 46),
    ], { weight: 1 }, 'Mikiko', '(female)'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Scrafty', 246500, 47)], { weight: 1 }, 'Drago'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Roggenrola', 246500, 44),
        new GymPokemon('Roggenrola', 246500, 44),
        new GymPokemon('Roggenrola', 246500, 44),
        new GymPokemon('Roggenrola', 246500, 44),
    ], { weight: 1 }, 'Rocky'),
    new DungeonTrainer('Battle Girl', [new GymPokemon('Mienfoo', 246500, 47)], { weight: 1 }, 'Maki'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Gurdurr', 246500, 47)], { weight: 1 }, 'Rich'),
], {
    common: [
        { loot: 'Token_collector', weight: 2 },
        { loot: 'Lucky_egg', weight: 2 },
        { loot: 'Persim' },
    ],
    rare: [{ loot: 'Blue Shard' }],
    epic: [
        { loot: 'Insect Plate' },
        { loot: 'Stone Plate' },
        { loot: 'Diveball' },
        { loot: 'Lureball' },
    ],
    legendary: [{ loot: 'LargeRestore' }],
    mythic: [
        { loot: 'Heart Scale' },
        { loot: 'Protein', requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Seaside Cave')) },
    ],
}, 4203000, [
    new DungeonBossPokemon('Eelektrik', 28000000, 100),
    new DungeonBossPokemon('Crustle', 28000000, 100),
], 246500, 21);
dungeonList['Plasma Frigate'] = new Dungeon('Plasma Frigate', [
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Watchog', 257500, 46),
        new GymPokemon('Garbodor', 257500, 46),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Golbat', 257500, 46),
        new GymPokemon('Drapion', 257500, 46),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Seviper', 257500, 46),
        new GymPokemon('Garbodor', 257500, 46),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Krookodile', 257500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Drapion', 257500, 47)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Garbodor', 257500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Whirlipede', 257500, 46),
        new GymPokemon('Watchog', 257500, 46),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Pawniard', 257500, 45),
        new GymPokemon('Pawniard', 257500, 45),
        new GymPokemon('Pawniard', 257500, 45),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Scraggy', 257500, 46),
        new GymPokemon('Liepard', 257500, 46),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Weezing', 257500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Krokorok', 257500, 46),
        new GymPokemon('Raticate', 257500, 46),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Deino', 257500, 45),
        new GymPokemon('Deino', 257500, 45),
        new GymPokemon('Sneasel', 257500, 45),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Scraggy', 257500, 45),
        new GymPokemon('Krokorok', 257500, 45),
        new GymPokemon('Golbat', 257500, 45),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Scrafty', 257500, 47)], { weight: 1 }, undefined, '(female)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Pokeball' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Iron Plate' },
        { loot: 'Zap Plate' },
        { loot: 'Icicle Plate' },
    ],
    legendary: [{ loot: 'Revive' }],
    mythic: [{ loot: 'Max Revive' }],
}, 4603000, [
    new DungeonTrainer('Team Plasma', [
        new GymPokemon('Cryogonal', 12000000, 48),
        new GymPokemon('Cryogonal', 12000000, 48),
        new GymPokemon('Weavile', 13000000, 50),
    ], { weight: 1 }, 'Zinzolin', '(zinzolin)'),
], 257500, 20);
dungeonList['Giant Chasm'] = new Dungeon('Giant Chasm', [
    { pokemon: 'Clefairy', options: { weight: 4 } },
    { pokemon: 'Poliwag', options: { weight: 4 } },
    { pokemon: 'Seel', options: { weight: 4 } },
    { pokemon: 'Tangela', options: { weight: 4 } },
    { pokemon: 'Delibird', options: { weight: 4 } },
    { pokemon: 'Sneasel', options: { weight: 4 } },
    { pokemon: 'Piloswine', options: { weight: 4 } },
    { pokemon: 'Pelipper', options: { weight: 4 } },
    { pokemon: 'Lunatone', options: { weight: 4 } },
    { pokemon: 'Solrock', options: { weight: 4 } },
    { pokemon: 'Vanillish', options: { weight: 4 } },
    { pokemon: 'Basculin (Red-Striped)', options: { weight: 4 } },
    { pokemon: 'Basculin (Blue-Striped)', options: { weight: 4 } },
    { pokemon: 'Ditto', options: { weight: 4 } },
    { pokemon: 'Metang', options: { weight: 4 } },
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Weezing', 266500, 46),
        new GymPokemon('Muk', 266500, 46),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Scraggy', 266500, 46),
        new GymPokemon('Scrafty', 266500, 46),
        new GymPokemon('Whirlipede', 266500, 46),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Trubbish', 266500, 46),
        new GymPokemon('Golbat', 266500, 46),
        new GymPokemon('Garbodor', 266500, 46),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Skorupi', 266500, 45),
        new GymPokemon('Foongus', 266500, 45),
        new GymPokemon('Golbat', 266500, 45),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Krookodile', 266500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Doctor', [new GymPokemon('Leavanny', 266500, 49)], { weight: 1 }, 'Julius'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Scrafty', 266500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Scolipede', 266500, 47)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Trubbish', 266500, 46),
        new GymPokemon('Zangoose', 266500, 46),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Grimer', 266500, 46),
        new GymPokemon('Seviper', 266500, 46),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Raticate', 266500, 47),
        new GymPokemon('Watchog', 266500, 47),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Krokorok', 266500, 47),
        new GymPokemon('Krookodile', 266500, 47),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Drapion', 266500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Deino', 266500, 45),
        new GymPokemon('Deino', 266500, 45),
        new GymPokemon('Sneasel', 266500, 45),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Koffing', 266500, 46),
        new GymPokemon('Amoonguss', 266500, 46),
    ], { weight: 1 }, undefined, '(male)'),
], {
    common: [
        { loot: 'Aspear', weight: 4 },
        { loot: 'Lucky_incense', weight: 2 },
        { loot: 'Amoonguss' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Icicle Plate' },
        { loot: 'Draco Plate' },
        { loot: 'Dread Plate' },
    ],
    legendary: [
        { loot: 'Star Piece', weight: 2 },
        { loot: 'Ultraball' },
        { loot: 'LargeRestore' },
    ],
    mythic: [{ loot: 'Max Revive' }],
}, 4403000, [
    new DungeonTrainer('Team Plasma', [
        new GymPokemon('Cryogonal', 12000000, 49),
        new GymPokemon('Cryogonal', 12000000, 49),
        new GymPokemon('Weavile', 12500000, 51),
    ], { weight: 1 }, 'Zinzolin', '(zinzolin)'),
    new DungeonBossPokemon('Tangrowth', 30000000, 100, { requirement: new TemporaryBattleRequirement('Ghetsis 2') }),
    new DungeonBossPokemon('Audino', 32000000, 100, { requirement: new TemporaryBattleRequirement('Ghetsis 2') }),
    new DungeonBossPokemon('Mamoswine', 32000000, 100, { requirement: new TemporaryBattleRequirement('Ghetsis 2') }),
    new DungeonBossPokemon('Kyurem', 35000000, 100, { requirement: new MultiRequirement([
            new TemporaryBattleRequirement('Ghetsis 2'),
            new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion),
        ]) }),
], 266500, 22);
dungeonList['Cave of Being'] = new Dungeon('Cave of Being', ['Kadabra', 'Golbat', 'Woobat', 'Gurdurr', 'Graveler', 'Onix'], {
    common: [
        { loot: 'xClick' },
        { loot: 'xAttack' },
        { loot: 'Lucky_egg' },
        { loot: 'Token_collector' },
        { loot: 'Dowsing_machine' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
    ],
    epic: [{ loot: 'Mind Plate' }],
}, 4603000, [
    new DungeonBossPokemon('Uxie', 35000000, 100),
    new DungeonBossPokemon('Mesprit', 35000000, 100),
    new DungeonBossPokemon('Azelf', 35000000, 100),
], 286500, 20);
dungeonList['Abundant Shrine'] = new Dungeon('Abundant Shrine', [
    { pokemon: 'Vulpix', options: { weight: 1.45 } },
    { pokemon: 'Golduck', options: { weight: 1.45 } },
    { pokemon: 'Marill', options: { weight: 1.45 } },
    { pokemon: 'Azumarill', options: { weight: 1.45 } },
    { pokemon: 'Swablu', options: { weight: 1.45 } },
    { pokemon: 'Bronzor', options: { weight: 1.45 } },
    { pokemon: 'Cottonee', options: { weight: 1.45 } },
    { pokemon: 'Petilil', options: { weight: 1.45 } },
    { pokemon: 'Goldeen', options: { weight: 1.45 } },
    { pokemon: 'Basculin (Red-Striped)', options: { weight: 1.45 } },
    { pokemon: 'Basculin (Blue-Striped)', options: { weight: 1.45 } },
    new DungeonTrainer('Youngster', [
        new GymPokemon('Skorupi', 306500, 39),
        new GymPokemon('Seviper', 306500, 39),
    ], { weight: 1 }, 'Wes'),
    new DungeonTrainer('Twins', [
        new GymPokemon('Swablu', 306500, 38),
        new GymPokemon('Swablu', 306500, 38),
    ], { weight: 1 }, 'Rae & Ula'),
    new DungeonTrainer('Lass', [
        new GymPokemon('Deerling (Spring)', 306500, 39),
        new GymPokemon('Zangoose', 306500, 39),
    ], { weight: 1 }, 'Lurleen'),
    new DungeonTrainer('Youngster', [
        new GymPokemon('Karrablast', 306500, 37),
        new GymPokemon('Shelmet', 306500, 37),
        new GymPokemon('Joltik', 306500, 37),
        new GymPokemon('Scolipede', 306500, 37),
    ], { weight: 1 }, 'Jaye'),
], {
    common: [
        { loot: 'Mago', weight: 3 },
        { loot: 'xClick', weight: 3 },
        { loot: 'Amoonguss' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Green Shard' },
    ],
    legendary: [
        { loot: 'Ultraball' },
        { loot: 'LargeRestore' },
    ],
    mythic: [{ loot: 'Max Revive' }],
}, 4803000, [
    new DungeonBossPokemon('Bronzong', 38000000, 100),
    new DungeonBossPokemon('Altaria', 38000000, 100),
    new DungeonBossPokemon('Landorus', 42000000, 100),
], 306500, 14);
dungeonList['Victory Road Unova'] = new Dungeon('Victory Road Unova', [
    { pokemon: 'Poliwag', options: { weight: 6.67 } },
    { pokemon: 'Onix', options: { weight: 6.67 } },
    { pokemon: 'Marill', options: { weight: 6.67 } },
    { pokemon: 'Roselia', options: { weight: 6.67 } },
    { pokemon: 'Altaria', options: { weight: 6.67 } },
    { pokemon: 'Banette', options: { weight: 6.67 } },
    { pokemon: 'Buizel', options: { weight: 6.67 } },
    { pokemon: 'Basculin (Red-Striped)', options: { weight: 6.67 } },
    { pokemon: 'Basculin (Blue-Striped)', options: { weight: 6.67 } },
    { pokemon: 'Boldore', options: { weight: 6.67 } },
    { pokemon: 'Cottonee', options: { weight: 6.67 } },
    { pokemon: 'Petilil', options: { weight: 6.67 } },
    { pokemon: 'Tranquill', options: { weight: 6.67 } },
    { pokemon: 'Unfezant', options: { weight: 6.67 } },
    { pokemon: 'Gurdurr', options: { weight: 6.67 } },
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Golurk', 326500, 55),
        new GymPokemon('Sigilyph', 326500, 55),
    ], { weight: 1 }, 'Billy', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Drifblim', 326500, 55),
        new GymPokemon('Claydol', 326500, 55),
    ], { weight: 1 }, 'Jamie', '(female)'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Lampent', 326500, 54),
        new GymPokemon('Musharna', 326500, 54),
    ], { weight: 1 }, 'Alia', '(female)'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Metang', 326500, 54),
        new GymPokemon('Cofagrigus', 326500, 54),
    ], { weight: 1 }, 'Al', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Braviary', 326500, 55),
        new GymPokemon('Carracosta', 326500, 55),
    ], { weight: 1 }, 'Claude', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Mandibuzz', 326500, 55),
        new GymPokemon('Archeops', 326500, 55),
    ], { weight: 1 }, 'Cecile', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Darmanitan', 326500, 55),
        new GymPokemon('Tangrowth', 326500, 55),
    ], { weight: 1 }, 'Chandra', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Whimsicott', 326500, 55),
        new GymPokemon('Unfezant', 326500, 55),
    ], { weight: 1 }, 'Beckett', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Swoobat', 326500, 55),
        new GymPokemon('Lilligant', 326500, 55),
    ], { weight: 1 }, 'Shelly', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Sigilyph', 326500, 55),
        new GymPokemon('Crobat', 326500, 55),
    ], { weight: 1 }, 'Cathy', '(female)'),
    new DungeonTrainer('Doctor', [new GymPokemon('Clefable', 326500, 54)], { weight: 1 }, 'Logan'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Sawsbuck (Spring)', 326500, 54)], { weight: 1 }, 'Mae', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Swanna', 326500, 55),
        new GymPokemon('Ampharos', 326500, 55),
    ], { weight: 1 }, 'Pierce', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Gigalith', 326500, 55),
        new GymPokemon('Skarmory', 326500, 55),
    ], { weight: 1 }, 'Abraham', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Heatmor', 326500, 55),
        new GymPokemon('Galvantula', 326500, 55),
    ], { weight: 1 }, 'Shanta', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Durant', 326500, 55),
        new GymPokemon('Ferrothorn', 326500, 55),
    ], { weight: 1 }, 'Webster', '(male)'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Electabuzz', 326500, 54),
        new GymPokemon('Probopass', 326500, 54),
    ], { weight: 1 }, 'Eddie', '(male)'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Magmar', 326500, 54),
        new GymPokemon('Camerupt', 326500, 54),
    ], { weight: 1 }, 'Elle', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Fraxure', 326500, 54),
        new GymPokemon('Zweilous', 326500, 54),
        new GymPokemon('Flygon', 326500, 54),
    ], { weight: 1 }, 'Hugo', '(male)'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Pinsir', 326500, 54),
        new GymPokemon('Heracross', 326500, 54),
    ], { weight: 1 }, 'Martell'),
    new DungeonTrainer('Battle Girl', [
        new GymPokemon('Throh', 326500, 54),
        new GymPokemon('Sawk', 326500, 54),
    ], { weight: 1 }, 'Chalina'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Zweilous', 326500, 55),
        new GymPokemon('Eelektross', 326500, 55),
    ], { weight: 1 }, 'Elmer', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Fraxure', 326500, 55),
        new GymPokemon('Vanilluxe', 326500, 55),
    ], { weight: 1 }, 'Caroll', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Zebstrika', 326500, 54),
        new GymPokemon('Sawk', 326500, 54),
        new GymPokemon('Starmie', 326500, 54),
    ], { weight: 1 }, 'Portia', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Beartic', 326500, 54),
        new GymPokemon('Throh', 326500, 54),
        new GymPokemon('Golurk', 326500, 54),
    ], { weight: 1 }, 'Sterling', '(male)'),
], {
    common: [
        { loot: 'xClick', weight: 3 },
        { loot: 'xAttack', weight: 3 },
        { loot: 'Zoroark' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Quickball' },
        { loot: 'Timerball' },
        { loot: 'Duskball' },
        { loot: 'Nestball' },
        { loot: 'Repeatball' },
    ],
    legendary: [
        { loot: 'Ultraball' },
        { loot: 'Star Piece' },
        { loot: 'LargeRestore' },
        { loot: 'Dragon_Fang' },
    ],
    mythic: [{ loot: 'Max Revive' }],
}, 5003000, [
    new DungeonBossPokemon('Golurk', 44000000, 100),
    new DungeonBossPokemon('Terrakion', 45000000, 100),
    new DungeonBossPokemon('Audino', 45000000, 100),
    new DungeonBossPokemon('Druddigon', 44000000, 100),
], 326500, 23);
dungeonList['Twist Mountain'] = new Dungeon('Twist Mountain', [
    { pokemon: 'Onix', options: { weight: 10.4 } },
    { pokemon: 'Boldore', options: { weight: 10.4 } },
    { pokemon: 'Woobat', options: { weight: 10.4 } },
    { pokemon: 'Gurdurr', options: { weight: 10.4 } },
    { pokemon: 'Beartic', options: { weight: 10.4 } },
    new DungeonTrainer('Worker', [
        new GymPokemon('Roggenrola', 356500, 60),
        new GymPokemon('Graveler', 356500, 60),
        new GymPokemon('Excadrill', 356500, 60),
    ], { weight: 1 }, 'Cairn', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Tauros', 356500, 64),
        new GymPokemon('Crobat', 356500, 64),
        new GymPokemon('Carracosta', 356500, 64),
    ], { weight: 1 }, 'Carter', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Glaceon', 356500, 63),
        new GymPokemon('Bastiodon', 356500, 63),
        new GymPokemon('Rhyperior', 356500, 63),
        new GymPokemon('Drapion', 356500, 63),
    ], { weight: 1 }, 'Julia', '(female)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Golett', 356500, 61),
        new GymPokemon('Mamoswine', 356500, 61),
    ], { weight: 1 }, 'Wade'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Geodude', 356500, 60),
        new GymPokemon('Steelix', 356500, 60),
        new GymPokemon('Boldore', 356500, 60),
    ], { weight: 1 }, 'Gus', '(male)'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Machoke', 356500, 61),
        new GymPokemon('Abomasnow', 356500, 61),
    ], { weight: 1 }, 'Patton', '(ice)'),
    new DungeonTrainer('Nurse', [new GymPokemon('Blissey', 356500, 62)], { weight: 1 }, 'Carol'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Gyarados', 356500, 64),
        new GymPokemon('Kangaskhan', 356500, 64),
        new GymPokemon('Archeops', 356500, 64),
    ], { weight: 1 }, 'Chloris', '(female)'),
    new DungeonTrainer('Worker', [new GymPokemon('Sigilyph', 356500, 62)], { weight: 1 }, 'Cliff', '(male)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Larvitar', 356500, 61),
        new GymPokemon('Probopass', 356500, 61),
    ], { weight: 1 }, 'Hunter'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Glalie', 356500, 61),
        new GymPokemon('Beartic', 356500, 61),
    ], { weight: 1 }, 'Victor', '(ice)'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Smoochum', 356500, 60),
        new GymPokemon('Claydol', 356500, 60),
        new GymPokemon('Kadabra', 356500, 60),
    ], { weight: 1 }, 'Ryan', '(ice)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Weavile', 356500, 63),
        new GymPokemon('Rampardos', 356500, 63),
        new GymPokemon('Toxicroak', 356500, 63),
        new GymPokemon('Aggron', 356500, 63),
    ], { weight: 1 }, 'Zach', '(male)'),
], {
    common: [
        { loot: 'Token_collector', weight: 3 },
        { loot: 'Lucky_incense', weight: 3 },
        { loot: 'Greatball' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Yellow Shard' },
    ],
    legendary: [
        { loot: 'Rare Bone', weight: 2 },
        { loot: 'Revive' },
        { loot: 'Ultraball' },
        { loot: 'Duskball' },
        { loot: 'LargeRestore' },
    ],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Twist Mountain')) }],
}, 5203000, [
    new DungeonBossPokemon('Durant', 48000000, 100),
    new DungeonBossPokemon('Cryogonal', 48000000, 100),
    new DungeonBossPokemon('Heatmor', 48000000, 100),
    new DungeonBossPokemon('Regigigas', 50000000, 100),
], 356500, 7);
dungeonList['Dragonspiral Tower'] = new Dungeon('Dragonspiral Tower', ['Dratini', 'Tranquill', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)', 'Vanillish', 'Sawsbuck (Autumn)', 'Sawsbuck (Winter)', 'Beartic', 'Mienfoo', 'Mienshao', 'Druddigon', 'Golett', 'Golurk'], {
    common: [
        { loot: 'xAttack', weight: 2 },
        { loot: 'Razz' },
        { loot: 'Pinap' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Draco Plate' },
        { loot: 'Zap Plate' },
        { loot: 'Flame Plate' },
        { loot: 'Icicle Plate' },
        { loot: 'Spooky Plate' },
        { loot: 'Splash Plate' },
        { loot: 'Iron Plate' },
    ],
    legendary: [
        { loot: 'Star Piece', weight: 2 },
        { loot: 'Dragon_Fang' },
        { loot: 'Never_Melt_Ice' },
        { loot: 'LargeRestore' },
    ],
    mythic: [
        { loot: 'Heart Scale' },
        { loot: 'Protein', requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Dragonspiral Tower')) },
    ],
}, 5203000, [
    new DungeonBossPokemon('Dragonite', 48000000, 100),
    new DungeonBossPokemon('Reshiram', 50000000, 100),
    new DungeonBossPokemon('Zekrom', 50000000, 100),
], 356500, 7);
dungeonList['Moor of Icirrus'] = new Dungeon('Moor of Icirrus', [
    { pokemon: 'Croagunk', options: { weight: 2.67 } },
    { pokemon: 'Palpitoad', options: { weight: 2.67 } },
    { pokemon: 'Karrablast', options: { weight: 2.67 } },
    { pokemon: 'Shelmet', options: { weight: 2.67 } },
    { pokemon: 'Stunfisk', options: { weight: 2.67 } },
    { pokemon: 'Barboach', options: { weight: 2.67 } },
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Accelgor', 356500, 62),
        new GymPokemon('Swalot', 356500, 62),
        new GymPokemon('Kecleon', 356500, 62),
    ], { weight: 1 }, 'Elaine', '(female)'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Escavalier', 356500, 62),
        new GymPokemon('Skuntank', 356500, 62),
        new GymPokemon('Carnivine', 356500, 62),
    ], { weight: 1 }, 'Parker', '(male)'),
    new DungeonTrainer('Fisherman', [
        new GymPokemon('Corphish', 356500, 60),
        new GymPokemon('Poliwag', 356500, 60),
        new GymPokemon('Stunfisk', 356500, 60),
    ], { weight: 1 }, 'Eustace'),
    new DungeonTrainer('Fisherman', [
        new GymPokemon('Poliwhirl', 356500, 60),
        new GymPokemon('Whiscash', 356500, 60),
        new GymPokemon('Politoed', 356500, 60),
    ], { weight: 1 }, 'Arnold'),
], {
    common: [
        { loot: 'xAttack', weight: 3 },
        { loot: 'Lucky_egg', weight: 3 },
        { loot: 'Greatball' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
    ],
    legendary: [
        { loot: 'Ultraball', weight: 2 },
        { loot: 'Revive', weight: 2 },
        { loot: 'LargeRestore' },
    ],
    mythic: [
        { loot: 'Heart Scale' },
        { loot: 'Max Revive' },
        { loot: 'Lum', requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Moor of Icirrus')) },
    ],
}, 5203000, [
    new DungeonBossPokemon('Keldeo', 50000000, 100),
    new DungeonBossPokemon('Seismitoad', 48000000, 100),
    new DungeonBossPokemon('Whiscash', 48000000, 100),
], 356500, 8);
dungeonList['Pledge Grove'] = new Dungeon('Pledge Grove', ['Fearow', 'Furret', 'Ledian', 'Sudowoodo', 'Stantler', 'Breloom', 'Unfezant', 'Sawsbuck (Autumn)', 'Sawsbuck (Winter)'], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'xAttack' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Green Shard' },
    ],
    epic: [
        { loot: 'Splash Plate' },
        { loot: 'Fist Plate' },
    ],
    legendary: [{ loot: 'Ultraball' }],
}, 5203000, [new DungeonBossPokemon('Keldeo (Resolute)', 52000000, 100)], 356500, 8);
dungeonList['Pinwheel Forest'] = new Dungeon('Pinwheel Forest', [
    { pokemon: 'Goldeen', options: { weight: 6.57 } },
    { pokemon: 'Marill', options: { weight: 6.57 } },
    { pokemon: 'Yanma', options: { weight: 6.57 } },
    { pokemon: 'Vigoroth', options: { weight: 6.57 } },
    { pokemon: 'Toxicroak', options: { weight: 6.57 } },
    { pokemon: 'Gurdurr', options: { weight: 6.57 } },
    { pokemon: 'Tympole', options: { weight: 6.57 } },
    { pokemon: 'Palpitoad', options: { weight: 6.57 } },
    { pokemon: 'Swadloon', options: { weight: 6.57 } },
    { pokemon: 'Whirlipede', options: { weight: 6.57 } },
    { pokemon: 'Cottonee', options: { weight: 6.57 } },
    { pokemon: 'Petilil', options: { weight: 6.57 } },
    { pokemon: 'Basculin (Red-Striped)', options: { weight: 6.57 } },
    { pokemon: 'Basculin (Blue-Striped)', options: { weight: 6.57 } },
    new DungeonTrainer('Preschooler', [
        new GymPokemon('Wooper', 356500, 60),
        new GymPokemon('Tympole', 356500, 60),
    ], { weight: 1 }, 'Jojo', '(male)'),
    new DungeonTrainer('Nursery Aide', [
        new GymPokemon('Exeggcute', 356500, 61),
        new GymPokemon('Miltank', 356500, 61),
    ], { weight: 1 }, 'Ethel'),
    new DungeonTrainer('Preschooler', [
        new GymPokemon('Dratini', 356500, 59),
        new GymPokemon('Gible', 356500, 59),
        new GymPokemon('Bagon', 356500, 59),
    ], { weight: 1 }, 'Samantha', '(female)'),
    new DungeonTrainer('Preschooler', [
        new GymPokemon('Burmy (Plant)', 356500, 59),
        new GymPokemon('Scyther', 356500, 59),
        new GymPokemon('Paras', 356500, 59),
    ], { weight: 1 }, 'José', '(male)'),
    new DungeonTrainer('Twins', [
        new GymPokemon('Plusle', 356500, 60),
        new GymPokemon('Minun', 356500, 60),
    ], { weight: 1 }, 'Ally & Amy'),
    new DungeonTrainer('Nursery Aide', [
        new GymPokemon('Chansey', 356500, 61),
        new GymPokemon('Leavanny', 356500, 61),
    ], { weight: 1 }, 'Rosalyn'),
    new DungeonTrainer('Preschooler', [
        new GymPokemon('Pineco', 356500, 60),
        new GymPokemon('Ferrothorn', 356500, 60),
    ], { weight: 1 }, 'Ike', '(male)'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Sudowoodo', 356500, 62),
        new GymPokemon('Gloom', 356500, 62),
        new GymPokemon('Beartic', 356500, 62),
    ], { weight: 1 }, 'Hillary', '(female)'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Weepinbell', 356500, 62),
        new GymPokemon('Luxray', 356500, 62),
        new GymPokemon('Ursaring', 356500, 62),
    ], { weight: 1 }, 'Dwayne', '(male)'),
    new DungeonTrainer('Youngster', [
        new GymPokemon('Mankey', 356500, 60),
        new GymPokemon('Snubbull', 356500, 60),
        new GymPokemon('Crawdaunt', 356500, 60),
    ], { weight: 1 }, 'Keita'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Electrike', 356500, 62),
        new GymPokemon('Rapidash', 356500, 62),
        new GymPokemon('Farfetch\'d', 356500, 62),
    ], { weight: 1 }, 'Ralph', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Crobat', 356500, 64),
        new GymPokemon('Magmortar', 356500, 64),
        new GymPokemon('Leafeon', 356500, 64),
    ], { weight: 1 }, 'Rosaline', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Ludicolo', 356500, 64),
        new GymPokemon('Electivire', 356500, 64),
        new GymPokemon('Forretress', 356500, 64),
    ], { weight: 1 }, 'Sinan', '(male)'),
    new DungeonTrainer('Lass', [
        new GymPokemon('Nidoran(F)', 356500, 60),
        new GymPokemon('Nidoran(M)', 356500, 60),
        new GymPokemon('Nidoqueen', 356500, 60),
    ], { weight: 1 }, 'Helia'),
    new DungeonTrainer('Youngster', [
        new GymPokemon('Cascoon', 356500, 60),
        new GymPokemon('Silcoon', 356500, 60),
        new GymPokemon('Scolipede', 356500, 60),
    ], { weight: 1 }, 'Henley'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Munchlax', 356500, 62),
        new GymPokemon('Zebstrika', 356500, 62),
        new GymPokemon('Kricketune', 356500, 62),
    ], { weight: 1 }, 'Melita', '(female)'),
    new DungeonTrainer('Youngster', [
        new GymPokemon('Phanpy', 356500, 60),
        new GymPokemon('Doduo', 356500, 60),
        new GymPokemon('Fearow', 356500, 60),
    ], { weight: 1 }, 'Nicholas'),
    new DungeonTrainer('School Kid', [
        new GymPokemon('Oddish', 356500, 60),
        new GymPokemon('Tangela', 356500, 60),
        new GymPokemon('Bellossom', 356500, 60),
    ], { weight: 1 }, 'Millie', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Furret', 356500, 63),
        new GymPokemon('Braviary', 356500, 63),
        new GymPokemon('Seismitoad', 356500, 63),
    ], { weight: 1 }, 'Kelsey', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Linoone', 356500, 63),
        new GymPokemon('Mandibuzz', 356500, 63),
        new GymPokemon('Toxicroak', 356500, 63),
    ], { weight: 1 }, 'Kathrine', '(female)'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Tyrogue', 356500, 61),
        new GymPokemon('Scrafty', 356500, 61),
        new GymPokemon('Makuhita', 356500, 61),
    ], { weight: 1 }, 'Kentaro'),
    new DungeonTrainer('Battle Girl', [
        new GymPokemon('Tyrogue', 356500, 61),
        new GymPokemon('Machop', 356500, 61),
        new GymPokemon('Poliwrath', 356500, 61),
    ], { weight: 1 }, 'Lee'),
    new DungeonTrainer('School Kid', [
        new GymPokemon('Venonat', 356500, 60),
        new GymPokemon('Yanma', 356500, 60),
        new GymPokemon('Venomoth', 356500, 60),
    ], { weight: 1 }, 'Keston', '(male)'),
], {
    common: [
        { loot: 'Chesto', weight: 2 },
        { loot: 'Pecha', weight: 2 },
        { loot: 'Sitrus', weight: 2 },
        { loot: 'Amoonguss' },
        { loot: 'Greatball' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Meadow Plate' },
        { loot: 'Fist Plate' },
    ],
    legendary: [
        { loot: 'MediumRestore', weight: 2 },
        { loot: 'Star Piece', weight: 2 },
        { loot: 'LargeRestore' },
        { loot: 'Ultraball' },
        { loot: 'Nestball' },
        { loot: 'Miracle_Seed' },
        { loot: 'Silver_Powder' },
    ],
    mythic: [
        { loot: 'Max Revive' },
        { loot: 'Lum', requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Pinwheel Forest')) },
        { loot: 'Protein', requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Pinwheel Forest')) },
    ],
}, 5203000, [
    new DungeonBossPokemon('Scolipede', 48000000, 100),
    new DungeonBossPokemon('Seismitoad', 48000000, 100),
    new DungeonBossPokemon('Virizion', 48000000, 100),
], 356500, 3);
dungeonList.Dreamyard = new Dungeon('Dreamyard', [
    { pokemon: 'Raticate', options: { weight: 4.67 } },
    { pokemon: 'Jigglypuff', options: { weight: 4.67 } },
    { pokemon: 'Golbat', options: { weight: 4.67 } },
    { pokemon: 'Watchog', options: { weight: 4.67 } },
    { pokemon: 'Liepard', options: { weight: 4.67 } },
    { pokemon: 'Munna', options: { weight: 4.67 } },
    new DungeonTrainer('Psychic', [
        new GymPokemon('Hypno', 356500, 62),
        new GymPokemon('Dusclops', 356500, 62),
    ], { weight: 1 }, 'Nandor', '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Gastly', 356500, 63),
        new GymPokemon('Skuntank', 356500, 63),
    ], { weight: 1 }, 'Athena', '(female)'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Chingling', 356500, 62),
        new GymPokemon('Mr. Mime', 356500, 62),
    ], { weight: 1 }, 'Olesia', '(female)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Klang', 356500, 63),
        new GymPokemon('Porygon', 356500, 63),
    ], { weight: 1 }, 'Franklin', '(male)'),
    new DungeonTrainer('School Kid', [
        new GymPokemon('Shroomish', 356500, 63),
        new GymPokemon('Tangrowth', 356500, 63),
    ], { weight: 1 }, 'William', '(male)'),
    new DungeonTrainer('Youngster', [
        new GymPokemon('Slakoth', 356500, 63),
        new GymPokemon('Slaking', 356500, 63),
    ], { weight: 1 }, 'Keita'),
    new DungeonTrainer('School Kid', [
        new GymPokemon('Igglybuff', 356500, 63),
        new GymPokemon('Lickilicky', 356500, 63),
    ], { weight: 1 }, 'Rita', '(female)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Pokeball' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
    ],
    epic: [
        { loot: 'Mind Plate', weight: 2 },
        { loot: 'Draco Plate' },
    ],
    legendary: [
        { loot: 'SmallRestore', weight: 2 },
        { loot: 'Ultraball', weight: 2 },
        { loot: 'Revive', weight: 2 },
        { loot: 'LargeRestore' },
        { loot: 'Twisted_Spoon' },
    ],
}, 5203000, [
    new DungeonBossPokemon('Audino', 48000000, 100),
    new DungeonBossPokemon('Dunsparce', 48000000, 100),
    new DungeonBossPokemon('Latias', 48000000, 100),
    new DungeonBossPokemon('Latios', 48000000, 100),
], 356500, 3);
dungeonList['P2 Laboratory'] = new Dungeon('P2 Laboratory', ['Scyther', 'Electrode', 'Pineco', 'Forretress', 'Metang', 'Ferroseed', 'Ferrothorn'], {
    common: [
        { loot: 'xClick' },
        { loot: 'xAttack', weight: 2 },
        { loot: 'Token_collector', weight: 2 },
        { loot: 'Forretress' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Iron Plate', weight: 2 },
        { loot: 'Insect Plate', weight: 2 },
        { loot: 'Zap Plate' },
    ],
    legendary: [{ loot: 'Revive' }],
}, 5403000, [
    new DungeonBossPokemon('Ursaring', 58000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')) }),
    new DungeonBossPokemon('Mawile', 62000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')) }),
    new DungeonBossPokemon('Sableye', 62000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')) }),
    new DungeonBossPokemon('Zangoose', 62000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')) }),
    new DungeonBossPokemon('Audino', 62000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')) }),
    new DungeonBossPokemon('Durant', 58000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')) }),
    new DungeonBossPokemon('Genesect', 62000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')) }),
    new DungeonTrainer('Team Plasma', [
        new GymPokemon('Magneton', 10000000, 72),
        new GymPokemon('Rotom (Wash)', 10000000, 72),
        new GymPokemon('Metagross', 10000000, 72),
        new GymPokemon('Beheeyem', 10000000, 72),
        new GymPokemon('Magnezone', 10000000, 72),
        new GymPokemon('Klinklang', 11000000, 74),
    ], { weight: 1 }, 'Colress', '(colress)'),
], 396500, 18);
// Kalos
dungeonList['Santalune Forest'] = new Dungeon('Santalune Forest', [
    { pokemon: 'Caterpie', options: { weight: 0.88 } },
    { pokemon: 'Metapod', options: { weight: 0.88 } },
    { pokemon: 'Weedle', options: { weight: 0.88 } },
    { pokemon: 'Kakuna', options: { weight: 0.88 } },
    { pokemon: 'Pansage', options: { weight: 0.88 } },
    { pokemon: 'Pansear', options: { weight: 0.88 } },
    { pokemon: 'Panpour', options: { weight: 0.88 } },
    { pokemon: 'Fletchling', options: { weight: 0.88 } },
    { pokemon: 'Scatterbug', options: { weight: 0.88 } },
    new DungeonTrainer('Youngster', [
        new GymPokemon('Scatterbug', 5803000, 3),
        new GymPokemon('Fletchling', 5803000, 3),
    ], { weight: 1 }, 'Joey'),
    new DungeonTrainer('Lass', [new GymPokemon('Pikachu', 5803000, 5)], { weight: 1 }, 'Anna'),
], {
    common: [
        { loot: 'Pokeball', weight: 2 },
        { loot: 'Lucky_incense' },
    ],
    rare: [{ loot: 'Green Shard' }],
    epic: [
        { loot: 'Insect Plate' },
        { loot: 'Fist Plate' },
    ],
    legendary: [{ loot: 'SmallRestore' }],
}, 5803020, [
    new DungeonTrainer('Lass', [
        new GymPokemon('Weedle', 24303000, 2),
        new GymPokemon('Bunnelby', 27303000, 4),
    ], { weight: 1 }, 'Lise'),
    new DungeonBossPokemon('Pikachu', 51738600, 4),
], 400000, 2);
dungeonList['Connecting Cave'] = new Dungeon('Connecting Cave', [
    { pokemon: 'Zubat', options: { weight: 1.33 } },
    { pokemon: 'Whismur', options: { weight: 1.33 } },
    { pokemon: 'Meditite', options: { weight: 1.33 } },
], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Pokeball', weight: 2 },
        { loot: 'Wepear' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Toxic Plate' },
        { loot: 'Sky Plate' },
    ],
    legendary: [
        { loot: 'Hard Stone' },
        { loot: 'Damp Rock' },
    ],
}, 6503370, [
    new DungeonTrainer('Pokémon Breeder', [
        new GymPokemon('Ducklett', 13374965, 12),
        new GymPokemon('Pikachu', 14465837, 12),
        new GymPokemon('Litleo', 17438602, 12),
        new GymPokemon('Oddish', 19365784, 12),
    ], { weight: 1 }, 'Mercy', '(female)'),
    new DungeonBossPokemon('Axew', 59867590, 20),
], 475000, 7);
dungeonList['Glittering Cave'] = new Dungeon('Glittering Cave', [
    { pokemon: 'Machop', options: { weight: .88 } },
    { pokemon: 'Cubone', options: { weight: .88 } },
    { pokemon: 'Rhyhorn', options: { weight: .88 } },
    { pokemon: 'Lunatone', options: { weight: .88 } },
    { pokemon: 'Solrock', options: { weight: .88 } },
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Houndour', 7037592, 18),
        new GymPokemon('Zubat', 7037592, 18),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Gulpin', 7037592, 18),
        new GymPokemon('Electrike', 7037592, 18),
    ], { weight: 1 }, undefined, '(female)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'xAttack' },
    ],
    rare: [{ loot: 'Red Shard' }],
    legendary: [
        { loot: 'Hard Stone' },
        { loot: 'Revive' },
    ],
}, 7037500, [
    new DungeonTrainer('Team Flare Grunt Duo', [
        new GymPokemon('Scraggy', 33084827, 20),
        new GymPokemon('Croagunk', 31937395, 20),
    ], { weight: 1 }, undefined),
    new DungeonBossPokemon('Kangaskhan', 63749659, 20),
    new DungeonBossPokemon('Mawile', 61285398, 20),
], 505000, 9);
dungeonList['Reflection Cave'] = new Dungeon('Reflection Cave', [
    { pokemon: 'Mr. Mime', options: { weight: 4 } },
    { pokemon: 'Wobbuffet', options: { weight: 4 } },
    { pokemon: 'Sableye', options: { weight: 4 } },
    { pokemon: 'Chingling', options: { weight: 4 } },
    { pokemon: 'Roggenrola', options: { weight: 4 } },
    { pokemon: 'Solosis', options: { weight: 4 } },
    { pokemon: 'Carbink', options: { weight: 4 } },
    { pokemon: 'Mime Jr.', options: { weight: 4 } },
    new DungeonTrainer('Backpacker', [new GymPokemon('Linoone', 7353000, 26)], { weight: 1 }, 'Lane', '(male)'),
    new DungeonTrainer('Battle Girl', [
        new GymPokemon('Throh', 7353000, 25),
        new GymPokemon('Hawlucha', 7353000, 26),
    ], { weight: 1 }, 'Hedvig'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Sandile', 7353000, 23),
        new GymPokemon('Dwebble', 7353000, 23),
        new GymPokemon('Diggersby', 7353000, 24),
    ], { weight: 1 }, 'Dunstan'),
    new DungeonTrainer('Tourist', [new GymPokemon('Nidorina', 7353000, 26)], { weight: 1 }, 'Monami', '(female)'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Sawk', 7353000, 28)], { weight: 1 }, 'Igor'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Chimecho', 7353000, 24),
        new GymPokemon('Golett', 7353000, 24),
    ], { weight: 1 }, 'Franz', '(male)'),
    new DungeonTrainer('Tourist', [new GymPokemon('Nidorino', 7353000, 26)], { weight: 1 }, 'Haruto', '(male)'),
    new DungeonTrainer('Honeymooners', [
        new GymPokemon('Combee', 7353000, 26),
        new GymPokemon('Vespiquen', 7353000, 26),
    ], { weight: 1 }, 'Yuu & Ami'),
], {
    common: [
        { loot: 'Token_collector' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Red Shard' },
    ],
    epic: [
        { loot: 'Fist Plate' },
        { loot: 'Earth Plate' },
        { loot: 'Mind Plate' },
        { loot: 'Nestball' },
    ],
    legendary: [
        { loot: 'Revive', weight: 2 },
        { loot: 'LargeRestore' },
    ],
}, 7353000, [
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Absol', 33468400, 26),
        new GymPokemon('Pinsir', 37474200, 25),
    ], { weight: 1 }, 'Emil', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Doduo', 20365400, 24),
        new GymPokemon('Granbull', 23366400, 24),
        new GymPokemon('Helioptile', 25476400, 25),
    ], { weight: 1 }, 'Monique', '(female)'),
    new DungeonBossPokemon('Diancie', 69694200, 100, { requirement: new QuestLineStepCompletedRequirement('Princess Diancie', 7) }),
], 555000, 11);
//Tower of Mastery?
dungeonList['Kalos Power Plant'] = new Dungeon('Kalos Power Plant', [
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Croagunk', 7903570, 32),
        new GymPokemon('Scraggy', 7903570, 32),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Golbat', 7903570, 32),
        new GymPokemon('Scraggy', 7903570, 32),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Mightyena', 7903570, 34)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Golbat', 7903570, 32),
        new GymPokemon('Mightyena', 7903570, 32),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Golbat', 7903570, 33),
        new GymPokemon('Croagunk', 7903570, 31),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Liepard', 7903570, 31),
        new GymPokemon('Scraggy', 7903570, 31),
        new GymPokemon('Croagunk', 7903570, 31),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Swalot', 7903570, 34)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Liepard', 7903570, 31),
        new GymPokemon('Swalot', 7903570, 33),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Houndoom', 7903570, 36)], { weight: 8 }, undefined, '(male)'),
], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'xAttack' },
    ],
    rare: [{ loot: 'Yellow Shard' }],
    epic: [
        { loot: 'Zap Plate' },
        { loot: 'Dread Plate' },
    ],
    legendary: [
        { loot: 'Repeatball', weight: 2 },
        { loot: 'LargeRestore' },
        { loot: 'Magnet' },
    ],
}, 7903570, [
    new DungeonTrainer('Team Flare Aliana', [new GymPokemon('Mightyena', 75384400, 38)], { weight: 1 }),
    new DungeonBossPokemon('Volcanion', 83945700, 100, {
        requirement: new MultiRequirement([
            new ClearDungeonRequirement(5, GameConstants.getDungeonIndex('Kalos Power Plant')),
            new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion),
        ])
    }),
], 575000, 13);
dungeonList['Sea Spirit\'s Den'] = new Dungeon('Sea Spirit\'s Den', ['Lapras', 'Dwebble', 'Lanturn', 'Binacle', 'Woobat', 'Onix'], {
    common: [
        { loot: 'xClick', weight: 2 },
        { loot: 'Bluk' },
    ],
    rare: [{ loot: 'Blue Shard' }],
    epic: [
        { loot: 'Flame Plate' },
        { loot: 'Sky Plate' },
        { loot: 'Icicle Plate' },
        { loot: 'Zap Plate' },
        { loot: 'Mind Plate' },
        { loot: 'Lureball' },
    ],
    legendary: [
        { loot: 'Hard Stone' },
        { loot: 'Damp Rock' },
    ],
}, 7543000, [new DungeonBossPokemon('Lugia', 92375000, 100)], 600000, 23);
dungeonList['Poké Ball Factory'] = new Dungeon('Poké Ball Factory', [
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Toxicroak', 8173950, 37)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Mightyena', 8173950, 36),
        new GymPokemon('Golbat', 8173950, 36),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Scraggy', 8173950, 36),
        new GymPokemon('Mightyena', 8173950, 36),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Swalot', 8173950, 37)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Admin', [
        new GymPokemon('Scraggy', 8173950, 37),
        new GymPokemon('Houndoom', 8173950, 38),
    ], { weight: 4 }, undefined, '(female)'),
], {
    common: [
        { loot: 'Pokeball', weight: 4 },
        { loot: 'Greatball', weight: 2 },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Yellow Shard' },
        { loot: 'Pink Shard' },
    ],
    epic: [
        { loot: 'Duskball' },
        { loot: 'Quickball' },
        { loot: 'Fastball' },
        { loot: 'Timerball' },
        { loot: 'Luxuryball' },
        { loot: 'Lureball' },
        { loot: 'Diveball' },
        { loot: 'Repeatball' },
    ],
}, 8173950, [
    new DungeonTrainer('Team Flare Celosia', [new GymPokemon('Manectric', 79385030, 41)], { weight: 1 }),
    new DungeonTrainer('Team Flare Bryony', [new GymPokemon('Liepard', 79284730, 41)], { weight: 1 }),
], 615000, 14);
dungeonList['Lost Hotel'] = new Dungeon('Lost Hotel', [
    { pokemon: 'Magneton', options: { weight: 2.6 } },
    { pokemon: 'Electrode', options: { weight: 2.6 } },
    { pokemon: 'Litwick', options: { weight: 2.6 } },
    { pokemon: 'Pawniard', options: { weight: 2.6 } },
    { pokemon: 'Klefki', options: { weight: 2.6 } },
    new DungeonTrainer('Punk Guy', [
        new GymPokemon('Scrafty', 8375300, 39),
        new GymPokemon('Sharpedo', 8375300, 39),
        new GymPokemon('Pawniard', 8375300, 39),
    ], { weight: 1 }, 'Sid'),
    new DungeonTrainer('Punk Guy', [
        new GymPokemon('Skuntank', 8375300, 40),
        new GymPokemon('Crawdaunt', 8375300, 40),
    ], { weight: 1 }, 'Jacques'),
    new DungeonTrainer('Punk Guy', [new GymPokemon('Dunsparce', 8375300, 42)], { weight: 1 }, 'Slater'),
    new DungeonTrainer('Punk Girl', [
        new GymPokemon('Seviper', 8375300, 40),
        new GymPokemon('Arbok', 8375300, 40),
    ], { weight: 1 }, 'Jeanne'),
    new DungeonTrainer('Punk Girl', [
        new GymPokemon('Liepard', 8375300, 40),
        new GymPokemon('Liepard', 8375300, 40),
    ], { weight: 1 }, 'Cecile'),
], {
    common: [
        { loot: 'xClick', weight: 8 },
        { loot: 'Lucky_incense', weight: 6 },
        { loot: 'Trubbish', weight: 2 },
        { loot: 'Garbodor' },
    ],
    rare: [{ loot: 'Pink Shard' }],
    epic: [
        { loot: 'Dread Plate' },
        { loot: 'Duskball' },
    ],
    legendary: [
        { loot: 'Rotom (Heat)' },
        { loot: 'Rotom (Wash)' },
        { loot: 'Rotom (Fan)' },
        { loot: 'Rotom (Frost)' },
        { loot: 'Rotom (Mow)' },
        { loot: 'Twisted_Spoon' },
    ],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Lost Hotel')) }],
}, 8375300, [
    new DungeonTrainer('Punk Couple', [
        new GymPokemon('Garbodor', 42664500, 42),
        new GymPokemon('Pangoro', 42765500, 42),
    ], { weight: 2 }, 'Zoya & Asa'),
    new DungeonBossPokemon('Rotom', 82376500, 38),
], 635000, 15);
dungeonList['Frost Cavern'] = new Dungeon('Frost Cavern', [
    { pokemon: 'Haunter', options: { weight: 4.61 } },
    { pokemon: 'Jynx', options: { weight: 4.61 } },
    { pokemon: 'Piloswine', options: { weight: 4.61 } },
    { pokemon: 'Beartic', options: { weight: 4.61 } },
    { pokemon: 'Cryogonal', options: { weight: 4.61 } },
    { pokemon: 'Bergmite', options: { weight: 4.61 } },
    { pokemon: 'Smoochum', options: { weight: 4.61 } },
    { pokemon: 'Vanillite', options: { weight: 4.61 } },
    { pokemon: 'Cubchoo', options: { weight: 4.61 } },
    { pokemon: 'Poliwhirl', options: { weight: 4.61 } },
    { pokemon: 'Floatzel', options: { weight: 4.61 } },
    { pokemon: 'Basculin (Red-Striped)', options: { weight: 4.61 } },
    { pokemon: 'Basculin (Blue-Striped)', options: { weight: 4.61 } },
    new DungeonTrainer('Hiker', [new GymPokemon('Vibrava', 8537490, 44)], { weight: 1 }, 'Ross'),
    new DungeonTrainer('Sky Trainer', [
        new GymPokemon('Carnivine', 8537490, 41),
        new GymPokemon('Swanna', 8537490, 44),
    ], { weight: 1 }, 'Celso', '(male)'),
    new DungeonTrainer('Sky Trainer', [new GymPokemon('Cryogonal', 8537490, 45)], { weight: 1 }, 'Era', '(female)'),
    new DungeonTrainer('Artist', [new GymPokemon('Smeargle', 8537490, 44)], { weight: 1 }, 'Salvador', '(male)'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Doublade', 8537490, 46)], { weight: 1 }, 'Cordelia', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Raichu', 8537490, 42),
        new GymPokemon('Golduck', 8537490, 42),
        new GymPokemon('Marowak', 8537490, 43),
    ], { weight: 1 }, 'Neil', '(male)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Graveler', 8537490, 40),
        new GymPokemon('Graveler', 8537490, 41),
        new GymPokemon('Carbink', 8537490, 42),
    ], { weight: 1 }, 'Alain'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Relicanth', 8537490, 42),
        new GymPokemon('Rhydon', 8537490, 42),
    ], { weight: 1 }, 'Delmon'),
    new DungeonTrainer('Brains & Brawn', [
        new GymPokemon('Grumpig', 8537490, 44),
        new GymPokemon('Hariyama', 8537490, 46),
    ], { weight: 1 }, 'Eoin & Wolf'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Scrafty', 8537490, 43),
        new GymPokemon('Throh', 8537490, 44),
    ], { weight: 1 }, 'Alonzo'),
    new DungeonTrainer('Battle Girl', [
        new GymPokemon('Sawk', 8537490, 43),
        new GymPokemon('Mienshao', 8537490, 44),
    ], { weight: 1 }, 'Kinsey'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Gurdurr', 8537490, 46)], { weight: 1 }, 'Kenji'),
    new DungeonTrainer('Hiker', [new GymPokemon('Probopass', 8537490, 44)], { weight: 1 }, 'Brent'),
    new DungeonTrainer('Battle Girl', [new GymPokemon('Medicham', 8537490, 46)], { weight: 1 }, 'Gabrielle'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Golbat', 8537490, 42),
        new GymPokemon('Manectric', 8537490, 42),
    ], { weight: 1 }, undefined, '(female)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'xClick' },
        { loot: 'Oran' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Icicle Plate' },
        { loot: 'Meadow Plate' },
        { loot: 'Insect Plate' },
        { loot: 'Iron Plate' },
        { loot: 'Duskball' },
    ],
    legendary: [
        { loot: 'MediumRestore', weight: 2 },
        { loot: 'LargeRestore' },
        { loot: 'Never_Melt_Ice' },
    ],
    mythic: [{ loot: 'Heart Scale' }],
}, 8537490, [
    new DungeonTrainer('Team Flare Mable', [new GymPokemon('Houndoom', 87365830, 48)], { weight: 1 }),
    new DungeonBossPokemon('Abomasnow', 85376500, 50),
], 665500, 15);
dungeonList['Team Flare Secret HQ'] = new Dungeon('Team Flare Secret HQ', [
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Toxicroak', 8739480, 50)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Liepard', 8739480, 48)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Manectric', 8739480, 50)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Mightyena', 8739480, 48)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Houndoom', 8739480, 50)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Scrafty', 8739480, 48)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Admin', [
        new GymPokemon('Liepard', 8739480, 47),
        new GymPokemon('Manectric', 8739480, 48),
    ], { weight: 2 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Admin', [
        new GymPokemon('Mightyena', 8739480, 47),
        new GymPokemon('Houndoom', 8739480, 48),
    ], { weight: 2 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Swalot', 8739480, 50)], { weight: 2 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Golbat', 8739480, 50)], { weight: 2 }, undefined, '(male)'),
], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'xAttack' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Pink Shard' },
    ],
    epic: [
        { loot: 'Pixie Plate' },
        { loot: 'Dread Plate' },
        { loot: 'Sky Plate' },
    ],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Team Flare Secret HQ')) }],
}, 8739480, [
    new DungeonTrainer('Team Flare Lysandre', [
        new GymPokemon('Mienshao', 22464940, 49),
        new GymPokemon('Honchkrow', 22564950, 49),
        new GymPokemon('Pyroar', 23375580, 51),
        new GymPokemon('Mega Gyarados', 27385730, 53),
    ], { weight: 2 }),
    new DungeonBossPokemon('Xerneas', 93659460, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Flare Secret HQ')) }),
    new DungeonBossPokemon('Yveltal', 93659450, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Flare Secret HQ')) }),
], 675000, 16);
dungeonList['Terminus Cave'] = new Dungeon('Terminus Cave', [
    { pokemon: 'Sandslash', options: { weight: 3.27 } },
    { pokemon: 'Graveler', options: { weight: 3.27 } },
    { pokemon: 'Pupitar', options: { weight: 3.27 } },
    { pokemon: 'Lairon', options: { weight: 3.27 } },
    { pokemon: 'Durant', options: { weight: 3.27 } },
    { pokemon: 'Geodude', options: { weight: 3.27 } },
    { pokemon: 'Larvitar', options: { weight: 3.27 } },
    { pokemon: 'Aron', options: { weight: 3.27 } },
    new DungeonTrainer('Worker', [
        new GymPokemon('Graveler', 8924330, 46),
        new GymPokemon('Graveler', 8924330, 47),
        new GymPokemon('Golem', 8924330, 48),
    ], { weight: 1 }, 'Narek', '(male)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Steelix', 8924330, 48),
        new GymPokemon('Boldore', 8924330, 48),
    ], { weight: 1 }, 'Bergin'),
    new DungeonTrainer('Hiker', [new GymPokemon('Rhydon', 8924330, 50)], { weight: 1 }, 'Aaron'),
    new DungeonTrainer('Worker', [new GymPokemon('Octillery', 8924330, 50)], { weight: 1 }, 'Dimitri', '(male)'),
    new DungeonTrainer('Worker', [new GymPokemon('Probopass', 8924330, 50)], { weight: 1 }, 'Yusif', '(male)'),
    new DungeonTrainer('Battle Girl', [
        new GymPokemon('Throh', 8924330, 49),
        new GymPokemon('Conkeldurr', 8924330, 50),
    ], { weight: 1 }, 'Andrea'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Toxicroak', 8924330, 49),
        new GymPokemon('Sawk', 8924330, 50),
    ], { weight: 1 }, 'Gunnar'),
    new DungeonTrainer('Battle Girl', [
        new GymPokemon('Medicham', 8924330, 48),
        new GymPokemon('Hawlucha', 8924330, 51),
    ], { weight: 1 }, 'Hailey'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Hariyama', 8924330, 52)], { weight: 1 }, 'Ricardo'),
], {
    common: [
        { loot: 'xAttack', weight: 2 },
        { loot: 'Pokeball' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Pink Shard' },
    ],
    epic: [
        { loot: 'Iron Plate' },
        { loot: 'Earth Plate' },
        { loot: 'Draco Plate' },
    ],
    legendary: [
        { loot: 'Star Piece', weight: 2 },
        { loot: 'Duskball' },
        { loot: 'Heat Rock' },
        { loot: 'LargeRestore' },
    ],
}, 8924330, [
    new DungeonTrainer('Pokémon Rangers', [
        new GymPokemon('Nidoqueen', 46659450, 51),
        new GymPokemon('Nidoking', 46654990, 51),
    ], { weight: 3 }, 'Fern & Lee'),
    new DungeonBossPokemon('Zygarde', 92485360, 70, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion) }),
], 700000, 18);
dungeonList['Pokémon Village'] = new Dungeon('Pokémon Village', ['Jigglypuff', 'Poliwhirl', 'Noctowl', 'Lombre', 'Gothorita', 'Amoonguss'], {
    common: [
        { loot: 'Token_collector' },
        { loot: 'Rawst' },
        { loot: 'Chesto' },
        { loot: 'Aguav' },
        { loot: 'Wiki' },
        { loot: 'Garbodor' },
        { loot: 'Banette' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Pink Shard' },
    ],
    epic: [
        { loot: 'Pixie Plate' },
        { loot: 'Repeatball' },
    ],
    legendary: [
        { loot: 'LargeRestore' },
        { loot: 'Pink_Bow' },
    ],
}, 9003000, [
    new DungeonBossPokemon('Ditto', 94836530, 50),
    new DungeonBossPokemon('Zoroark', 95743340, 50),
], 725000, 20);
dungeonList['Victory Road Kalos'] = new Dungeon('Victory Road Kalos', [
    { pokemon: 'Haunter', options: { weight: 3.27 } },
    { pokemon: 'Graveler', options: { weight: 3.27 } },
    { pokemon: 'Lickitung', options: { weight: 3.27 } },
    { pokemon: 'Gurdurr', options: { weight: 3.27 } },
    { pokemon: 'Druddigon', options: { weight: 3.27 } },
    { pokemon: 'Zweilous', options: { weight: 3.27 } },
    { pokemon: 'Geodude', options: { weight: 3.27 } },
    { pokemon: 'Lombre', options: { weight: 3.27 } },
    { pokemon: 'Floatzel', options: { weight: 3.27 } },
    { pokemon: 'Poliwhirl', options: { weight: 3.27 } },
    { pokemon: 'Poliwag', options: { weight: 3.27 } },
    { pokemon: 'Noibat', options: { weight: 3.27 } },
    { pokemon: 'Basculin (Red-Striped)', options: { weight: 3.27 } },
    { pokemon: 'Basculin (Blue-Striped)', options: { weight: 3.27 } },
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Carbink', 3500000, 56),
        new GymPokemon('Raichu', 3500000, 56),
        new GymPokemon('Kingdra', 3500000, 57),
    ], { weight: 1 }, 'Robbie', '(male)'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Weavile', 3500000, 60)], { weight: 1 }, 'Alanza', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Steelix', 3500000, 56),
        new GymPokemon('Electrode', 3500000, 56),
        new GymPokemon('Kangaskhan', 3500000, 57),
    ], { weight: 1 }, 'Bence', '(male)'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Machamp', 3500000, 60)], { weight: 1 }, 'Markus'),
    new DungeonTrainer('Battle Girl', [
        new GymPokemon('Hawlucha', 3500000, 57),
        new GymPokemon('Mienshao', 3500000, 58),
    ], { weight: 1 }, 'Veronique'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Haxorus', 3500000, 58)], { weight: 1 }, 'Farid', '(male)'),
    new DungeonTrainer('Battle Girl', [new GymPokemon('Medicham', 3500000, 60)], { weight: 1 }, 'Sigrid'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Pangoro', 3500000, 57),
        new GymPokemon('Heracross', 3500000, 58),
    ], { weight: 1 }, 'Ander'),
    new DungeonTrainer('Psychic', [new GymPokemon('Espeon', 3500000, 58)], { weight: 1 }, 'William', '(male)'),
    new DungeonTrainer('Brains & Brawn', [
        new GymPokemon('Medicham', 3500000, 58),
        new GymPokemon('Gallade', 3500000, 60),
    ], { weight: 1 }, 'Arman & Hugo'),
    new DungeonTrainer('Fairy Tale Girl', [
        new GymPokemon('Azumarill', 3500000, 56),
        new GymPokemon('Florges (Red)', 3500000, 56),
    ], { weight: 1 }, 'Corinne'),
    new DungeonTrainer('Hex Maniac', [new GymPokemon('Gourgeist (Average)', 3500000, 58)], { weight: 1 }, 'Raziah'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Slowbro', 3500000, 57),
        new GymPokemon('Altaria', 3500000, 57),
    ], { weight: 1 }, 'Petra', '(female)'),
    new DungeonTrainer('Veteran', [new GymPokemon('Talonflame', 3500000, 61)], { weight: 1 }, 'Inga', '(female)'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Crobat', 3500000, 59)], { weight: 1 }, 'Ralf', '(male)'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Banette', 3500000, 57),
        new GymPokemon('Leafeon', 3500000, 59),
    ], { weight: 1 }, 'Gerard'),
    new DungeonTrainer('Artist', [new GymPokemon('Smeargle', 3500000, 58)], { weight: 1 }, 'Vincent', '(male)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Torkoal', 3500000, 56),
        new GymPokemon('Golem', 3500000, 56),
    ], { weight: 1 }, 'Corwin'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'xClick' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Pink Shard' },
    ],
    legendary: [
        { loot: 'Star Piece', weight: 2 },
        { loot: 'Ultraball' },
        { loot: 'Smooth Rock' },
        { loot: 'Revive' },
        { loot: 'Duskball' },
        { loot: 'Hard Stone' },
        { loot: 'Damp Rock' },
        { loot: 'LargeRestore' },
    ],
    mythic: [
        { loot: 'Max Revive' },
        { loot: 'Heart Scale' },
        { loot: 'Protein', requirement: new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Victory Road Kalos')) },
    ],
}, 9003000, [
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Magcargo', 48593850, 57),
        new GymPokemon('Scizor', 49355840, 58),
    ], { weight: 1 }, 'Michele', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Trevenant', 48329640, 57),
        new GymPokemon('Gigalith', 49355820, 59),
    ], { weight: 1 }, 'Timeo', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Glaceon', 48395740, 57),
        new GymPokemon('Snorlax', 49265840, 59),
    ], { weight: 1 }, 'Catrina', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Skarmory', 32395730, 55),
        new GymPokemon('Umbreon', 33254840, 55),
        new GymPokemon('Alakazam', 35385940, 57),
    ], { weight: 1 }, 'Gilles', '(male)'),
], 750500, 21);
//Unknown Dungeon? Contains Mewtwo.
// Alola
dungeonList['Trainers\' School'] = new Dungeon('Trainers\' School', [
    { pokemon: 'Alolan Meowth', options: { weight: 2 } },
    { pokemon: 'Abra', options: { weight: 2 } },
    { pokemon: 'Magnemite', options: { weight: 2 } },
    { pokemon: 'Alolan Grimer', options: { weight: 2 } },
    { pokemon: 'Wingull', options: { weight: 2 } },
    { pokemon: 'Mime Jr.', options: { weight: 2 } },
    { pokemon: 'Zorua', options: { weight: 2 } },
    { pokemon: 'Furfrou', options: { weight: 2 } },
    new DungeonTrainer('Youth Athlete', [new GymPokemon('Bonsly', 11407338, 7)], { weight: 1 }, 'Hiromi', '(female)'),
    new DungeonTrainer('Preschooler', [new GymPokemon('Metapod', 11407338, 7)], { weight: 1 }, 'Mia', '(female)'),
    new DungeonTrainer('Youngster', [new GymPokemon('Alolan Grimer', 11407338, 7)], { weight: 1 }, 'Joey'),
    new DungeonTrainer('Rising Star', [new GymPokemon('Ekans', 11407338, 8)], { weight: 1 }, 'Joseph', '(male)'),
], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'Pokeball' },
        { loot: 'Oran' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Flame Plate' },
        { loot: 'Greatball' },
    ],
    legendary: [{ loot: 'SmallRestore' }],
}, 11407338, [
    new DungeonTrainer('Teacher', [
        new GymPokemon('Litten', 19012230, 10),
        new GymPokemon('Popplio', 19012230, 10),
        new GymPokemon('Rowlet', 19012230, 10),
    ], { weight: 1 }, 'Emily'),
], 757500, 18);
dungeonList['Hau\'oli Cemetery'] = new Dungeon('Hau\'oli Cemetery', [
    { pokemon: 'Zubat', options: { weight: 4 } },
    { pokemon: 'Gastly', options: { weight: 4 } },
    { pokemon: 'Misdreavus', options: { weight: 4 } },
    new DungeonTrainer('Pokémon Breeder', [new GymPokemon('Pikachu', 11587450, 9)], { weight: 1 }, 'Ikue', '(female)'),
    new DungeonTrainer('Office Worker', [new GymPokemon('Pikipek', 11587450, 9)], { weight: 1 }, 'Jeremy', '(male)'),
    new DungeonTrainer('Preschooler', [new GymPokemon('Happiny', 11587450, 8)], { weight: 1 }, 'Malia', '(female)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Dowsing_machine' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
    ],
    epic: [{ loot: 'Spooky Plate' }],
    legendary: [{ loot: 'MediumRestore' }],
}, 11587450, [
    new DungeonBossPokemon('Drifloon', 28968625, 9),
    new DungeonBossPokemon('Litwick', 28968625, 9),
], 800000, 2);
dungeonList['Verdant Cavern'] = new Dungeon('Verdant Cavern', [
    { pokemon: 'Alolan Rattata', options: { weight: 0.75 } },
    { pokemon: 'Zubat', options: { weight: 0.75 } },
    { pokemon: 'Alolan Diglett', options: { weight: 0.75 } },
    { pokemon: 'Noibat', options: { weight: 0.75 } },
    { pokemon: 'Yungoos', options: { weight: 0.75 } },
    { pokemon: 'Pheromosa', options: { weight: 0.75, hide: true, requirement: new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 5) } },
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Drowzee', 11595673, 11)], { weight: 1 }, undefined, '(male)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Oran' },
        { loot: 'Sitrus' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Greatball' },
        { loot: 'Meadow Plate' },
    ],
    legendary: [
        { loot: 'MediumRestore' },
        { loot: 'Revive' },
    ],
}, 11595673, [
    new DungeonBossPokemon('Alolan Raticate', 57978365, 12),
    new DungeonBossPokemon('Gumshoos', 57978365, 12),
    new DungeonBossPokemon('Totem Raticate', 82543791, 70, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }),
    new DungeonBossPokemon('Totem Gumshoos', 82543791, 70, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }),
], 805000, 2, () => DungeonGainGymBadge(GymList['Ilima\'s Trial'], BadgeEnums.NormaliumZ));
dungeonList['Melemele Meadow'] = new Dungeon('Melemele Meadow', [
    { pokemon: 'Caterpie', options: { weight: 0.55 } },
    { pokemon: 'Metapod', options: { weight: 0.55 } },
    { pokemon: 'Butterfree', options: { weight: 0.55 } },
    { pokemon: 'Cottonee', options: { weight: 0.55 } },
    { pokemon: 'Petilil', options: { weight: 0.55 } },
    { pokemon: 'Cutiefly', options: { weight: 0.55 } },
    { pokemon: 'Buzzwole', options: { weight: 0.55, hide: true, requirement: new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 5) } },
    new DungeonTrainer('Actor', [new GymPokemon('Oricorio (Pom-Pom)', 11769270, 12)], { weight: 1 }, 'Meredith'),
], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'xClick' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Greatball' },
        { loot: 'Meadow Plate' },
    ],
}, 11769270, [
    new DungeonBossPokemon('Flabébé (Red)', 58846350, 12),
    new DungeonBossPokemon('Oricorio (Pom-Pom)', 58846350, 12),
], 825000, 3);
dungeonList['Seaward Cave'] = new Dungeon('Seaward Cave', ['Zubat', 'Psyduck', 'Seel', 'Magikarp', 'Smoochum'], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Lureball' },
        { loot: 'Diveball' },
    ],
    legendary: [
        { loot: 'MediumRestore' },
        { loot: 'Star Piece' },
        { loot: 'Never_Melt_Ice' },
    ],
    mythic: [{ loot: 'Max Revive' }],
}, 11845338, [
    new DungeonBossPokemon('Delibird', 59226690, 12),
    new DungeonBossPokemon('Barboach', 59226690, 17),
], 830000, 3);
dungeonList['Ten Carat Hill'] = new Dungeon('Ten Carat Hill', ['Zubat', 'Machop', 'Psyduck', 'Mawile', 'Roggenrola'], {
    common: [
        { loot: 'xAttack' },
        { loot: 'xClick' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Greatball' },
        { loot: 'MediumRestore' },
    ],
    legendary: [
        { loot: 'Hard Stone' },
        { loot: 'Ultraball' },
        { loot: 'Star Piece' },
    ],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Ten Carat Hill')) }],
}, 11897821, [
    new DungeonBossPokemon('Spinda', 59489105, 14),
    new DungeonBossPokemon('Carbink', 59489105, 14),
    new DungeonBossPokemon('Rockruff', 59489105, 14),
], 835000, 3);
dungeonList['Pikachu Valley'] = new Dungeon('Pikachu Valley', ['Pikachu', 'Pichu', 'Plusle', 'Minun', 'Pachirisu', 'Emolga', 'Dedenne'], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Cheri' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [{ loot: 'Zap Plate' }],
    legendary: [{ loot: 'Magnet' }],
}, 11952804, [
    new DungeonBossPokemon('Pikachu (Original Cap)', 59764020, 15),
    new DungeonBossPokemon('Pikachu (Hoenn Cap)', 59764020, 15),
    new DungeonBossPokemon('Pikachu (Sinnoh Cap)', 59764020, 15),
    new DungeonBossPokemon('Pikachu (Unova Cap)', 59764020, 15),
    new DungeonBossPokemon('Pikachu (Kalos Cap)', 59764020, 15),
    new DungeonBossPokemon('Pikachu (Alola Cap)', 59764020, 15, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }),
    new DungeonBossPokemon('Pikachu (World Cap)', 59764020, 15, { hide: true, requirement: new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion) }),
], 850000, 4);
dungeonList['Paniola Ranch'] = new Dungeon('Paniola Ranch', [
    { pokemon: 'Mareep', options: { weight: 6.66 } },
    { pokemon: 'Lillipup', options: { weight: 6.66 } },
    { pokemon: 'Mudbray', options: { weight: 6.66 } },
    new DungeonTrainer('Madame', [new GymPokemon('Carbink', 12161328, 15)], { weight: 1 }, 'Elizabeth'),
    new DungeonTrainer('Pokémon Breeder', [new GymPokemon('Tauros', 12161328, 15)], { weight: 1 }, 'Wesley', '(male)'),
    new DungeonTrainer('Pokémon Breeder', [new GymPokemon('Mudbray', 12161328, 15)], { weight: 1 }, 'Glenn', '(male)'),
    new DungeonTrainer('Gentleman', [new GymPokemon('Sableye', 12161328, 15)], { weight: 1 }, 'Gerald'),
    new DungeonTrainer('Rising Star', [
        new GymPokemon('Lillipup', 12161328, 15),
        new GymPokemon('Magnemite', 12161328, 16),
    ], { weight: 1 }, 'Micah', '(male)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Green Shard' },
    ],
    epic: [{ loot: 'Splash Plate' }],
    legendary: [
        { loot: 'LargeRestore' },
        { loot: 'Oval Stone' },
        { loot: 'Mystic_Water' },
    ],
}, 12111328, [
    new DungeonBossPokemon('Tauros', 30278320, 15),
    new DungeonBossPokemon('Miltank', 30278320, 15),
], 855000, 4);
dungeonList['Brooklet Hill'] = new Dungeon('Brooklet Hill', [
    { pokemon: 'Paras', options: { weight: 1.43 } },
    { pokemon: 'Psyduck', options: { weight: 1.43 } },
    { pokemon: 'Poliwag', options: { weight: 1.43 } },
    { pokemon: 'Tentacool', options: { weight: 1.43 } },
    { pokemon: 'Goldeen', options: { weight: 1.43 } },
    { pokemon: 'Magikarp', options: { weight: 1.43 } },
    { pokemon: 'Wingull', options: { weight: 1.43 } },
    { pokemon: 'Surskit', options: { weight: 1.43 } },
    { pokemon: 'Feebas', options: { weight: 1.43 } },
    { pokemon: 'Finneon', options: { weight: 1.43 } },
    { pokemon: 'Basculin (Red-Striped)', options: { weight: 1.43 } },
    { pokemon: 'Basculin (Blue-Striped)', options: { weight: 1.43 } },
    { pokemon: 'Alomomola', options: { weight: 1.43 } },
    { pokemon: 'Dewpider', options: { weight: 1.43 } },
    new DungeonTrainer('Fisherman', [new GymPokemon('Tentacool', 12138060, 16)], { weight: 1 }, 'Hal'),
    new DungeonTrainer('Fisherman', [
        new GymPokemon('Barboach', 12138060, 16),
        new GymPokemon('Goldeen', 12138060, 16),
    ], { weight: 1 }, 'Ernest'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Fletchling', 12138060, 16)], { weight: 1 }, 'Mikiko', '(female)'),
    new DungeonTrainer('Fisherman', [new GymPokemon('Poliwag', 12138060, 16)], { weight: 1 }, 'Herbert'),
    new DungeonTrainer('Fisherman', [
        new GymPokemon('Magikarp', 12138060, 16),
        new GymPokemon('Magikarp', 12138060, 16),
        new GymPokemon('Magikarp', 12138060, 16),
    ], { weight: 1 }, 'Carl'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Lucky_incense' },
    ],
    rare: [{ loot: 'Blue Shard' }],
    epic: [
        { loot: 'Splash Plate' },
        { loot: 'Diveball' },
    ],
    legendary: [
        { loot: 'LargeRestore' },
        { loot: 'Revive' },
    ],
    mythic: [{ loot: 'Heart Scale' }],
}, 12138060, [
    new DungeonBossPokemon('Wishiwashi (School)', 60690300, 20),
    new DungeonBossPokemon('Araquanid', 60690300, 20),
    new DungeonBossPokemon('Totem Wishiwashi', 82543791, 60, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }),
    new DungeonBossPokemon('Totem Araquanid', 82543791, 60, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }),
], 875000, 5, () => DungeonGainGymBadge(GymList['Lana\'s Trial'], BadgeEnums.WateriumZ));
dungeonList['Wela Volcano Park'] = new Dungeon('Wela Volcano Park', [
    { pokemon: 'Cubone', options: { weight: 1.7 } },
    { pokemon: 'Kangaskhan', options: { weight: 1.7 } },
    { pokemon: 'Magmar', options: { weight: 1.7 } },
    { pokemon: 'Magby', options: { weight: 1.7 } },
    { pokemon: 'Fletchling', options: { weight: 1.7 } },
    { pokemon: 'Salandit', options: { weight: 1.7 } },
    { pokemon: 'Nihilego', options: { weight: 1.7, hide: true, requirement: new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 3) } },
    new DungeonTrainer('Sightseer', [new GymPokemon('Meowth', 12896392, 19)], { weight: 1 }, 'Mariah', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Noibat', 12896392, 20),
        new GymPokemon('Kadabra', 12896392, 21),
    ], { weight: 1 }, 'Jim', '(male)'),
    new DungeonTrainer('Hiker', [new GymPokemon('Roggenrola', 12896392, 19)], { weight: 1 }, 'Calhoun'),
], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Rawst' },
    ],
    rare: [{ loot: 'Red Shard' }],
    epic: [
        { loot: 'Flame Plate' },
        { loot: 'Quickball' },
    ],
    legendary: [
        { loot: 'LargeRestore' },
        { loot: 'Charcoal' },
    ],
}, 12896392, [
    new DungeonBossPokemon('Alolan Marowak', 64481960, 22),
    new DungeonBossPokemon('Salazzle', 64481960, 22),
    new DungeonBossPokemon('Totem Marowak', 82543791, 60, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }),
    new DungeonBossPokemon('Totem Salazzle', 82543791, 60, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }),
], 900000, 7, () => DungeonGainGymBadge(GymList['Kiawe\'s Trial'], BadgeEnums.FiriumZ));
dungeonList['Lush Jungle'] = new Dungeon('Lush Jungle', [
    { pokemon: 'Metapod', options: { weight: 1 } },
    { pokemon: 'Paras', options: { weight: 1 } },
    { pokemon: 'Pinsir', options: { weight: 1 } },
    { pokemon: 'Hoothoot', options: { weight: 1 } },
    { pokemon: 'Bonsly', options: { weight: 1 } },
    { pokemon: 'Trumbeak', options: { weight: 1 } },
    { pokemon: 'Fomantis', options: { weight: 1 } },
    { pokemon: 'Bounsweet', options: { weight: 1 } },
    { pokemon: 'Steenee', options: { weight: 1 } },
    { pokemon: 'Comfey', options: { weight: 1 } },
    { pokemon: 'Oranguru', options: { weight: 1 } },
    { pokemon: 'Passimian', options: { weight: 1 } },
    { pokemon: 'Xurkitree', options: { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 9) } },
], {
    common: [
        { loot: 'xClick' },
        { loot: 'xAttack' },
        { loot: 'Mago' },
    ],
    rare: [{ loot: 'Green Shard' }],
    epic: [
        { loot: 'Meadow Plate' },
        { loot: 'Nestball' },
    ],
    legendary: [
        { loot: 'MediumRestore', weight: 2 },
        { loot: 'LargeRestore' },
    ],
    mythic: [{ loot: 'Max Revive' }],
}, 13090332, [
    new DungeonBossPokemon('Lurantis', 65451660, 24),
    new DungeonBossPokemon('Totem Lurantis', 82543791, 60, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }),
], 925000, 8, () => DungeonGainGymBadge(GymList['Mallow\'s Trial'], BadgeEnums.GrassiumZ));
dungeonList['Diglett\'s Tunnel'] = new Dungeon('Diglett\'s Tunnel', [
    { pokemon: 'Zubat', options: { weight: 6.5 } },
    { pokemon: 'Alolan Diglett', options: { weight: 6.5 } },
    { pokemon: 'Nihilego', options: { weight: 6.5, hide: true, requirement: new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 3) } },
    new DungeonTrainer('Worker', [new GymPokemon('Shieldon', 13215839, 22)], { weight: 1 }, 'Frank', '(male)'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Alolan Diglett', 13215839, 22),
        new GymPokemon('Alolan Diglett', 13215839, 22),
    ], { weight: 1 }, 'Jeff', '(male)'),
    new DungeonTrainer('Worker', [new GymPokemon('Archen', 13215839, 22)], { weight: 1 }, 'Vaclav', '(male)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Ekans', 13215839, 23)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Salandit', 13215839, 23)], { weight: 1 }, undefined, '(male)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Earth Plate' },
        { loot: 'Duskball' },
    ],
    legendary: [{ loot: 'LargeRestore' }],
    mythic: [{ loot: 'Max Revive' }],
}, 13215839, [new DungeonBossPokemon('Larvitar', 66079195, 23)], 930000, 8);
dungeonList['Memorial Hill'] = new Dungeon('Memorial Hill', [
    { pokemon: 'Zubat', options: { weight: 7.5 } },
    { pokemon: 'Gastly', options: { weight: 7.5 } },
    { pokemon: 'Phantump', options: { weight: 7.5 } },
    { pokemon: 'Xurkitree', options: { weight: 7.5, hide: true, requirement: new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 9) } },
    new DungeonTrainer('Preschooler', [
        new GymPokemon('Magby', 13286024, 23),
        new GymPokemon('Ledian', 13286024, 23),
    ], { weight: 1 }, 'Liam', '(male)'),
    new DungeonTrainer('Gentleman', [new GymPokemon('Jolteon', 13286024, 24)], { weight: 1 }, 'Smith'),
    new DungeonTrainer('Madame', [
        new GymPokemon('Furfrou', 13286024, 24),
        new GymPokemon('Comfey', 13286024, 24),
    ], { weight: 1 }, 'Sayuri'),
    new DungeonTrainer('Punk Girl', [new GymPokemon('Ariados', 13286024, 24)], { weight: 1 }, 'Melissa'),
], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Spooky Plate' },
        { loot: 'Duskball' },
    ],
    legendary: [
        { loot: 'LargeRestore' },
        { loot: 'Spell_Tag' },
    ],
}, 13286024, [
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Alolan Raticate', 66430120, 24)], { weight: 1 }, undefined, '(male)'),
], 950000, 9);
dungeonList['Malie Garden'] = new Dungeon('Malie Garden', [
    { pokemon: 'Alolan Meowth', options: { weight: 1 } },
    { pokemon: 'Psyduck', options: { weight: 1 } },
    { pokemon: 'Poliwhirl', options: { weight: 1 } },
    { pokemon: 'Goldeen', options: { weight: 1 } },
    { pokemon: 'Magikarp', options: { weight: 1 } },
    { pokemon: 'Gyarados', options: { weight: 1 } },
    { pokemon: 'Ledian', options: { weight: 1 } },
    { pokemon: 'Ariados', options: { weight: 1 } },
    { pokemon: 'Masquerain', options: { weight: 1 } },
    { pokemon: 'Basculin (Red-Striped)', options: { weight: 1 } },
    { pokemon: 'Basculin (Blue-Striped)', options: { weight: 1 } },
    { pokemon: 'Cottonee', options: { weight: 1 } },
    { pokemon: 'Petilil', options: { weight: 1 } },
    { pokemon: 'Araquanid', options: { weight: 1 } },
    { pokemon: 'Kartana', options: { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 11) } },
    { pokemon: 'Celesteela', options: { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 11) } },
    new DungeonTrainer('Sightseer', [new GymPokemon('Raticate', 13483476, 28)], { weight: 1 }, 'Mitch', '(male)'),
    new DungeonTrainer('Preschooler', [new GymPokemon('Cleffa', 13483476, 27)], { weight: 1 }, 'Nancy', '(female)'),
    new DungeonTrainer('Sightseer', [new GymPokemon('Raichu', 13483476, 28)], { weight: 1 }, 'Akali', '(female)'),
    new DungeonTrainer('Tourist Couple', [
        new GymPokemon('Alolan Vulpix', 13483476, 28),
        new GymPokemon('Vulpix', 13483476, 28),
    ], { weight: 1 }, 'Landon and Yukiro'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Blue Shard' },
    ],
    epic: [
        { loot: 'Spooky Plate' },
        { loot: 'Luxuryball' },
    ],
    legendary: [{ loot: 'Rare Bone' }],
}, 13483476, [
    new DungeonTrainer('Team Skull Boss', [
        new GymPokemon('Golisopod', 33708690, 34),
        new GymPokemon('Masquerain', 33708690, 34),
    ], { weight: 1 }, 'Guzma', '(guzma)'),
], 975000, 21);
dungeonList['Hokulani Observatory'] = new Dungeon('Hokulani Observatory', ['Grubbin', 'Charjabug', 'Elekid', 'Electabuzz', 'Skarmory', 'Dedenne'], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Token_collector' },
    ],
    rare: [{ loot: 'Yellow Shard' }],
    epic: [
        { loot: 'Zap Plate' },
        { loot: 'Iron Plate' },
    ],
    legendary: [{ loot: 'Quickball' }],
}, 13883676, [
    new DungeonBossPokemon('Vikavolt', 69418380, 29),
    new DungeonBossPokemon('Togedemaru', 69418380, 33),
    new DungeonBossPokemon('Totem Vikavolt', 82543791, 60, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }),
    new DungeonBossPokemon('Totem Togedemaru', 82543791, 60, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }),
], 1000000, 22, () => DungeonGainGymBadge(GymList['Sophocles\' Trial'], BadgeEnums.ElectriumZ));
dungeonList['Thrifty Megamart'] = new Dungeon('Thrifty Megamart', ['Golbat', 'Gastly', 'Haunter', 'Gengar', 'Shuppet', 'Banette', 'Jellicent', 'Klefki'], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
    ],
    epic: [{ loot: 'Spooky Plate' }],
    mythic: [{ loot: 'Lum', requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Thrifty Megamart')) }],
}, 14705422, [
    new DungeonBossPokemon('Mimikyu', 73527110, 35),
    new DungeonBossPokemon('Totem Mimikyu', 82543791, 60, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }),
], 1025000, 14, () => DungeonGainGymBadge(GymList['Acerola\'s Trial'], BadgeEnums.GhostiumZ));
dungeonList['Ula\'ula Meadow'] = new Dungeon('Ula\'ula Meadow', [
    { pokemon: 'Ledian', options: { weight: 4 } },
    { pokemon: 'Ariados', options: { weight: 4 } },
    { pokemon: 'Cottonee', options: { weight: 4 } },
    { pokemon: 'Petilil', options: { weight: 4 } },
    { pokemon: 'Ribombee', options: { weight: 4 } },
    new DungeonTrainer('Dancer', [new GymPokemon('Floette (Red)', 15127052, 36)], { weight: 1 }, 'Mireille', '(female)'),
    new DungeonTrainer('Office Worker', [
        new GymPokemon('Torkoal', 15127052, 36),
        new GymPokemon('Whimsicott', 15127052, 36),
    ], { weight: 1 }, 'Michelle', '(female)'),
    new DungeonTrainer('Lass', [
        new GymPokemon('Sneasel', 15127052, 35),
        new GymPokemon('Komala', 15127052, 35),
    ], { weight: 1 }, 'Rylee'),
    new DungeonTrainer('Golfer', [
        new GymPokemon('Hariyama', 15127052, 39),
        new GymPokemon('Alakazam', 15127052, 39),
    ], { weight: 1 }, 'Dean', '(male)'),
    new DungeonTrainer('Actor', [new GymPokemon('Oricorio (Baile)', 15127052, 36)], { weight: 1 }, 'Meredith'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [{ loot: 'Flame Plate' }],
    legendary: [{ loot: 'Repeatball' }],
}, 15127052, [
    new DungeonBossPokemon('Floette (Red)', 75635260, 36),
    new DungeonBossPokemon('Oricorio (Baile)', 75635260, 36),
], 1050000, 16);
dungeonList['Po Town'] = new Dungeon('Po Town', [
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Spinarak', 15340576, 36)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Trubbish', 15340576, 36)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Drowzee', 15340576, 37)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [
        new GymPokemon('Alolan Raticate', 15340576, 37),
        new GymPokemon('Golbat', 15340576, 37),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Skull Grunt', [
        new GymPokemon('Ekans', 15340576, 37),
        new GymPokemon('Salandit', 15340576, 37),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [
        new GymPokemon('Fomantis', 15340576, 37),
        new GymPokemon('Mareanie', 15340576, 37),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Scraggy', 15340576, 40)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Office Worker', [
        new GymPokemon('Elgyem', 15340576, 40),
        new GymPokemon('Metang', 15340576, 40),
    ], { weight: 1 }, 'Royce', '(male)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Drowzee', 15340576, 38)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [
        new GymPokemon('Salandit', 15340576, 38),
        new GymPokemon('Fomantis', 15340576, 38),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Skull Grunt', [
        new GymPokemon('Trubbish', 15340576, 38),
        new GymPokemon('Houndour', 15340576, 38),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Scraggy', 15340576, 38)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Alolan Rattata', 15340576, 38)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Alolan Raticate', 15340576, 38)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Skull Grunt', [
        new GymPokemon('Haunter', 15340576, 38),
        new GymPokemon('Alolan Grimer', 15340576, 38),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [
        new GymPokemon('Spinarak', 15340576, 38),
        new GymPokemon('Pawniard', 15340576, 38),
        new GymPokemon('Golbat', 15340576, 38),
    ], { weight: 1 }, undefined, '(female)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'xClick' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
    ],
    epic: [
        { loot: 'Insect Plate' },
        { loot: 'Toxic Plate' },
        { loot: 'Dread Plate' },
    ],
    legendary: [
        { loot: 'LargeRestore' },
        { loot: 'Max Revive' },
    ],
}, 15340576, [
    new DungeonTrainer('Team Skull Boss', [
        new GymPokemon('Golisopod', 25567627, 41),
        new GymPokemon('Masquerain', 25567627, 41),
        new GymPokemon('Pinsir', 25567627, 41),
    ], { weight: 1 }, 'Guzma', '(guzma)'),
], 1075000, 17);
dungeonList['Aether Foundation'] = new Dungeon('Aether Foundation', [
    new DungeonTrainer('Aether Foundation Employee', [
        new GymPokemon('Alolan Dugtrio', 15619682, 40),
        new GymPokemon('Toucannon', 15619682, 40),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Aether Foundation Employee', [
        new GymPokemon('Kecleon', 15619682, 40),
        new GymPokemon('Stoutland', 15619682, 40),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Aether Foundation Employee', [
        new GymPokemon('Arbok', 15619682, 40),
        new GymPokemon('Lurantis', 15619682, 40),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Aether Foundation Employee', [
        new GymPokemon('Parasect', 15619682, 40),
        new GymPokemon('Drifblim', 15619682, 40),
        new GymPokemon('Sudowoodo', 15619682, 40),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Aether Foundation Employee', [new GymPokemon('Primeape', 15619682, 40)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Aether Foundation Employee', [new GymPokemon('Arcanine', 15619682, 41)], { weight: 1 }, undefined, '(masked)'),
    new DungeonTrainer('Aether Foundation Employees', [
        new GymPokemon('Anorith', 15619682, 41),
        new GymPokemon('Lileep', 15619682, 41),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Aether Foundation Employees', [
        new GymPokemon('Magmar', 15619682, 42),
        new GymPokemon('Houndoom', 15619682, 42),
        new GymPokemon('Electabuzz', 15619682, 42),
        new GymPokemon('Manectric', 15619682, 42),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Aether Branch Chief', [
        new GymPokemon('Claydol', 15619682, 44),
        new GymPokemon('Bruxish', 15619682, 44),
        new GymPokemon('Hypno', 15619682, 44),
    ], { weight: 1 }, 'Faba', '(faba)'),
    new DungeonTrainer('Aether Foundation Employee', [new GymPokemon('Alolan Muk', 15619682, 41)], { weight: 1 }, undefined, '(masked)'),
    new DungeonTrainer('Aether Foundation Employee', [new GymPokemon('Magneton', 15619682, 41)], { weight: 1 }, undefined, '(masked)'),
    new DungeonTrainer('Aether Foundation Employee', [new GymPokemon('Porygon2', 15619682, 41)], { weight: 1 }, undefined, '(masked)'),
    new DungeonTrainer('Aether Foundation Employees', [
        new GymPokemon('Huntail', 15619682, 41),
        new GymPokemon('Gorebyss', 15619682, 41),
    ], { weight: 1 }, undefined, '(both)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Golbat', 15619682, 42)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Alolan Raticate', 15619682, 42)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Boss', [
        new GymPokemon('Golisopod', 15619682, 45),
        new GymPokemon('Vikavolt', 15619682, 45),
        new GymPokemon('Masquerain', 15619682, 45),
        new GymPokemon('Pinsir', 15619682, 45),
    ], { weight: 1 }, 'Guzma', '(guzma)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Chesto' },
    ],
    rare: [{ loot: 'Cyan Shard' }],
    epic: [
        { loot: 'Revive' },
        { loot: 'Iron Ball' },
        { loot: 'Mind Plate' },
    ],
    legendary: [
        { loot: 'LargeRestore' },
        { loot: 'Max Revive' },
        { loot: 'Protein', requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Aether Foundation')) },
    ],
}, 15619682, [
    new DungeonTrainer('Aether President', [
        new GymPokemon('Clefable', 15619682, 47),
        new GymPokemon('Lilligant', 15619682, 47),
        new GymPokemon('Lopunny', 15619682, 47),
        new GymPokemon('Milotic', 15619682, 47),
        new GymPokemon('Bewear', 15619682, 47),
    ], { weight: 1 }, 'Lusamine', '(lusamine)'),
], 1080000, 17);
dungeonList['Exeggutor Island Hill'] = new Dungeon('Exeggutor Island Hill', ['Exeggcute', 'Pelipper', 'Gastrodon (East)'], {
    common: [
        { loot: 'xClick' },
        { loot: 'Dowsing_machine' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
    ],
    epic: [
        { loot: 'Earth Plate' },
        { loot: 'Draco Plate' },
        { loot: 'Meadow Plate' },
    ],
    legendary: [{ loot: 'Revive' }],
    mythic: [{ loot: 'Heart Scale' }],
}, 15773066, [
    new DungeonBossPokemon('Pinsir', 78865330, 45),
    new DungeonBossPokemon('Tropius', 78865330, 45),
], 1100000, 24);
dungeonList['Vast Poni Canyon'] = new Dungeon('Vast Poni Canyon', [
    { pokemon: 'Golbat', options: { weight: 4 } },
    { pokemon: 'Alolan Dugtrio', options: { weight: 4 } },
    { pokemon: 'Machoke', options: { weight: 4 } },
    { pokemon: 'Magikarp', options: { weight: 4 } },
    { pokemon: 'Skarmory', options: { weight: 4 } },
    { pokemon: 'Barboach', options: { weight: 4 } },
    { pokemon: 'Corphish', options: { weight: 4 } },
    { pokemon: 'Basculin (Red-Striped)', options: { weight: 4 } },
    { pokemon: 'Basculin (Blue-Striped)', options: { weight: 4 } },
    { pokemon: 'Boldore', options: { weight: 4 } },
    { pokemon: 'Mienfoo', options: { weight: 4 } },
    { pokemon: 'Carbink', options: { weight: 4 } },
    { pokemon: 'Lycanroc (Midday)', options: { weight: 4 } },
    { pokemon: 'Lycanroc (Midnight)', options: { weight: 4 } },
    { pokemon: 'Jangmo-o', options: { weight: 4 } },
    { pokemon: 'Hakamo-o', options: { weight: 4 } },
    new DungeonTrainer('Veteran', [
        new GymPokemon('Beheeyem', 15992044, 47),
        new GymPokemon('Banette', 15992044, 47),
    ], { weight: 1 }, 'Harry', '(male)'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Spinda', 15992044, 45)], { weight: 1 }, 'Perdy', '(female)'),
    new DungeonTrainer('Ace Duo', [
        new GymPokemon('Alolan Sandslash', 15992044, 47),
        new GymPokemon('Alolan Ninetales', 15992044, 47),
    ], { weight: 1 }, 'Kent and Aimee'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Kabutops', 15992044, 46),
        new GymPokemon('Tyrantrum', 15992044, 46),
    ], { weight: 1 }, 'Zachary'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Xatu', 15992044, 48),
        new GymPokemon('Kangaskhan', 15992044, 48),
        new GymPokemon('Dewgong', 15992044, 48),
    ], { weight: 1 }, 'Lynn', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Mawile', 15992044, 47),
        new GymPokemon('Weavile', 15992044, 47),
    ], { weight: 1 }, 'Junko', '(female)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Magnezone', 15992044, 46)], { weight: 1 }, 'Ikaika', '(male)'),
    new DungeonTrainer('Punk Girl', [new GymPokemon('Scrafty', 15992044, 46)], { weight: 1 }, 'Anna'),
    new DungeonTrainer('Punk Guy', [
        new GymPokemon('Pangoro', 15992044, 46),
        new GymPokemon('Crawdaunt', 15992044, 46),
    ], { weight: 1 }, 'Adam'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Poliwrath', 15992044, 47)], { weight: 1 }, 'Curtis'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Pawniard', 15992044, 46)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Alolan Graveler', 15992044, 47),
        new GymPokemon('Lapras', 15992044, 48),
    ], { weight: 1 }, 'Hiroshi', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Talonflame', 15992044, 48),
        new GymPokemon('Wailord', 15992044, 48),
        new GymPokemon('Glaceon', 15992044, 48),
    ], { weight: 1 }, 'Heather', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Noctowl', 15992044, 48),
        new GymPokemon('Flygon', 15992044, 48),
        new GymPokemon('Slowking', 15992044, 48),
        new GymPokemon('Gengar', 15992044, 48),
    ], { weight: 1 }, 'Eric', '(male)'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Crabominable', 15992044, 47)], { weight: 1 }, 'Terry'),
    new DungeonTrainer('Surfer', [new GymPokemon('Golduck', 15992044, 47)], { weight: 1 }, 'Joshah'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'xAttack' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Cyan Shard' },
    ],
    epic: [
        { loot: 'Draco Plate' },
        { loot: 'Pixie Plate' },
        { loot: 'Duskball' },
        { loot: 'Repeatball' },
    ],
    legendary: [
        { loot: 'Star Piece' },
        { loot: 'Max Revive' },
    ],
    mythic: [
        { loot: 'Heart Scale' },
        { loot: 'Protein', requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Vast Poni Canyon')) },
    ],
}, 15992044, [
    new DungeonBossPokemon('Kommo-o', 79960220, 49),
    new DungeonBossPokemon('Totem Kommo-o', 82543791, 60, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }),
], 1125000, 25, () => DungeonGainGymBadge(GymList['Vast Poni Canyon Trial'], BadgeEnums.DragoniumZ));
dungeonList['Mina\'s Houseboat'] = new Dungeon('Mina\'s Houseboat', ['Chansey', 'Wingull', 'Pelipper', 'Spritzee', 'Swirlix', 'Cutiefly', 'Comfey', 'Dhelmise'], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [{ loot: 'Pixie Plate' }],
    legendary: [{ loot: 'Pink_Bow' }],
    mythic: [{ loot: 'Heart Scale' }],
}, 16217412, [
    new DungeonBossPokemon('Ribombee', 81087060, 55),
    new DungeonBossPokemon('Totem Ribombee', 82543791, 60, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion) }),
], 1150000, 25, () => DungeonGainGymBadge(GymList['Mina\'s Trial'], BadgeEnums.FairiumZ));
dungeonList['Mount Lanakila'] = new Dungeon('Mount Lanakila', [
    { pokemon: 'Alolan Raticate', options: { weight: 8.67 } },
    { pokemon: 'Alolan Sandshrew', options: { weight: 8.67 } },
    { pokemon: 'Alolan Vulpix', options: { weight: 8.67 } },
    { pokemon: 'Sneasel', options: { weight: 8.67 } },
    { pokemon: 'Snorunt', options: { weight: 8.67 } },
    { pokemon: 'Gumshoos', options: { weight: 8.67 } },
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Scyther', 16212850, 51),
        new GymPokemon('Malamar', 16212850, 52),
    ], { weight: 1 }, 'Seth', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Shiinotic', 16212850, 51),
        new GymPokemon('Clefable', 16212850, 52),
    ], { weight: 1 }, 'Kailee', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Lickitung', 16212850, 52),
        new GymPokemon('Goodra', 16212850, 52),
    ], { weight: 1 }, 'Alonsa', '(female)'),
    new DungeonTrainer('Worker', [new GymPokemon('Relicanth', 16212850, 50)], { weight: 1 }, 'Ovid', '(male)'),
    new DungeonTrainer('Sparring Partners', [
        new GymPokemon('Bewear', 16212850, 51),
        new GymPokemon('Mienfoo', 16212850, 51),
        new GymPokemon('Machamp', 16212850, 51),
    ], { weight: 1 }, 'Alon and Eimar'),
    new DungeonTrainer('Sparring Partners', [
        new GymPokemon('Hawlucha', 16212850, 51),
        new GymPokemon('Crabominable', 16212850, 51),
        new GymPokemon('Pangoro', 16212850, 51),
    ], { weight: 1 }, 'Craig and Jason'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Emolga', 16212850, 51)], { weight: 1 }, 'Peren', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Pyroar', 16212850, 53),
        new GymPokemon('Claydol', 16212850, 53),
        new GymPokemon('Milotic', 16212850, 53),
    ], { weight: 1 }, 'Ella', '(female)'),
    new DungeonTrainer('Collector', [new GymPokemon('Florges (White)', 16212850, 51)], { weight: 1 }, 'Minty'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Vanilluxe', 16212850, 52),
        new GymPokemon('Mismagius', 16212850, 53),
    ], { weight: 1 }, 'Jada', '(female)'),
    new DungeonTrainer('Master & Apprentice', [
        new GymPokemon('Vikavolt', 16212850, 52),
        new GymPokemon('Forretress', 16212850, 53),
        new GymPokemon('Glalie', 16212850, 53),
        new GymPokemon('Tyranitar', 16212850, 53),
        new GymPokemon('Bisharp', 16212850, 53),
    ], { weight: 1 }, 'Breon and Kaimana'),
    new DungeonTrainer('Hiker', [new GymPokemon('Gigalith', 16212850, 51)], { weight: 1 }, 'Anuhea'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Carbink', 16212850, 65),
        new GymPokemon('Torkoal', 16212850, 65),
        new GymPokemon('Pelipper', 16212850, 65),
        new GymPokemon('Alolan Ninetales', 16212850, 65),
        new GymPokemon('Gigalith', 16212850, 65),
    ], { weight: 1 }, 'Aristo', '(male)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Dowsing_machine' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Cyan Shard' },
    ],
    epic: [{ loot: 'Icicle Plate' }],
    legendary: [{ loot: 'Max Revive' }],
}, 16312850, [
    new DungeonBossPokemon('Absol', 81064250, 50),
    new DungeonBossPokemon('Glalie', 81064250, 50),
    new DungeonBossPokemon('Vanilluxe', 81064250, 50),
    new DungeonBossPokemon('Necrozma', 83527125, 65),
], 1175000, 26);
dungeonList['Lake of the Sunne and Moone'] = new Dungeon('Lake of the Sunne and Moone', ['Clefairy', 'Sunkern', 'Skitty', 'Lunatone', 'Solrock', 'Helioptile'], {
    common: [
        { loot: 'Lucky_incense' },
        { loot: 'Chesto' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
    ],
    epic: [
        { loot: 'Mind Plate', weight: 2 },
        { loot: 'Iron Plate' },
        { loot: 'Spooky Plate' },
    ],
}, 16435490, [
    new DungeonBossPokemon('Cosmog', 82177450, 70),
    new DungeonBossPokemon('Lunala', 90673816, 100, { requirement: new MultiRequirement([new ObtainedPokemonRequirement(pokemonMap.Lunala), new ObtainedPokemonRequirement(pokemonMap.Necrozma)]) }),
    new DungeonBossPokemon('Solgaleo', 90673816, 100, { requirement: new MultiRequirement([new ObtainedPokemonRequirement(pokemonMap.Solgaleo), new ObtainedPokemonRequirement(pokemonMap.Necrozma)]) }),
], 1200000, 27);
dungeonList['Ruins of Conflict'] = new Dungeon('Ruins of Conflict', ['Floette (Red)', 'Comfey', 'Dedenne', 'Ampharos', 'Electabuzz'], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Cheri' },
    ],
    rare: [
        { loot: 'Yellow Shard' },
        { loot: 'Cyan Shard' },
    ],
    epic: [
        { loot: 'Zap Plate' },
        { loot: 'Pixie Plate' },
    ],
}, 16435490, [
    new DungeonBossPokemon('Luxray', 82177450, 55),
    new DungeonBossPokemon('Granbull', 82177450, 55),
    new DungeonBossPokemon('Tapu Koko', 82543791, 60),
], 1200000, 27);
dungeonList['Ruins of Life'] = new Dungeon('Ruins of Life', ['Floette (Red)', 'Comfey', 'Gardevoir', 'Chimecho', 'Munna'], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Cheri' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Cyan Shard' },
    ],
    epic: [
        { loot: 'Stone Plate' },
        { loot: 'Mind Plate' },
        { loot: 'Pixie Plate' },
    ],
}, 16435490, [
    new DungeonBossPokemon('Wobbuffet', 82177450, 55),
    new DungeonBossPokemon('Granbull', 82177450, 55),
    new DungeonBossPokemon('Tapu Lele', 82543791, 60),
], 1200000, 27);
dungeonList['Ruins of Abundance'] = new Dungeon('Ruins of Abundance', ['Floette (Red)', 'Comfey', 'Cottonee', 'Gloom', 'Petilil'], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Rawst' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Cyan Shard' },
    ],
    epic: [
        { loot: 'Insect Plate' },
        { loot: 'Fist Plate' },
    ],
}, 16435490, [
    new DungeonBossPokemon('Maractus', 82177450, 55),
    new DungeonBossPokemon('Granbull', 82177450, 55),
    new DungeonBossPokemon('Tapu Bulu', 82543791, 60),
], 1200000, 27);
dungeonList['Ruins of Hope'] = new Dungeon('Ruins of Hope', ['Floette (Red)', 'Comfey', 'Azumarill', 'Poliwhirl', 'Clamperl'], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'Aspear' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Cyan Shard' },
    ],
    epic: [
        { loot: 'Splash Plate' },
        { loot: 'Pixie Plate' },
    ],
}, 16435490, [
    new DungeonBossPokemon('Lumineon', 82177450, 55),
    new DungeonBossPokemon('Granbull', 82177450, 55),
    new DungeonBossPokemon('Tapu Fini', 82543791, 60),
], 1200000, 27);
dungeonList['Poni Meadow'] = new Dungeon('Poni Meadow', [
    { pokemon: 'Magikarp', options: { weight: 0.57 } },
    { pokemon: 'Dratini', options: { weight: 0.57 } },
    { pokemon: 'Cottonee', options: { weight: 0.57 } },
    { pokemon: 'Petilil', options: { weight: 0.57 } },
    { pokemon: 'Ribombee', options: { weight: 0.57 } },
    { pokemon: 'Misdreavus', options: { weight: 0.57 } },
    { pokemon: 'Barboach', options: { weight: 0.57 } },
    new DungeonTrainer('Actor', [new GymPokemon('Oricorio (Sensu)', 16659968, 57)], { weight: 1 }, 'Meredith'),
], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'Aspear' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Cyan Shard' },
    ],
    epic: [
        { loot: 'Splash Plate' },
        { loot: 'Pixie Plate' },
    ],
}, 16659968, [
    new DungeonBossPokemon('Oricorio (Sensu)', 83299840, 70),
    new DungeonBossPokemon('Floette (Red)', 83299840, 70),
], 1225000, 28);
dungeonList['Resolution Cave'] = new Dungeon('Resolution Cave', [
    { pokemon: 'Zubat', options: { weight: 4 } },
    { pokemon: 'Alolan Dugtrio', options: { weight: 4 } },
    { pokemon: 'Druddigon', options: { weight: 4 } },
    new DungeonTrainer('Veteran', [
        new GymPokemon('Ribombee', 17114462, 61),
        new GymPokemon('Bewear', 17114462, 61),
    ], { weight: 1 }, 'Leticia', '(female)'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Manectric', 17114462, 59)], { weight: 1 }, 'Maria', '(female)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Alolan Dugtrio', 17114462, 59),
        new GymPokemon('Mudsdale', 17114462, 59),
    ], { weight: 1 }, 'Travis'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Pecha' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Cyan Shard' },
    ],
    epic: [
        { loot: 'Dread Plate' },
        { loot: 'Draco Plate' },
    ],
    legendary: [{ loot: 'Star Piece' }],
}, 17114462, [
    new DungeonBossPokemon('Golbat', 85572310, 59),
    new DungeonBossPokemon('Noivern', 85572310, 59),
    new DungeonBossPokemon('Guzzlord', 90673816, 70),
], 1250000, 30);
//Galar Dungeons
dungeonList['Slumbering Weald Shrine'] = new Dungeon('Slumbering Weald Shrine', ['Galarian Stunfisk', 'Munna', 'Butterfree', 'Orbeetle', 'Whiscash', 'Barboach', 'Magikarp'], {
    common: [
        { loot: 'Chesto' },
        { loot: 'Dowsing_machine' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Lime Shard' },
        { loot: 'Pink Shard' },
    ],
    epic: [
        { loot: 'Pixie Plate' },
        { loot: 'Fist Plate' },
        { loot: 'Iron Plate' },
    ],
    legendary: [{ loot: 'LargeRestore' }],
}, 27009504, [
    new DungeonBossPokemon('Corviknight', 135047520, 60),
    new DungeonBossPokemon('Galarian Weezing', 135047520, 60),
], 2000000, 32);
dungeonList['Galar Mine'] = new Dungeon('Galar Mine', [
    { pokemon: 'Rolycoly', options: { weight: 2.7 } },
    { pokemon: 'Timburr', options: { weight: 2.7 } },
    { pokemon: 'Roggenrola', options: { weight: 2.7 } },
    { pokemon: 'Woobat', options: { weight: 2.7 } },
    { pokemon: 'Diglett', options: { weight: 2.7 } },
    { pokemon: 'Drilbur', options: { weight: 2.7 } },
    new DungeonTrainer('Worker', [new GymPokemon('Roggenrola', 20767840, 14)], { weight: 1 }, 'Keith', '(male)'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Timburr', 20767840, 14),
        new GymPokemon('Timburr', 20767840, 14),
        new GymPokemon('Timburr', 20767840, 14),
    ], { weight: 1 }, 'Georgia', '(female)'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Diglett', 20767840, 14),
        new GymPokemon('Drilbur', 20767840, 15),
    ], { weight: 1 }, 'Sandra', '(female)'),
    new DungeonTrainer('Worker', [new GymPokemon('Rolycoly', 20767840, 14)], { weight: 1 }, 'Russell', '(male)'),
], {
    common: [
        { loot: 'Greatball', weight: 5 },
        { loot: 'MediumRestore', weight: 1 },
        { loot: 'Carkol', weight: 0.5 },
        { loot: 'Woobat', weight: 0.5 },
    ],
    rare: [
        { loot: 'Crimson Shard' },
        { loot: 'Brown Shard' },
    ],
    legendary: [
        { loot: 'Revive' },
        { loot: 'Star Piece' },
        { loot: 'Hard Stone' },
    ],
}, 20767840, [new DungeonBossPokemon('Carkol', 103839200, 18)], 1320000, 12);
dungeonList['Galar Mine No. 2'] = new Dungeon('Galar Mine No. 2', [
    { pokemon: 'Shellos (East)', options: { weight: 1.6 } },
    { pokemon: 'Wimpod', options: { weight: 1.6 } },
    { pokemon: 'Binacle', options: { weight: 1.6 } },
    { pokemon: 'Chewtle', options: { weight: 1.6 } },
    { pokemon: 'Scraggy', options: { weight: 1.6 } },
    { pokemon: 'Croagunk', options: { weight: 1.6 } },
    { pokemon: 'Shuckle', options: { weight: 1.6 } },
    { pokemon: 'Noibat', options: { weight: 1.6 } },
    { pokemon: 'Barboach', options: { weight: 1.6 } },
    { pokemon: 'Corphish', options: { weight: 1.6 } },
    new DungeonTrainer('Worker', [new GymPokemon('Carkol', 21294640, 21)], { weight: 1 }, 'Francis', '(male)'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Roggenrola', 21294640, 20),
        new GymPokemon('Timburr', 21294640, 21),
    ], { weight: 1 }, 'Yvonne', '(female)'),
    new DungeonTrainer('Team Yell Grunts', [
        new GymPokemon('Thievul', 21294640, 21),
        new GymPokemon('Galarian Linoone', 21294640, 22),
        new GymPokemon('Liepard', 21294640, 22),
        new GymPokemon('Pancham', 21294640, 21),
    ], { weight: 1 }, undefined),
    new DungeonTrainer('Rail Staff', [
        new GymPokemon('Drilbur', 21294640, 22),
        new GymPokemon('Onix', 21294640, 23),
    ], { weight: 1 }, 'Vincent'),
], {
    common: [
        { loot: 'Dowsing_machine', weight: 4 },
        { loot: 'xClick', weight: 2.5 },
        { loot: 'Galarian Stunfisk', weight: 0.5 },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [
        { loot: 'Earth Plate' },
        { loot: 'Duskball' },
    ],
    legendary: [{ loot: 'Star Piece' }],
}, 21294640, [
    new DungeonBossPokemon('Galarian Stunfisk', 106473200, 25),
    new DungeonBossPokemon('Gastrodon (East)', 106473200, 50),
    new DungeonBossPokemon('Drednaw', 106473200, 24),
], 1430000, 14);
dungeonList['Rose Tower'] = new Dungeon('Rose Tower', [
    new DungeonTrainer('Macro Cosmos', [new GymPokemon('Durant', 26400842, 48)], { weight: 1 }, 'Elijah', '(male)'),
    new DungeonTrainer('Macro Cosmos', [new GymPokemon('Cufant', 26400842, 48)], { weight: 1 }, 'Jane', '(female)'),
    new DungeonTrainer('Macro Cosmos', [new GymPokemon('Bronzong', 26400842, 48)], { weight: 1 }, 'Mateo', '(male)'),
    new DungeonTrainer('Macro Cosmos', [new GymPokemon('Klang', 26400842, 48)], { weight: 1 }, 'Kevin', '(male)'),
    new DungeonTrainer('Macro Cosmos', [new GymPokemon('Mawile', 26400842, 48)], { weight: 1 }, 'Carla', '(female)'),
    new DungeonTrainer('Macro Cosmos', [new GymPokemon('Steelix', 26400842, 49)], { weight: 1 }, 'Adalyn', '(female)'),
    new DungeonTrainer('Macro Cosmos', [new GymPokemon('Galarian Stunfisk', 26400842, 49)], { weight: 1 }, 'Justin', '(male)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Rose Shard' },
        { loot: 'Grey Shard' },
    ],
    epic: [{ loot: 'Iron Plate' }],
}, 26400842, [
    new DungeonTrainer('Macro Cosmos', [
        new GymPokemon('Froslass', 26400842, 50),
        new GymPokemon('Tsareena', 26400842, 50),
        new GymPokemon('Salazzle', 26400842, 50),
        new GymPokemon('Milotic', 26400842, 51),
        new GymPokemon('Gigantamax Garbodor', 26400842, 52),
    ], { weight: 1 }, 'Oleana', '(oleana)'),
], 1800000, 32);
dungeonList['Energy Plant'] = new Dungeon('Energy Plant', ['Steelix', 'Mawile', 'Bronzong', 'Durant', 'Bisharp', 'Doublade', 'Golisopod', 'Galarian Stunfisk'], {
    common: [
        { loot: 'Token_collector' },
        { loot: 'Lucky_egg' },
        { loot: 'Pokeball' },
    ],
    rare: [
        { loot: 'Yellow Shard' },
        { loot: 'Grey Shard' },
    ],
}, 26704124, [
    new DungeonTrainer('Macro Cosmos', [
        new GymPokemon('Escavalier', 26704124, 50),
        new GymPokemon('Ferrothorn', 26704124, 50),
        new GymPokemon('Perrserker', 26704124, 50),
        new GymPokemon('Klinklang', 26704124, 51),
        new GymPokemon('Gigantamax Copperajah', 26704124, 52),
    ], { weight: 3 }, 'Rose', '(rose)'),
    new DungeonBossPokemon('Zacian (Battle Hero)', 169578810, 70, { hide: true, requirement: new QuestLineStepCompletedRequirement('Sword and Shield', 18) }),
    new DungeonBossPokemon('Zamazenta (Battle Hero)', 169578810, 70, { hide: true, requirement: new QuestLineStepCompletedRequirement('Sword and Shield', 18) }),
], 1850000, 32);
dungeonList['Glimwood Tangle'] = new Dungeon('Glimwood Tangle', [
    { pokemon: 'Shiinotic', options: { weight: 1.8 } },
    { pokemon: 'Galarian Ponyta', options: { weight: 1.8 } },
    { pokemon: 'Sinistea', options: { weight: 1.8 } },
    { pokemon: 'Phantump', options: { weight: 1.8 } },
    { pokemon: 'Swirlix', options: { weight: 1.8 } },
    { pokemon: 'Spritzee', options: { weight: 1.8 } },
    { pokemon: 'Passimian', options: { weight: 1.8 } },
    { pokemon: 'Oranguru', options: { weight: 1.8 } },
    { pokemon: 'Impidimp', options: { weight: 1.8 } },
    new DungeonTrainer('Rail Staff', [new GymPokemon('Ninetales', 23764848, 34)], { weight: 1 }, 'Robert'),
    new DungeonTrainer('Cook', [
        new GymPokemon('Milcery', 23764848, 33),
        new GymPokemon('Sinistea', 23764848, 33),
        new GymPokemon('Shiinotic', 23764848, 34),
    ], { weight: 1 }, 'Derek'),
    new DungeonTrainer('Madame', [
        new GymPokemon('Indeedee (Male)', 23764848, 33),
        new GymPokemon('Indeedee (Female)', 23764848, 33),
    ], { weight: 1 }, 'Judy'),
    new DungeonTrainer('Beauty', [new GymPokemon('Kirlia', 23764848, 34)], { weight: 1 }, 'Jacqueline'),
], {
    common: [
        { loot: 'Cheri', weight: 3 },
        { loot: 'Pecha', weight: 3 },
        { loot: 'Impidimp' },
    ],
    rare: [
        { loot: 'White Shard' },
        { loot: 'Pink Shard' },
    ],
    epic: [{ loot: 'LargeRestore' }],
}, 23764848, [
    new DungeonBossPokemon('Hattrem', 118824240, 36),
    new DungeonBossPokemon('Morgrem', 118824240, 36),
    new DungeonBossPokemon('Indeedee (Male)', 118824240, 36),
    new DungeonBossPokemon('Indeedee (Female)', 118824240, 36),
], 1680000, 23);
dungeonList['Dusty Bowl'] = new Dungeon('Dusty Bowl', ['Gurdurr', 'Ferrothorn', 'Klang', 'Meowstic', 'Barbaracle', 'Applin', 'Hattrem', 'Qwilfish', 'Hitmonlee', 'Hitmonchan', 'Koffing'], {
    common: [
        { loot: 'Pokeball' },
        { loot: 'Greatball' },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Ochre Shard' },
        { loot: 'Grey Shard' },
    ],
    legendary: [
        { loot: 'Revive' },
        { loot: 'Max Revive' },
        { loot: 'Rare Bone' },
        { loot: 'Star Piece' },
    ],
}, 22923210, [
    new DungeonBossPokemon('Gigalith', 114616050, 60),
    new DungeonBossPokemon('Flygon', 114616050, 60),
    new DungeonBossPokemon('Sigilyph', 114616050, 60),
    new DungeonBossPokemon('Tyranitar', 114616050, 60),
], 1570000, 20);
//Isle of Armor
dungeonList['Warm-Up Tunnel'] = new Dungeon('Warm-Up Tunnel', ['Sandshrew', 'Cubone', 'Torkoal'], {
    common: [
        { loot: 'xClick' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Brown Shard' },
    ],
    epic: [{ loot: 'Quickball' }],
    legendary: [
        { loot: 'Revive' },
        { loot: 'Max Revive' },
    ],
}, 28252100, [new DungeonBossPokemon('Kangaskhan', 141260500, 60)], 1730000, 38);
dungeonList['Courageous Cavern'] = new Dungeon('Courageous Cavern', ['Pincurchin', 'Dwebble', 'Crustle', 'Swoobat', 'Magikarp', 'Shellder', 'Cloyster', 'Tentacool', 'Chewtle', 'Tentacruel', 'Whiscash'], {
    common: [
        { loot: 'Pokeball' },
        { loot: 'Greatball' },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Duskball' },
        { loot: 'Quickball' },
    ],
    legendary: [
        { loot: 'Icy Rock' },
        { loot: 'Star Piece' },
        { loot: 'Revive' },
        { loot: 'Oval Stone' },
        { loot: 'Everstone' },
        { loot: 'Hard Stone' },
    ],
}, 26704124, [
    new DungeonBossPokemon('Golisopod', 133520620, 60),
    new DungeonBossPokemon('Druddigon', 133520620, 60),
    new DungeonBossPokemon('Drednaw', 133520620, 60),
], 1730000, 33);
dungeonList['Brawlers Cave'] = new Dungeon('Brawlers Cave', ['Whismur', 'Woobat', 'Azurill', 'Lickitung', 'Loudred', 'Swoobat', 'Golduck', 'Poliwag', 'Barboach', 'Whiscash', 'Chansey', 'Psyduck'], {
    common: [
        { loot: 'Greatball', weight: 3 },
        { loot: 'Ultraball', weight: 3 },
        { loot: 'MediumRestore' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Ochre Shard' },
        { loot: 'Rose Shard' },
    ],
    epic: [
        { loot: 'Duskball' },
        { loot: 'Nestball' },
        { loot: 'Timerball' },
        { loot: 'Luxuryball' },
    ],
    legendary: [
        { loot: 'Rare Bone' },
        { loot: 'Hard Stone' },
        { loot: 'Star Piece' },
        { loot: 'LargeRestore' },
    ],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(150, GameConstants.getDungeonIndex('Brawlers Cave')) }],
}, 27009504, [
    new DungeonBossPokemon('Gigalith', 135047520, 60),
    new DungeonBossPokemon('Druddigon', 135047520, 60),
    new DungeonBossPokemon('Poliwrath', 135047520, 60),
], 1730000, 34);
dungeonList['Tower of Darkness'] = new Dungeon('Tower of Darkness', [
    new DungeonTrainer('Master Dojo', [new GymPokemon('Zorua', 28886112, 65)], { weight: 1 }, 'Student'),
    new DungeonTrainer('Master Dojo', [new GymPokemon('Scraggy', 28886112, 66)], { weight: 1 }, 'Student'),
    new DungeonTrainer('Master Dojo', [new GymPokemon('Inkay', 28886112, 67)], { weight: 1 }, 'Student'),
    new DungeonTrainer('Master Dojo', [new GymPokemon('Krokorok', 28886112, 68)], { weight: 1 }, 'Student'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'xAttack' },
    ],
    rare: [
        { loot: 'Black Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [{ loot: 'Dread Plate' }],
}, 28886112, [
    new DungeonTrainer('Dojo Master', [new GymPokemon('Kubfu', 144430560, 70)], { weight: 1 }, 'Mustard'),
], 2000000, 40, () => {
    App.game.party.gainPokemonById(892);
    Notifier.notify({
        message: 'Kubfu evolved into Urshifu (Single Strike)!',
        type: NotificationConstants.NotificationOption.success,
        timeout: 3e4,
    });
});
dungeonList['Tower of Waters'] = new Dungeon('Tower of Waters', [
    new DungeonTrainer('Master Dojo', [new GymPokemon('Psyduck', 28886112, 65)], { weight: 1 }, 'Student'),
    new DungeonTrainer('Master Dojo', [new GymPokemon('Krabby', 28886112, 66)], { weight: 1 }, 'Student'),
    new DungeonTrainer('Master Dojo', [new GymPokemon('Marill', 28886112, 67)], { weight: 1 }, 'Student'),
    new DungeonTrainer('Master Dojo', [new GymPokemon('Poliwhirl', 28886112, 68)], { weight: 1 }, 'Student'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'xAttack' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [{ loot: 'Splash Plate' }],
}, 28886112, [
    new DungeonTrainer('Dojo Master', [new GymPokemon('Kubfu', 144430560, 70)], { weight: 1 }, 'Mustard'),
], 2000000, 36, () => {
    App.game.party.gainPokemonById(892.1);
    Notifier.notify({
        message: 'Kubfu evolved into Urshifu (Rapid Strike)!',
        type: NotificationConstants.NotificationOption.success,
        timeout: 3e4,
    });
});
//Crown Tundra
dungeonList['Roaring-Sea Caves'] = new Dungeon('Roaring-Sea Caves', [
    'Zubat', 'Carbink', 'Piloswine', 'Deino', 'Larvitar', 'Riolu', 'Audino', 'Golbat', 'Barboach', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)', 'Magikarp', 'Feebas',
    { pokemon: 'Omanyte', options: { hide: true, requirement: new ObtainedPokemonRequirement(pokemonMap.Omanyte) } },
    { pokemon: 'Kabuto', options: { hide: true, requirement: new ObtainedPokemonRequirement(pokemonMap.Kabuto) } },
], {
    common: [
        { loot: 'Greatball' },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Cyan Shard' },
    ],
    epic: [
        { loot: 'Duskball' },
        { loot: 'MediumRestore' },
        { loot: 'LargeRestore' },
    ],
    legendary: [
        { loot: 'Revive' },
        { loot: 'Max Revive' },
        { loot: 'Hard Stone' },
        { loot: 'Star Piece' },
        { loot: 'Everstone' },
        { loot: 'Rare Bone' },
    ],
}, 32184888, [
    new DungeonBossPokemon('Kabutops', 160924440, 60, { hide: true, requirement: new ObtainedPokemonRequirement(pokemonMap.Kabutops) }),
    new DungeonBossPokemon('Omastar', 160924440, 60, { hide: true, requirement: new ObtainedPokemonRequirement(pokemonMap.Omastar) }),
    new DungeonBossPokemon('Tyranitar', 160924440, 60),
    new DungeonBossPokemon('Hydreigon', 160924440, 60),
    new DungeonBossPokemon('Lucario', 160924440, 60),
], 1730000, 50);
dungeonList['Rock Peak Ruins'] = new Dungeon('Rock Peak Ruins', [
    'Stonjourner', 'Rhyperior', 'Aggron', 'Coalossal', 'Barbaracle', 'Gigalith', 'Crustle',
    { pokemon: 'Aerodactyl', options: { hide: true, requirement: new ObtainedPokemonRequirement(pokemonMap.Aerodactyl) } },
], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Brown Shard' },
        { loot: 'Grey Shard' },
    ],
    epic: [
        { loot: 'Hard Stone' },
        { loot: 'Everstone' },
        { loot: 'Stone Plate' },
    ],
}, 31507840, [
    new DungeonBossPokemon('Relicanth', 149662240, 60),
    new DungeonBossPokemon('Regirock', 157539200, 70, { hide: true, requirement: new QuestLineStepCompletedRequirement('The Ancient Golems', 4) }),
], 1920000, 48);
dungeonList['Iron Ruins'] = new Dungeon('Iron Ruins', ['Bronzong', 'Duraludon', 'Copperajah', 'Corviknight', 'Perrserker', 'Bisharp', 'Ferrothorn', 'Excadrill'], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Lucky_incense' },
    ],
    rare: [{ loot: 'Grey Shard' }],
    epic: [
        { loot: 'Hard Stone' },
        { loot: 'Everstone' },
        { loot: 'Iron Plate' },
    ],
}, 31507840, [
    new DungeonBossPokemon('Metagross', 149662240, 60),
    new DungeonBossPokemon('Registeel', 157539200, 70, { hide: true, requirement: new QuestLineStepCompletedRequirement('The Ancient Golems', 4) }),
], 1920000, 48);
dungeonList['Iceberg Ruins'] = new Dungeon('Iceberg Ruins', [
    'Cryogonal', 'Beartic', 'Galarian Darumaka', 'Weavile', 'Vanilluxe', 'Froslass', 'Delibird',
    { pokemon: 'Aurorus', options: { hide: true, requirement: new ObtainedPokemonRequirement(pokemonMap.Aurorus) } },
], {
    common: [
        { loot: 'Dowsing_machine', weight: 3 },
        { loot: 'Lucky_incense', weight: 3 },
        { loot: 'Cryogonal' },
    ],
    rare: [
        { loot: 'White Shard' },
        { loot: 'Cyan Shard' },
    ],
    epic: [
        { loot: 'Hard Stone' },
        { loot: 'Everstone' },
        { loot: 'Icicle Plate' },
    ],
}, 31507840, [
    new DungeonBossPokemon('Glalie', 149662240, 60),
    new DungeonBossPokemon('Regice', 157539200, 70, { hide: true, requirement: new QuestLineStepCompletedRequirement('The Ancient Golems', 4) }),
], 1920000, 54);
dungeonList['Split-Decision Ruins'] = new Dungeon('Split-Decision Ruins', ['Electabuzz', 'Cryogonal', 'Bronzong', 'Stonjourner', 'Galvantula', 'Relicanth', 'Glalie', 'Metagross'], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'White Shard' },
        { loot: 'Grey Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Purple Shard' },
    ],
    mythic: [
        { loot: 'Draco Plate' },
        { loot: 'Zap Plate' },
    ],
}, 32870660, [
    new DungeonBossPokemon('Altaria', 156135635, 60),
    new DungeonBossPokemon('Electivire', 156135635, 60),
    new DungeonBossPokemon('Regidrago', 164353300, 70),
    new DungeonBossPokemon('Regieleki', 164353300, 70),
], 2000000, 52);
dungeonList['Lakeside Cave'] = new Dungeon('Lakeside Cave', ['Zubat', 'Aron', 'Carbink', 'Carkol', 'Ferroseed', 'Mawile', 'Sableye', 'Audino', 'Lairon'], {
    common: [
        { loot: 'xClick' },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Grey Shard' },
        { loot: 'Brown Shard' },
    ],
    epic: [{ loot: 'Duskball' }],
    legendary: [
        { loot: 'Rare Bone' },
        { loot: 'Star Piece' },
        { loot: 'Hard Stone' },
        { loot: 'Everstone' },
    ],
}, 33216830, [
    new DungeonBossPokemon('Noivern', 166608415, 60),
    new DungeonBossPokemon('Aggron', 166608415, 60),
    new DungeonBossPokemon('Coalossal', 166608415, 60),
], 1750000, 53);
dungeonList['Dyna Tree Hill'] = new Dungeon('Dyna Tree Hill', ['Magmar', 'Absol', 'Beartic', 'Cryogonal', 'Dubwool', 'Glalie', 'Clefable'], {
    common: [
        { loot: 'Oran', weight: 2 },
        { loot: 'Sitrus' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Cyan Shard' },
        { loot: 'Rose Shard' },
    ],
    epic: [
        { loot: 'Meadow Plate' },
        { loot: 'Tamato' },
        { loot: 'Hondew' },
    ],
}, 33216830, [new DungeonBossPokemon('Greedent', 166608415, 60)], 1920000, 53);
dungeonList['Tunnel to the Top'] = new Dungeon('Tunnel to the Top', ['Zubat', 'Golbat', 'Carbink', 'Snorunt', 'Gible', 'Bagon', 'Clefairy', 'Clefable', 'Audino', 'Druddigon'], {
    common: [
        { loot: 'Rawst' },
        { loot: 'Aspear' },
        { loot: 'xAttack' },
    ],
    rare: [
        { loot: 'Brown Shard' },
        { loot: 'Rose Shard' },
    ],
    epic: [
        { loot: 'Duskball' },
        { loot: 'Quickball' },
        { loot: 'Flame Plate' },
        { loot: 'LargeRestore' },
    ],
    legendary: [
        { loot: 'Hard Stone' },
        { loot: 'Heat Rock' },
        { loot: 'Icy Rock' },
        { loot: 'Everstone' },
        { loot: 'Rare Bone' },
        { loot: 'Revive' },
        { loot: 'Star Piece' },
        { loot: 'Max Revive' },
    ],
}, 33565196, [
    new DungeonBossPokemon('Froslass', 167825980, 60),
    new DungeonBossPokemon('Garchomp', 167825980, 60),
    new DungeonBossPokemon('Salamence', 167825980, 60),
], 2000000, 54);
dungeonList['Crown Shrine'] = new Dungeon('Crown Shrine', ['Dhelmise', 'Hatterene', 'Reuniclus', 'Mr. Rime', 'Mamoswine', 'Roserade'], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Brown Shard' },
        { loot: 'Rose Shard' },
    ],
    epic: [
        { loot: 'Mind Plate' },
        { loot: 'Icicle Plate' },
        { loot: 'Spooky Plate' },
    ],
    legendary: [{ loot: 'Max Revive' }],
    mythic: [
        { loot: 'Heart Scale', weight: 2 },
        { loot: 'Galarian Darmanitan (Zen)' },
    ],
}, 33915762, [
    new DungeonBossPokemon('Galarian Rapidash', 161099869, 60),
    new DungeonBossPokemon('Abomasnow', 161099869, 60),
    new DungeonBossPokemon('Trevenant', 161099869, 60),
    new DungeonBossPokemon('Weavile', 161099869, 60),
    new DungeonBossPokemon('Calyrex', 169578810, 80, { hide: true, requirement: new QuestLineStepCompletedRequirement('The Crown of Galar', 8) }),
], 2200000, 55);
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../Battle.ts" />
class DungeonBattle extends Battle {
    /**
     * Award the player with money and exp, and throw a Pokéball if applicable
     */
    static defeatPokemon() {
        var _a, _b;
        const enemyPokemon = this.enemyPokemon();
        // Handle Trainer Pokemon defeat
        if (this.trainer()) {
            this.defeatTrainerPokemon();
            return;
        }
        DungeonRunner.fighting(false);
        if (DungeonRunner.fightingLootEnemy) {
            DungeonRunner.fightingLootEnemy = false;
        }
        else {
            GameHelper.incrementObservable(DungeonRunner.encountersWon);
        }
        if (DungeonRunner.fightingBoss()) {
            DungeonRunner.fightingBoss(false);
            DungeonRunner.defeatedBoss(true);
        }
        enemyPokemon.defeat();
        App.game.breeding.progressEggsBattle(DungeonRunner.dungeon.difficultyRoute, player.region);
        player.lowerItemMultipliers(MultiplierDecreaser.Battle);
        // Clearing Dungeon tile
        DungeonRunner.map.currentTile().type(GameConstants.DungeonTile.empty);
        DungeonRunner.map.currentTile().calculateCssClass();
        // Attempting to catch Pokemon
        const isShiny = enemyPokemon.shiny;
        const pokeBall = App.game.pokeballs.calculatePokeballToUse(enemyPokemon.id, isShiny);
        const route = ((_b = (_a = player.town()) === null || _a === void 0 ? void 0 : _a.dungeon) === null || _b === void 0 ? void 0 : _b.difficultyRoute) || 1;
        const region = player.region;
        if (pokeBall !== GameConstants.Pokeball.None) {
            this.prepareCatch(enemyPokemon, pokeBall);
            setTimeout(() => {
                this.attemptCatch(enemyPokemon, route, region);
                if (DungeonRunner.defeatedBoss()) {
                    DungeonRunner.dungeonWon();
                }
            }, App.game.pokeballs.calculateCatchTime(pokeBall));
        }
        else if (DungeonRunner.defeatedBoss()) {
            DungeonRunner.dungeonWon();
        }
    }
    /**
     * Handles defeating a trainer Pokemon
     */
    static defeatTrainerPokemon() {
        this.enemyPokemon().defeat(true);
        GameHelper.incrementObservable(this.trainerPokemonIndex);
        App.game.breeding.progressEggsBattle(DungeonRunner.dungeon.difficultyRoute, player.region);
        player.lowerItemMultipliers(MultiplierDecreaser.Battle);
        // No Pokemon left, trainer defeated
        if (this.trainerPokemonIndex() >= this.trainer().team.length) {
            // rewards for defeating trainer
            if (this.trainer().options.reward) {
                // Custom reward amount on defeat
                App.game.wallet.addAmount(this.trainer().options.reward);
            }
            else {
                const dungeonCost = DungeonRunner.dungeon.tokenCost;
                // Reward back 50% or 100% (boss) of the total dungeon DT cost as money (excludes achievement multiplier)
                const money = Math.round(dungeonCost * (DungeonRunner.fightingBoss() ? 1 : 0.5));
                App.game.wallet.gainMoney(money, true);
                // Reward back 4% or 10% (boss) of the total dungeon DT cost (excludes achievement multiplier)
                const tokens = Math.round(dungeonCost * (DungeonRunner.fightingBoss() ? 0.1 : 0.04));
                App.game.wallet.gainDungeonTokens(tokens, true);
            }
            DungeonRunner.fighting(false);
            GameHelper.incrementObservable(DungeonRunner.encountersWon);
            this.trainer(null);
            this.trainerPokemonIndex(0);
            // Clearing Dungeon tile
            DungeonRunner.map.currentTile().type(GameConstants.DungeonTile.empty);
            DungeonRunner.map.currentTile().calculateCssClass();
            // Update boss
            if (DungeonRunner.fightingBoss()) {
                DungeonRunner.fightingBoss(false);
                DungeonRunner.defeatedBoss(true);
                DungeonRunner.dungeonWon();
            }
            // Generate next trainer Pokemon
        }
        else {
            this.generateTrainerPokemon();
        }
    }
    static generateNewEnemy() {
        this.catching(false);
        this.counter = 0;
        // Finding enemy from enemyList
        const enemy = Rand.fromWeightedArray(DungeonRunner.dungeon.availableMinions(), DungeonRunner.dungeon.weightList);
        // Pokemon
        if (typeof enemy === 'string' || enemy.hasOwnProperty('pokemon')) {
            const pokemon = (typeof enemy === 'string') ? enemy : enemy.pokemon;
            const enemyPokemon = PokemonFactory.generateDungeonPokemon(pokemon, DungeonRunner.chestsOpened(), DungeonRunner.dungeon.baseHealth, DungeonRunner.dungeonLevel());
            this.enemyPokemon(enemyPokemon);
            PokemonHelper.incrementPokemonStatistics(enemyPokemon.id, GameConstants.STATISTIC_ENCOUNTERED, enemyPokemon.shiny, enemyPokemon.gender);
            // Shiny
            if (enemyPokemon.shiny) {
                App.game.logbook.newLog(LogBookTypes.SHINY, `[${player.town().dungeon.name}] You encountered a wild shiny ${this.enemyPokemon().name}.`);
            }
            else if (!App.game.party.alreadyCaughtPokemon(this.enemyPokemon().id)) {
                App.game.logbook.newLog(LogBookTypes.NEW, `[${player.town().dungeon.name}] You encountered a wild ${this.enemyPokemon().name}.`);
            }
            // Trainer
        }
        else {
            const trainer = enemy;
            this.trainer(trainer);
            this.trainerPokemonIndex(0);
            this.generateTrainerPokemon();
        }
        DungeonRunner.fighting(true);
    }
    static generateNewLootEnemy(pokemon) {
        this.catching(false);
        this.counter = 0;
        const enemyPokemon = PokemonFactory.generateDungeonPokemon(pokemon, DungeonRunner.chestsOpened(), DungeonRunner.dungeon.baseHealth * 2, DungeonRunner.dungeonLevel());
        this.enemyPokemon(enemyPokemon);
        PokemonHelper.incrementPokemonStatistics(enemyPokemon.id, GameConstants.STATISTIC_ENCOUNTERED, enemyPokemon.shiny, enemyPokemon.gender);
        // Shiny
        if (enemyPokemon.shiny) {
            App.game.logbook.newLog(LogBookTypes.SHINY, `[${player.town().dungeon.name}] You encountered a wild shiny ${this.enemyPokemon().name}.`);
        }
        else if (!App.game.party.alreadyCaughtPokemon(this.enemyPokemon().id)) {
            App.game.logbook.newLog(LogBookTypes.NEW, `[${player.town().dungeon.name}] You encountered a wild ${this.enemyPokemon().name}.`);
        }
        DungeonRunner.fighting(true);
    }
    /**
     * Handles generating the enemy Trainer Pokemon
     */
    static generateTrainerPokemon() {
        this.counter = 0;
        const pokemon = this.trainer().team[this.trainerPokemonIndex()];
        const baseHealth = DungeonRunner.fightingBoss() ? pokemon.maxHealth : DungeonRunner.dungeon.baseHealth;
        const level = DungeonRunner.fightingBoss() ? pokemon.level : DungeonRunner.dungeonLevel();
        const enemyPokemon = PokemonFactory.generateDungeonTrainerPokemon(pokemon, DungeonRunner.chestsOpened(), baseHealth, level);
        this.enemyPokemon(enemyPokemon);
    }
    static generateNewBoss() {
        DungeonRunner.fighting(true);
        this.catching(false);
        this.counter = 0;
        // Finding boss from bossList
        const enemy = Rand.fromWeightedArray(DungeonRunner.dungeon.availableBosses(), DungeonRunner.dungeon.bossWeightList);
        // Pokemon
        if (enemy instanceof DungeonBossPokemon) {
            this.enemyPokemon(PokemonFactory.generateDungeonBoss(enemy, DungeonRunner.chestsOpened()));
            PokemonHelper.incrementPokemonStatistics(this.enemyPokemon().id, GameConstants.STATISTIC_ENCOUNTERED, this.enemyPokemon().shiny, this.enemyPokemon().gender);
            // Shiny
            if (this.enemyPokemon().shiny) {
                App.game.logbook.newLog(LogBookTypes.SHINY, `[${player.town().dungeon.name}] You encountered a wild shiny ${this.enemyPokemon().name}.`);
            }
            else if (!App.game.party.alreadyCaughtPokemon(this.enemyPokemon().id)) {
                App.game.logbook.newLog(LogBookTypes.NEW, `[${player.town().dungeon.name}] You encountered a wild ${this.enemyPokemon().name}.`);
            }
        }
        else {
            this.trainer(enemy);
            this.trainerPokemonIndex(0);
            this.generateTrainerPokemon();
        }
    }
}
DungeonBattle.trainer = ko.observable(null);
DungeonBattle.trainerPokemonIndex = ko.observable(0);
DungeonBattle.remainingTrainerPokemon = ko.pureComputed(() => {
    if (!DungeonBattle.trainer()) {
        return 0;
    }
    return DungeonBattle.trainer().team.length - DungeonBattle.trainerPokemonIndex();
});
DungeonBattle.defeatedTrainerPokemon = ko.pureComputed(() => {
    if (!DungeonBattle.trainer()) {
        return 0;
    }
    return DungeonBattle.trainerPokemonIndex();
});
class DungeonMap {
    constructor(size, flash = false) {
        this.flash = flash;
        if (size <= GameConstants.MAX_DUNGEON_SIZE) {
            this.floorSizes = [size];
        }
        else {
            this.floorSizes = [GameConstants.MAX_DUNGEON_SIZE, size - GameConstants.MAX_DUNGEON_SIZE + GameConstants.MIN_DUNGEON_SIZE - 1];
        }
        this.board = ko.observable(this.generateMap());
        this.playerPosition = ko.observable(new Point(Math.floor(this.floorSizes[0] / 2), this.floorSizes[0] - 1));
        this.playerMoved = ko.observable(false);
        // Move the boss or ladder if it spawns on the player.
        this.floorSizes.forEach((size, index) => {
            const endTileType = index == this.floorSizes.length - 1 ? GameConstants.DungeonTile.boss : GameConstants.DungeonTile.ladder;
            const entranceTile = this.board()[index][size - 1][Math.floor(size / 2)];
            if (entranceTile.type() == endTileType) {
                entranceTile.type(GameConstants.DungeonTile.entrance);
                const newX = Rand.intBetween(0, size - 1);
                const newY = Rand.intBetween(0, size - 2); // Don't allow it to be on the bottom row
                this.board()[index][newY][newX].type(endTileType);
                this.board()[index][newY][newX].calculateCssClass();
            }
            entranceTile.type(GameConstants.DungeonTile.entrance);
            entranceTile.isVisible = true;
            entranceTile.isVisited = true;
        });
        this.currentTile().hasPlayer = true;
        if (this.flash) {
            this.nearbyTiles(this.playerPosition()).forEach(t => t.isVisible = true);
        }
        this.totalFights = ko.observable(this.board().flat().flat().filter((t) => t.type() == GameConstants.DungeonTile.enemy).length);
        this.totalChests = ko.observable(this.board().flat().flat().filter((t) => t.type() == GameConstants.DungeonTile.chest).length);
    }
    moveToCoordinates(x, y, floor = undefined) {
        if (this.moveToTile(new Point(x, y, floor !== null && floor !== void 0 ? floor : this.playerPosition().floor))) {
            this.playerMoved(true);
        }
    }
    moveUp() {
        this.moveToCoordinates(this.playerPosition().x, this.playerPosition().y - 1);
    }
    moveRight() {
        this.moveToCoordinates(this.playerPosition().x + 1, this.playerPosition().y);
    }
    moveDown() {
        this.moveToCoordinates(this.playerPosition().x, this.playerPosition().y + 1);
    }
    moveLeft() {
        this.moveToCoordinates(this.playerPosition().x - 1, this.playerPosition().y);
    }
    moveToTile(point) {
        if (this.hasAccessToTile(point)) {
            this.currentTile().hasPlayer = false;
            this.playerPosition(point);
            if (this.flash) {
                this.nearbyTiles(point).forEach(t => t.isVisible = true);
            }
            this.currentTile().hasPlayer = true;
            this.currentTile().isVisible = true;
            this.currentTile().isVisited = true;
            if (this.currentTile().type() == GameConstants.DungeonTile.enemy) {
                DungeonBattle.generateNewEnemy();
            }
            return true;
        }
        return false;
    }
    showChestTiles() {
        for (let i = 0; i < this.board()[this.playerPosition().floor].length; i++) {
            for (let j = 0; j < this.board()[this.playerPosition().floor][i].length; j++) {
                if (this.board()[this.playerPosition().floor][i][j].type() == GameConstants.DungeonTile.chest) {
                    this.board()[this.playerPosition().floor][i][j].isVisible = true;
                }
            }
        }
    }
    showAllTiles() {
        for (let i = 0; i < this.board()[this.playerPosition().floor].length; i++) {
            for (let j = 0; j < this.board()[this.playerPosition().floor][i].length; j++) {
                this.board()[this.playerPosition().floor][i][j].isVisible = true;
            }
        }
    }
    currentTile() {
        return this.board()[this.playerPosition().floor][this.playerPosition().y][this.playerPosition().x];
    }
    nearbyTiles(point) {
        var _a, _b, _c, _d;
        const tiles = [];
        tiles.push((_a = this.board()[point.floor][point.y - 1]) === null || _a === void 0 ? void 0 : _a[point.x]);
        tiles.push((_b = this.board()[point.floor][point.y + 1]) === null || _b === void 0 ? void 0 : _b[point.x]);
        tiles.push((_c = this.board()[point.floor][point.y]) === null || _c === void 0 ? void 0 : _c[point.x - 1]);
        tiles.push((_d = this.board()[point.floor][point.y]) === null || _d === void 0 ? void 0 : _d[point.x + 1]);
        return tiles.filter(t => t);
    }
    hasAccessToTile(point) {
        var _a;
        // If player fighting/catching they cannot move right now
        if (DungeonRunner.fighting() || DungeonBattle.catching()) {
            return false;
        }
        // If tile out of bounds, it's invalid
        if (point.x < 0 || point.x >= this.floorSizes[point.floor] || point.y < 0 || point.y >= this.floorSizes[point.floor]) {
            return false;
        }
        if ((_a = this.board()[point.floor][point.y]) === null || _a === void 0 ? void 0 : _a[point.x].isVisited) {
            return true;
        }
        //If any of the adjacent Tiles is visited, it's a valid Tile.
        return this.nearbyTiles(point).some(t => t.isVisited);
    }
    generateMap() {
        const map = [];
        this.floorSizes.forEach((size, index) => {
            // Fill mapList with required Tiles
            const mapList = [];
            // Boss or ladder
            if (index == this.floorSizes.length - 1) {
                mapList.push(new DungeonTile(GameConstants.DungeonTile.boss));
            }
            else {
                mapList.push(new DungeonTile(GameConstants.DungeonTile.ladder));
            }
            // Chests (leave 1 space for enemy and 1 space for empty tile)
            for (let i = 0; i < size && mapList.length < size * size - 2; i++) {
                mapList.push(new DungeonTile(GameConstants.DungeonTile.chest));
            }
            // Enemy Pokemon (leave 1 space for empty tile)
            for (let i = 0; i < size * 2 + 3 && mapList.length < size * size - 1; i++) {
                mapList.push(new DungeonTile(GameConstants.DungeonTile.enemy));
            }
            // Fill with empty tiles
            for (let i = mapList.length; i < size * size; i++) {
                mapList.push(new DungeonTile(GameConstants.DungeonTile.empty));
            }
            // Shuffle the tiles randomly
            this.shuffle(mapList);
            // Make sure the player tile is empty
            while (mapList[mapList.length - Math.floor(size / 2) - 1].type() != GameConstants.DungeonTile.empty) {
                this.shuffle(mapList);
            }
            // Create a 2d array
            const floor = [];
            while (mapList.length) {
                floor.push(mapList.splice(0, size));
            }
            map.push(floor);
        });
        return map;
    }
    /**
     * Shuffles array in place.
     * @param {Array} a items The array containing the items.
     */
    shuffle(a) {
        let j, x, i;
        for (i = a.length; i; i--) {
            j = Rand.floor(i);
            x = a[i - 1];
            a[i - 1] = a[j];
            a[j] = x;
        }
    }
}
/// <reference path="../../declarations/GameHelper.d.ts" />
class DungeonRunner {
    static initializeDungeon(dungeon) {
        var _a;
        if (!dungeon.isUnlocked()) {
            return false;
        }
        DungeonRunner.dungeon = dungeon;
        if (!DungeonRunner.hasEnoughTokens()) {
            Notifier.notify({
                message: 'You don\'t have enough Dungeon Tokens.',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        App.game.wallet.loseAmount(new Amount(DungeonRunner.dungeon.tokenCost, GameConstants.Currency.dungeonToken));
        // Reset any trainers/pokemon if there was one previously
        DungeonBattle.trainer(null);
        DungeonBattle.trainerPokemonIndex(0);
        DungeonBattle.enemyPokemon(null);
        DungeonRunner.timeBonus(FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.Time_Flute));
        DungeonRunner.timeLeft(GameConstants.DUNGEON_TIME * this.timeBonus());
        DungeonRunner.timeLeftPercentage(100);
        // Dungeon size increases with each region
        let dungeonSize = GameConstants.BASE_DUNGEON_SIZE + ((_a = dungeon.optionalParameters.dungeonRegionalDifficulty) !== null && _a !== void 0 ? _a : player.region);
        // Decrease dungeon size by 1 for every 10, 100, 1000 etc completes
        dungeonSize -= Math.max(0, App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(DungeonRunner.dungeon.name)]().toString().length - 1);
        const flash = App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(DungeonRunner.dungeon.name)]() >= 200;
        // Dungeon size minimum of MIN_DUNGEON_SIZE
        DungeonRunner.map = new DungeonMap(Math.max(GameConstants.MIN_DUNGEON_SIZE, dungeonSize), flash);
        DungeonRunner.chestsOpened(0);
        DungeonRunner.encountersWon(0);
        DungeonRunner.chestsOpenedPerFloor = new Array(DungeonRunner.map.board().length).fill(0);
        DungeonRunner.currentTileType = ko.pureComputed(() => {
            return DungeonRunner.map.currentTile().type;
        });
        DungeonRunner.fightingLootEnemy = false;
        DungeonRunner.fightingBoss(false);
        DungeonRunner.defeatedBoss(false);
        DungeonRunner.dungeonFinished(false);
        App.game.gameState = GameConstants.GameState.dungeon;
    }
    static tick() {
        if (this.timeLeft() <= 0) {
            if (this.defeatedBoss()) {
                this.dungeonWon();
            }
            else {
                this.dungeonLost();
            }
        }
        if (this.map.playerMoved()) {
            this.timeLeft(this.timeLeft() - GameConstants.DUNGEON_TICK);
            this.timeLeftPercentage(Math.floor(this.timeLeft() / (GameConstants.DUNGEON_TIME * FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.Time_Flute)) * 100));
        }
        const currentFluteBonus = FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.Time_Flute);
        if (currentFluteBonus != this.timeBonus()) {
            if (currentFluteBonus > this.timeBonus()) {
                if (this.timeBonus() === 1) {
                    this.timeBonus(currentFluteBonus);
                    this.timeLeft(this.timeLeft() * this.timeBonus());
                }
                else {
                    this.timeLeft(this.timeLeft() / this.timeBonus());
                    this.timeBonus(currentFluteBonus);
                    this.timeLeft(this.timeLeft() * this.timeBonus());
                }
            }
            else {
                this.timeLeft(this.timeLeft() / this.timeBonus());
                this.timeBonus(currentFluteBonus);
            }
        }
    }
    /**
     * Handles the click event in the dungeon view
     */
    static handleClick() {
        if (DungeonRunner.fighting() && !DungeonBattle.catching()) {
            DungeonBattle.clickAttack();
        }
        else if (DungeonRunner.map.currentTile().type() === GameConstants.DungeonTile.entrance) {
            DungeonRunner.dungeonLeave();
        }
        else if (DungeonRunner.map.currentTile().type() === GameConstants.DungeonTile.chest) {
            DungeonRunner.openChest();
        }
        else if (DungeonRunner.map.currentTile().type() === GameConstants.DungeonTile.boss && !DungeonRunner.fightingBoss()) {
            DungeonRunner.startBossFight();
        }
        else if (DungeonRunner.map.currentTile().type() === GameConstants.DungeonTile.ladder) {
            DungeonRunner.nextFloor();
        }
    }
    static openChest() {
        if (DungeonRunner.map.currentTile().type() !== GameConstants.DungeonTile.chest) {
            return;
        }
        GameHelper.incrementObservable(DungeonRunner.chestsOpened);
        DungeonRunner.chestsOpenedPerFloor[DungeonRunner.map.playerPosition().floor]++;
        const clears = App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(DungeonRunner.dungeon.name)]();
        const tier = DungeonRunner.dungeon.getRandomLootTier(clears, player.highestRegion());
        const loot = DungeonRunner.dungeon.getRandomLoot(tier);
        let amount = loot.amount || 1;
        const tierWeight = {
            common: 4,
            rare: 3,
            epic: 2,
            legendary: 1,
            mythic: 0,
        }[tier];
        if (EffectEngineRunner.isActive(GameConstants.BattleItemType.Dowsing_machine)()) {
            // Decreasing chance for rarer items (62.5% → 12.5%)
            const magnetChance = 0.5 / (4 / (tierWeight + 1));
            if (Rand.chance(magnetChance)) {
                // Gain more items in higher regions
                amount += Math.max(1, Math.round(Math.max(tierWeight, 2) / 8 * (GameConstants.getDungeonRegion(DungeonRunner.dungeon.name) + 1)));
            }
        }
        DungeonRunner.gainLoot(loot.loot, amount, tierWeight);
        DungeonRunner.map.currentTile().type(GameConstants.DungeonTile.empty);
        DungeonRunner.map.currentTile().calculateCssClass();
        if (DungeonRunner.chestsOpenedPerFloor[DungeonRunner.map.playerPosition().floor] == Math.floor(DungeonRunner.map.floorSizes[DungeonRunner.map.playerPosition().floor] / 3)) {
            DungeonRunner.map.showChestTiles();
        }
        if (DungeonRunner.chestsOpenedPerFloor[DungeonRunner.map.playerPosition().floor] == Math.ceil(DungeonRunner.map.floorSizes[DungeonRunner.map.playerPosition().floor] / 2)) {
            DungeonRunner.map.showAllTiles();
        }
    }
    static gainLoot(input, amount, weight) {
        if (typeof BerryType[input] == 'number') {
            DungeonRunner.lootNotification(input, amount, weight, FarmController.getBerryImage(BerryType[GameConstants.humanifyString(input)]));
            return App.game.farming.gainBerry(BerryType[GameConstants.humanifyString(input)], amount, false);
        }
        else if (ItemList[input] instanceof PokeballItem) {
            DungeonRunner.lootNotification(input, amount, weight, ItemList[input].image);
            return App.game.pokeballs.gainPokeballs(GameConstants.Pokeball[GameConstants.humanifyString(input)], amount, false);
        }
        else if (UndergroundItems.getByName(input) instanceof UndergroundItem) {
            DungeonRunner.lootNotification(input, amount, weight, UndergroundItems.getByName(input).image);
            return Underground.gainMineItem(UndergroundItems.getByName(input).id, amount);
        }
        else if (PokemonHelper.getPokemonByName(input).name != 'MissingNo.') {
            const image = `assets/images/pokemon/${PokemonHelper.getPokemonByName(input).id}.png`;
            DungeonRunner.lootNotification(input, amount, weight, image);
            DungeonRunner.fightingLootEnemy = true;
            return DungeonBattle.generateNewLootEnemy(input);
        }
        else if (ItemList[input] instanceof EvolutionStone || EggItem || BattleItem || Vitamin || EnergyRestore) {
            if (ItemList[input] instanceof Vitamin) {
                GameHelper.incrementObservable(App.game.statistics.totalProteinsObtained, amount);
            }
            DungeonRunner.lootNotification(input, amount, weight, ItemList[input].image);
            return player.gainItem(ItemList[input].name, amount);
        }
        else {
            DungeonRunner.lootNotification(input, amount, weight, ItemList[input].image);
            return player.gainItem(ItemList.xAttack, 1);
        }
    }
    static lootNotification(input, amount, weight, image) {
        const multiple = (amount < 2) ? '' : 's';
        let message = `Found ${amount} × <img src="${image}" height="24px"/> ${GameConstants.camelCaseToString(GameConstants.humanifyString(input))}${multiple} in a dungeon chest.`;
        let type = NotificationConstants.NotificationOption.success;
        let setting = NotificationConstants.NotificationSetting.Dungeons.common_dungeon_item_found;
        if (typeof BerryType[input] == 'number') {
            const berryPlural = (amount === 1) ? 'Berry' : 'Berries';
            message = `Found ${Math.floor(amount)} × <img src="${image}" height="24px"/> ${GameConstants.humanifyString(input)} ${berryPlural} in a dungeon chest.`;
        }
        if (ItemList[input] instanceof PokeballItem) {
            message = `Found ${amount} × <img src="${image}" height ="24px"/> ${ItemList[input].displayName}${multiple} in a dungeon chest.`;
        }
        else if (PokemonHelper.getPokemonByName(input).name != 'MissingNo.') {
            message = `Encountered ${GameHelper.anOrA(input)} <img src="${image}" height="40px"/> ${GameConstants.humanifyString(input)} in a dungeon chest.`;
        }
        if (weight <= 2) {
            setting = NotificationConstants.NotificationSetting.Dungeons.rare_dungeon_item_found;
            if (weight <= 0.5) {
                type = NotificationConstants.NotificationOption.danger;
            }
            else {
                type = NotificationConstants.NotificationOption.warning;
            }
        }
        return Notifier.notify({
            message: message,
            type: type,
            setting: setting,
        });
    }
    static startBossFight() {
        if (DungeonRunner.map.currentTile().type() !== GameConstants.DungeonTile.boss || DungeonRunner.fightingBoss()) {
            return;
        }
        DungeonRunner.fightingBoss(true);
        DungeonBattle.generateNewBoss();
    }
    static nextFloor() {
        DungeonRunner.map.moveToCoordinates(Math.floor(DungeonRunner.map.floorSizes[DungeonRunner.map.playerPosition().floor + 1] / 2), DungeonRunner.map.floorSizes[DungeonRunner.map.playerPosition().floor + 1] - 1, DungeonRunner.map.playerPosition().floor + 1);
        DungeonRunner.map.playerPosition.notifySubscribers();
        DungeonRunner.timeLeft(DungeonRunner.timeLeft() + GameConstants.DUNGEON_LADDER_BONUS);
        DungeonRunner.map.playerMoved(false);
    }
    static dungeonLeave(shouldConfirm = Settings.getSetting('confirmLeaveDungeon').observableValue()) {
        return __awaiter(this, void 0, void 0, function* () {
            if (DungeonRunner.map.currentTile().type() !== GameConstants.DungeonTile.entrance || DungeonRunner.dungeonFinished() || !DungeonRunner.map.playerMoved()) {
                return;
            }
            if (!shouldConfirm || (yield Notifier.confirm({
                title: 'Dungeon',
                message: 'Leave the dungeon?\n\nCurrent progress will be lost, but you will keep any items obtained from chests.',
                type: NotificationConstants.NotificationOption.warning,
                confirm: 'Leave',
                timeout: 1 * GameConstants.MINUTE,
            }))) {
                DungeonRunner.dungeonFinished(true);
                DungeonRunner.fighting(false);
                DungeonRunner.fightingBoss(false);
                MapHelper.moveToTown(DungeonRunner.dungeon.name);
            }
        });
    }
    static dungeonLost() {
        if (!DungeonRunner.dungeonFinished()) {
            DungeonRunner.dungeonFinished(true);
            DungeonRunner.fighting(false);
            DungeonRunner.fightingBoss(false);
            MapHelper.moveToTown(DungeonRunner.dungeon.name);
            Notifier.notify({
                message: 'You could not complete the dungeon in time.',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    static dungeonWon() {
        if (!DungeonRunner.dungeonFinished()) {
            DungeonRunner.dungeonFinished(true);
            if (!App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(DungeonRunner.dungeon.name)]()) {
                DungeonRunner.dungeon.rewardFunction();
            }
            GameHelper.incrementObservable(App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(DungeonRunner.dungeon.name)]);
            MapHelper.moveToTown(DungeonRunner.dungeon.name);
            Notifier.notify({
                message: 'You have successfully completed the dungeon.',
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Dungeons.dungeon_complete,
            });
        }
    }
    static dungeonCompleted(dungeon, includeShiny) {
        const possiblePokemon = dungeon.allAvailablePokemon();
        return RouteHelper.listCompleted(possiblePokemon, includeShiny);
    }
    static isAchievementsComplete(dungeon) {
        const dungeonIndex = GameConstants.getDungeonIndex(dungeon.name);
        return AchievementHandler.achievementList.every(achievement => {
            return !(achievement.property instanceof ClearDungeonRequirement && achievement.property.dungeonIndex === dungeonIndex && !achievement.isCompleted());
        });
    }
    static isThereQuestAtLocation(dungeon) {
        return App.game.quests.currentQuests().some(q => {
            return q instanceof DefeatDungeonQuest && q.dungeon == dungeon.name;
        });
    }
    static hasEnoughTokens() {
        return App.game.wallet.hasAmount(new Amount(DungeonRunner.dungeon.tokenCost, GameConstants.Currency.dungeonToken));
    }
    static dungeonLevel() {
        return PokemonFactory.routeLevel(this.dungeon.difficultyRoute, player.region);
    }
}
DungeonRunner.timeLeft = ko.observable(GameConstants.DUNGEON_TIME);
DungeonRunner.timeLeftPercentage = ko.observable(100);
DungeonRunner.timeBonus = ko.observable(1);
DungeonRunner.fighting = ko.observable(false);
DungeonRunner.chestsOpened = ko.observable(0);
DungeonRunner.encountersWon = ko.observable(0);
DungeonRunner.fightingBoss = ko.observable(false);
DungeonRunner.defeatedBoss = ko.observable(false);
DungeonRunner.dungeonFinished = ko.observable(false);
DungeonRunner.timeLeftSeconds = ko.pureComputed(() => {
    return (Math.ceil(DungeonRunner.timeLeft() / 100) / 10).toFixed(1);
});
class DungeonTile {
    constructor(type) {
        this._isVisible = false;
        this._isVisited = false;
        this._hasPlayer = false;
        this.type = ko.observable(type);
        this.cssClass = ko.observable('');
        this.calculateCssClass();
    }
    get isVisible() {
        return this._isVisible;
    }
    set isVisible(val) {
        this._isVisible = val;
        this.calculateCssClass();
    }
    get isVisited() {
        return this._isVisited;
    }
    set isVisited(val) {
        this._isVisited = val;
        this.calculateCssClass();
    }
    get hasPlayer() {
        return this._hasPlayer;
    }
    set hasPlayer(val) {
        this._hasPlayer = val;
        this.calculateCssClass();
    }
    calculateCssClass() {
        if (!this.isVisible) {
            this.cssClass('tile tile-invisible');
            return;
        }
        if (this.hasPlayer) {
            this.cssClass('tile tile-player');
            return;
        }
        // Base tile class
        const css = ['tile'];
        // If player visited tile add the class
        if (this.isVisited) {
            css.push('tile-visited');
        }
        // Add the tile type class
        css.push(`tile-${GameConstants.DungeonTile[this.type()]}`);
        // Join all the classes
        this.cssClass(css.join(' '));
    }
}
class Point {
    constructor(x, y, floor = 0) {
        this.x = x;
        this.y = y;
        this.floor = floor;
    }
}
class EffectEngineRunner {
    static initialize(multiplier) {
        GameHelper.enumStrings(GameConstants.BattleItemType).forEach((itemName) => {
            const item = ItemList[itemName];
            if (item.multiplierType) {
                multiplier.addBonus(item.multiplierType, () => this.isActive(itemName)() ? item.multiplyBy : 1);
            }
        });
    }
    static tick() {
        this.counter = 0;
        const timeToReduce = 1;
        for (const itemName in GameConstants.BattleItemType) {
            const timeRemaining = player.effectList[itemName]();
            if (timeRemaining > 0) {
                player.effectList[itemName](Math.max(0, timeRemaining - timeToReduce));
                this.updateFormattedTimeLeft(itemName);
            }
            if (player.effectList[itemName]() == 5) {
                Notifier.notify({
                    message: `The ${GameConstants.humanifyString(itemName)}'s effect is about to wear off!`,
                    type: NotificationConstants.NotificationOption.warning,
                    sound: NotificationConstants.NotificationSound.General.battle_item_timer,
                    setting: NotificationConstants.NotificationSetting.Items.battle_item_timer,
                });
            }
        }
    }
    static incrementMultiplier() {
        this.multIndex((this.multIndex() + 1) % this.multipliers.length);
    }
    static decrementMultiplier() {
        this.multIndex((this.multIndex() + this.multipliers.length - 1) % this.multipliers.length);
    }
    static getEffect(itemName) {
        if (!player) {
            return 0;
        }
        return player.effectList[itemName]();
    }
    static addEffect(itemName, amount) {
        player.effectList[itemName](Math.max(0, player.effectList[itemName]() + (GameConstants.ITEM_USE_TIME * amount)));
        this.updateFormattedTimeLeft(itemName);
    }
    static updateFormattedTimeLeft(itemName) {
        const times = GameConstants.formatTime(player.effectList[itemName]()).split(':');
        if (+times[0] > 99) {
            return player.effectTimer[itemName]('99h+');
        }
        else if (+times[0] > 0) {
            return player.effectTimer[itemName](`${+times[0]}h`);
        }
        times.shift();
        player.effectTimer[itemName](times.join(':'));
    }
    static getDungeonTokenMultiplier() {
        return this.isActive(GameConstants.BattleItemType.Token_collector)() ? 1.5 : 1;
    }
    static isActive(itemName) {
        return ko.pureComputed(() => {
            if (!player) {
                return false;
            }
            return !!player.effectList[itemName]();
        });
    }
}
EffectEngineRunner.counter = 0;
EffectEngineRunner.multipliers = ['×1', '×10', '×100', '×1000', 'All'];
EffectEngineRunner.multIndex = ko.observable(0);
EffectEngineRunner.amountToUse = ko.pureComputed(() => {
    // Either the digits specified, or All (Infinity)
    return Number(EffectEngineRunner.multipliers[EffectEngineRunner.multIndex()].replace(/\D/g, '')) || Infinity;
});
/// <reference path="../../declarations/enums/BerryType.d.ts"/>
/// <reference path="../../declarations/enums/FlavorType.d.ts"/>
/// <reference path="../../declarations/enums/BerryColor.d.ts"/>
class Berry {
    constructor(type, growthTime, harvestAmount, replantRate, farmValue, exp, flavors, color, description, aura, wander) {
        this.type = type;
        this.growthTime = growthTime;
        this.harvestAmount = harvestAmount;
        this.replantRate = replantRate;
        this.farmValue = farmValue;
        this.exp = exp;
        this.color = color;
        this.description = description;
        this.aura = aura;
        this.flavors = [];
        for (let i = 0; i < 5; i++) {
            this.flavors.push({ type: i, value: flavors[i] });
        }
        this.wander = wander ? Berry.baseWander.concat(wander) : Berry.baseWander;
    }
    get descriptionHTML() {
        return this.description.join('<br/>');
    }
}
Berry.baseWander = [
    'Tangela', 'Scyther',
    'Pineco', 'Heracross',
    'Volbeat', 'Illumise',
    'Burmy (Plant)', 'Combee', 'Cherubi',
    'Sewaddle', 'Karrablast',
    'Scatterbug',
    'Cutiefly', 'Bounsweet',
    'Blipbug', 'Gossifleur',
];
class BerryDeal {
    constructor(berry, berryAmount, item, itemAmount) {
        this.berries = [];
        berry.forEach((berry, idx) => {
            this.berries.push({ berryType: berry, amount: berryAmount[idx] });
        });
        this.item = { itemType: item, amount: itemAmount };
    }
    static getDeals(town) {
        return BerryDeal.list[town];
    }
    static randomBerry(berryList) {
        return SeededRand.fromArray(berryList);
    }
    static randomBattleItem() {
        const battleItem = SeededRand.fromArray(GameHelper.enumStrings(GameConstants.BattleItemType));
        return ItemList[battleItem];
    }
    static randomEvoItem() {
        const evoItem = SeededRand.fromArray(GameHelper.enumStrings(GameConstants.StoneType).filter(name => !(['None', 'Black_DNA', 'White_DNA', 'Solar_light', 'Lunar_light', 'Black_mane_hair', 'White_mane_hair']).includes(name)));
        return ItemList[evoItem];
    }
    static randomUndergroundItem() {
        return SeededRand.fromArray(UndergroundItems.list);
    }
    static randomPokeballDeal() {
        const firstGen = Farming.getGeneration(0);
        const secondGen = Farming.getGeneration(1);
        const thirdGen = Farming.getGeneration(2);
        return SeededRand.fromArray([
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
            ], ItemList.Fastball, 1),
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
            ], ItemList.Quickball, 1),
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
            ], ItemList.Timerball, 1),
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
            ], ItemList.Duskball, 1),
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
                this.randomBerry(thirdGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
                SeededRand.intBetween(5, 10),
            ], ItemList.Luxuryball, 1),
        ]);
    }
    static generateDeals(date) {
        SeededRand.seedWithDate(date);
        const berryMasterTowns = [GameConstants.BerryTraderLocations['Goldenrod City'], GameConstants.BerryTraderLocations['Mauville City'], GameConstants.BerryTraderLocations['Hearthome City'], GameConstants.BerryTraderLocations['Pinkan Pokémon Reserve']];
        // Removing old deals
        for (const town of berryMasterTowns) {
            if (!BerryDeal.list[town]) {
                BerryDeal.list[town] = ko.observableArray();
            }
            else {
                BerryDeal.list[town].removeAll();
            }
        }
        BerryDeal.list[GameConstants.BerryTraderLocations['Goldenrod City']].push(...this.generateGoldenrodDeals());
        BerryDeal.list[GameConstants.BerryTraderLocations['Mauville City']].push(...this.generateMauvilleDeals());
        BerryDeal.list[GameConstants.BerryTraderLocations['Pinkan Pokémon Reserve']].push(...this.generatePinkanDeals());
        BerryDeal.list[GameConstants.BerryTraderLocations['Hearthome City']].push(...this.generateHearthomeDeals());
    }
    static generateGoldenrodDeals() {
        const firstGen = Farming.getGeneration(0);
        const secondGen = Farming.getGeneration(1);
        const thirdGen = Farming.getGeneration(2);
        const list = [];
        list.push(new BerryDeal([
            this.randomBerry(firstGen),
            this.randomBerry(secondGen),
        ], [
            SeededRand.intBetween(30, 70),
            SeededRand.intBetween(10, 30),
        ], this.randomBattleItem(), SeededRand.intBetween(3, 7)));
        list.push(new BerryDeal([
            this.randomBerry(firstGen),
            this.randomBerry(secondGen),
            this.randomBerry(thirdGen),
        ], [
            SeededRand.intBetween(70, 130),
            SeededRand.intBetween(30, 70),
            SeededRand.intBetween(10, 30),
        ], this.randomEvoItem(), SeededRand.intBetween(1, 3)));
        list.push(this.randomPokeballDeal());
        return list;
    }
    static generateMauvilleDeals() {
        const thirdGen = Farming.getGeneration(2);
        const fourthGen = Farming.getGeneration(3);
        const temp = [];
        const maxTries = 30;
        let i = 0;
        while (i < maxTries && temp.length < 3) {
            const deal = new BerryDeal([
                this.randomBerry(thirdGen),
                this.randomBerry(fourthGen),
            ], [
                SeededRand.intBetween(30, 70),
                SeededRand.intBetween(10, 30),
            ], this.randomUndergroundItem(), SeededRand.intBetween(1, 3));
            if (temp.every(madeDeal => madeDeal.item.name !== deal.item.itemType.name)) {
                temp.push(deal);
            }
            i++;
        }
        return temp;
    }
    static generateHearthomeDeals() {
        const firstGen = Farming.getGeneration(0);
        const secondGen = Farming.getGeneration(1);
        const thirdGen = Farming.getGeneration(2);
        const fourthGen = Farming.getGeneration(3);
        const fifthGen = Farming.getGeneration(4);
        const list = [];
        list.push(new BerryDeal([
            this.randomBerry(firstGen),
            this.randomBerry(secondGen),
            this.randomBerry(thirdGen),
            this.randomBerry(fourthGen),
            this.randomBerry(fifthGen),
        ], [
            SeededRand.intBetween(500, 1000),
            SeededRand.intBetween(200, 500),
            SeededRand.intBetween(100, 200),
            SeededRand.intBetween(50, 100),
            SeededRand.intBetween(10, 50),
        ], ItemList.Masterball, 1));
        list.push(new BerryDeal([
            this.randomBerry(fourthGen),
            this.randomBerry(fifthGen),
        ], [
            SeededRand.intBetween(50, 100),
            SeededRand.intBetween(10, 50),
        ], ItemList.Protein, 1));
        return [SeededRand.fromArray(list)];
    }
    static generatePinkanDeals() {
        const list = [];
        list.push(new BerryDeal([BerryType.Pinkan], [SeededRand.intBetween(40, 60)], ItemList['Pinkan Arbok'], 1));
        list.push(new BerryDeal([BerryType.Pinkan], [SeededRand.intBetween(20, 40)], ItemList['Pinkan Oddish'], 1));
        list.push(new BerryDeal([BerryType.Pinkan], [SeededRand.intBetween(40, 60)], ItemList['Pinkan Poliwhirl'], 1));
        list.push(new BerryDeal([BerryType.Pinkan], [SeededRand.intBetween(20, 40)], ItemList['Pinkan Geodude'], 1));
        list.push(new BerryDeal([BerryType.Pinkan], [SeededRand.intBetween(80, 100)], ItemList['Pinkan Weezing'], 1));
        list.push(new BerryDeal([BerryType.Pinkan], [SeededRand.intBetween(80, 100)], ItemList['Pinkan Scyther'], 1));
        list.push(new BerryDeal([BerryType.Pinkan], [SeededRand.intBetween(80, 100)], ItemList['Pinkan Electabuzz'], 1));
        return list;
    }
    static canUse(town, i) {
        var _a;
        const deal = (_a = BerryDeal.list[town]) === null || _a === void 0 ? void 0 : _a.peek()[i];
        if (!deal) {
            return false;
        }
        else {
            return deal.berries.every((value) => App.game.farming.berryList[value.berryType]() >= value.amount);
        }
    }
    static use(town, i, tradeTimes = 1) {
        var _a;
        const deal = (_a = BerryDeal.list[town]) === null || _a === void 0 ? void 0 : _a.peek()[i];
        if (BerryDeal.canUse(town, i)) {
            const trades = deal.berries.map(berry => {
                const amt = App.game.farming.berryList[berry.berryType]();
                const maxTrades = Math.floor(amt / berry.amount);
                return maxTrades;
            });
            const maxTrades = trades.reduce((a, b) => Math.min(a, b), tradeTimes);
            deal.berries.forEach((value) => GameHelper.incrementObservable(App.game.farming.berryList[value.berryType], -value.amount * maxTrades));
            if (deal.item.itemType instanceof UndergroundItem) {
                Underground.gainMineItem(deal.item.itemType.id, deal.item.amount * maxTrades);
            }
            else {
                deal.item.itemType.gain(deal.item.amount * maxTrades);
            }
            GameHelper.incrementObservable(App.game.statistics.berryDailyDealTrades);
            const amount = deal.item.amount * maxTrades;
            const multiple = amount > 1 ? 's' : '';
            Notifier.notify({
                message: `You traded for ${amount.toLocaleString('en-US')} × <img src="${deal.item.itemType.image}" height="24px"/> ${GameConstants.humanifyString(deal.item.itemType.displayName)}${multiple}.`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Items.item_bought,
            });
        }
    }
}
BerryDeal.list = {};
/// <reference path="../../declarations/enums/MulchType.d.ts"/>
class FarmController {
    static initialize() {
        this.berryListFiltered(Array.from(Array(GameHelper.enumLength(BerryType) - 1).keys()));
        this.numberOfTabs = ko.pureComputed(() => {
            return Math.floor(App.game.farming.highestUnlockedBerry() / this.BERRIES_PER_PAGE);
        });
        this.berryListEnd = ko.pureComputed(() => {
            var _a;
            const highestMutation = App.game.farming.mutations.slice().sort((a, b) => b.mutatedBerry - a.mutatedBerry).find(mut => mut._hintSeen() && !App.game.farming.unlockedBerries[mut.mutatedBerry]());
            const highestMutationHint = (_a = highestMutation === null || highestMutation === void 0 ? void 0 : highestMutation.mutatedBerry) !== null && _a !== void 0 ? _a : 0;
            return Math.max(App.game.farming.highestUnlockedBerry(), highestMutationHint);
        });
        this.navigateIndex(0);
    }
    static openFarmModal() {
        if (App.game.farming.canAccess()) {
            $('#farmModal').modal('show');
        }
        else {
            Notifier.notify({
                message: `You need the ${GameConstants.humanifyString(KeyItemType[KeyItemType.Wailmer_pail])} to access this location.\n<i>Clear Route 13 or 15 first.</i>`,
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static getImage(index) {
        const plot = App.game.farming.plotList[index];
        if (plot.berry === BerryType.None) {
            return '';
        }
        if (plot.stage() === PlotStage.Seed) {
            return 'assets/images/farm/AllTreeSeed.png';
        }
        else if (plot.stage() === PlotStage.Sprout) {
            return 'assets/images/farm/AllTreeSprout.png';
        }
        return `assets/images/farm/${BerryType[plot.berry]}Tree${PlotStage[plot.stage()]}.png`;
    }
    static calculateCssClass() {
        if (this.selectedPlotSafeLock()) {
            return 'PlotSafeLockSelected';
        }
        if (this.selectedShovel()) {
            return 'ShovelSelected';
        }
        if (this.selectedMulchShovel()) {
            return 'MulchShovelSelected';
        }
        if (this.berryListVisible()) {
            return 'BerrySelected';
        }
        return 'MulchSelected';
    }
    static calcMulchClass(plot) {
        if (plot.mulch === MulchType.None) {
            return '';
        }
        return MulchType[plot.mulch];
    }
    static plotClick(index, event) {
        const plot = App.game.farming.plotList[index];
        if (event.shiftKey) {
            this.shiftTogglePlotSafeLock(plot, index);
        }
        else {
            this.handleClickActions(plot, index);
        }
    }
    static shiftTogglePlotSafeLock(plot, index) {
        if (!plot.isUnlocked) {
            return;
        }
        App.game.farming.togglePlotSafeLock(index);
    }
    static toggleAllPlotsLocked(lock) {
        App.game.farming.plotList.forEach((plot, index) => {
            if (plot.isUnlocked && ((lock && !plot.isSafeLocked) || (!lock && plot.isSafeLocked))) {
                App.game.farming.togglePlotSafeLock(index);
            }
        });
    }
    static handleClickActions(plot, index) {
        // Unlocking Plot
        if (!plot.isUnlocked) {
            App.game.farming.unlockPlot(index);
            // Handle Safe Locking Plot
        }
        else if (this.selectedPlotSafeLock()) {
            App.game.farming.togglePlotSafeLock(index);
            // Handle Shovel
        }
        else if (this.selectedShovel()) {
            App.game.farming.shovel(index);
            //Handle Mulch Shovel
        }
        else if (this.selectedMulchShovel()) {
            App.game.farming.shovelMulch(index);
            // Handle Berries
        }
        else if (this.berryListVisible()) {
            if (plot.isEmpty()) {
                App.game.farming.plant(index, this.selectedBerry());
            }
            else {
                App.game.farming.harvest(index);
            }
            // Handle Mulches
        }
        else {
            App.game.farming.addMulch(index, this.selectedMulch(), this.getAmount());
        }
    }
    static mulchAll() {
        if (!Settings.getSetting('confirmBeformeMulchingAllPlots').observableValue()) {
            return App.game.farming.mulchAll(FarmController.selectedMulch(), this.getAmount());
        }
        Notifier.confirm({
            title: 'Mulch All',
            message: `Are you sure you want to use ${this.getAmount()} ${MulchType[FarmController.selectedMulch()].replace('_', ' ')} on all plots?`,
            type: NotificationConstants.NotificationOption.info,
            confirm: 'Mulch',
        }).then(confirmed => {
            if (confirmed) {
                App.game.farming.mulchAll(FarmController.selectedMulch(), this.getAmount());
            }
        });
    }
    static navigateRight() {
        if (FarmController.navigateIndex() < FarmController.numberOfTabs()) {
            FarmController.navigateIndex(FarmController.navigateIndex() + 1);
            this.selectedBerry(this.getBerryListWithIndex()[0]);
        }
    }
    static navigateLeft() {
        if (FarmController.navigateIndex() > 0) {
            FarmController.navigateIndex(FarmController.navigateIndex() - 1);
            this.selectedBerry(this.getBerryListWithIndex()[0]);
        }
    }
    static getBerryListWithIndex() {
        return this.berryListFiltered().slice(this.navigateIndex() * this.BERRIES_PER_PAGE, (this.navigateIndex() * this.BERRIES_PER_PAGE) + this.BERRIES_PER_PAGE);
    }
    static getUnlockedBerryList() {
        return this.berryListFiltered().filter((berry) => berry <= this.berryListEnd());
    }
    static getAmount() {
        return Number(this.multipliers[this.multIndex()].replace(/\D/g, '')) || Infinity;
    }
    static incrementMultiplier() {
        this.multIndex((this.multIndex() + 1) % this.multipliers.length);
    }
    static decrementMultiplier() {
        this.multIndex((this.multIndex() + this.multipliers.length - 1) % this.multipliers.length);
    }
    static getBackgroundColor(index) {
        if (App.game.farming.unlockedBerries[index]()) {
            return GameConstants.BerryColor[App.game.farming.berryData[index].color];
        }
        else if (FarmController.getHint(index, true) !== '') {
            return GameConstants.BerryColor[6];
        }
        else {
            return GameConstants.BerryColor[7];
        }
    }
    static getBerryImage(index) {
        return `assets/images/items/berry/${BerryType[index]}.png`;
    }
    static getHint(index, checkSeen = false, checkUnlocked = false) {
        if (checkUnlocked && App.game.farming.unlockedBerries[index]()) {
            return '';
        }
        const mutation = App.game.farming.mutations.find(mutation => mutation.mutatedBerry === index && mutation.showHint);
        if (mutation) {
            if (checkSeen && !mutation.hintSeen) {
                return '';
            }
            return mutation.hint;
        }
        return '';
    }
}
FarmController.navigateIndex = ko.observable(0);
FarmController.berryListFiltered = ko.observableArray([]);
FarmController.farmingModalTabSelected = ko.observable('berryFarmView');
FarmController.selectedBerry = ko.observable(BerryType.Cheri);
FarmController.selectedMulch = ko.observable(MulchType.Boost_Mulch);
FarmController.selectedShovel = ko.observable(false);
FarmController.selectedMulchShovel = ko.observable(false);
FarmController.selectedPlotSafeLock = ko.observable(false);
FarmController.berryListVisible = ko.observable(true);
FarmController.multipliers = ['×1', '×10', '×100', '×1000', 'All'];
FarmController.multIndex = ko.observable(0);
FarmController.BERRIES_PER_PAGE = 8;
FarmController.additionalInfoTooltip = ko.pureComputed(() => {
    const tooltip = [];
    // External Auras
    App.game.farming.externalAuras.forEach((aura, idx) => {
        if (typeof aura === 'undefined') {
            return;
        }
        if (aura() === 1) {
            return;
        }
        tooltip.push(`${AuraType[idx]}: ${aura().toFixed(2)}x`);
    });
    // Adding header if necessary
    if (tooltip.length) {
        tooltip.unshift('<u>External Auras</u>');
    }
    return tooltip.join('<br>');
});
const FarmHandSkills = [
    'energy',
    'efficiency',
    'accuracy',
    'cost',
];
var FarmHandSpeeds;
(function (FarmHandSpeeds) {
    FarmHandSpeeds[FarmHandSpeeds["Fastest"] = 0] = "Fastest";
    FarmHandSpeeds[FarmHandSpeeds["Faster"] = 1] = "Faster";
    FarmHandSpeeds[FarmHandSpeeds["Fast"] = 2] = "Fast";
    FarmHandSpeeds[FarmHandSpeeds["AboveAverage"] = 3] = "AboveAverage";
    FarmHandSpeeds[FarmHandSpeeds["Average"] = 4] = "Average";
    FarmHandSpeeds[FarmHandSpeeds["BelowAverage"] = 5] = "BelowAverage";
    FarmHandSpeeds[FarmHandSpeeds["Slow"] = 6] = "Slow";
    FarmHandSpeeds[FarmHandSpeeds["Slower"] = 7] = "Slower";
    FarmHandSpeeds[FarmHandSpeeds["Slowest"] = 8] = "Slowest";
    FarmHandSpeeds[FarmHandSpeeds["SnailPaced"] = 9] = "SnailPaced";
    FarmHandSpeeds[FarmHandSpeeds["Lazy"] = 10] = "Lazy";
})(FarmHandSpeeds || (FarmHandSpeeds = {}));
/*
TODO:
Work in levels/experience somehow
Use accuracy to decide if they plant the right berry or plant a berry at all (still use up energy?)
Use accuracy to decide if they harvest a berry by accident? (still use up energy?)
*/
var FarmHandBerryType;
(function (FarmHandBerryType) {
    FarmHandBerryType[FarmHandBerryType["Random"] = -3] = "Random";
    FarmHandBerryType[FarmHandBerryType["Replant"] = -2] = "Replant";
})(FarmHandBerryType || (FarmHandBerryType = {}));
const FarmHandBerryTypes = Object.assign(Object.assign({}, FarmHandBerryType), BerryType);
class FarmHand {
    // public level: number;
    // public experience: number;
    constructor(name, maxEnergy, // 10 - 100
    efficiency, // 1 - 50?
    speed, accuracy, // 0 - 10 (80% - 100%)
    cost, // 0 - 10? (can go higher if needed)
    unlockRequirement) {
        this.name = name;
        this.maxEnergy = maxEnergy;
        this.efficiency = efficiency;
        this.speed = speed;
        this.accuracy = accuracy;
        this.unlockRequirement = unlockRequirement;
        this.defaults = {
            focus: BerryType.None,
            shouldHarvest: false,
            workTicks: 0,
            costTicks: 0,
            energy: 0,
            hired: false,
            plots: [],
            name: undefined,
        };
        // Maximum Efficiency value
        this.maxEfficiency = 50;
        // Negative value so they are charged on the first tick and work on the first tick
        this.workTicks = ko.observable(-GameConstants.TICK_TIME).extend({ numeric: 0 });
        this.costTicks = ko.observable(-GameConstants.TICK_TIME).extend({ numeric: 0 });
        this.costTick = GameConstants.HOUR;
        this.cost = new Amount(+0, GameConstants.Currency.farmPoint);
        this.trainerSprite = 0;
        this.focus = ko.observable(BerryType.None);
        this.shouldHarvest = ko.observable(false).extend({ boolean: null });
        this.energy = ko.observable(0).extend({ numeric: 0 });
        this.hired = ko.observable(false).extend({ boolean: null });
        this.plots = ko.observableArray(new Array(GameConstants.FARM_PLOT_WIDTH * GameConstants.FARM_PLOT_HEIGHT).fill(0).map((v, i) => i));
        SeededRand.seed(parseInt(this.name, 36));
        this.trainerSprite = SeededRand.intBetween(0, 118);
        // Negative value so they are charged on the first tick and work on the first tick
        this.workTicks(-GameConstants.TICK_TIME);
        this.costTicks(-GameConstants.TICK_TIME);
        // Set initial energy to maximum energy
        this.energy(this.maxEnergy);
        // Calculate how much to charge the player in farm points
        this.cost = new Amount(+Math.pow(100, 1 + cost * 0.08).toPrecision(2), GameConstants.Currency.farmPoint);
        // Calculate how often they work
        this.workTick = this.calcWorkTick(this.speed);
        this.tooltip = ko.pureComputed(() => `<strong>${this.name}</strong><br/>
            Energy: ${this.energy()}/${this.maxEnergy}<br/>
            Work Cycle: ${GameConstants.formatTimeFullLetters((this.workTick - this.workTicks()) / 1000)}`);
    }
    calcWorkTick(speed) {
        speed = ((speed + 1) * 0.03) + 1;
        let time = Math.pow(GameConstants.MINUTE, speed);
        time -= time > 5 * GameConstants.MINUTE ? time % GameConstants.MINUTE : time % (30 * GameConstants.SECOND);
        return time;
    }
    isUnlocked() {
        var _a, _b;
        return (_b = (_a = this.unlockRequirement) === null || _a === void 0 ? void 0 : _a.isCompleted()) !== null && _b !== void 0 ? _b : true;
    }
    togglePlot(plotIndex) {
        const index = this.plots().findIndex(p => p == plotIndex);
        if (index >= 0) {
            this.plots.splice(index, 1);
        }
        else {
            this.plots.push(plotIndex);
        }
        this.plots.sort((a, b) => a - b);
    }
    hire() {
        // Negative value so they are charged on the first tick and work on the first tick
        this.workTicks(-GameConstants.TICK_TIME);
        this.costTicks(-GameConstants.TICK_TIME);
        // Check the player has enough Farm Points to hire this Farm Hand
        if (!App.game.wallet.hasAmount(this.cost)) {
            Notifier.notify({
                title: `[FARM HAND] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
                message: `You don't have enough Farm Points to hire me...\nCost: <img src="./assets/images/currency/farmPoint.svg" height="24px"/> ${this.cost.amount.toLocaleString('en-US')}`,
                type: NotificationConstants.NotificationOption.warning,
                timeout: 30 * GameConstants.SECOND,
            });
            return;
        }
        // Farm hand is hired
        this.hired(true);
        Notifier.notify({
            title: `[FARM HAND] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
            message: 'Thanks for hiring me,\nI won\'t let you down!',
            type: NotificationConstants.NotificationOption.success,
            timeout: 30 * GameConstants.SECOND,
        });
    }
    fire() {
        Notifier.notify({
            title: `[FARM HAND] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
            message: 'Thanks for the work.\nLet me know when you\'re hiring again!',
            type: NotificationConstants.NotificationOption.info,
            timeout: 30 * GameConstants.SECOND,
        });
        this.hired(false);
        return;
    }
    tick() {
        // If not hired and energy full, there's nothing to do
        if (!this.hired() && this.energy() >= this.maxEnergy) {
            return;
        }
        // Charge player when cost tick reached
        GameHelper.incrementObservable(this.costTicks, GameConstants.TICK_TIME);
        if (this.costTicks() % this.costTick < GameConstants.TICK_TIME) {
            this.costTicks(0);
            if (this.hired()) {
                this.charge();
            }
        }
        // Work/Restore energy when work ticks reached
        GameHelper.incrementObservable(this.workTicks, GameConstants.TICK_TIME);
        if (this.workTicks() % this.workTick < GameConstants.TICK_TIME) {
            this.workTicks(0);
            if (this.hired()) {
                this.work();
            }
            else {
                this.addEnergy();
            }
        }
    }
    work() {
        // Out of energy cannot work right now..
        if (!this.energy()) {
            this.addEnergy();
            return;
        }
        // flip this if they worked, otherwise restore energy points
        let worked = false;
        let workTimes = this.efficiency;
        // Harvesting berries
        if (this.shouldHarvest()) {
            let readyPlotIndex;
            do {
                readyPlotIndex = App.game.farming.plotList.findIndex((p, i) => p.isUnlocked && p.berry !== BerryType.None && p.stage() >= PlotStage.Berry && this.plots().includes(i) && !p.isSafeLocked);
                if (readyPlotIndex >= 0 && workTimes > 0) {
                    const berry = App.game.farming.plotList[readyPlotIndex].berry;
                    App.game.farming.harvest(readyPlotIndex);
                    workTimes--;
                    worked = true;
                    if (this.focus() == FarmHandBerryTypes.Replant) {
                        App.game.farming.plant(readyPlotIndex, berry);
                        workTimes--;
                    }
                }
            } while (readyPlotIndex >= 0 && workTimes > 0);
        }
        // Planting berries
        if (this.focus() != FarmHandBerryTypes.None) {
            let emptyPlotIndex;
            let berry;
            do {
                // Find empty plots
                emptyPlotIndex = App.game.farming.plotList.findIndex((p, i) => p.isUnlocked && p.berry == BerryType.None && this.plots().includes(i) && !p.isSafeLocked);
                // Plant the berry
                if (emptyPlotIndex >= 0 && workTimes > 0) {
                    // Plant the expected berry
                    switch (this.focus()) {
                        case FarmHandBerryTypes.Replant: // Re-plant last berry used
                            berry = App.game.farming.plotList[emptyPlotIndex].lastPlanted;
                            break;
                        case FarmHandBerryTypes.Random: // Plant a random berry
                            berry = Rand.fromArray(App.game.farming.farmHands.availableBerries().filter(b => b >= 0));
                            break;
                        default:
                            berry = this.focus();
                    }
                    // If we somehow didn't find a berry to use, just plant a Cheri..
                    berry = berry < 0 ? BerryType.Cheri : berry;
                    // Only plant and work if the player has a berry to plant
                    if (App.game.farming.hasBerry(berry)) {
                        App.game.farming.plant(emptyPlotIndex, berry);
                        workTimes--;
                        worked = true;
                    }
                }
            } while (emptyPlotIndex >= 0 && workTimes > 0 && App.game.farming.hasBerry(berry));
        }
        if (!worked) {
            this.addEnergy();
        }
        else {
            this.useEnergy();
        }
    }
    addEnergy(amt = 1) {
        // Only allow up to maximum value
        this.energy(Math.min(this.maxEnergy, this.energy() + amt));
    }
    useEnergy(amt = 1) {
        // Only allow to go down to 0
        this.energy(Math.max(0, this.energy() - amt));
    }
    charge() {
        // Charge the player if they can afford it, otherwise notify that they cannot
        if (!App.game.wallet.loseAmount(this.cost)) {
            Notifier.notify({
                title: `[FARM HAND] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
                message: `It looks like you are a little short on Farm Points right now...\nLet me know when you're hiring again!\nCost: <img src="./assets/images/currency/farmPoint.svg" height="24px"/> ${this.cost.amount.toLocaleString('en-US')}`,
                type: NotificationConstants.NotificationOption.danger,
                timeout: 30 * GameConstants.MINUTE,
            });
            this.hired(false);
            App.game.logbook.newLog(LogBookTypes.OTHER, `You ran out of Farm Points to pay Farm Hand ${this.name}!`);
            return;
        }
        // Charge the player for the hour
        Notifier.notify({
            title: `[FARM HAND] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
            message: `Here's your bill for the hour!\nCost: <img src="./assets/images/currency/farmPoint.svg" height="24px"/> ${this.cost.amount.toLocaleString('en-US')}`,
            type: NotificationConstants.NotificationOption.info,
            timeout: 30 * GameConstants.SECOND,
        });
    }
    toJSON() {
        const output = {
            focus: this.focus(),
            shouldHarvest: this.shouldHarvest(),
            workTicks: this.workTicks(),
            costTicks: this.costTicks(),
            energy: this.energy(),
            hired: this.hired(),
            plots: this.plots(),
            // It uses the name to look up the farmhand on load
            name: this.name,
        };
        // Don't save anything that is the default option
        Object.entries(output).forEach(([key, value]) => {
            if (value === this.defaults[key]) {
                delete output[key];
            }
        });
        return output;
    }
    fromJSON(json) {
        var _a, _b, _c, _d, _e, _g, _h;
        if (!json) {
            return;
        }
        this.focus((_a = json.focus) !== null && _a !== void 0 ? _a : this.defaults.focus);
        this.shouldHarvest((_b = json.shouldHarvest) !== null && _b !== void 0 ? _b : this.defaults.shouldHarvest);
        this.workTicks((_c = json.workTicks) !== null && _c !== void 0 ? _c : this.defaults.workTicks);
        this.costTicks((_d = json.costTicks) !== null && _d !== void 0 ? _d : this.defaults.costTicks);
        this.energy((_e = json.energy) !== null && _e !== void 0 ? _e : this.defaults.energy);
        this.hired((_g = json.hired) !== null && _g !== void 0 ? _g : this.defaults.hired);
        this.plots((_h = json.plots) !== null && _h !== void 0 ? _h : this.defaults.plots);
    }
}
class FarmHands {
    constructor() {
        this.MAX_HIRES = 3;
        this.requirement = new BerriesUnlockedRequirement(8);
        this.available = ko.pureComputed(() => FarmHands.list.filter(f => f.isUnlocked()));
        this.hired = ko.pureComputed(() => FarmHands.list.filter(f => f.hired()));
        this.availableBerries = ko.pureComputed(() => GameHelper.enumNumbers(FarmHandBerryTypes).filter(b => { var _a, _b; return ((_b = (_a = App.game.farming.unlockedBerries)[b]) === null || _b === void 0 ? void 0 : _b.call(_a)) || b < 0; }).sort((a, b) => a - b));
        this.canHire = ko.pureComputed(() => this.hired().length < this.MAX_HIRES);
    }
    static add(farmHand) {
        this.list.push(farmHand);
    }
    isUnlocked() {
        return this.requirement.isCompleted();
    }
    tick() {
        // run game tick for all hired farmhands
        FarmHands.list.forEach(f => f.hired() && f.tick());
    }
    toJSON() {
        return this.available().map(f => f.toJSON());
    }
    fromJSON(json) {
        if (!json || !json.length) {
            return;
        }
        FarmHands.list.forEach(f => {
            const data = json === null || json === void 0 ? void 0 : json.find(_f => _f.name == f.name);
            if (data) {
                f.fromJSON(data);
            }
        });
    }
}
FarmHands.list = [];
// Note: Gender-neutral names used as the trainer sprite is (seeded) randomly generated
FarmHands.add(new FarmHand('Alex', 10, 1, FarmHandSpeeds.Lazy, 1, 1, new BerriesUnlockedRequirement(8)));
FarmHands.add(new FarmHand('Logan', 15, 3, FarmHandSpeeds.Slowest, 2, 4, new BerriesUnlockedRequirement(16)));
FarmHands.add(new FarmHand('Joey', 10, 5, FarmHandSpeeds.Slow, 2, 5, new BerriesUnlockedRequirement(24)));
FarmHands.add(new FarmHand('Charlie', 30, 10, FarmHandSpeeds.BelowAverage, 7, 6, new BerriesUnlockedRequirement(32)));
FarmHands.add(new FarmHand('Bailey', 10, 12, FarmHandSpeeds.Average, 7, 7, new ItemOwnedRequirement('FarmHandBailey')));
FarmHands.add(new FarmHand('Kerry', 50, 16, FarmHandSpeeds.AboveAverage, 8, 8, new ItemOwnedRequirement('FarmHandKerry')));
FarmHands.add(new FarmHand('Riley', 70, 25, FarmHandSpeeds.Fast, 8, 10, new ItemOwnedRequirement('FarmHandRiley')));
FarmHands.add(new FarmHand('Jamie', 65, 5, FarmHandSpeeds.Faster, 9, 10, new ItemOwnedRequirement('FarmHandJamie')));
FarmHands.add(new FarmHand('Jessie', 100, 50, FarmHandSpeeds.Fastest, 10, 12, new BerriesUnlockedRequirement(56)));
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Feature.d.ts" />
class Farming {
    constructor(multiplier) {
        this.multiplier = multiplier;
        this.name = 'Farming';
        this.saveKey = 'farming';
        this.berryData = [];
        this.mutations = [];
        this.farmHands = new FarmHands();
        this.mutationCounter = 0;
        this.wanderCounter = 0;
        this.defaults = {
            berryList: Array(GameHelper.enumLength(BerryType) - 1).fill(0),
            unlockedBerries: Array(GameHelper.enumLength(BerryType) - 1).fill(false),
            mulchList: Array(GameHelper.enumLength(MulchType)).fill(0),
            plotList: new Array(GameConstants.FARM_PLOT_WIDTH * GameConstants.FARM_PLOT_HEIGHT).fill(null).map((value, index) => {
                const middle = Math.floor(GameConstants.FARM_PLOT_HEIGHT / 2) * GameConstants.FARM_PLOT_WIDTH + Math.floor(GameConstants.FARM_PLOT_WIDTH / 2);
                return new Plot(index === middle, BerryType.None, 0, MulchType.None, 0, index);
            }),
            shovelAmt: 0,
            mulchShovelAmt: 0,
        };
        this.berryList = this.defaults.berryList.map((v) => ko.observable(v));
        this.unlockedBerries = this.defaults.unlockedBerries.map((v) => ko.observable(v));
        this.mulchList = this.defaults.mulchList.map((v) => ko.observable(v));
        this.plotList = this.defaults.plotList;
        this.unlockedPlotCount = ko.observable(0);
        this.shovelAmt = ko.observable(this.defaults.shovelAmt);
        this.mulchShovelAmt = ko.observable(this.defaults.mulchShovelAmt);
        this.externalAuras = [];
        this.externalAuras[AuraType.Attract] = ko.pureComputed(() => this.multiplyPlotAuras(AuraType.Attract));
        this.externalAuras[AuraType.Egg] = ko.pureComputed(() => this.multiplyPlotAuras(AuraType.Egg));
        this.externalAuras[AuraType.Shiny] = ko.pureComputed(() => this.multiplyPlotAuras(AuraType.Shiny));
        this.externalAuras[AuraType.Roaming] = ko.pureComputed(() => this.multiplyPlotAuras(AuraType.Roaming));
        this.externalAuras[AuraType.Ev] = ko.pureComputed(() => this.multiplyPlotAuras(AuraType.Ev));
        this.multiplier.addBonus('shiny', () => this.externalAuras[AuraType.Shiny]());
        this.multiplier.addBonus('eggStep', () => this.externalAuras[AuraType.Egg]());
        this.multiplier.addBonus('roaming', () => this.externalAuras[AuraType.Roaming]());
        this.multiplier.addBonus('ev', () => this.externalAuras[AuraType.Ev]());
        this.highestUnlockedBerry = ko.pureComputed(() => {
            for (let i = GameHelper.enumLength(BerryType) - 2; i >= 0; i--) {
                if (this.unlockedBerries[i]()) {
                    return i;
                }
            }
            return 0;
        });
    }
    initialize() {
        //#region Berry Data
        //#region First Generation
        this.berryData[BerryType.Cheri] = new Berry(BerryType.Cheri, [5, 10, 20, 30, 60], 2, 0.5, 5, 1, [10, 0, 0, 0, 0], BerryColor.Red, ['This bright red Berry is very spicy and has a provocative flavor. It blooms with delicate, pretty flowers.'], undefined, ['Oricorio (Baile)']);
        this.berryData[BerryType.Chesto] = new Berry(BerryType.Chesto, [5, 15, 25, 40, 80], 3, 0.5, 6, 2, [0, 10, 0, 0, 0], BerryColor.Purple, ['This Berry\'s thick skin and fruit are very tough and dry-tasting. However, every bit of it can be eaten.'], undefined, ['Oricorio (Sensu)']);
        this.berryData[BerryType.Pecha] = new Berry(BerryType.Pecha, [10, 35, 50, 60, 120], 4, 0.5, 7, 3, [0, 0, 10, 0, 0], BerryColor.Pink, ['Because of its hollow inside pocket, there isn\'t a lot to eat. What can be eaten is very sweet and delicious.'], undefined, ['Oricorio (Pa\'u)']);
        this.berryData[BerryType.Rawst] = new Berry(BerryType.Rawst, [15, 30, 45, 80, 160], 5, 0.5, 8, 4, [0, 0, 0, 10, 0], BerryColor.Green, ['If the leaves grow longer and curlier than average, this Berry will have a somewhat-bitter taste.']);
        this.berryData[BerryType.Aspear] = new Berry(BerryType.Aspear, [10, 40, 60, 120, 240], 6, 0.5, 9, 5, [0, 0, 0, 0, 10], BerryColor.Yellow, ['This Berry\'s peel is hard, but the flesh inside is very juicy. It is distinguished by its bracing sourness.'], undefined, ['Flabébé (Yellow)', 'Oricorio (Pom-Pom)']);
        this.berryData[BerryType.Leppa] = new Berry(BerryType.Leppa, [100, 120, 140, 240, 480], 7, 0.5, 10, 6, [10, 0, 10, 10, 10], BerryColor.Red, ['It takes longer to grow than Berries such as Cheri. The smaller Berries taste better.'], undefined, ['Oricorio (Baile)']);
        this.berryData[BerryType.Oran] = new Berry(BerryType.Oran, [120, 180, 240, 300, 600], 8, 0.5, 20, 7, [10, 10, 0, 10, 10], BerryColor.Blue, ['Nature\'s gifts came together as one in this Berry. It has a wondrous mix of flavors that spread in the mouth.'], undefined, ['Flabébé (Blue)']);
        this.berryData[BerryType.Sitrus] = new Berry(BerryType.Sitrus, [150, 300, 450, 600, 1200], 9, 0.5, 30, 8, [0, 10, 10, 10, 10], BerryColor.Yellow, ['Sitrus came from the same family as Oran. It is larger and smoother-tasting than Oran.'], undefined, ['Flabébé (Yellow)', 'Oricorio (Pom-Pom)']);
        //#endregion
        //#region Second Generation
        this.berryData[BerryType.Persim] = new Berry(BerryType.Persim, [20, 40, 50, 90, 180], 5, 0.4, 10, 2, [10, 10, 10, 0, 10], BerryColor.Pink, ['The more this Berry absorbs energy from sunlight, the more vividly colorful it grows.'], undefined, ['Oricorio (Pa\'u)']);
        this.berryData[BerryType.Razz] = new Berry(BerryType.Razz, [100, 150, 200, 250, 500], 7, 0.4, 15, 2, [10, 10, 0, 0, 0], BerryColor.Red, ['A small hint of spiciness lingers in the red granules surrounding this Berry. Their centers have a dry taste.'], undefined, ['Oricorio (Baile)']);
        this.berryData[BerryType.Bluk] = new Berry(BerryType.Bluk, [200, 250, 300, 330, 660], 9, 0.4, 20, 2, [0, 10, 10, 0, 0], BerryColor.Purple, ['Though this small, delicately-skinned Berry is blue in color, it dyes the mouth black when eaten.'], undefined, ['Oricorio (Sensu)']);
        this.berryData[BerryType.Nanab] = new Berry(BerryType.Nanab, [25, 30, 35, 250, 500], 11, 0.4, 25, 2, [0, 0, 10, 10, 0], BerryColor.Pink, ['Bitter, but with a trace of sweetness, the Nanab Berry was the seventh to be discovered in the world.'], undefined, ['Oricorio (Pa\'u)']);
        this.berryData[BerryType.Wepear] = new Berry(BerryType.Wepear, [150, 350, 375, 400, 800], 12, 0.4, 30, 2, [0, 0, 0, 10, 10], BerryColor.Green, ['The potent mix of bitter and sour in this Berry seems to promote digestion. The flower is white and beautiful.']);
        this.berryData[BerryType.Pinap] = new Berry(BerryType.Pinap, [30, 60, 180, 240, 480], 13, 0.4, 35, 2, [10, 0, 0, 0, 10], BerryColor.Yellow, ['It is said that when the sour skin is peeled, this spicy Berry can be crushed to make medicine.'], undefined, ['Flabébé (Yellow)', 'Oricorio (Pom-Pom)']);
        this.berryData[BerryType.Figy] = new Berry(BerryType.Figy, [40, 160, 230, 350, 700], 14, 0.3, 40, 3, [15, 0, 0, 0, 0], BerryColor.Red, ['This Berry is oddly shaped, appearing as if someone took a bite out of it. It is packed full of spicy substances.'], undefined, ['Oricorio (Baile)']);
        this.berryData[BerryType.Wiki] = new Berry(BerryType.Wiki, [40, 190, 210, 360, 720], 15, 0.3, 45, 3, [0, 15, 0, 0, 0], BerryColor.Purple, ['It is said that this Berry grew lumps to help Pokémon grip it, allowing propagation farther afield.'], undefined, ['Oricorio (Sensu)']);
        this.berryData[BerryType.Mago] = new Berry(BerryType.Mago, [40, 180, 240, 370, 740], 16, 0.3, 50, 3, [0, 0, 15, 0, 0], BerryColor.Pink, ['This Berry progressively curves as it grows. The curvier the Berry, the sweeter and tastier.'], undefined, ['Oricorio (Pa\'u)']);
        this.berryData[BerryType.Aguav] = new Berry(BerryType.Aguav, [40, 170, 220, 350, 700], 17, 0.3, 55, 3, [0, 0, 0, 15, 0], BerryColor.Green, ['This Berry turns bitter toward the stem. The dainty flower it grows from doesn\'t absorb much sunlight.']);
        this.berryData[BerryType.Iapapa] = new Berry(BerryType.Iapapa, [40, 200, 230, 380, 760], 18, 0.3, 60, 3, [0, 0, 0, 0, 15], BerryColor.Yellow, ['This Berry is very big and sour. The juiciness of the pulp accentuates the sourness.'], undefined, ['Flabébé (Yellow)', 'Oricorio (Pom-Pom)']);
        this.berryData[BerryType.Lum] = new Berry(BerryType.Lum, [3000, 3200, 3400, 3600, 43200], 1, 0, 540, 3, [10, 10, 10, 10, 0], BerryColor.Green, [
            'This Berry\'s gradual process of storing nutrients beneficial to Pokémon health causes it to mature slowly.',
            'This Berry multiplies the effect of Berry plants around it.',
        ], new Aura(AuraType.Boost, [1.01, 1.02, 1.03]));
        //#endregion
        //#region Third Generation
        this.berryData[BerryType.Pomeg] = new Berry(BerryType.Pomeg, [200, 1200, 4000, 5400, 10800], 20, 0.2, 500, 10, [10, 0, 10, 10, 0], BerryColor.Red, ['When this sweetly spicy Berry\'s thick skin is peeled, many pieces of the fruit spill out.'], undefined, ['Oricorio (Baile)']);
        this.berryData[BerryType.Kelpsy] = new Berry(BerryType.Kelpsy, [240, 2000, 3400, 6000, 12000], 21, 0.2, 525, 10, [0, 10, 0, 10, 10], BerryColor.Blue, ['This Berry can be eaten as is or boiled to obtain an extract that adds a dash of flavor to food.'], undefined, ['Flabébé (Blue)']);
        this.berryData[BerryType.Qualot] = new Berry(BerryType.Qualot, [230, 1000, 2500, 4800, 9600], 22, 0.2, 550, 10, [10, 0, 10, 0, 10], BerryColor.Pink, ['Even in places of constant rain and high humidity, this Berry\'s plant grows healthy and strong.'], undefined, ['Oricorio (Pa\'u)']);
        this.berryData[BerryType.Hondew] = new Berry(BerryType.Hondew, [1000, 2000, 5000, 10800, 21600], 23, 0.2, 2000, 10, [10, 10, 0, 10, 0], BerryColor.Green, ['This somewhat-rare Berry projects an image of luxury, so it is favored as a gift item.']);
        this.berryData[BerryType.Grepa] = new Berry(BerryType.Grepa, [300, 3400, 5600, 7200, 14400], 24, 0.2, 600, 10, [0, 10, 10, 0, 10], BerryColor.Yellow, ['One bite of this very tender Berry fills the mouth with its sweet and tangy flavor.'], undefined, ['Flabébé (Yellow)', 'Oricorio (Pom-Pom)']);
        this.berryData[BerryType.Tamato] = new Berry(BerryType.Tamato, [430, 1400, 4000, 8640, 17280], 25, 0.2, 625, 10, [20, 10, 0, 0, 0], BerryColor.Red, ['This Berry is large and spicy. When eaten during the cold season, it warms the body from inside.'], undefined, ['Oricorio (Baile)']);
        this.berryData[BerryType.Cornn] = new Berry(BerryType.Cornn, [1100, 4000, 8000, 9000, 18000], 26, 0.1, 700, 10, [0, 20, 10, 0, 0], BerryColor.Purple, ['Its dryness is quite strong. As a result, its true deliciousness can\'t be appreciated by just eating one or two.'], undefined, ['Oricorio (Sensu)']);
        this.berryData[BerryType.Magost] = new Berry(BerryType.Magost, [2400, 6500, 10000, 14400, 28800], 27, 0.1, 750, 10, [0, 0, 20, 10, 0], BerryColor.Pink, ['The grown-up flavor and dreamy sweetness of this Berry make it a favorite of Pokémon everywhere.'], undefined, ['Oricorio (Pa\'u)']);
        this.berryData[BerryType.Rabuta] = new Berry(BerryType.Rabuta, [2310, 5400, 9500, 12240, 24480], 28, 0.1, 800, 10, [0, 0, 0, 20, 10], BerryColor.Green, ['Even though it is bitter, it should be eaten peel and all. The hair on the peel cleans the stomach from the inside.']);
        this.berryData[BerryType.Nomel] = new Berry(BerryType.Nomel, [1240, 5200, 10500, 15120, 30240], 29, 0.1, 850, 10, [10, 0, 0, 0, 20], BerryColor.Yellow, ['This Berry is quite sour overall, with the sourness especially concentrated at the pointed end.'], undefined, ['Flabébé (Yellow)', 'Oricorio (Pom-Pom)']);
        this.berryData[BerryType.Spelon] = new Berry(BerryType.Spelon, [2000, 7000, 12000, 15480, 30960], 30, 0.1, 900, 10, [30, 10, 0, 0, 0], BerryColor.Red, ['So spicy is the Spelon Berry that, Fire type or not, Pokémon will try to breathe fire after eating a single one.'], undefined, ['Oricorio (Baile)']);
        this.berryData[BerryType.Pamtre] = new Berry(BerryType.Pamtre, [3000, 10000, 16400, 18000, 36000], 31, 0.1, 950, 10, [0, 30, 10, 0, 0], BerryColor.Purple, [
            'This Berry drifted from a faraway sea. It is now cultivated in the Sinnoh region.',
            'It has a tendency to expand into nearby plots.',
        ], undefined, ['Oricorio (Sensu)']);
        this.berryData[BerryType.Watmel] = new Berry(BerryType.Watmel, [2300, 3400, 9800, 16560, 33120], 32, 0.1, 1000, 10, [0, 0, 30, 10, 0], BerryColor.Pink, ['A bounty of nature that is exceedingly sweet. The Berry is huge, with some discovered that exceed 20 inches.'], undefined, ['Oricorio (Pa\'u)']);
        this.berryData[BerryType.Durin] = new Berry(BerryType.Durin, [10000, 14000, 18000, 21600, 43200], 33, 0.1, 1050, 10, [0, 0, 0, 30, 10], BerryColor.Green, ['This Berry is tremendously bitter. Just one bite is enough to instantly stop hiccups.']);
        this.berryData[BerryType.Belue] = new Berry(BerryType.Belue, [5000, 9800, 14500, 19800, 39600], 20, 0.1, 1100, 10, [10, 0, 0, 0, 30], BerryColor.Purple, ['This glossy and colorful Berry has a mouthwateringly delicious appearance. However, it is awfully sour.'], undefined, ['Oricorio (Sensu)']);
        this.berryData[BerryType.Pinkan] = new Berry(BerryType.Pinkan, [1800, 3600, 7200, 14400, 28800], 3, 0.1, 2500, 15, [0, 0, 50, 0, 0], BerryColor.Pink, [
            'This Berry endemic to Pinkan Island has an incredibly sweet taste.',
            'It has a vibrant pink pigment, and it is found in such abundance on Pinkan Island that all Pokémon found there are colored Pink!',
        ], undefined, ['Oricorio (Pa\'u)']);
        //#endregion
        //#region Fourth Generation (Typed)
        this.berryData[BerryType.Occa] = new Berry(BerryType.Occa, [8090, 13200, 16000, 21960, 43920], 21, 0.05, 1200, 15, [15, 0, 10, 0, 0], BerryColor.Red, [
            'This Berry is said to have grown plentiful in the tropics of the past. It boasts an intensely hot spiciness.',
            'It has a tendency to overtake nearby plants.',
        ], undefined, ['Charmander', 'Cyndaquil', 'Torchic', 'Chimchar', 'Tepig', 'Fennekin', 'Litten', 'Oricorio (Baile)', 'Scorbunny']);
        this.berryData[BerryType.Passho] = new Berry(BerryType.Passho, [490, 3600, 10800, 21600, 43200], 22, 0.05, 1300, 15, [0, 15, 0, 10, 0], BerryColor.Blue, [
            'This Berry\'s flesh is dotted with countless tiny bubbles of air that keep it afloat in water.',
            'This Berry promotes the fruiting of nearby Berry plants.',
        ], new Aura(AuraType.Harvest, [1.1, 1.2, 1.3]), ['Squirtle', 'Totodile', 'Mudkip', 'Piplup', 'Oshawott', 'Froakie', 'Popplio', 'Sobble', 'Flabébé (Blue)']);
        this.berryData[BerryType.Wacan] = new Berry(BerryType.Wacan, [10, 180, 900, 1800, 3600], 2, 0.05, 250, 1, [0, 0, 15, 0, 10], BerryColor.Yellow, [
            'Energy from lightning strikes is drawn into the plant, making the Berries grow big and rich.',
            'The same energy promotes the growth of nearby Berries.',
        ], new Aura(AuraType.Growth, [1.1, 1.2, 1.3]), ['Pikachu', 'Plusle', 'Minun', 'Pachirisu', 'Emolga', 'Dedenne', 'Togedemaru', 'Flabébé (Yellow)', 'Oricorio (Pom-Pom)', 'Morpeko (Hangry)']);
        this.berryData[BerryType.Rindo] = new Berry(BerryType.Rindo, [3600, 7200, 16200, 28800, 57600], 24, 0.05, 1400, 15, [10, 0, 0, 15, 0], BerryColor.Green, [
            'This Berry has a disagreeable "green" flavor and scent typical of vegetables. It is rich in health-promoting fiber.',
            'It has a tendency to expand into nearby plots.',
        ], undefined, ['Bulbasaur', 'Chikorita', 'Treecko', 'Turtwig', 'Snivy', 'Chespin', 'Rowlet', 'Grookey']);
        this.berryData[BerryType.Yache] = new Berry(BerryType.Yache, [3600, 14400, 28800, 43200, 86400], 25, 0.05, 1500, 15, [0, 10, 0, 0, 15], BerryColor.Blue, [
            'This Berry has a refreshing flavor that strikes a good balance of dryness and sourness. It tastes better chilled.',
            'This Berry slows the growth of nearby Berries.',
        ], new Aura(AuraType.Growth, [0.9, 0.8, 0.7]), ['Snover', 'Flabébé (Blue)', 'Snom']);
        this.berryData[BerryType.Chople] = new Berry(BerryType.Chople, [5400, 10800, 25200, 36000, 72000], 26, 0.05, 1600, 15, [15, 0, 0, 10, 0], BerryColor.Red, [
            'This Berry contains a substance that generates heat. It can even heat up a chilly heart.',
            'Growing these Berries will promote Egg growth.',
        ], new Aura(AuraType.Egg, [1.01, 1.02, 1.03]), ['Riolu', 'Scraggy', 'Oricorio (Baile)']);
        this.berryData[BerryType.Kebia] = new Berry(BerryType.Kebia, [100, 200, 400, 600, 86400], 1, 1, 50, 1, [0, 15, 0, 0, 10], BerryColor.Green, [
            'This Berry is a brilliant green on the outside. Inside, it is packed with a dry-flavored, black-colored flesh.',
            'It has a tendency to overtake nearby plants.',
            'Due to its poisonous nature, it increases the chances of mutations near it.',
        ], new Aura(AuraType.Mutation, [1.2, 1.4, 1.6]), ['Gulpin', 'Salandit', 'Toxel']);
        this.berryData[BerryType.Shuca] = new Berry(BerryType.Shuca, [7200, 16200, 32400, 39600, 79200], 28, 1, 1700, 15, [10, 0, 15, 0, 0], BerryColor.Yellow, [
            'The sweetness-laden pulp has just the hint of a hard-edged and fragrant bite to it.',
            'Growing these Berries will soften the ground around it, increasing the chances of replanting.',
        ], new Aura(AuraType.Replant, [1.01, 1.02, 1.03]), ['Larvitar', 'Flabébé (Yellow)', 'Oricorio (Pom-Pom)']);
        this.berryData[BerryType.Coba] = new Berry(BerryType.Coba, [9000, 12600, 16200, 19800, 39600], 29, 0.05, 1800, 15, [0, 10, 0, 15, 0], BerryColor.Blue, ['This Berry is said to be a new kind that is a cross of two Berries brought together by winds from far away.'], undefined, ['Tropius', 'Flabébé (Blue)']);
        this.berryData[BerryType.Payapa] = new Berry(BerryType.Payapa, [4680, 11880, 23400, 34200, 68400], 30, 0.05, 1900, 15, [0, 0, 10, 0, 15], BerryColor.Purple, [
            'This Berry is said to sense human emotions for the way it swells roundly when a person approaches.',
            'The same behavior affects nearby plants, causing additional mutations.',
        ], new Aura(AuraType.Mutation, [1.1, 1.2, 1.3]), ['Natu', 'Ralts', 'Oricorio (Sensu)']);
        this.berryData[BerryType.Tanga] = new Berry(BerryType.Tanga, [450, 900, 1800, 3600, 7200], 3, 0.5, 500, 15, [20, 0, 0, 0, 10], BerryColor.Green, [
            'The flower grows at the tip of this Berry. It attracts Bug Pokémon by letting its stringy petals stream out.',
            'The attracted Bug Pokémon decrease the amount of harvestable Berries in nearby plants.',
        ], new Aura(AuraType.Harvest, [0.9, 0.8, 0.7]), ['Shuckle', 'Nincada', 'Sizzlipede']);
        this.berryData[BerryType.Charti] = new Berry(BerryType.Charti, [8600, 12960, 23040, 37800, 75600], 32, 0.05, 2000, 15, [10, 20, 0, 0, 0], BerryColor.Yellow, [
            'It is often used for pickles because of its very dry flavor. It can also be eaten raw for its provocative taste.',
            'This Berry plant hardens the surrounding soil, decreasing the chances of replanting.',
        ], new Aura(AuraType.Replant, [0.99, 0.98, 0.97]), ['Sudowoodo', 'Flabébé (Yellow)', 'Oricorio (Pom-Pom)', 'Rockruff']);
        this.berryData[BerryType.Kasib] = new Berry(BerryType.Kasib, [30, 60, 120, 300, 86400], 1, 1, 25, 1, [0, 10, 20, 0, 0], BerryColor.Purple, [
            'Considered to have a special power from the olden days, this Berry is sometimes dried and used as a good-luck charm.',
            'This Berry causes other nearby Berries to wither away faster.',
        ], new Aura(AuraType.Death, [1.25, 1.5, 2.0]), ['Shedinja', 'Oricorio (Sensu)']);
        this.berryData[BerryType.Haban] = new Berry(BerryType.Haban, [10800, 21600, 43200, 86400, 172800], 34, 0, 4000, 15, [0, 0, 10, 20, 0], BerryColor.Red, [
            'If a large enough volume of this Berry is boiled down, its bitterness fades away. It makes a good jam.',
            'This Berry requires a lot of energy to grow, stealing away nutrients from nearby plots.',
        ], new Aura(AuraType.Growth, [0.8, 0.6, 0.5]), ['Bagon', 'Oricorio (Baile)', 'Druddigon', 'Drampa', 'Applin']);
        this.berryData[BerryType.Colbur] = new Berry(BerryType.Colbur, [2880, 10080, 19440, 27000, 54000], 35, 0.05, 2300, 15, [0, 0, 0, 10, 20], BerryColor.Purple, [
            'Tiny hooks grow on the surface of this Berry. It latches on to Pokémon so it can be carried to far-off places.',
            'It has a tendency to overtake nearby plants.',
        ], undefined, ['Absol', 'Oricorio (Sensu)']);
        this.berryData[BerryType.Babiri] = new Berry(BerryType.Babiri, [7200, 16200, 32400, 64800, 129600], 36, 0.05, 2400, 15, [25, 10, 0, 0, 0], BerryColor.Green, [
            'This Berry is very tough with a strong flavor. It was used to make medicine by people in the past.',
            'This Berry plant is very hardy and resistant, making it resistant to mutations, and also decreasing the chance of mutations around it.',
        ], new Aura(AuraType.Mutation, [0.5, 0.25, 0.0]), ['Skarmory', 'Beldum', 'Cufant']);
        this.berryData[BerryType.Chilan] = new Berry(BerryType.Chilan, [240, 1430, 2970, 7200, 14400], 10, 0.05, 500, 15, [0, 25, 10, 0, 0], BerryColor.Yellow, ['This Berry can be cored out and dried to make a whistle. Blowing through its hole makes an indescribable sound.'], undefined, ['Munchlax', 'Audino', 'Flabébé (Yellow)', 'Oricorio (Pom-Pom)', 'Skwovet']);
        this.berryData[BerryType.Roseli] = new Berry(BerryType.Roseli, [2410, 5040, 12600, 25200, 50400], 38, 0.05, 2500, 15, [0, 0, 25, 10, 0], BerryColor.Pink, [
            'This Berry is sweet with a hint of bitterness and has a lingering sweet scent. It is often dried and used to make tea.',
            'The scent of this Berry plant attracts wild Pokémon.',
        ], new Aura(AuraType.Attract, [1.01, 1.02, 1.03]), ['Togepi', 'Oricorio (Pa\'u)']);
        //#endregion
        //#region Fifth Generation
        this.berryData[BerryType.Micle] = new Berry(BerryType.Micle, [3960, 7920, 15840, 31680, 63360], 1, 0.05, 2600, 20, [0, 40, 10, 0, 0], BerryColor.Green, ['This Berry has a very dry flavor. It has the effect of making other food eaten at the same time taste sweet.']);
        this.berryData[BerryType.Custap] = new Berry(BerryType.Custap, [3240, 8280, 13320, 27360, 54720], 1, 0.05, 2700, 20, [0, 0, 40, 10, 0], BerryColor.Red, ['The flesh underneath the Custap Berry\'s tough skin is sweet and creamy soft.'], undefined, ['Oricorio (Baile)']);
        this.berryData[BerryType.Jaboca] = new Berry(BerryType.Jaboca, [4320, 8640, 16560, 33480, 66960], 1, 0.05, 2800, 20, [0, 0, 0, 40, 10], BerryColor.Yellow, [
            'The cluster of drupelets that make up this Berry pop rhythmically if the Berry is handled roughly.',
            'The sound of these Berries attracts rare wild Pokémon.',
        ], new Aura(AuraType.Roaming, [1.005, 1.01, 1.015]), ['Flabébé (Yellow)', 'Oricorio (Pom-Pom)']);
        this.berryData[BerryType.Rowap] = new Berry(BerryType.Rowap, [5760, 9000, 14040, 21240, 42480], 1, 0.05, 2900, 20, [10, 0, 0, 0, 40], BerryColor.Blue, [
            'In days of old, people worked the top-shaped pieces of this Berry free and used them as toys.',
            'These berries make catching efforts worth more.',
        ], new Aura(AuraType.Ev, [1.005, 1.01, 1.015]), ['Flabébé (Blue)']);
        this.berryData[BerryType.Kee] = new Berry(BerryType.Kee, [4680, 9360, 18360, 36360, 72720], 1, 0.05, 3000, 20, [30, 30, 10, 10, 10], BerryColor.Yellow, ['This Berry remains poisonous until fully ripened. Once ripe it has a spicy and sweet complex flavor.'], undefined, ['Flabébé (Yellow)', 'Oricorio (Pom-Pom)']);
        this.berryData[BerryType.Maranga] = new Berry(BerryType.Maranga, [5040, 10080, 20160, 40320, 80640], 1, 0.05, 8000, 20, [10, 10, 30, 30, 10], BerryColor.Blue, ['This Berry resembles the Durin Berry, though its spikes are less pronounced. It is quite delicious when roasted.'], undefined, ['Flabébé (Blue)']);
        this.berryData[BerryType.Liechi] = new Berry(BerryType.Liechi, [21600, 43200, 86400, 172800, 345600], 0.5, 0, 10000, 20, [30, 10, 30, 0, 0], BerryColor.Red, ['This Berry is surrounded by mystery. It is rumored to be imbued with the power of the sea.'], undefined, ['Manaphy', 'Oricorio (Baile)']);
        this.berryData[BerryType.Ganlon] = new Berry(BerryType.Ganlon, [21600, 43200, 86400, 172800, 345600], 0.5, 0, 10000, 20, [0, 30, 10, 30, 0], BerryColor.Purple, ['This Berry is surrounded by mystery. It is rumored to be imbued with the power of the land.'], undefined, ['Oricorio (Sensu)']);
        this.berryData[BerryType.Salac] = new Berry(BerryType.Salac, [21600, 43200, 86400, 172800, 345600], 0.5, 0, 10000, 20, [0, 0, 30, 10, 30], BerryColor.Green, ['This Berry is surrounded by mystery. It is rumored to be imbued with the power of the sky.']);
        this.berryData[BerryType.Petaya] = new Berry(BerryType.Petaya, [10800, 21600, 43200, 86400, 432000], 0.5, 0, 15000, 20, [30, 0, 0, 30, 10], BerryColor.Pink, [
            'This Berry is surrounded by mystery. It is rumored to be imbued with the power of all living things.',
            'This power keeps other Berries alive for longer.',
        ], undefined, ['Mew', 'Oricorio (Pa\'u)']);
        this.berryData[BerryType.Apicot] = new Berry(BerryType.Apicot, [10800, 21600, 43200, 86400, 432000], 0.5, 0, 15000, 20, [10, 30, 0, 0, 30], BerryColor.Blue, ['This is a very, very mystifying Berry. There is no telling how it can be used, or what may happen if it is used.'], undefined, ['Flabébé (Blue)']);
        this.berryData[BerryType.Lansat] = new Berry(BerryType.Lansat, [10800, 21600, 43200, 86400, 432000], 0.5, 0, 15000, 20, [30, 10, 30, 10, 30], BerryColor.Red, ['This is said to be a legendary Berry. Holding it supposedly brings great joy.'], undefined, ['Oricorio (Baile)']);
        this.berryData[BerryType.Starf] = new Berry(BerryType.Starf, [10800, 21600, 43200, 86400, 432000], 0.5, 0, 15000, 20, [30, 10, 30, 10, 30], BerryColor.Green, ['This Berry is considered a mirage. It was said to be so strong that it had to be abandoned at the world\'s edge.'], new Aura(AuraType.Shiny, [1.005, 1.01, 1.015]), ['Jirachi']);
        this.berryData[BerryType.Enigma] = new Berry(BerryType.Enigma, [10800, 21600, 43200, 86400, 604800], 0.5, 0, 15000, 20, [40, 10, 0, 0, 0], BerryColor.Purple, ['A completely enigmatic Berry. It apparently has the power of the stars that fill the night sky.'], undefined, ['Detective Pikachu', 'Oricorio (Sensu)']);
        //#endregion
        //#endregion
        //#region Mutations
        /**
         * NOTE: ONLY ADD NEW MUTATIONS AT THE END OF THE LIST. MUTATION INDEX IS USED TO STORE HINT SEEN DATA
         */
        //#region Second Generation
        // Persim
        this.mutations.push(new GrowNearBerryMutation(.02, BerryType.Persim, [
            BerryType.Pecha,
            BerryType.Oran,
        ]));
        // Razz
        this.mutations.push(new GrowNearBerryMutation(.019, BerryType.Razz, [
            BerryType.Cheri,
            BerryType.Leppa,
        ]));
        // Bluk
        this.mutations.push(new GrowNearBerryMutation(.018, BerryType.Bluk, [
            BerryType.Chesto,
            BerryType.Leppa,
        ]));
        // Nanab
        this.mutations.push(new GrowNearBerryMutation(.017, BerryType.Nanab, [
            BerryType.Pecha,
            BerryType.Aspear,
        ]));
        // Wepear
        this.mutations.push(new GrowNearBerryMutation(.016, BerryType.Wepear, [
            BerryType.Rawst,
            BerryType.Oran,
        ]));
        // Pinap
        this.mutations.push(new GrowNearBerryMutation(.015, BerryType.Pinap, [
            BerryType.Sitrus,
            BerryType.Aspear,
        ]));
        // Figy
        this.mutations.push(new GrowNearFlavorMutation(.009, BerryType.Figy, [[25, 80], [0, 5], [0, 5], [0, 5], [0, 5]], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings get too spicy!',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Cheri]();
            },
        }));
        // Wiki
        this.mutations.push(new GrowNearFlavorMutation(.008, BerryType.Wiki, [[0, 5], [25, 80], [0, 5], [0, 5], [0, 5]], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings get too dry!',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Chesto]();
            },
        }));
        // Mago
        this.mutations.push(new GrowNearFlavorMutation(.007, BerryType.Mago, [[0, 5], [0, 5], [25, 80], [0, 5], [0, 5]], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings get too sweet!',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Pecha]();
            },
        }));
        // Aguav
        this.mutations.push(new GrowNearFlavorMutation(.006, BerryType.Aguav, [[0, 5], [0, 5], [0, 5], [25, 80], [0, 5]], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings get too bitter!',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Rawst]();
            },
        }));
        // Iapapa
        this.mutations.push(new GrowNearFlavorMutation(.005, BerryType.Iapapa, [[0, 5], [0, 5], [0, 5], [0, 5], [25, 80]], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings get too sour!',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Aspear]();
            },
        }));
        // Lum
        this.mutations.push(new GrowNearBerryMutation(.001, BerryType.Lum, [
            BerryType.Cheri,
            BerryType.Chesto,
            BerryType.Pecha,
            BerryType.Rawst,
            BerryType.Aspear,
            BerryType.Leppa,
            BerryType.Oran,
            BerryType.Sitrus,
        ], {
            hint: 'I\'ve heard that there\'s a legendary Berry that only appears when fully surrounded by unique ripe Berry plants!',
        }));
        //#endregion
        //#region Third Generation
        // Pomeg
        this.mutations.push(new GrowNearBerryMutation(.0005, BerryType.Pomeg, [
            BerryType.Iapapa,
            BerryType.Mago,
        ]));
        // Kelpsy
        this.mutations.push(new GrowNearBerryMutation(.0005, BerryType.Kelpsy, [
            BerryType.Chesto,
            BerryType.Persim,
        ]));
        // Qualot
        this.mutations.push(new GrowNearFlavorMutation(.0005, BerryType.Qualot, [[10, 15], [0, 0], [10, 15], [0, 0], [10, 15]], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings match its flavor profile! If I recall, it tasted a little spicy, a little sweet, and a little sour at the same time.',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Cheri]() &&
                    App.game.farming.unlockedBerries[BerryType.Pecha]() &&
                    App.game.farming.unlockedBerries[BerryType.Aspear]();
            },
        }));
        // Hondew
        this.mutations.push(new GrowNearFlavorMutation(.0004, BerryType.Hondew, [[15, 15], [15, 15], [0, 0], [15, 15], [0, 0]], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings match its flavor profile! If I recall, it tasted fairly spicy, dry, and bitter at the same time.',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Figy]() &&
                    App.game.farming.unlockedBerries[BerryType.Wiki]() &&
                    App.game.farming.unlockedBerries[BerryType.Aguav]();
            },
        }));
        // Grepa
        this.mutations.push(new GrowNearBerryMutation(.0005, BerryType.Grepa, [
            BerryType.Aguav,
            BerryType.Figy,
        ]));
        // Tamato
        this.mutations.push(new EvolveNearBerryMutation(.0005, BerryType.Tamato, BerryType.Razz, [BerryType.Pomeg]));
        // Cornn
        this.mutations.push(new GrowNearBerryMutation(.0003, BerryType.Cornn, [
            BerryType.Leppa,
            BerryType.Bluk,
            BerryType.Wiki,
        ]));
        // Magost
        this.mutations.push(new GrowNearBerryMutation(.0003, BerryType.Magost, [
            BerryType.Pecha,
            BerryType.Nanab,
            BerryType.Mago,
        ]));
        // Rabuta
        this.mutations.push(new EvolveNearBerryMutation(.0003, BerryType.Rabuta, BerryType.Aspear, [BerryType.Aguav]));
        // Nomel
        this.mutations.push(new GrowNearBerryMutation(.0003, BerryType.Nomel, [BerryType.Pinap]));
        // Spelon
        this.mutations.push(new EvolveNearFlavorMutation(.0002, BerryType.Spelon, BerryType.Tamato, [[130, 160], [0, 80], [0, 80], [0, 80], [0, 80]], {
            hint: 'I\'ve heard that a Tamato berry will change if its surroundings get extremely spicy!',
        }));
        // Pamtre
        this.mutations.push(new EvolveNearFlavorMutation(.0002, BerryType.Pamtre, BerryType.Cornn, [[0, 80], [130, 160], [0, 80], [0, 80], [0, 80]], {
            hint: 'I\'ve heard that a Cornn berry will change if its surroundings get extremely dry!',
        }));
        // Pamtre Overgrow
        this.mutations.push(new GrowNearBerryMutation(.0004, BerryType.Pamtre, [BerryType.Pamtre], { showHint: false }));
        // Watmel
        this.mutations.push(new EvolveNearFlavorMutation(.0002, BerryType.Watmel, BerryType.Magost, [[0, 80], [0, 80], [130, 160], [0, 80], [0, 80]], {
            hint: 'I\'ve heard that a Magost berry will change if its surroundings get extremely sweet!',
        }));
        // Durin
        this.mutations.push(new EvolveNearFlavorMutation(.0002, BerryType.Durin, BerryType.Rabuta, [[0, 80], [0, 80], [0, 80], [130, 160], [0, 80]], {
            hint: 'I\'ve heard that a Rabuta berry will change if its surroundings get extremely bitter!',
        }));
        // Belue
        this.mutations.push(new EvolveNearFlavorMutation(.0002, BerryType.Belue, BerryType.Nomel, [[0, 80], [0, 80], [0, 80], [0, 80], [130, 160]], {
            hint: 'I\'ve heard that a Nomel berry will change if its surroundings get extremely sour!',
        }));
        // Pinkan
        this.mutations.push(new GrowNearBerryMutation(.0005, BerryType.Pinkan, [
            BerryType.Pecha,
            BerryType.Persim,
            BerryType.Nanab,
            BerryType.Mago,
            BerryType.Qualot,
            BerryType.Magost,
            BerryType.Watmel,
        ], {
            hint: 'I\'ve heard that there\'s a special Pink Berry that only appears when surrounded by a bunch of different types of Pink Berries!',
            unlockReq: function () {
                return App.game.quests.getQuestLine('Team Rocket\'s Pinkan Theme Park').state() > QuestLineState.inactive;
            },
        }));
        //#endregion
        //#region Fourth Generation
        // Occa
        this.mutations.push(new GrowNearBerryMutation(.0001, BerryType.Occa, [
            BerryType.Razz,
            BerryType.Figy,
            BerryType.Tamato,
            BerryType.Spelon,
        ]));
        // Occa Parasite
        this.mutations.push(new ParasiteMutation(.0004, BerryType.Occa));
        // Passho
        this.mutations.push(new GrowNearBerryMutation(.0001, BerryType.Passho, [
            BerryType.Oran,
            BerryType.Chesto,
            BerryType.Kelpsy,
            BerryType.Coba,
        ]));
        // Wacan
        this.mutations.push(new GrowNearBerryMutation(.0001, BerryType.Wacan, [
            BerryType.Pinap,
            BerryType.Iapapa,
            BerryType.Qualot,
            BerryType.Grepa,
        ]));
        // Rindo
        // TODO: HLXII - Change mutation to grow spontaneously when Grass pokemon in party
        this.mutations.push(new GrowNearFlavorMutation(.0001, BerryType.Rindo, [[10, 15], [0, 0], [0, 0], [15, 20], [0, 0]], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings match its flavor profile! If I recall, it tasted a little spicy and fairly bitter at the same time.',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Aguav]() &&
                    App.game.farming.unlockedBerries[BerryType.Cheri]();
            },
        }));
        // Rindo Overgrow
        this.mutations.push(new GrowNearBerryMutation(.0004, BerryType.Rindo, [BerryType.Rindo], { showHint: false }));
        // Yache
        this.mutations.push(new EvolveNearBerryStrictMutation(.0001, BerryType.Yache, BerryType.Passho, {}, PlotStage.Seed, {
            hint: 'I\'ve heard that growing a Passho Berry alone will cause it to change!',
        }));
        // Chople
        this.mutations.push(new OakMutation(.0001, BerryType.Chople, BerryType.Spelon, OakItemType.Blaze_Cassette));
        // Kebia
        this.mutations.push(new OakMutation(.0001, BerryType.Kebia, BerryType.Pamtre, OakItemType.Rocky_Helmet));
        // Kebia Parasite
        this.mutations.push(new ParasiteMutation(.0004, BerryType.Kebia));
        // Shuca
        this.mutations.push(new OakMutation(.0001, BerryType.Shuca, BerryType.Watmel, OakItemType.Sprinklotad));
        // Coba
        // TODO: HLXII - Change mutation to grow spontaneously when Flying pokemon in party
        this.mutations.push(new GrowNearFlavorMutation(.0001, BerryType.Coba, [[0, 0], [10, 15], [0, 0], [15, 20], [0, 0]], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings match its flavor profile! If I recall, it tasted a little dry and fairly bitter at the same time.',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Chesto]() &&
                    App.game.farming.unlockedBerries[BerryType.Aguav]();
            },
        }));
        // Payapa
        this.mutations.push(new GrowNearBerryMutation(.0001, BerryType.Payapa, [
            BerryType.Wiki,
            BerryType.Bluk,
            BerryType.Cornn,
            BerryType.Pamtre,
        ]));
        // Tanga
        let berryReqs = {};
        berryReqs[BerryType.Rindo] = 8;
        this.mutations.push(new GrowNearBerryStrictMutation(.0001, BerryType.Tanga, berryReqs, {
            hint: 'I\'ve heard that a special Berry can appear after being surrounded by Rindo Berries!',
        }));
        // Charti
        this.mutations.push(new OakMutation(.0001, BerryType.Charti, BerryType.Cornn, OakItemType.Cell_Battery));
        // Kasib
        // No mutation, will check withers
        // Haban
        this.mutations.push(new GrowNearBerryMutation(.0001, BerryType.Haban, [
            BerryType.Occa,
            BerryType.Rindo,
            BerryType.Passho,
            BerryType.Wacan,
        ]));
        // Colbur
        this.mutations.push(new GrowNearBerryMutation(.0001, BerryType.Colbur, [
            BerryType.Rabuta,
            BerryType.Kasib,
            BerryType.Payapa,
        ]));
        // Colbur Parasite
        this.mutations.push(new ParasiteMutation(.0004, BerryType.Colbur));
        // Babiri
        berryReqs = {};
        berryReqs[BerryType.Shuca] = 4;
        berryReqs[BerryType.Charti] = 4;
        this.mutations.push(new GrowNearBerryStrictMutation(.0001, BerryType.Babiri, berryReqs, {
            hint: 'I\'ve heard that a special Berry can appear after being surrounded by Shuca and Charti Berries!',
        }));
        // Chilan
        berryReqs = {};
        berryReqs[BerryType.Chople] = 3;
        this.mutations.push(new EvolveNearBerryMinMutation(.0001, BerryType.Chilan, BerryType.Chople, berryReqs, {
            hint: 'I\'ve heard that Chople Berries will turn into a different Berry if surrounded by more than two of their own kind.',
        }));
        // Roseli
        this.mutations.push(new GrowNearBerryMutation(.0001, BerryType.Roseli, [
            BerryType.Mago,
            BerryType.Nanab,
            BerryType.Magost,
            BerryType.Watmel,
        ]));
        //#endregion
        //#region Fifth Generation
        // Micle
        this.mutations.push(new FieldFlavorMutation(.0003, BerryType.Micle, [0, 600, 0, 0, 0], {
            hint: 'I\'ve heard of a Berry that only appears in the driest of fields.',
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Pamtre](),
        }));
        // Custap
        this.mutations.push(new FieldFlavorMutation(.0003, BerryType.Custap, [0, 0, 600, 0, 0], {
            hint: 'I\'ve heard of a Berry that only appears in the sweetest of fields.',
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Watmel](),
        }));
        // Jaboca
        this.mutations.push(new FieldFlavorMutation(.0003, BerryType.Jaboca, [0, 0, 0, 600, 0], {
            hint: 'I\'ve heard of a Berry that only appears in the most bitter of fields.',
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Durin](),
        }));
        // Rowap
        this.mutations.push(new FieldFlavorMutation(.0003, BerryType.Rowap, [0, 0, 0, 0, 600], {
            hint: 'I\'ve heard of a Berry that only appears in the most sour of fields.',
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Belue](),
        }));
        // Kee
        this.mutations.push(new GrowNearBerryMutation(.0003, BerryType.Kee, [
            BerryType.Liechi,
            BerryType.Ganlon,
        ]));
        // Maranga
        this.mutations.push(new GrowNearBerryMutation(.0003, BerryType.Maranga, [
            BerryType.Salac,
            BerryType.Petaya,
        ]));
        // Liechi
        this.mutations.push(new FieldMutation(.00001, BerryType.Liechi, BerryType.Passho, undefined, {
            unlockReq: () => { var _a, _b; return (_b = (_a = App.game) === null || _a === void 0 ? void 0 : _a.statistics) === null || _b === void 0 ? void 0 : _b.pokemonCaptured[PokemonHelper.getPokemonByName('Kyogre').id](); },
        }));
        // Ganlon
        this.mutations.push(new FieldMutation(.00001, BerryType.Ganlon, BerryType.Shuca, undefined, {
            unlockReq: () => { var _a, _b; return (_b = (_a = App.game) === null || _a === void 0 ? void 0 : _a.statistics) === null || _b === void 0 ? void 0 : _b.pokemonCaptured[PokemonHelper.getPokemonByName('Groudon').id](); },
        }));
        // Salac
        this.mutations.push(new FieldMutation(.00001, BerryType.Salac, BerryType.Coba, undefined, {
            unlockReq: () => { var _a, _b; return (_b = (_a = App.game) === null || _a === void 0 ? void 0 : _a.statistics) === null || _b === void 0 ? void 0 : _b.pokemonCaptured[PokemonHelper.getPokemonByName('Rayquaza').id](); },
        }));
        // Petaya
        this.mutations.push(new PetayaMutation(.00001));
        // Apicot
        this.mutations.push(new FieldMutation(.00001, BerryType.Apicot, BerryType.Chilan, undefined, {
            unlockReq: () => { var _a, _b; return (_b = (_a = App.game) === null || _a === void 0 ? void 0 : _a.statistics) === null || _b === void 0 ? void 0 : _b.pokemonCaptured[PokemonHelper.getPokemonByName('Palkia').id](); },
        }));
        // Lansat
        // TODO: HLXII - Add Mutation to evolve Payapa when Milotic, Gardevoir, Blissey, and Togekiss in party.
        this.mutations.push(new FieldMutation(.00001, BerryType.Lansat, BerryType.Roseli, undefined, {
            unlockReq: () => { var _a, _b; return (_b = (_a = App.game) === null || _a === void 0 ? void 0 : _a.statistics) === null || _b === void 0 ? void 0 : _b.pokemonCaptured[PokemonHelper.getPokemonByName('Dialga').id](); },
        }));
        // Starf
        // No mutation, obtained by wandering shiny pokemon
        // Enigma
        this.mutations.push(new EnigmaMutation(.0001));
        // Enigma Mutations
        this.mutations.push(new EvolveNearBerryMutation(.0004, BerryType.Liechi, BerryType.Passho, [BerryType.Enigma], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Liechi](),
        }));
        this.mutations.push(new EvolveNearBerryMutation(.0004, BerryType.Ganlon, BerryType.Shuca, [BerryType.Enigma], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Ganlon](),
        }));
        this.mutations.push(new EvolveNearBerryMutation(.0004, BerryType.Salac, BerryType.Coba, [BerryType.Enigma], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Salac](),
        }));
        this.mutations.push(new EvolveNearBerryMutation(.0004, BerryType.Petaya, BerryType.Payapa, [BerryType.Enigma], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Petaya](),
        }));
        this.mutations.push(new EvolveNearBerryMutation(.0004, BerryType.Apicot, BerryType.Chilan, [BerryType.Enigma], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Apicot](),
        }));
        this.mutations.push(new EvolveNearBerryMutation(.0004, BerryType.Lansat, BerryType.Roseli, [BerryType.Enigma], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Lansat](),
        }));
        this.mutations.push(new EvolveNearBerryMutation(.0004, BerryType.Starf, BerryType.Haban, [BerryType.Enigma], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Starf](),
        }));
        // Empty Mutations for hints
        // Kasib
        this.mutations.push(new BlankMutation(0, BerryType.Kasib, {
            hint: 'I\'ve heard of a Berry that only appears after a Berry plant has withered, but is repelled by Colbur plants.',
            unlockReq: () => App.game.farming.highestUnlockedBerry() >= BerryType.Occa,
        }));
        // Starf
        this.mutations.push(new BlankMutation(0, BerryType.Starf, {
            hint: 'I\'ve heard of a Berry that only appears after a Shiny Pokémon wanders near open soil.',
            unlockReq: () => App.game.farming.highestUnlockedBerry() >= BerryType.Occa,
        }));
        //#endregion
        //#endregion
    }
    getGrowthMultiplier() {
        let multiplier = 1;
        multiplier *= App.game.oakItems.calculateBonus(OakItemType.Sprayduck);
        return multiplier;
    }
    getReplantMultiplier() {
        let multiplier = 1;
        multiplier *= App.game.oakItems.calculateBonus(OakItemType.Sprinklotad);
        return multiplier;
    }
    getMutationMultiplier() {
        let multiplier = 1;
        multiplier *= App.game.oakItems.calculateBonus(OakItemType.Squirtbottle);
        return multiplier;
    }
    update(delta) {
        const timeToReduce = delta;
        const notifications = new Set();
        let change = false;
        // Updating Berries
        this.plotList.forEach(plot => {
            if (plot.update(timeToReduce)) {
                change = true;
            }
            if (plot.notifications) {
                plot.notifications.forEach(n => notifications.add(n));
                plot.notifications = [];
            }
        });
        // Running Mutations
        this.mutationCounter += GameConstants.TICK_TIME;
        if (this.mutationCounter >= GameConstants.MUTATION_TICK) {
            this.mutations.forEach(mutation => {
                if (mutation.mutate()) {
                    GameHelper.incrementObservable(App.game.statistics.totalBerriesMutated, 1);
                    notifications.add(FarmNotificationType.Mutated);
                    change = true;
                }
            });
            this.mutationCounter = 0;
        }
        // Wandering Pokemon
        this.wanderCounter += GameConstants.TICK_TIME;
        let wanderPokemon;
        if (this.wanderCounter >= GameConstants.WANDER_TICK) {
            for (let i = 0; i < App.game.farming.plotList.length; i++) {
                const plot = App.game.farming.plotList[i];
                wanderPokemon = plot.generateWanderPokemon();
                if (wanderPokemon !== undefined) {
                    // TODO: HLXII Handle other bonus (DT?)
                    notifications.add(FarmNotificationType.Wander);
                    break;
                }
            }
            this.wanderCounter = 0;
        }
        if (notifications.size) {
            notifications.forEach((n) => this.handleNotification(n, wanderPokemon));
        }
        this.farmHands.tick();
    }
    handleNotification(farmNotiType, wander) {
        let message = '';
        let type = NotificationConstants.NotificationOption.success;
        let sound = NotificationConstants.NotificationSound.Farming.ready_to_harvest;
        let setting = NotificationConstants.NotificationSetting.Farming.ready_to_harvest;
        switch (farmNotiType) {
            case FarmNotificationType.Ripe:
                message = 'A Berry is ready to harvest!';
                break;
            case FarmNotificationType.AboutToWither:
                message = 'A Berry plant is about to wither!';
                type = NotificationConstants.NotificationOption.warning;
                sound = NotificationConstants.NotificationSound.Farming.berry_wither;
                setting = NotificationConstants.NotificationSetting.Farming.about_to_wither;
                break;
            case FarmNotificationType.Withered:
                message = 'A Berry plant has withered!';
                type = NotificationConstants.NotificationOption.warning;
                sound = NotificationConstants.NotificationSound.Farming.berry_wither;
                setting = NotificationConstants.NotificationSetting.Farming.berry_withered;
                break;
            case FarmNotificationType.Mutated:
                message = 'A Berry plant has mutated!';
                sound = NotificationConstants.NotificationSound.Farming.berry_mutated;
                setting = NotificationConstants.NotificationSetting.Farming.berry_mutated;
                break;
            case FarmNotificationType.Replanted:
                message = 'A Berry has been replanted!';
                sound = NotificationConstants.NotificationSound.Farming.berry_replanted;
                setting = NotificationConstants.NotificationSetting.Farming.berry_replanted;
                break;
            case FarmNotificationType.Dropped:
                message = 'A Berry has been dropped!';
                sound = NotificationConstants.NotificationSound.Farming.berry_dropped;
                setting = NotificationConstants.NotificationSetting.Farming.berry_dropped;
                break;
            case FarmNotificationType.MulchRanOut:
                message = 'A plot has run out of mulch!';
                type = NotificationConstants.NotificationOption.warning;
                sound = NotificationConstants.NotificationSound.Farming.mulch_ran_out;
                setting = NotificationConstants.NotificationSetting.Farming.mulch_ran_out;
                break;
            case FarmNotificationType.Wander:
                const pokemon = (wander === null || wander === void 0 ? void 0 : wander.shiny) ? `shiny ${wander === null || wander === void 0 ? void 0 : wander.pokemon}` : wander === null || wander === void 0 ? void 0 : wander.pokemon;
                message = `A wild ${pokemon} has wandered onto the farm!`;
                type = (wander === null || wander === void 0 ? void 0 : wander.shiny) ? NotificationConstants.NotificationOption.warning : NotificationConstants.NotificationOption.success;
                sound = NotificationConstants.NotificationSound.Farming.wandering_pokemon;
                setting = NotificationConstants.NotificationSetting.Farming.wandering_pokemon;
                break;
        }
        Notifier.notify({
            message,
            type,
            sound,
            setting,
        });
    }
    multiplyPlotAuras(auraType) {
        return this.plotList
            .filter(p => p.emittingAura.type() === auraType)
            .reduce((acc, p) => { var _a; return acc * ((_a = p.emittingAura.value()) !== null && _a !== void 0 ? _a : 1); }, 1);
    }
    unlockPlot(index) {
        if (this.allPlotsUnlocked()) {
            return;
        }
        if (this.canBuyPlot(index)) {
            const berryData = this.plotBerryCost(index);
            GameHelper.incrementObservable(this.berryList[berryData.type], -berryData.amount);
            const cost = this.plotFPCost(index);
            App.game.wallet.loseAmount(new Amount(cost, GameConstants.Currency.farmPoint));
            this.plotList[index].isUnlocked = true;
            this.unlockedPlotCount(this.plotList.filter(p => p.isUnlocked).length);
        }
    }
    allPlotsUnlocked() {
        return this.plotList.every(plot => plot.isUnlocked);
    }
    canBuyPlot(index) {
        const berryData = this.plotBerryCost(index);
        if (App.game.farming.berryList[berryData.type]() < berryData.amount) {
            return false;
        }
        const cost = this.plotFPCost(index);
        if (!App.game.wallet.hasAmount(new Amount(cost, GameConstants.Currency.farmPoint))) {
            return false;
        }
        return true;
    }
    plotFPCost(index) {
        const berryType = Farming.unlockMatrix[index];
        return 10 * Math.floor(Math.pow(berryType + 1, 2));
    }
    plotBerryCost(index) {
        const berryType = Farming.unlockMatrix[index];
        return { type: berryType, amount: 10 * (berryType + 1) };
    }
    //#endregion
    togglePlotSafeLock(index) {
        this.plotList[index].isSafeLocked = !this.plotList[index].isSafeLocked;
    }
    plant(index, berry) {
        const plot = this.plotList[index];
        if (!plot.isEmpty() || !plot.isUnlocked || !this.hasBerry(berry) || plot.isSafeLocked) {
            return;
        }
        GameHelper.incrementObservable(this.berryList[berry], -1);
        plot.plant(berry);
    }
    plantAll(berry) {
        this.plotList.forEach((plot, index) => {
            this.plant(index, berry);
        });
    }
    /**
     * Harvest a plot at the given index
     * @param index The index of the plot to harvest
     */
    harvest(index) {
        const plot = this.plotList[index];
        if (plot.berry === BerryType.None || plot.stage() != PlotStage.Berry || plot.isSafeLocked) {
            return;
        }
        App.game.wallet.gainFarmPoints(this.berryData[plot.berry].farmValue);
        const amount = plot.harvestAmount();
        this.gainBerry(plot.berry, amount);
        App.game.oakItems.use(OakItemType.Sprayduck, this.berryData[plot.berry].exp);
        GameHelper.incrementObservable(App.game.statistics.totalManualHarvests, 1);
        player.lowerItemMultipliers(MultiplierDecreaser.Berry, this.berryData[plot.berry].exp);
        plot.die(true);
    }
    /**
     * Try to harvest all plots
     */
    harvestAll() {
        this.plotList.forEach((plot, index) => {
            this.harvest(index);
        });
    }
    /**
     * Handles using the Berry Shovel to remove a Berry plant
     * @param index The plot index
     */
    shovel(index) {
        const plot = this.plotList[index];
        if (!plot.isUnlocked) {
            return;
        }
        if (plot.isSafeLocked) {
            return;
        }
        if (plot.isEmpty()) {
            return;
        }
        if (plot.stage() == PlotStage.Berry) {
            this.harvest(index);
            return;
        }
        if (this.shovelAmt() <= 0) {
            return;
        }
        plot.die(true);
        GameHelper.incrementObservable(this.shovelAmt, -1);
        GameHelper.incrementObservable(App.game.statistics.totalShovelsUsed, 1);
    }
    /**
     * Handles using the Mulch Shovel to remove mulch from a plot
     * @param index The plot index
     */
    shovelMulch(index) {
        const plot = this.plotList[index];
        if (!plot.isUnlocked || plot.isSafeLocked) {
            return;
        }
        if (this.mulchShovelAmt() <= 0) {
            return;
        }
        if (plot.clearMulch()) {
            GameHelper.incrementObservable(this.mulchShovelAmt, -1);
            GameHelper.incrementObservable(App.game.statistics.totalShovelsUsed, 1);
        }
    }
    /**
     * Adds mulch to a plot
     * @param index The plot index
     * @param mulch The MulchType to be added
     * @param amount The amount of mulch to apply. Defaults to 1
     */
    addMulch(index, mulch, amount = 1) {
        const plot = this.plotList[index];
        if (!this.canMulch(index, mulch)) {
            return;
        }
        amount = Math.min(this.mulchList[mulch](), amount);
        GameHelper.incrementObservable(this.mulchList[mulch], -amount);
        GameHelper.incrementObservable(App.game.statistics.totalMulchesUsed, amount);
        GameHelper.incrementObservable(App.game.statistics.mulchesUsed[mulch], amount);
        plot.mulch = +mulch;
        plot.mulchTimeLeft += GameConstants.MULCH_USE_TIME * amount;
    }
    /**
     * Attempts to add mulch to all plots
     * @param mulch The MulchType to be added
     * @param amount The amount of mulch to apply to each plot. Defaults to 1
     */
    mulchAll(mulch, amount = 1) {
        const mulchPlots = this.plotList.filter((_, index) => this.canMulch(index, mulch));
        amount *= mulchPlots.length;
        amount = Math.min(this.mulchList[mulch](), amount);
        const sharedMulch = Math.floor(amount / mulchPlots.length);
        if (sharedMulch <= 0) {
            return;
        }
        this.plotList.forEach((_, index) => {
            this.addMulch(index, mulch, sharedMulch);
        });
    }
    canMulch(index, mulch) {
        const plot = this.plotList[index];
        if (!plot.isUnlocked || !this.hasMulch(mulch) || plot.isSafeLocked) {
            return false;
        }
        if (plot.mulch != MulchType.None && plot.mulch != mulch) {
            return false;
        }
        return true;
    }
    /**
     * Gives the player a random Berry from the first 8 types
     * @param amount Amount of berries to give. Defaults to 1.
     * @param disableNotification Set to true to not notify the player. Defaults to false.
     */
    gainRandomBerry(amount = 1, disableNotification = false) {
        const berry = GameHelper.getIndexFromDistribution(GameConstants.BerryDistribution);
        if (!disableNotification) {
            Notifier.notify({
                message: `You found ${GameHelper.anOrA(BerryType[berry])} ${BerryType[berry]} Berry!`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Items.route_item_found,
            });
        }
        this.gainBerry(berry, amount, false);
    }
    gainBerry(berry, amount = 1, farming = true) {
        GameHelper.incrementObservable(this.berryList[berry], Math.floor(amount));
        if (amount > 0) {
            this.unlockBerry(berry);
            GameHelper.incrementObservable(App.game.statistics.totalBerriesObtained, amount);
            GameHelper.incrementObservable(App.game.statistics.berriesObtained[berry], amount);
            if (farming === true) {
                GameHelper.incrementObservable(App.game.statistics.totalBerriesHarvested, amount);
                GameHelper.incrementObservable(App.game.statistics.berriesHarvested[berry], amount);
            }
        }
    }
    hasBerry(berry) {
        return this.berryList[berry]() > 0;
    }
    hasMulch(mulch) {
        return this.mulchList[mulch]() > 0;
    }
    canAccess() {
        return MapHelper.accessToRoute(14, 0) && App.game.keyItems.hasKeyItem(KeyItemType.Wailmer_pail);
    }
    unlockBerry(berry) {
        if (!this.unlockedBerries[berry]()) {
            Notifier.notify({
                message: `You've discovered the ${BerryType[berry]} Berry!`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Farming.berry_discovered,
                sound: NotificationConstants.NotificationSound.Farming.berry_discovered,
            });
            App.game.logbook.newLog(LogBookTypes.NEW, `You've registered the ${BerryType[berry]} Berry in your BerryDex!`);
            this.unlockedBerries[berry](true);
        }
    }
    /**
     * Checks whether a Berry plant exists on the farm
     * @param berry The Berry type
     * @param stage The stage of the Berry plant. Defaults to PlotStage.Berry
     */
    berryInFarm(berry, stage = PlotStage.Berry, ignoreFrozen = false) {
        return this.plotList.some(plot => plot.berry == berry && plot.stage() >= stage && (!ignoreFrozen || plot.mulch !== MulchType.Freeze_Mulch));
    }
    toJSON() {
        return {
            berryList: this.berryList.map(ko.unwrap),
            unlockedBerries: this.unlockedBerries.map(ko.unwrap),
            mulchList: this.mulchList.map(ko.unwrap),
            plotList: this.plotList.map(plot => plot.toJSON()),
            shovelAmt: this.shovelAmt(),
            mulchShovelAmt: this.mulchShovelAmt(),
            mutations: this.mutations.map(mutation => mutation.toJSON()),
            farmHands: this.farmHands.toJSON(),
        };
    }
    fromJSON(json) {
        if (json == null) {
            return;
        }
        const savedBerries = json.berryList;
        if (savedBerries == null) {
            this.berryList = this.defaults.berryList.map((v) => ko.observable(v));
        }
        else {
            savedBerries.forEach((value, index) => {
                this.berryList[index](value);
            });
        }
        const savedUnlockedBerries = json.unlockedBerries;
        if (savedUnlockedBerries == null) {
            this.unlockedBerries = this.defaults.unlockedBerries.map((v) => ko.observable(v));
        }
        else {
            savedUnlockedBerries.forEach((value, index) => {
                this.unlockedBerries[index](value);
            });
        }
        const savedMulches = json.mulchList;
        if (savedMulches == null) {
            this.mulchList = this.defaults.mulchList.map((v) => ko.observable(v));
        }
        else {
            savedMulches.forEach((value, index) => {
                this.mulchList[index](value);
            });
        }
        const savedPlots = json.plotList;
        if (savedPlots == null) {
            this.plotList = this.defaults.plotList;
        }
        else {
            savedPlots.forEach((value, index) => {
                const plot = new Plot(false, BerryType.None, 0, MulchType.None, 0, index);
                plot.fromJSON(value);
                this.plotList[index] = plot;
            });
        }
        this.unlockedPlotCount(this.plotList.filter(p => p.isUnlocked).length);
        const shovelAmt = json.shovelAmt;
        if (shovelAmt == null) {
            this.shovelAmt = ko.observable(this.defaults.shovelAmt);
        }
        else {
            this.shovelAmt(shovelAmt);
        }
        const mulchShovelAmt = json.mulchShovelAmt;
        if (mulchShovelAmt == null) {
            this.mulchShovelAmt = ko.observable(this.defaults.mulchShovelAmt);
        }
        else {
            this.mulchShovelAmt(mulchShovelAmt);
        }
        const mutations = json.mutations;
        if (mutations) {
            this.mutations.forEach((mutation, i) => mutation.fromJSON(mutations[i]));
        }
        this.farmHands.fromJSON(json.farmHands);
    }
    static getGeneration(gen) {
        const genBounds = Farming.genBounds;
        const minBound = genBounds[gen - 1] || 0;
        const maxBound = genBounds[gen] || Infinity;
        return App.game.farming.berryData.filter(berry => berry.type >= minBound && berry.type < maxBound).map(berry => berry.type);
    }
    static getColor(color) {
        return App.game.farming.berryData.filter(berry => berry.color === color).map(berry => berry.type);
    }
}
//#region Plot Unlocking
Farming.unlockMatrix = [
    BerryType.Kelpsy, BerryType.Mago, BerryType.Persim, BerryType.Wepear, BerryType.Qualot,
    BerryType.Wiki, BerryType.Aspear, BerryType.Cheri, BerryType.Leppa, BerryType.Aguav,
    BerryType.Nanab, BerryType.Rawst, BerryType.None, BerryType.Chesto, BerryType.Razz,
    BerryType.Pomeg, BerryType.Sitrus, BerryType.Pecha, BerryType.Oran, BerryType.Pinap,
    BerryType.Grepa, BerryType.Figy, BerryType.Bluk, BerryType.Iapapa, BerryType.Hondew,
];
Farming.genBounds = [8, 20, 36, 54, Infinity];
class Plot {
    constructor(isUnlocked, berry, age, mulch, mulchTimeLeft, index) {
        this.index = index;
        this.saveKey = '';
        this.defaults = {
            isUnlocked: false,
            berry: BerryType.None,
            age: 0,
            mulch: MulchType.None,
            mulchTimeLeft: 0,
            isSafeLocked: false,
        };
        this._isUnlocked = ko.observable(isUnlocked);
        this._isSafeLocked = ko.observable(false);
        this._berry = ko.observable(berry).extend({ numeric: 0 });
        this._lastPlanted = ko.observable(berry).extend({ numeric: 0 });
        this._age = ko.observable(age).extend({ numeric: 3 });
        this._mulch = ko.observable(mulch).extend({ numeric: 0 });
        this._mulchTimeLeft = ko.observable(mulchTimeLeft).extend({ numeric: 3 });
        this.emittingAura = {
            type: ko.pureComputed(() => {
                var _a, _b, _c;
                if (this.stage() < PlotStage.Taller || this.mulch === MulchType.Freeze_Mulch) {
                    return null;
                }
                return (_c = (_b = (_a = this.berryData) === null || _a === void 0 ? void 0 : _a.aura) === null || _b === void 0 ? void 0 : _b.auraType) !== null && _c !== void 0 ? _c : null;
            }).extend({ rateLimit: 50 }),
            value: ko.pureComputed(() => {
                var _a;
                if (!((_a = this.berryData) === null || _a === void 0 ? void 0 : _a.aura)) {
                    return null;
                }
                const boost = this.auraBoost();
                const value = this.berryData.aura.getAuraValue(this.stage());
                return value > 1 ? value * boost : value / boost;
            }).extend({ rateLimit: 50 }),
        };
        this.formattedStageTimeLeft = ko.pureComputed(() => {
            if (this.berry === BerryType.None) {
                return '';
            }
            const growthTime = this.berryData.growthTime.find(t => this.age < t);
            const timeLeft = Math.ceil(growthTime - this.age);
            const growthMultiplier = App.game.farming.getGrowthMultiplier() * this.getGrowthMultiplier();
            return GameConstants.formatTime(timeLeft / growthMultiplier);
        });
        this.formattedTimeLeft = ko.pureComputed(() => {
            if (this.berry === BerryType.None) {
                return '';
            }
            let timeLeft = 0;
            if (this.age < this.berryData.growthTime[3]) {
                timeLeft = Math.ceil(this.berryData.growthTime[3] - this.age);
            }
            else {
                timeLeft = Math.ceil(this.berryData.growthTime[4] - this.age);
            }
            const growthMultiplier = App.game.farming.getGrowthMultiplier() * this.getGrowthMultiplier();
            return GameConstants.formatTime(timeLeft / growthMultiplier);
        });
        this.formattedMulchTimeLeft = ko.pureComputed(() => {
            if (this.mulch === MulchType.None) {
                return '';
            }
            return GameConstants.formatTime(this.mulchTimeLeft);
        });
        this.auraGrowth = ko.pureComputed(() => {
            return this.multiplyNeighbourAura(AuraType.Growth);
        });
        this.auraHarvest = ko.pureComputed(() => {
            return this.multiplyNeighbourAura(AuraType.Harvest);
        });
        this.auraMutation = ko.pureComputed(() => {
            return this.multiplyNeighbourAura(AuraType.Mutation);
        });
        this.auraReplant = ko.pureComputed(() => {
            return this.multiplyNeighbourAura(AuraType.Replant);
        });
        this.auraDeath = ko.pureComputed(() => {
            return this.berry === BerryType.Kasib ? 1 : this.maxNeighbourAura(AuraType.Death);
        });
        this.auraBoost = ko.pureComputed(() => {
            return this.berry === BerryType.Lum ? 1 : this.maxNeighbourAura(AuraType.Boost);
        });
        this.formattedAuras = ko.pureComputed(() => {
            const auraStr = [];
            if (this.auraGrowth() !== 1) {
                auraStr.push(`Growth: ${this.auraGrowth().toFixed(2)}x`);
            }
            if (this.auraHarvest() !== 1) {
                auraStr.push(`Harvest: ${this.auraHarvest().toFixed(2)}x`);
            }
            if (this.auraMutation() !== 1) {
                auraStr.push(`Mutation: ${this.auraMutation().toFixed(2)}x`);
            }
            if (this.auraReplant() !== 1) {
                auraStr.push(`Replant: ${this.auraReplant().toFixed(2)}x`);
            }
            if (this.auraDeath() !== 1) {
                auraStr.push(`Death: ${this.auraDeath().toFixed(2)}x`);
            }
            if (this.auraBoost() !== 1) {
                auraStr.push(`Boost: ${this.auraBoost().toFixed(2)}x`);
            }
            return auraStr.join('<br/>');
        });
        this.isEmpty = ko.pureComputed(() => {
            return this.berry === BerryType.None;
        });
        this.stage = ko.pureComputed(() => {
            if (this.berry === BerryType.None) {
                return PlotStage.Seed;
            }
            return this.berryData.growthTime.findIndex(t => this.age <= t);
        });
        this.tooltip = ko.pureComputed(() => {
            const tooltip = [];
            // Time
            if (this.berry !== BerryType.None) {
                tooltip.push(`<u>${BerryType[this.berry]}</u>`);
                // Petaya Effect
                if (App.game.farming.berryInFarm(BerryType.Petaya, PlotStage.Berry, true) && this.berry !== BerryType.Petaya && this.stage() == PlotStage.Berry) {
                    tooltip.push('∞ until death');
                    // Normal Time
                }
                else {
                    const timeType = Settings.getSetting('farmDisplay').observableValue();
                    if (timeType === 'nextStage') {
                        const formattedTime = this.formattedStageTimeLeft();
                        switch (this.stage()) {
                            case PlotStage.Seed:
                                tooltip.push(`${formattedTime} until sprout`);
                                break;
                            case PlotStage.Sprout:
                                tooltip.push(`${formattedTime} until grown`);
                                break;
                            case PlotStage.Taller:
                                tooltip.push(`${formattedTime} until bloom`);
                                break;
                            case PlotStage.Bloom:
                                tooltip.push(`${formattedTime} until ripe`);
                                break;
                            case PlotStage.Berry:
                                tooltip.push(`${formattedTime} until death`);
                                break;
                        }
                    }
                    else {
                        const formattedTime = this.formattedTimeLeft();
                        switch (this.stage()) {
                            case PlotStage.Seed:
                            case PlotStage.Sprout:
                            case PlotStage.Taller:
                            case PlotStage.Bloom:
                                tooltip.push(`${formattedTime} until ripe`);
                                break;
                            case PlotStage.Berry:
                                tooltip.push(`${formattedTime} until death`);
                                break;
                        }
                    }
                }
            }
            // Aura
            if (this.emittingAura.type() !== null) {
                tooltip.push('<u>Aura Emitted:</u>');
                tooltip.push(`${AuraType[this.emittingAura.type()]}: ${this.emittingAura.value().toFixed(2)}x`);
            }
            const auraStr = this.formattedAuras();
            if (auraStr) {
                tooltip.push('<u>Aura Received:</u>');
                tooltip.push(auraStr);
            }
            // Mulch
            if (this.mulch !== MulchType.None) {
                const mulchTime = this.formattedMulchTimeLeft();
                tooltip.push('<u>Mulch</u>');
                tooltip.push(`${MulchType[this.mulch].replace('_Mulch', '')} : ${mulchTime}`);
            }
            return tooltip.join('<br/>');
        });
        this.notifications = [];
    }
    /**
     * Handles updating the berry plant
     * @param seconds Number of seconds to add to the plants age
     * @returns Whether the plot stage has changed this update
     */
    update(seconds) {
        // Updating Berry
        let change = false;
        if (this.berry !== BerryType.None) {
            const growthTime = seconds * App.game.farming.getGrowthMultiplier() * this.getGrowthMultiplier();
            const oldAge = this.age;
            this.age += growthTime;
            // Checking for Petaya Berries
            if (App.game.farming.berryInFarm(BerryType.Petaya, PlotStage.Berry, true) && this.berry !== BerryType.Petaya) {
                this.age = Math.min(this.age, this.berryData.growthTime[3] + 1);
            }
            const updatedStage = this.stageUpdated(oldAge, this.age);
            if (updatedStage !== PlotStage.Seed) {
                change = true;
            }
            if (updatedStage === PlotStage.Berry) {
                this.notifications.push(FarmNotificationType.Ripe);
                change = true;
            }
            if (!this._hasWarnedAboutToWither && this.age + 15 > this.berryData.growthTime[4]) {
                this.notifications.push(FarmNotificationType.AboutToWither);
                this._hasWarnedAboutToWither = true;
            }
            if (this.age > this.berryData.growthTime[4]) {
                this.die();
                change = true;
            }
        }
        // Updating Mulch
        if (this.mulch !== MulchType.None) {
            this.mulchTimeLeft = Math.max(this.mulchTimeLeft - seconds, 0);
            if (this.mulchTimeLeft === 0) {
                this.notifications.push(FarmNotificationType.MulchRanOut);
                this.mulch = MulchType.None;
            }
        }
        return change;
    }
    stageUpdated(oldAge, newAge) {
        const oldStage = this.berryData.growthTime.findIndex(t => oldAge < t);
        const newStage = this.berryData.growthTime.findIndex(t => newAge < t);
        if (oldStage !== newStage) {
            return newStage;
        }
        return PlotStage.Seed;
    }
    /**
     * Handles planting a berry on the plot
     * @param berry The BerryType
     */
    plant(berry) {
        this.berry = berry;
        this.lastPlanted = berry;
        this.age = 0;
        this.notifications = [];
        this._hasWarnedAboutToWither = false;
    }
    /**
     * Returns how many berries will be harvested
     */
    harvestAmount() {
        return Math.floor(Math.max(1, this.berryData.harvestAmount * this.getHarvestMultiplier()));
    }
    /**
     * Handles killing the berry plant
     * @param harvested Whether this death was due to the player harvesting manually, or by withering
     */
    die(harvested = false) {
        if (!harvested) {
            // Withered Berry plant drops half of the berries
            const amount = Math.max(1, Math.ceil(this.harvestAmount() / 2));
            if (amount) {
                App.game.farming.gainBerry(this.berry, amount);
                this.notifications.push(FarmNotificationType.Dropped);
            }
            // Check if berry replants itself
            const replantChance = this.berryData.replantRate * App.game.farming.getReplantMultiplier() * this.getReplantMultiplier();
            if (Rand.chance(replantChance)) {
                this.age = 0;
                this.notifications.push(FarmNotificationType.Replanted);
                App.game.oakItems.use(OakItemType.Sprinklotad);
                GameHelper.incrementObservable(App.game.statistics.totalBerriesReplanted, 1);
                return;
            }
            this.notifications.push(FarmNotificationType.Withered);
            // Check for Kasib berry mutation/replant chance
            if (App.game.farming.highestUnlockedBerry() >= BerryType.Occa) {
                if (!App.game.farming.berryInFarm(BerryType.Colbur)) {
                    if (Rand.chance(0.05)) {
                        this.notifications.push(FarmNotificationType.Mutated);
                        this.berry = BerryType.Kasib;
                        this.age = 0;
                        App.game.farming.unlockBerry(BerryType.Kasib);
                        return;
                    }
                }
            }
        }
        // Reset plant
        this.berry = BerryType.None;
        this.age = 0;
    }
    generateWanderPokemon() {
        // Check if plot is eligible for wandering Pokemon
        if (!this.isUnlocked || this.berry === BerryType.None || this.stage() !== PlotStage.Berry) {
            return undefined;
        }
        // Chance to generate wandering Pokemon
        if (Rand.chance(GameConstants.WANDER_RATE * App.game.farming.externalAuras[AuraType.Attract]())) {
            // Get a random Pokemon from the list of possible encounters
            const availablePokemon = this.berryData.wander.filter(pokemon => PokemonHelper.calcNativeRegion(pokemon) <= player.highestRegion());
            const wanderPokemon = Rand.fromArray(availablePokemon);
            const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_FARM);
            // Add to log book
            if (shiny) {
                App.game.logbook.newLog(LogBookTypes.SHINY, `A shiny ${wanderPokemon} has wandered onto the farm! ${App.game.party.alreadyCaughtPokemonByName(wanderPokemon, true) ? '(duplicate)' : ''}`);
            }
            else {
                App.game.logbook.newLog(LogBookTypes.WANDER, `A wild ${wanderPokemon} has wandered onto the farm!`);
            }
            // Gain Pokemon
            App.game.party.gainPokemonById(PokemonHelper.getPokemonByName(wanderPokemon).id, shiny, true);
            const partyPokemon = App.game.party.getPokemon(PokemonHelper.getPokemonByName(wanderPokemon).id);
            partyPokemon.effortPoints += App.game.party.calculateEffortPoints(partyPokemon, shiny, GameConstants.WANDERER_EP_YIELD);
            // Check for Starf berry generation
            if (shiny) {
                const emptyPlots = App.game.farming.plotList.filter(plot => plot.isUnlocked && plot.isEmpty());
                // No Starf generation if no empty plots :(
                if (emptyPlots.length) {
                    const chosenPlot = emptyPlots[Rand.floor(emptyPlots.length)];
                    chosenPlot.plant(BerryType.Starf);
                    App.game.farming.unlockBerry(BerryType.Starf);
                }
            }
            return { pokemon: wanderPokemon, shiny: shiny };
        }
        return undefined;
    }
    /**
     * Gets the growth multiplier for this plot
     */
    getGrowthMultiplier() {
        var _a;
        let multiplier = (_a = {
            [MulchType.Boost_Mulch]: GameConstants.BOOST_MULCH_MULTIPLIER,
            [MulchType.Amaze_Mulch]: GameConstants.AMAZE_MULCH_GROWTH_MULTIPLIER,
            [MulchType.Freeze_Mulch]: GameConstants.FREEZE_MULCH_MULTIPLIER,
        }[this.mulch]) !== null && _a !== void 0 ? _a : 1;
        multiplier *= this.auraGrowth();
        // Handle Death Aura
        if (this.stage() == PlotStage.Berry && this.berry != BerryType.Kasib) {
            multiplier *= this.auraDeath();
        }
        return multiplier;
    }
    /**
     * Gets the harvest multiplier for this plot
     */
    getHarvestMultiplier() {
        let multiplier = 1;
        if (this.mulch === MulchType.Rich_Mulch) {
            multiplier = GameConstants.RICH_MULCH_MULTIPLIER;
        }
        else if (this.mulch === MulchType.Amaze_Mulch) {
            multiplier = GameConstants.AMAZE_MULCH_PRODUCE_MULTIPLIER;
        }
        multiplier *= this.auraHarvest();
        return multiplier;
    }
    /**
     * Gets the replant multiplier for this plot
     */
    getReplantMultiplier() {
        let multiplier = 1;
        if (this.mulch === MulchType.Rich_Mulch) {
            multiplier = GameConstants.RICH_MULCH_MULTIPLIER;
        }
        else if (this.mulch === MulchType.Amaze_Mulch) {
            multiplier = GameConstants.AMAZE_MULCH_PRODUCE_MULTIPLIER;
        }
        multiplier *= this.auraReplant();
        return multiplier;
    }
    /**
     * Gets the mutation multiplier for this plot
     */
    getMutationMultiplier() {
        let multiplier = 1;
        if (this.mulch === MulchType.Surprise_Mulch) {
            multiplier = GameConstants.SURPRISE_MULCH_MULTIPLIER;
        }
        else if (this.mulch === MulchType.Amaze_Mulch) {
            multiplier = GameConstants.AMAZE_MULCH_MUTATE_MULTIPLIER;
        }
        multiplier *= this.auraMutation();
        return multiplier;
    }
    multiplyNeighbourAura(auraType) {
        return this.neighbours()
            .filter(p => p.emittingAura.type() === auraType)
            .reduce((acc, plot) => { var _a; return acc * ((_a = plot.emittingAura.value()) !== null && _a !== void 0 ? _a : 1); }, 1);
    }
    maxNeighbourAura(auraType) {
        return Math.max(1, ...this.neighbours().filter(p => p.emittingAura.type() === auraType).map(p => { var _a; return (_a = p.emittingAura.value()) !== null && _a !== void 0 ? _a : 1; }));
    }
    /**
     * returns true if the plot had mulch.
     */
    clearMulch() {
        const wasMulched = this.mulch != MulchType.None;
        if (wasMulched) {
            this.mulch = MulchType.None;
            this.mulchTimeLeft = 0;
        }
        return wasMulched;
    }
    fromJSON(json) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if (json == null) {
            return;
        }
        this.isUnlocked = (_a = json.isUnlocked) !== null && _a !== void 0 ? _a : this.defaults.isUnlocked;
        this.berry = (_b = json.berry) !== null && _b !== void 0 ? _b : this.defaults.berry;
        this.age = (_c = json.age) !== null && _c !== void 0 ? _c : this.defaults.age;
        this.mulch = (_d = json.mulch) !== null && _d !== void 0 ? _d : this.defaults.mulch;
        this.mulchTimeLeft = (_e = json.mulchTimeLeft) !== null && _e !== void 0 ? _e : this.defaults.mulchTimeLeft;
        this.lastPlanted = (_g = (_f = json.lastPlanted) !== null && _f !== void 0 ? _f : json.berry) !== null && _g !== void 0 ? _g : this.defaults.berry;
        this.isSafeLocked = (_h = json.isSafeLocked) !== null && _h !== void 0 ? _h : this.defaults.isSafeLocked;
    }
    toJSON() {
        return {
            isUnlocked: this.isUnlocked,
            berry: this.berry,
            lastPlanted: this.lastPlanted,
            age: this.age,
            mulch: this.mulch,
            mulchTimeLeft: this.mulchTimeLeft,
            isSafeLocked: this.isSafeLocked,
        };
    }
    /**
     * Finds the plot indices that are around the plot in a 3x3 square
     * @param index The plot index
     */
    static findNearPlots(index) {
        const plots = [];
        const posX = index % GameConstants.FARM_PLOT_WIDTH;
        const posY = (index - posX) / GameConstants.FARM_PLOT_HEIGHT;
        for (let y = posY - 1; y <= posY + 1; y++) {
            for (let x = posX - 1; x <= posX + 1; x++) {
                if (y < 0 || y > GameConstants.FARM_PLOT_HEIGHT - 1 || x < 0 || x > GameConstants.FARM_PLOT_WIDTH - 1) {
                    continue;
                }
                if (y === posY && x === posX) {
                    continue;
                }
                const id = y * GameConstants.FARM_PLOT_HEIGHT + x;
                plots.push(id);
            }
        }
        return plots;
    }
    neighbours() {
        return Plot.findNearPlots(this.index).map(i => App.game.farming.plotList[i]);
    }
    /**
     * Finds the plot indices that are directly next to the plot (aka a plus sign)
     * @param index The plot index
     */
    static findPlusPlots(index, filter) {
        const posX = index % GameConstants.FARM_PLOT_WIDTH;
        const posY = (index - posX) / GameConstants.FARM_PLOT_HEIGHT;
        const possiblePlots = [[posY - 1, posX], [posY, posX - 1], [posY, posX + 1], [posY + 1, posX]];
        return possiblePlots.filter(([y, x]) => {
            return y >= 0 && y < GameConstants.FARM_PLOT_HEIGHT && x >= 0 && x < GameConstants.FARM_PLOT_WIDTH;
        }).map(([y, x]) => y * GameConstants.FARM_PLOT_HEIGHT + x);
    }
    get berryData() {
        return App.game.farming.berryData[this.berry];
    }
    // Knockout getters
    get isUnlocked() {
        return this._isUnlocked();
    }
    set isUnlocked(value) {
        this._isUnlocked(value);
    }
    get isSafeLocked() {
        return this._isSafeLocked();
    }
    set isSafeLocked(value) {
        this._isSafeLocked(value);
    }
    get berry() {
        return this._berry();
    }
    set berry(berry) {
        this._berry(berry);
    }
    get lastPlanted() {
        return this._lastPlanted();
    }
    set lastPlanted(berry) {
        this._lastPlanted(berry);
    }
    get age() {
        return this._age();
    }
    set age(value) {
        this._age(value);
    }
    get mulch() {
        return this._mulch();
    }
    set mulch(value) {
        this._mulch(value);
    }
    get mulchTimeLeft() {
        return this._mulchTimeLeft();
    }
    set mulchTimeLeft(value) {
        this._mulchTimeLeft(value);
    }
}
class Aura {
    constructor(auraType, auraMultipliers) {
        this.auraType = auraType;
        this.auraMultipliers = auraMultipliers;
    }
    getAuraValue(stage) {
        if (!stage || stage < PlotStage.Taller) {
            return 1;
        }
        return this.auraMultipliers[stage - 2];
    }
}
class Mutation {
    constructor(mutationChance, mutatedBerry, options) {
        var _a;
        this._mutationChance = mutationChance;
        this.mutatedBerry = mutatedBerry;
        this._hint = options === null || options === void 0 ? void 0 : options.hint;
        this._unlockReq = options === null || options === void 0 ? void 0 : options.unlockReq;
        this.showHint = (_a = options === null || options === void 0 ? void 0 : options.showHint) !== null && _a !== void 0 ? _a : true;
        this._hintSeen = ko.observable(false);
    }
    toJSON() {
        return this.hintSeen;
    }
    fromJSON(hintSeen) {
        this.hintSeen = !!hintSeen;
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        if (!this._unlockReq) {
            return true;
        }
        return this._unlockReq();
    }
    /**
     * Handles getting the hint for this mutation for the Kanto Berry Master
     */
    get hint() {
        if (!this.showHint) {
            return '';
        }
        if (this._hint) {
            return this._hint;
        }
        return '';
    }
    /**
     * Handles getting the mutation chance
     * @param idx The plot index
     */
    mutationChance(idx) {
        return this._mutationChance;
    }
    /**
     * Update tag for mutations. Returns true if this mutation will occur
     */
    mutate() {
        if (!this.unlocked) {
            return false;
        }
        const plots = this.getMutationPlots();
        if (!plots.length) {
            return false;
        }
        let mutated = false;
        plots.forEach((idx) => {
            const willMutate = Rand.chance(this.mutationChance(idx) * App.game.farming.getMutationMultiplier() * App.game.farming.plotList[idx].getMutationMultiplier());
            if (!willMutate) {
                return;
            }
            this.handleMutation(idx);
            App.game.oakItems.use(OakItemType.Squirtbottle);
            mutated = true;
        });
        return mutated;
    }
    get hintSeen() {
        return this._hintSeen();
    }
    set hintSeen(bool) {
        this._hintSeen(bool);
    }
}
/// <reference path="../Mutation.ts" />
/**
 * A Blank Mutation to be used to store hint data.
 * This is mostly because the Mutation framework controls the hints, but some mutations are outside of the Mutation framework
 */
class BlankMutation extends Mutation {
    getMutationPlots() {
        return [];
    }
    handleMutation(index) {
        return;
    }
}
/// <reference path="../Mutation.ts" />
/**
 * Mutation that occurs on an empty Plot
 */
class GrowMutation extends Mutation {
    constructor(mutationChance, mutatedBerry, options) {
        super(mutationChance, mutatedBerry, options);
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = [];
        App.game.farming.plotList.forEach((plot, idx) => {
            if (!plot.isUnlocked) {
                return;
            }
            if (!plot.isEmpty()) {
                return;
            }
            plots.push(idx);
        });
        return plots;
    }
    /**
     * Handles updating the farm with the mutation
     * @param index The plot index to mutate
     */
    handleMutation(index) {
        const plot = App.game.farming.plotList[index];
        plot.berry = this.mutatedBerry;
        plot.age = 0;
        plot.notifications = [];
        App.game.farming.unlockBerry(this.mutatedBerry);
    }
}
/// <reference path="./GrowMutation.ts" />
/**
 * Mutation to produce the Enigma Berry
 */
class EnigmaMutation extends GrowMutation {
    constructor(mutationChance) {
        super(mutationChance, BerryType.Enigma, {
            unlockReq: function () {
                if (!App.game.discord.ID()) {
                    return false;
                }
                return EnigmaMutation.getReqs().every(req => App.game.farming.unlockedBerries[req]());
            },
        });
        this.hintsSeen = Array(4).fill(false).map(val => ko.observable(val));
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = super.getMutationPlots();
        const reqs = EnigmaMutation.getReqs();
        return plots.filter((idx) => {
            const nearPlots = Plot.findPlusPlots(idx);
            if (nearPlots.length !== 4) {
                return false;
            }
            return nearPlots.every((idx, n) => {
                const plot = App.game.farming.plotList[idx];
                if (!plot.isUnlocked) {
                    return false;
                }
                if (plot.isEmpty()) {
                    return false;
                }
                if (plot.stage() !== PlotStage.Berry) {
                    return false;
                }
                if (plot.berry !== reqs[n]) {
                    return false;
                }
                return true;
            });
        });
    }
    /**
     * Returns a list of 4 Berry types to cause the mutation
     */
    static getReqs() {
        SeededRand.seed(+App.game.discord.ID());
        // Getting possible Berries
        // Only Gen 3 and 4 Berries so there isn't as big of a growth discrepancy (e.g. Cheri and Haban)
        let berryTypes = Farming.getGeneration(2).concat(Farming.getGeneration(3));
        // Remove parasite Berries, as having four sides for mutation requirements means parasite
        // mutations can make it difficult to have all four plants fully grown.
        // Also remove Babiri since they'll stop mutations
        berryTypes = berryTypes.filter(berry => {
            return ![BerryType.Occa, BerryType.Kebia, BerryType.Colbur, BerryType.Babiri].includes(berry);
        });
        return [...new Array(4)].map((_) => SeededRand.fromArray(berryTypes));
    }
    get hintIndex() {
        SeededRand.seedWithDate(new Date());
        return SeededRand.floor(4);
    }
    /**
     * Handles getting the hint for this mutation for the Kanto Berry Master
     */
    get partialHint() {
        if (!App.game.discord.ID()) {
            return 'There is a Berry that requires a linked <u>Discord</u> account to appear...';
        }
        const idx = this.hintIndex;
        return `There's a mysterious berry that requires ${this.getHint(idx)}.`;
    }
    getHint(idx) {
        let direction = '';
        switch (idx) {
            case 0:
                direction = 'north';
                break;
            case 1:
                direction = 'west';
                break;
            case 2:
                direction = 'east';
                break;
            case 3:
                direction = 'south';
        }
        return `a ${BerryType[EnigmaMutation.getReqs()[idx]]} Berry to the ${direction}`;
    }
    /**
     * Handles getting the full hint for the BerryDex
     */
    get hint() {
        if (!App.game.discord.ID()) {
            return 'There is a Berry that requires a linked <u>Discord</u> account to appear...';
        }
        const hints = [];
        const unlocked = App.game.farming.unlockedBerries[this.mutatedBerry]();
        this.hintsSeen.forEach((hintSeen, idx) => {
            if (!hintSeen() && !unlocked) {
                return false;
            }
            hints.push(this.getHint(idx));
        });
        let tempHint = `There's a mysterious berry that requires ${hints.join(', ').replace(/, ([\w\s]+)$/, ' and $1')}`;
        if (hints.length === 0) {
            tempHint += 'a specific configuration of Berries';
        }
        tempHint += (hints.length !== 4) ? '. However, there\'s still something missing...' : '.';
        return tempHint;
    }
    toJSON() {
        return this.hintsSeen.map(h => h());
    }
    fromJSON(hintsSeen) {
        if (!hintsSeen || typeof hintsSeen !== 'object') {
            return;
        }
        hintsSeen.forEach((value, index) => {
            if (value) {
                this.hintSeen = true;
            }
            this.hintsSeen[index](value);
        });
    }
}
/// <reference path="../Mutation.ts" />
/**
 * Mutation that occurs on a Berry plant that is PlotStage.Taller or older.
 */
class EvolveMutation extends Mutation {
    constructor(mutationChance, mutatedBerry, originalBerry, options) {
        super(mutationChance, mutatedBerry, options);
        this.originalBerry = originalBerry;
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = [];
        App.game.farming.plotList.forEach((plot, idx) => {
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() < PlotStage.Taller) {
                return;
            }
            if (this.originalBerry && plot.berry !== this.originalBerry) {
                return;
            }
            // Babiri Berries can't mutate
            if (plot.berry === BerryType.Babiri) {
                return;
            }
            plots.push(idx);
        });
        return plots;
    }
    /**
     * Handles updating the farm with the mutation.
     * Mutations will keep the new Berry plant in the same stage as it was previously
     * @param index The plot index to mutate
     */
    handleMutation(index) {
        const plot = App.game.farming.plotList[index];
        const currentStage = plot.stage();
        let newAge = 0;
        if (currentStage !== PlotStage.Seed) {
            newAge = App.game.farming.berryData[this.mutatedBerry].growthTime[currentStage - 1] + 1;
        }
        plot.berry = this.mutatedBerry;
        plot.age = newAge;
        plot.notifications = [];
        App.game.farming.unlockBerry(this.mutatedBerry);
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        // Check for unlocked original berry
        if (this.originalBerry && !App.game.farming.unlockedBerries[this.originalBerry]()) {
            return false;
        }
        return super.unlocked;
    }
}
/// <reference path="./EvolveMutation.ts" />
/**
 * Mutation that requires a specific environment near a Berry plot.
 */
class EvolveNearMutation extends EvolveMutation {
    constructor(mutationChance, mutatedBerry, originalBerry, options) {
        super(mutationChance, mutatedBerry, originalBerry, options);
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = super.getMutationPlots();
        return plots.filter((idx) => {
            const nearPlots = Plot.findNearPlots(idx);
            return this.nearPlotsFitRequirements(nearPlots);
        });
    }
}
/// <reference path="./EvolveNearMutation.ts" />
/**
 * Mutation that requires at least some amount of specific Berry plants near an empty plot.
 * The required Berry plants must be in the Berry stage for mutations to occur.
 */
class EvolveNearBerryMinMutation extends EvolveNearMutation {
    constructor(mutationChance, mutatedBerry, originalBerry, berryReqs, options) {
        super(mutationChance, mutatedBerry, originalBerry, options);
        this.berryReqs = berryReqs;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        const currentReqs = {};
        plots.forEach((idx) => {
            const plot = App.game.farming.plotList[idx];
            if (plot.stage() !== PlotStage.Berry) {
                return;
            }
            if (!currentReqs[plot.berry]) {
                currentReqs[plot.berry] = 1;
            }
            else {
                currentReqs[plot.berry] += 1;
            }
        });
        return Object.keys(this.berryReqs).every(key => currentReqs[key] !== undefined && currentReqs[key] >= this.berryReqs[key]);
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        for (const berry of Object.keys(this.berryReqs)) {
            if (!App.game.farming.unlockedBerries[berry]()) {
                return false;
            }
        }
        return super.unlocked;
    }
}
/// <reference path="./EvolveNearMutation.ts" />
/**
 * Mutation that requires specific Berry plants near a Berry plot.
 * The required Berry plants must be in the Berry stage for mutations to occur.
 */
class EvolveNearBerryMutation extends EvolveNearMutation {
    constructor(mutationChance, mutatedBerry, originalBerry, berryReqs, options) {
        super(mutationChance, mutatedBerry, originalBerry, options);
        this.berryReqs = berryReqs;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        return this.berryReqs.every((req) => {
            return plots.some((plot) => {
                return this.checkRequirement(plot, req);
            });
        });
    }
    /**
     * Checks an individual plot for a Berry requirement
     */
    checkRequirement(index, berryReq) {
        const plot = App.game.farming.plotList[index];
        if (!plot.isUnlocked) {
            return false;
        }
        if (plot.berry !== berryReq) {
            return false;
        }
        if (plot.stage() !== PlotStage.Berry) {
            return false;
        }
        return true;
    }
    get hint() {
        if (super.hint) {
            return super.hint;
        }
        const berryType = this.originalBerry !== undefined ? BerryType[this.originalBerry] : 'some';
        if (this.berryReqs.length === 0) {
            return `I've heard that ${berryType} Berries can spontaneously change!`;
        }
        let str = `I've heard that growing ${berryType} Berries`;
        str += ` near ${this.berryReqs.map(b => BerryType[b]).join(', ').replace(/, ([\w\s]+)$/, ' and $1')} Berries`;
        str += ' can cause it to change!';
        return str;
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        // Check for Berry requirements
        if (!this.berryReqs.every(req => App.game.farming.unlockedBerries[req]())) {
            return false;
        }
        return super.unlocked;
    }
}
/// <reference path="./EvolveNearMutation.ts" />
/**
 * Mutation that requires very specific Berry plants near an empty plot.
 * The required Berry plants must be in the Berry stage for mutations to occur.
 */
class EvolveNearBerryStrictMutation extends EvolveNearMutation {
    constructor(mutationChance, mutatedBerry, originalBerry, berryReqs, neighborStageReq, options) {
        super(mutationChance, mutatedBerry, originalBerry, options);
        this.berryReqs = berryReqs;
        this.neighborStageReq = neighborStageReq;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        const currentReqs = {};
        plots.forEach((idx) => {
            const plot = App.game.farming.plotList[idx];
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() < this.neighborStageReq) {
                return;
            }
            if (!currentReqs[plot.berry]) {
                currentReqs[plot.berry] = 1;
            }
            else {
                currentReqs[plot.berry] += 1;
            }
        });
        return GameHelper.shallowEqual(this.berryReqs, currentReqs);
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        for (const berry of Object.keys(this.berryReqs)) {
            if (!App.game.farming.unlockedBerries[berry]()) {
                return false;
            }
        }
        return super.unlocked;
    }
}
/// <reference path="./EvolveNearMutation.ts" />
/**
 * Mutation that requires specific flavored Berry plants near a Berry plot
 * Will check the surround plots for the flavors of the nearby Berry plants. Must be in the range of the flavorReqs
 */
class EvolveNearFlavorMutation extends EvolveNearMutation {
    /**
     * Constructor for a FlavorMutation
     * @param mutationChance The chance of the mutation occuring
     * @param mutatedBerry The mutated BerryType
     * @param flavorReqs The flavor requirements for the mutation to occur
     * @param options The additional MutationOptions
     */
    constructor(mutationChance, mutatedBerry, originalBerry, flavorReqs, options) {
        super(mutationChance, mutatedBerry, originalBerry, options);
        this.flavorRatio = [0.5, 0.75, 1]; // Determines how much flavor a Berry plant has before fully mature.
        this.flavorReqs = flavorReqs;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        const nearFlavors = [0, 0, 0, 0, 0];
        plots.forEach(idx => {
            const plot = App.game.farming.plotList[idx];
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() < PlotStage.Taller) {
                return;
            }
            const berryFlavors = App.game.farming.berryData[plot.berry].flavors.map(x => x.value * this.flavorRatio[plot.stage() - 2]);
            for (let j = 0; j < 5; j++) {
                nearFlavors[j] += berryFlavors[j];
            }
        });
        return this.flavorReqs.every((value, idx) => value[0] <= nearFlavors[idx] && nearFlavors[idx] <= value[1]);
    }
}
/// <reference path="./GrowMutation.ts" />
/**
 * Mutation that requires a total amount of flavor in the field
 */
class FieldFlavorMutation extends GrowMutation {
    constructor(mutationChance, mutatedBerry, fieldFlavor, options) {
        super(mutationChance, mutatedBerry, options);
        this.flavorRatio = [0.5, 0.75, 1]; // Determines how much flavor a Berry plant has before fully mature.
        this.fieldFlavor = fieldFlavor;
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const emptyPlots = super.getMutationPlots();
        const nearFlavors = [0, 0, 0, 0, 0];
        App.game.farming.plotList.forEach((plot, idx) => {
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() < PlotStage.Taller) {
                return;
            }
            const berryFlavors = App.game.farming.berryData[plot.berry].flavors.map(x => x.value * this.flavorRatio[plot.stage() - 2]);
            for (let j = 0; j < 5; j++) {
                nearFlavors[j] += berryFlavors[j];
            }
        });
        const reqMatched = this.fieldFlavor.every((value, idx) => value <= nearFlavors[idx]);
        if (reqMatched) {
            return emptyPlots;
        }
        return [];
    }
}
/// <reference path="./GrowMutation.ts" />
/**
 * Mutation that requires a number of Berry plants in the farm
 */
class FieldMutation extends GrowMutation {
    constructor(mutationChance, mutatedBerry, fieldBerry, fieldAmount = 22, options) {
        super(mutationChance, mutatedBerry, options);
        this.fieldBerry = fieldBerry;
        this.fieldAmount = fieldAmount;
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const emptyPlots = super.getMutationPlots();
        let fieldPlots = 0;
        App.game.farming.plotList.forEach((plot, idx) => {
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.berry === this.fieldBerry && plot.stage() === PlotStage.Berry) {
                fieldPlots += 1;
            }
        });
        if (fieldPlots > this.fieldAmount) {
            return emptyPlots;
        }
        return [];
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        // Check for Berry requirements
        if (!App.game.farming.unlockedBerries[this.fieldBerry]()) {
            return false;
        }
        return super.unlocked;
    }
    /**
     * Handles getting the hint for this mutation for the Kanto Berry Master
     */
    get hint() {
        if (super.hint) {
            return super.hint;
        }
        return `Legends tell of a mysterious Berry that only appears in a field of ${BerryType[this.fieldBerry]} Berries.`;
    }
}
/// <reference path="./GrowMutation.ts" />
/**
 * Mutation that requires a specific environment near an empty plot.
 */
class GrowNearMutation extends GrowMutation {
    constructor(mutationChance, mutatedBerry, options) {
        super(mutationChance, mutatedBerry, options);
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = super.getMutationPlots();
        return plots.filter((idx) => {
            const nearPlots = Plot.findNearPlots(idx);
            return this.nearPlotsFitRequirements(nearPlots);
        });
    }
}
/// <reference path="./GrowNearMutation.ts" />
/**
 * Mutation that requires specific Berry plants near an empty plot.
 * The required Berry plants must be in the Berry stage for mutations to occur.
 */
class GrowNearBerryMutation extends GrowNearMutation {
    constructor(mutationChance, mutatedBerry, berryReqs, options) {
        super(mutationChance, mutatedBerry, options);
        this.berryReqs = berryReqs;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        return this.berryReqs.every((req) => {
            return plots.some((plot) => {
                return this.checkRequirement(plot, req);
            });
        });
    }
    /**
     * Checks an individual plot for a Berry requirement
     */
    checkRequirement(index, berryReq) {
        const plot = App.game.farming.plotList[index];
        if (!plot.isUnlocked) {
            return false;
        }
        if (plot.berry !== berryReq) {
            return false;
        }
        if (plot.stage() !== PlotStage.Berry) {
            return false;
        }
        return true;
    }
    /**
     * Handles getting the hint for this mutation for the Kanto Berry Master
     */
    get hint() {
        if (super.hint) {
            return super.hint;
        }
        if (this.berryReqs.length === 1) {
            return `I've heard that growing ${BerryType[this.berryReqs[0]]} Berries can spread a new Berry into nearby empty plots!`;
        }
        if (this.berryReqs.length >= 2) {
            return `I've heard that growing ${this.berryReqs.map(b => BerryType[b]).join(', ').replace(/, ([\w\s]+)$/, ' and $1')} Berries near each other will produce something interesting!`;
        }
        return '';
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        // Check for Berry requirements
        if (!this.berryReqs.every(req => App.game.farming.unlockedBerries[req]())) {
            return false;
        }
        return super.unlocked;
    }
}
/// <reference path="./GrowNearMutation.ts" />
/**
 * Mutation that requires very specific Berry plants near an empty plot.
 * The required Berry plants must be in the Berry stage for mutations to occur.
 */
class GrowNearBerryStrictMutation extends GrowNearMutation {
    constructor(mutationChance, mutatedBerry, berryReqs, options) {
        super(mutationChance, mutatedBerry, options);
        this.berryReqs = berryReqs;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        const currentReqs = {};
        plots.forEach((idx) => {
            const plot = App.game.farming.plotList[idx];
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() !== PlotStage.Berry) {
                return;
            }
            if (!currentReqs[plot.berry]) {
                currentReqs[plot.berry] = 1;
            }
            else {
                currentReqs[plot.berry] += 1;
            }
        });
        return GameHelper.shallowEqual(this.berryReqs, currentReqs);
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        for (const berry of Object.keys(this.berryReqs)) {
            if (!App.game.farming.unlockedBerries[berry]()) {
                return false;
            }
        }
        return super.unlocked;
    }
}
/// <reference path="./GrowNearMutation.ts" />
/**
 * Mutation that requires specific flavored Berry plants near an empty plot
 * Will check the surround plots for the flavors of the nearby Berry plants. Must be in the range of the flavorReqs
 */
class GrowNearFlavorMutation extends GrowNearMutation {
    /**
     * Constructor for a FlavorMutation
     * @param mutationChance The chance of the mutation occuring
     * @param mutatedBerry The mutated BerryType
     * @param flavorReqs The flavor requirements for the mutation to occur
     * @param options The additional MutationOptions
     */
    constructor(mutationChance, mutatedBerry, flavorReqs, options) {
        super(mutationChance, mutatedBerry, options);
        this.flavorRatio = [0.5, 0.75, 1]; // Determines how much flavor a Berry plant has before fully mature.
        this.flavorReqs = flavorReqs;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        const nearFlavors = [0, 0, 0, 0, 0];
        plots.forEach(idx => {
            const plot = App.game.farming.plotList[idx];
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() < PlotStage.Taller) {
                return;
            }
            const berryFlavors = App.game.farming.berryData[plot.berry].flavors.map(x => x.value * this.flavorRatio[plot.stage() - 2]);
            for (let j = 0; j < 5; j++) {
                nearFlavors[j] += berryFlavors[j];
            }
        });
        return this.flavorReqs.every((value, idx) => value[0] <= nearFlavors[idx] && nearFlavors[idx] <= value[1]);
    }
    /**
     * Handles getting the mutation chance.
     * Will decrease the mutation chance if the mutatedBerry already exists around this one.
     * @param idx The plot index
     */
    mutationChance(idx) {
        const sameBerries = Plot.findNearPlots(idx).filter(plotIndex => {
            return App.game.farming.plotList[plotIndex].berry === this.mutatedBerry;
        }).length;
        return super.mutationChance(idx) * Math.pow(4, -sameBerries);
    }
}
/// <reference path="./EvolveMutation.ts" />
/**
 * Mutation that applies to a current Berry plant based on the active state of Oak Items
 */
class OakMutation extends EvolveMutation {
    constructor(mutationChance, mutatedBerry, originalBerry, oakItem, options) {
        super(mutationChance, mutatedBerry, originalBerry, options);
        this.oakItem = oakItem;
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = super.getMutationPlots();
        return plots.filter((idx) => {
            const plot = App.game.farming.plotList[idx];
            return this.plotFitRequirements(plot, idx);
        });
    }
    /**
     * Checks whether a plot fits the requirements for a mutation
     * @param plot The Plot
     * @param idx The Plot index
     */
    plotFitRequirements(plot, idx) {
        if (!App.game.oakItems.isActive(this.oakItem)) {
            return false;
        }
        if (this.originalBerry && plot.berry !== this.originalBerry) {
            return false;
        }
        return true;
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        // Check Oak Item unlock status
        if (!App.game.oakItems.isUnlocked(this.oakItem)) {
            return false;
        }
        return super.unlocked;
    }
    /**
     * Handles getting the hint for this mutation for the Kanto Berry Master
     */
    get hint() {
        if (super.hint) {
            return super.hint;
        }
        return `I've heard that using the ${App.game.oakItems.itemList[this.oakItem].displayName} can cause ${BerryType[this.originalBerry]} Berries to change!`;
    }
}
/// <reference path="./EvolveNearBerryMutation.ts" />
/**
 * Parasite Mutation
 */
class ParasiteMutation extends EvolveNearBerryMutation {
    constructor(mutationChance, berry) {
        super(mutationChance, berry, undefined, [berry], { showHint: false });
    }
    /**
     * Determines which plots can mutate. Excludes the parasite berry
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = super.getMutationPlots();
        return plots.filter((idx) => {
            return App.game.farming.plotList[idx].berry !== this.mutatedBerry;
        });
    }
}
/// <reference path="./GrowMutation.ts" />
/**
 * Mutation for the Petaya Berry. Requires all 18 typed Berries to be in the field.
 */
class PetayaMutation extends GrowMutation {
    constructor(mutationChance, options) {
        super(mutationChance, BerryType.Petaya, options);
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const emptyPlots = super.getMutationPlots();
        const fieldPlots = {};
        App.game.farming.plotList.forEach((plot, idx) => {
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() !== PlotStage.Berry) {
                return;
            }
            if (!fieldPlots[plot.berry]) {
                fieldPlots[plot.berry] = 1;
            }
            else {
                fieldPlots[plot.berry] += 1;
            }
        });
        const requiredBerries = Farming.getGeneration(3);
        if (requiredBerries.every(berry => fieldPlots[berry])) {
            return emptyPlots;
        }
        return [];
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        // Check for Berry requirements
        const requiredBerries = Farming.getGeneration(3);
        if (!requiredBerries.every(berry => App.game.farming.unlockedBerries[berry]())) {
            return false;
        }
        return super.unlocked;
    }
    /**
     * Handles getting the hint for this mutation for the Kanto Berry Master
     */
    get hint() {
        if (super.hint) {
            return super.hint;
        }
        return 'Legends tell of a mysterious Berry that only appears while surrounded by all types of Berries.';
    }
}
class FluteEffectRunner {
    static initialize(multiplier) {
        FluteEffectRunner.numActiveFlutes(0);
        GameHelper.enumStrings(GameConstants.FluteItemType).forEach((itemName) => {
            const item = ItemList[itemName];
            if (item.multiplierType) {
                multiplier.addBonus(item.multiplierType, () => this.getFluteMultiplier(itemName));
            }
            if (this.isActive(itemName)()) {
                GameHelper.incrementObservable(this.numActiveFlutes, 1);
            }
        });
        this.updateActiveGemTypes();
    }
    static tick() {
        this.counter = 0;
        GameHelper.enumStrings(GameConstants.FluteItemType).forEach((itemName) => {
            if (this.getLowestGem(itemName) > 0 && this.isActive(itemName)()) {
                player.effectList[itemName](Math.max(0, this.getLowestGem(itemName) - this.numActiveFlutes()));
                this.updateFormattedTimeLeft(itemName);
                if (this.numActiveFlutes() >= this.getLowestGem(itemName)) {
                    this.removeEffect(itemName);
                    Notifier.notify({
                        message: `You ran out of gems for the ${GameConstants.humanifyString(itemName)}'s effect!`,
                        type: NotificationConstants.NotificationOption.danger,
                        sound: NotificationConstants.NotificationSound.General.battle_item_timer,
                        setting: NotificationConstants.NotificationSetting.Items.battle_item_timer,
                        timeout: 1 * GameConstants.MINUTE,
                    });
                    App.game.logbook.newLog(LogBookTypes.OTHER, `You ran out of gems for the ${GameConstants.humanifyString(itemName)}!`);
                }
            }
        });
        this.gemCost();
    }
    static getLowestGem(itemName) {
        const item = ItemList[itemName];
        const gemArray = item.gemTypes.map(idx => App.game.gems.gemWallet[PokemonType[idx]]());
        const gemMaxTime = Math.min(...gemArray);
        return gemMaxTime;
    }
    static updateActiveGemTypes() {
        this.activeGemTypes.removeAll();
        const gemTypes = new Set();
        GameHelper.enumStrings(GameConstants.FluteItemType).forEach((itemName) => {
            if (FluteEffectRunner.isActive(itemName)()) {
                const item = ItemList[itemName];
                item.gemTypes.forEach(idx => gemTypes.add(PokemonType[idx]));
            }
        });
        [...gemTypes].forEach(x => this.activeGemTypes.push(x));
    }
    static gemCost() {
        this.activeGemTypes().forEach(idx => App.game.gems.gainGems(-this.numActiveFlutes(), idx));
    }
    static getEffect(itemName) {
        if (!player) {
            return 0;
        }
        return player.effectList[itemName]();
    }
    static toggleEffect(itemName) {
        if (this.isActive(itemName)()) {
            this.removeEffect(itemName);
            return;
        }
        player.effectList[itemName](Math.max(0, player.effectList[itemName]() + FluteEffectRunner.getLowestGem(itemName)));
        GameHelper.incrementObservable(this.numActiveFlutes, 1);
        this.updateFormattedTimeLeft(itemName);
        this.updateActiveGemTypes();
    }
    static removeEffect(itemName) {
        player.effectList[itemName](0);
        GameHelper.incrementObservable(this.numActiveFlutes, -1);
        this.updateFormattedTimeLeft(itemName);
        player.gainItem(itemName, 1);
        this.updateActiveGemTypes();
    }
    static fluteFormattedTime(itemName) {
        return (player.effectList[itemName]() / this.numActiveFlutes());
    }
    static fluteTooltip(itemName) {
        const str = [];
        str.push(`Gems/Second: ${FluteEffectRunner.numActiveFlutes()} <br><br>Gem Types Used:`);
        const item = ItemList[itemName];
        item.gemTypes.forEach(t => {
            str.push(`${t}: ${App.game.gems.gemWallet[PokemonType[t]]().toLocaleString('en-US')}`);
        });
        str.push(`<br>Time Remaining:<br> ${GameConstants.formatSecondsToTime(this.fluteFormattedTime(itemName))}`);
        return str.join('<br>');
    }
    static updateFormattedTimeLeft(itemName) {
        const times = GameConstants.formatTime(this.fluteFormattedTime(itemName)).split(':');
        if (+times[0] > 99) {
            return player.effectTimer[itemName]('99h+');
        }
        else if (+times[0] > 0) {
            return player.effectTimer[itemName](`${+times[0]}h`);
        }
        times.shift();
        player.effectTimer[itemName](times.join(':'));
    }
    static getFluteMultiplier(itemName) {
        const flute = ItemList[itemName];
        return this.isActive(flute.name)() ? flute.getMultiplier() : 1;
    }
    static isActive(itemName) {
        return ko.pureComputed(() => {
            if (!player) {
                return false;
            }
            return !!player.effectList[itemName]();
        });
    }
}
FluteEffectRunner.counter = 0;
FluteEffectRunner.numActiveFlutes = ko.observable(0);
FluteEffectRunner.activeGemTypes = ko.observableArray();
class GemDeal {
    constructor(gemCosts, item, itemAmount) {
        this.gems = gemCosts;
        this.item = { itemType: item, amount: itemAmount };
    }
    static generateDeals() {
        const gemMasterRegions = [GameConstants.Region.hoenn, GameConstants.Region.unova, GameConstants.Region.kalos];
        for (const region of gemMasterRegions) {
            if (!GemDeal.list[region]) {
                GemDeal.list[region] = ko.observableArray();
            }
            else {
                GemDeal.list[region].removeAll();
            }
        }
        GemDeal.list[GameConstants.Region.hoenn].push(...this.generateHoennFluteDeals());
        GemDeal.list[GameConstants.Region.unova].push(...this.generateUnovaFluteDeals());
        GemDeal.list[GameConstants.Region.kalos].push(...this.generateFurfrouDeal());
    }
    static generateHoennFluteDeals() {
        const list = [];
        list.push(new GemDeal([
            { gemType: PokemonType.Grass, amount: 5000 },
            { gemType: PokemonType.Flying, amount: 5000 },
            { gemType: PokemonType.Electric, amount: 5000 },
        ], ItemList.Yellow_Flute, 1));
        list.push(new GemDeal([
            { gemType: PokemonType.Ground, amount: 5000 },
            { gemType: PokemonType.Poison, amount: 5000 },
            { gemType: PokemonType.Steel, amount: 5000 },
        ], ItemList.Time_Flute, 1));
        list.push(new GemDeal([
            { gemType: PokemonType.Dark, amount: 5000 },
            { gemType: PokemonType.Psychic, amount: 5000 },
            { gemType: PokemonType.Fighting, amount: 5000 },
        ], ItemList.Black_Flute, 1));
        return list;
    }
    static generateUnovaFluteDeals() {
        const list = [];
        list.push(new GemDeal([
            { gemType: PokemonType.Fire, amount: 10000 },
            { gemType: PokemonType.Rock, amount: 10000 },
            { gemType: PokemonType.Dragon, amount: 10000 },
        ], ItemList.Red_Flute, 1));
        list.push(new GemDeal([
            { gemType: PokemonType.Normal, amount: 10000 },
            { gemType: PokemonType.Fairy, amount: 10000 },
            { gemType: PokemonType.Ice, amount: 10000 },
        ], ItemList.White_Flute, 1));
        list.push(new GemDeal([
            { gemType: PokemonType.Water, amount: 10000 },
            { gemType: PokemonType.Bug, amount: 10000 },
            { gemType: PokemonType.Ghost, amount: 10000 },
        ], ItemList.Blue_Flute, 1));
        return list;
    }
    static generateFurfrouDeal() {
        const list = [];
        list.push(new GemDeal([
            { gemType: PokemonType.Normal, amount: 1000000 },
            { gemType: PokemonType.Water, amount: 1000000 },
            { gemType: PokemonType.Grass, amount: 500000 },
            { gemType: PokemonType.Fighting, amount: 500000 },
            { gemType: PokemonType.Poison, amount: 500000 },
            { gemType: PokemonType.Ground, amount: 500000 },
            { gemType: PokemonType.Flying, amount: 500000 },
            { gemType: PokemonType.Bug, amount: 500000 },
            { gemType: PokemonType.Rock, amount: 500000 },
            { gemType: PokemonType.Fire, amount: 250000 },
            { gemType: PokemonType.Electric, amount: 250000 },
            { gemType: PokemonType.Ice, amount: 250000 },
            { gemType: PokemonType.Ghost, amount: 250000 },
            { gemType: PokemonType.Steel, amount: 250000 },
            { gemType: PokemonType.Psychic, amount: 250000 },
            { gemType: PokemonType.Dragon, amount: 100000 },
            { gemType: PokemonType.Dark, amount: 100000 },
            { gemType: PokemonType.Fairy, amount: 100000 },
        ], ItemList['Furfrou (La Reine)'], 1));
        return list;
    }
    static getDeals(region) {
        return GemDeal.list[region];
    }
    static canUse(region, i) {
        const deal = GemDeal.list[region].peek()[i];
        if (ItemList[deal.item.itemType.name].isSoldOut()) {
            return false;
        }
        else {
            return deal.gems.every((value) => App.game.gems.gemWallet[value.gemType]() >= value.amount);
        }
    }
    static use(region, i, tradeTimes = 1) {
        const deal = GemDeal.list[region].peek()[i];
        if (!App.game.badgeCase.hasBadge(BadgeEnums.Heat)) {
            Notifier.notify({
                message: 'You are unable to use Flutes yet.\n<i>Visit the Gym in Lavaridge Town.</i>',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        if (GemDeal.canUse(region, i)) {
            const trades = deal.gems.map(gem => {
                const amt = App.game.gems.gemWallet[gem.gemType]();
                const maxTrades = Math.floor(amt / gem.amount);
                return maxTrades;
            });
            const maxTrades = trades.reduce((a, b) => Math.min(a, b), tradeTimes);
            deal.gems.forEach((value) => GameHelper.incrementObservable(App.game.gems.gemWallet[value.gemType], -value.amount * maxTrades));
            deal.item.itemType.gain(deal.item.amount * maxTrades);
        }
    }
    static isFluteDeal(region, i) {
        const deal = GemDeal.list[region].peek()[i];
        return deal.item.itemType instanceof FluteItem;
    }
}
GemDeal.list = {};
class TownContent {
    constructor(requirements = []) {
        this.tooltip = undefined;
        this.requirements = requirements;
    }
    addParent(parent) {
        this.parent = parent;
    }
    areaStatus() {
        return areaStatus.completed;
    }
    isUnlocked() {
        return this.requirements.every(requirement => requirement.isCompleted());
    }
    clears() {
        return undefined;
    }
    protectedOnclick() {
        var _a;
        if (!this.isVisible()) {
            return;
        }
        const reqsList = [];
        (_a = this.requirements) === null || _a === void 0 ? void 0 : _a.forEach(requirement => {
            if (!requirement.isCompleted()) {
                reqsList.push(requirement.hint());
            }
        });
        if (reqsList.length) {
            Notifier.notify({
                message: `You don't have access yet.\n<i>${reqsList.join('\n')}</i>`,
                type: NotificationConstants.NotificationOption.warning,
            });
        }
        else {
            this.onclick();
        }
    }
}
class DockTownContent extends TownContent {
    cssClass() {
        return 'btn btn-info';
    }
    isVisible() {
        return player.highestRegion() > 0;
    }
    onclick() {
        MapHelper.openShipModal();
    }
    text() {
        return 'Dock';
    }
}
class BattleFrontierTownContent extends TownContent {
    cssClass() {
        return 'btn btn-primary';
    }
    isVisible() {
        return true;
    }
    onclick() {
        App.game.battleFrontier.enter();
    }
    text() {
        return 'Enter Battle Frontier';
    }
}
class NextRegionTownContent extends TownContent {
    cssClass() {
        return 'btn btn-warning';
    }
    isVisible() {
        return MapHelper.ableToTravel();
    }
    onclick() {
        $('#nextRegionModal').modal('show');
    }
    text() {
        return `Travel to ${GameConstants.camelCaseToString(GameConstants.Region[player.highestRegion() + 1])}`;
    }
}
class MoveToDungeon extends TownContent {
    constructor(dungeon, visibleRequirement = undefined) {
        super([]);
        this.dungeon = dungeon;
        this.visibleRequirement = visibleRequirement;
    }
    cssClass() {
        return 'btn btn-secondary';
    }
    text() {
        return this.dungeon.name;
    }
    isVisible() {
        var _a, _b;
        return (_b = (_a = this.visibleRequirement) === null || _a === void 0 ? void 0 : _a.isCompleted()) !== null && _b !== void 0 ? _b : true;
    }
    onclick() {
        MapHelper.moveToTown(this.dungeon.name);
    }
    isUnlocked() {
        return TownList[this.dungeon.name].isUnlocked();
    }
    areaStatus() {
        return areaStatus[MapHelper.calculateTownCssClass(this.dungeon.name)];
    }
    clears() {
        if (!QuestLineHelper.isQuestLineCompleted('Tutorial Quests')) {
            return undefined;
        }
        return App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(this.dungeon.name)]();
    }
}
///<reference path="GymPokemon.ts"/>
///<reference path="../pokemons/PokemonFactory.ts"/>
///<reference path="../../declarations/requirements/OneFromManyRequirement.d.ts"/>
///<reference path="../../declarations/enums/Badges.d.ts"/>
///<reference path="../towns/TownContent.ts"/>
/**
 * Gym class.
 */
class Gym extends TownContent {
    constructor(leaderName, town, pokemons, badgeReward, moneyReward, defeatMessage, requirements = [], rewardFunction = () => { }, { quest = true, achievement = true, } = {}) {
        super(requirements);
        this.leaderName = leaderName;
        this.town = town;
        this.pokemons = pokemons;
        this.badgeReward = badgeReward;
        this.moneyReward = moneyReward;
        this.defeatMessage = defeatMessage;
        this.rewardFunction = rewardFunction;
        this.tooltip = 'Battle Gym Leaders to earn badges';
        this.flags = {
            quest: true,
            achievement: true,
        };
        this.flags.quest = quest;
        this.flags.achievement = achievement;
        if (!town.includes('Elite') && !town.includes('Champion')) {
            this.buttonText = `${leaderName.replace(/\d/g, '')}'s gym`;
        }
        else {
            this.buttonText = leaderName.replace(/\d/g, '');
        }
    }
    cssClass() {
        if (App.game.badgeCase.hasBadge(this.badgeReward)) {
            return 'btn btn-success';
        }
        return 'btn btn-secondary';
    }
    text() {
        return this.buttonText;
    }
    isVisible() {
        return true;
    }
    onclick() {
        GymRunner.startGym(this);
    }
    areaStatus() {
        if (!this.isUnlocked()) {
            return areaStatus.locked;
        }
        else if (!App.game.badgeCase.hasBadge(this.badgeReward)) {
            return areaStatus.unlockedUnfinished;
        }
        else if (this.isThereQuestAtLocation()) {
            return areaStatus.questAtLocation;
        }
        else if (!this.isAchievementsComplete()) {
            return areaStatus.missingAchievement;
        }
        return areaStatus.completed;
    }
    clears() {
        if (!QuestLineHelper.isQuestLineCompleted('Tutorial Quests')) {
            return undefined;
        }
        return App.game.statistics.gymsDefeated[GameConstants.getGymIndex(this.town)]();
    }
    isAchievementsComplete() {
        const gymIndex = GameConstants.getGymIndex(this.town);
        return AchievementHandler.achievementList.every(achievement => {
            return !(achievement.property instanceof ClearGymRequirement && achievement.property.gymIndex === gymIndex && !achievement.isCompleted());
        });
    }
    isThereQuestAtLocation() {
        return App.game.quests.currentQuests().some(q => {
            return q instanceof DefeatGymQuest && q.gymTown == this.town;
        });
    }
    static getLeaderByBadge(badge) {
        for (const item in GymList) {
            const gym = GymList[item];
            if (BadgeEnums[gym.badgeReward] == BadgeEnums[BadgeEnums[badge]]) {
                return gym.leaderName;
            }
        }
        return 'Brock';
    }
    firstWinReward() {
        // Give the player this gyms badge
        App.game.badgeCase.gainBadge(this.badgeReward);
        // Show the badge modal
        $('#receiveBadgeModal').modal('show');
        // Run the first time reward function
        this.rewardFunction();
    }
    get imagePath() {
        return `assets/images/gymLeaders/${GymBattle.gym.leaderName}.png`;
    }
}
/// <reference path="../../declarations/enums/Badges.d.ts"/>
///<reference path="Gym.ts"/>
class Champion extends Gym {
    constructor(leaderName, town, basePokemon, badgeReward, moneyReward, rewardMessage, requirements = [], alternativePokemon1, alternativePokemon2, alternativePokemon3, rewardFunction = () => { }) {
        super(leaderName, town, basePokemon, badgeReward, moneyReward, rewardMessage, requirements, rewardFunction);
        this.basePokemon = basePokemon;
        this.alternativePokemon1 = alternativePokemon1;
        this.alternativePokemon2 = alternativePokemon2;
        this.alternativePokemon3 = alternativePokemon3;
        this.rewardFunction = rewardFunction;
    }
    setPokemon(starter) {
        this.pokemons = [...this.basePokemon];
        switch (starter) {
            case 0: {
                if (this.alternativePokemon1 != undefined) {
                    this.pokemons.push(...this.alternativePokemon1);
                }
                break;
            }
            case 1: {
                if (this.alternativePokemon2 != undefined) {
                    this.pokemons.push(...this.alternativePokemon2);
                }
                break;
            }
            case 2:
            default: {
                if (this.alternativePokemon3 != undefined) {
                    this.pokemons.push(...this.alternativePokemon3);
                }
                break;
            }
        }
    }
}
///<reference path="../Battle.ts"/>
class GymBattle extends Battle {
    static pokemonAttack() {
        if (GymRunner.running()) {
            super.pokemonAttack();
        }
    }
    static clickAttack() {
        if (GymRunner.running()) {
            super.clickAttack();
        }
    }
    /**
     * Award the player with exp, and go to the next pokemon
     */
    static defeatPokemon() {
        this.enemyPokemon().defeat(true);
        // Make gym "route" regionless
        App.game.breeding.progressEggsBattle(this.gym.badgeReward * 3 + 1, GameConstants.Region.none);
        this.index(this.index() + 1);
        if (this.index() >= this.gym.pokemons.length) {
            GymRunner.gymWon(this.gym);
        }
        else {
            this.generateNewEnemy();
        }
        player.lowerItemMultipliers(MultiplierDecreaser.Battle);
    }
    /**
     * Reset the counter.
     */
    static generateNewEnemy() {
        this.counter = 0;
        this.enemyPokemon(PokemonFactory.generateGymPokemon(this.gym, this.index()));
    }
}
GymBattle.index = ko.observable(0);
GymBattle.totalPokemons = ko.observable(0);
GymBattle.pokemonsDefeatedComputable = ko.pureComputed(() => {
    return GymBattle.index();
});
GymBattle.pokemonsUndefeatedComputable = ko.pureComputed(() => {
    return GymBattle.totalPokemons() - GymBattle.index();
});
const GymList = {};
// Kanto Gyms
GymList['Pewter City'] = new Gym('Brock', 'Pewter City', [
    new GymPokemon('Geodude', 693, 12),
    new GymPokemon('Onix', 1399, 14),
], BadgeEnums.Boulder, 250, 'I took you for granted, and so I lost. As proof of your victory, I confer on you this... the official Pokémon League Boulder Badge.', [new RouteKillRequirement(10, GameConstants.Region.kanto, 2)]);
GymList['Cerulean City'] = new Gym('Misty', 'Cerulean City', [
    new GymPokemon('Staryu', 4000, 18),
    new GymPokemon('Starmie', 6800, 21),
], BadgeEnums.Cascade, 500, 'Wow! You\'re too much, all right! You can have the Cascade Badge to show that you beat me.', [new RouteKillRequirement(10, GameConstants.Region.kanto, 4)], () => {
    App.game.quests.getQuestLine('Team Rocket').beginQuest();
});
GymList['Vermilion City'] = new Gym('Lt. Surge', 'Vermilion City', [
    new GymPokemon('Voltorb', 10780, 21),
    new GymPokemon('Pikachu', 13540, 18),
    new GymPokemon('Raichu', 15675, 24),
], BadgeEnums.Thunder, 1000, 'Now that\'s a shocker! You\'re the real deal, kid! Fine, then, take the ThunderBadge!', [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 6),
    new GymBadgeRequirement(BadgeEnums.Cascade),
]);
GymList['Celadon City'] = new Gym('Erika', 'Celadon City', [
    new GymPokemon('Victreebel', 38810, 29),
    new GymPokemon('Tangela', 30340, 24),
    new GymPokemon('Vileplume', 36400, 29),
], BadgeEnums.Rainbow, 1500, 'Oh! I concede defeat. You are remarkably strong. I must confer on you the RainbowBadge.', [new RouteKillRequirement(10, GameConstants.Region.kanto, 7)]);
GymList['Saffron City'] = new Gym('Sabrina', 'Saffron City', [
    new GymPokemon('Kadabra', 23040, 38),
    new GymPokemon('Mr. Mime', 25600, 37),
    new GymPokemon('Venomoth', 28400, 38),
    new GymPokemon('Alakazam', 35380, 43),
], BadgeEnums.Marsh, 2500, 'This loss shocks me! But a loss is a loss. I admit I didn\'t work hard enough to win. You earned the MarshBadge.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Silph Co.'))]);
GymList['Fuchsia City'] = new Gym('Koga', 'Fuchsia City', [
    new GymPokemon('Koffing', 30780, 37),
    new GymPokemon('Muk', 32460, 39),
    new GymPokemon('Koffing', 36430, 37),
    new GymPokemon('Weezing', 37430, 43),
], BadgeEnums.Soul, 3500, 'Humph! You have proven your worth! Here! Take the Soul Badge!', [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.kanto, 18),
        new RouteKillRequirement(10, GameConstants.Region.kanto, 15),
    ]),
], () => {
    App.game.keyItems.gainKeyItem(KeyItemType.Safari_ticket, true);
    App.game.quests.getQuestLine('Mining Expedition').beginQuest();
});
GymList['Cinnabar Island'] = new Gym('Blaine', 'Cinnabar Island', [
    new GymPokemon('Growlithe', 37430, 42),
    new GymPokemon('Ponyta', 42340, 40),
    new GymPokemon('Rapidash', 45230, 42),
    new GymPokemon('Arcanine', 50290, 47),
], BadgeEnums.Volcano, 5000, 'I have burned down to nothing! Not even ashes remain! You have earned the VolcanoBadge.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pokémon Mansion'))], () => {
    App.game.quests.getQuestLine('Bill\'s Errand').beginQuest();
});
GymList['Viridian City'] = new Gym('Giovanni', 'Viridian City', [
    new GymPokemon('Rhyhorn', 45230, 45),
    new GymPokemon('Dugtrio', 47530, 42),
    new GymPokemon('Nidoqueen', 48740, 44),
    new GymPokemon('Nidoking', 48350, 45),
    new GymPokemon('Rhyhorn', 55000, 50),
], BadgeEnums.Earth, 6000, 'Ha! That was a truly intense fight. You have won! As proof, here is the Earth Badge!', [
    new GymBadgeRequirement(BadgeEnums.Thunder),
    new GymBadgeRequirement(BadgeEnums.Rainbow),
    new GymBadgeRequirement(BadgeEnums.Marsh),
    new QuestLineCompletedRequirement('Bill\'s Errand'),
], () => {
    App.game.keyItems.gainKeyItem(KeyItemType.Gem_case, true);
    App.game.quests.getQuestLine('Persons of Interest').beginQuest();
});
// Kanto Elite 4
GymList['Elite Lorelei'] = new Gym('Lorelei', 'Elite Lorelei', [
    new GymPokemon('Dewgong', 45330, 52),
    new GymPokemon('Cloyster', 48300, 51),
    new GymPokemon('Slowbro', 52000, 52),
    new GymPokemon('Jynx', 57000, 54),
    new GymPokemon('Lapras', 60250, 54),
], BadgeEnums.Elite_Lorelei, 7500, '...Things shouldn\'t be this way!', [new GymBadgeRequirement(BadgeEnums.Earth)]);
GymList['Elite Bruno'] = new Gym('Bruno', 'Elite Bruno', [
    new GymPokemon('Onix', 45330, 51),
    new GymPokemon('Hitmonchan', 48300, 53),
    new GymPokemon('Hitmonlee', 52000, 53),
    new GymPokemon('Onix', 57000, 54),
    new GymPokemon('Machamp', 60250, 56),
], BadgeEnums.Elite_Bruno, 7500, 'Why? How could I lose?', [new GymBadgeRequirement(BadgeEnums.Elite_Lorelei)]);
GymList['Elite Agatha'] = new Gym('Agatha', 'Elite Agatha', [
    new GymPokemon('Gengar', 45330, 54),
    new GymPokemon('Golbat', 48300, 54),
    new GymPokemon('Haunter', 52000, 53),
    new GymPokemon('Arbok', 57000, 56),
    new GymPokemon('Gengar', 60250, 58),
], BadgeEnums.Elite_Agatha, 7500, 'Oh, my! You\'re something special, child!', [new GymBadgeRequirement(BadgeEnums.Elite_Bruno)]);
GymList['Elite Lance'] = new Gym('Lance', 'Elite Lance', [
    new GymPokemon('Gyarados', 48300, 56),
    new GymPokemon('Dragonair', 52000, 54),
    new GymPokemon('Dragonair', 57000, 54),
    new GymPokemon('Aerodactyl', 60250, 58),
    new GymPokemon('Dragonite', 66000, 60),
], BadgeEnums.Elite_Lance, 7500, 'That\'s it! I hate to admit it, but you are a Pokémon master!', [new GymBadgeRequirement(BadgeEnums.Elite_Agatha)]);
// Kanto Champion
GymList['Champion Blue'] = new Champion('Blue', 'Champion Blue', [
    new GymPokemon('Pidgeot', 52340, 59),
    new GymPokemon('Alakazam', 56320, 57),
    new GymPokemon('Rhydon', 58340, 59),
], BadgeEnums.Elite_KantoChampion, 10000, 'NO! That can\'t be! You beat me at my best! After all that work to become the League Champ? My reign is over already? It\'s not fair!', [new GymBadgeRequirement(BadgeEnums.Elite_Lance)], 
// Bulbasaur
[
    new GymPokemon('Exeggutor', 57520, 59),
    new GymPokemon('Gyarados', 65340, 61),
    new GymPokemon('Charizard', 70000, 63),
], 
// Charmander
[
    new GymPokemon('Arcanine', 57520, 59),
    new GymPokemon('Exeggutor', 65340, 61),
    new GymPokemon('Blastoise', 70000, 63),
], 
// Squirtle/Pikachu
[
    new GymPokemon('Gyarados', 57520, 59),
    new GymPokemon('Arcanine', 65340, 61),
    new GymPokemon('Venusaur', 70000, 63),
]);
//Johto Gyms
GymList['Violet City'] = new Gym('Falkner', 'Violet City', [
    new GymPokemon('Pidgey', 108000, 7),
    new GymPokemon('Pidgeotto', 112000, 9),
], BadgeEnums.Zephyr, 250, '...Darn! My Dad\'s cherished bird Pokémon... All right. Take this. It\'s the official Pokémon League Zephyr Badge.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Sprout Tower'))]);
GymList['Azalea Town'] = new Gym('Bugsy', 'Azalea Town', [
    new GymPokemon('Metapod', 103000, 14),
    new GymPokemon('Kakuna', 101500, 14),
    new GymPokemon('Scyther', 119000, 16),
], BadgeEnums.Hive, 500, 'Whoa, amazing! You\'re an expert on Pokémon! My research isn\'t complete yet. Ok, you win. Take this Badge.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Slowpoke Well'))]);
GymList['Goldenrod City'] = new Gym('Whitney', 'Goldenrod City', [
    new GymPokemon('Clefairy', 130000, 18),
    new GymPokemon('Miltank', 170000, 20),
], BadgeEnums.Plain, 1000, '...Sniff... What? What do you want? A badge? Oh, right. I forgot. Here\'s the Plain Badge.', [new RouteKillRequirement(10, GameConstants.Region.johto, 34)]);
GymList['Ecruteak City'] = new Gym('Morty', 'Ecruteak City', [
    new GymPokemon('Gastly', 127000, 21),
    new GymPokemon('Haunter', 128000, 21),
    new GymPokemon('Gengar', 132000, 25),
    new GymPokemon('Haunter', 130000, 23),
], BadgeEnums.Fog, 1500, 'I\'m not good enough yet... All right. This Badge is yours.', [new GymBadgeRequirement(BadgeEnums.Plain)], () => {
    App.game.quests.getQuestLine('Team Rocket Again').beginQuest();
});
GymList['Cianwood City'] = new Gym('Chuck', 'Cianwood City', [
    new GymPokemon('Primeape', 177000, 27),
    new GymPokemon('Poliwrath', 183000, 30),
], BadgeEnums.Storm, 2500, 'Wha? Huh? I lost? How about that! You\'re worthy of the Storm Badge!', [new GymBadgeRequirement(BadgeEnums.Fog)]);
GymList['Olivine City'] = new Gym('Jasmine', 'Olivine City', [
    new GymPokemon('Magnemite', 177000, 30),
    new GymPokemon('Magnemite', 178000, 30),
    new GymPokemon('Steelix', 182000, 35),
], BadgeEnums.Mineral, 3500, '...You are a better trainer than me, in both skill and kindness. In accordance with League rules, I confer upon you this Badge.', [new GymBadgeRequirement(BadgeEnums.Storm)]);
GymList['Mahogany Town'] = new Gym('Pryce', 'Mahogany Town', [
    new GymPokemon('Seel', 190000, 27),
    new GymPokemon('Dewgong', 192500, 29),
    new GymPokemon('Piloswine', 196000, 31),
], BadgeEnums.Glacier, 4000, 'Ah, I am impressed by your prowess. With your strong will, I know you will overcome all life\'s obstacles. You are worthy of this Badge!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Rocket\'s Hideout'))]);
GymList['Blackthorn City'] = new Gym('Clair', 'Blackthorn City', [
    new GymPokemon('Dragonair', 205000, 37),
    new GymPokemon('Dragonair', 205000, 37),
    new GymPokemon('Dragonair', 218000, 37),
    new GymPokemon('Kingdra', 220000, 40),
], BadgeEnums.Rising, 5000, 'Here, this is the Rising Badge... Hurry up! Take it!', [new GymBadgeRequirement(BadgeEnums.Glacier)]);
//Johto Elite 4
GymList['Elite Will'] = new Gym('Will', 'Elite Will', [
    new GymPokemon('Xatu', 245330, 40),
    new GymPokemon('Exeggutor', 248300, 41),
    new GymPokemon('Slowbro', 252000, 41),
    new GymPokemon('Jynx', 257000, 41),
    new GymPokemon('Xatu', 260250, 42),
], BadgeEnums.Elite_Will, 7500, 'Even though I was defeated, I won\'t change my course. I will continue battling until I stand above all Trainers! Now move on and experience the true ferocity of the Elite Four.', [new GymBadgeRequirement(BadgeEnums.Rising)]);
GymList['Elite Koga'] = new Gym('Koga2', 'Elite Koga', [
    new GymPokemon('Ariados', 245330, 40),
    new GymPokemon('Venomoth', 248300, 41),
    new GymPokemon('Forretress', 252000, 43),
    new GymPokemon('Muk', 257000, 42),
    new GymPokemon('Crobat', 260250, 44),
], BadgeEnums.Elite_Koga, 7500, 'I subjected you to everything I could muster. But my efforts failed. I must hone my skills. Go on to the next room, and put your abilities to the test!', [new GymBadgeRequirement(BadgeEnums.Elite_Will)]);
GymList['Elite Bruno2'] = new Gym('Bruno2', 'Elite Bruno2', [
    new GymPokemon('Hitmontop', 245330, 42),
    new GymPokemon('Hitmonlee', 248300, 42),
    new GymPokemon('Hitmonchan', 252000, 42),
    new GymPokemon('Onix', 257000, 43),
    new GymPokemon('Machamp', 260250, 46),
], BadgeEnums.Elite_Bruno2, 7500, 'Having lost, I have no right to say anything… Go face your next challenge!', [new GymBadgeRequirement(BadgeEnums.Elite_Koga)]);
GymList['Elite Karen'] = new Gym('Karen', 'Elite Karen', [
    new GymPokemon('Umbreon', 248300, 42),
    new GymPokemon('Vileplume', 252000, 42),
    new GymPokemon('Murkrow', 257000, 44),
    new GymPokemon('Gengar', 260250, 45),
    new GymPokemon('Houndoom', 266000, 47),
], BadgeEnums.Elite_Karen, 7500, 'Strong Pokémon. Weak Pokémon. That is only the selfish perception of people. Truly skilled Trainers should try to win with the Pokémon they love best. I like your style. You understand what\'s important. Go on — — the Champion is waiting.', [new GymBadgeRequirement(BadgeEnums.Elite_Bruno2)]);
// Johto Champion
GymList['Champion Lance'] = new Champion('Lance2', 'Champion Lance', [
    new GymPokemon('Gyarados', 258300, 44),
    new GymPokemon('Dragonite', 262000, 47),
    new GymPokemon('Charizard', 264000, 46),
    new GymPokemon('Aerodactyl', 260250, 46),
    new GymPokemon('Dragonite', 270000, 47),
    new GymPokemon('Dragonite', 270000, 50),
], BadgeEnums.Elite_JohtoChampion, 7500, '…It\'s over. But it\'s an odd feeling. I\'m not angry that I lost. In fact, I feel happy. Happy that I witnessed the rise of a great new Champion!', [new GymBadgeRequirement(BadgeEnums.Elite_Karen)]);
// Hoenn Gyms
GymList['Rustboro City'] = new Gym('Roxanne', 'Rustboro City', [
    new GymPokemon('Geodude', 382900, 12),
    new GymPokemon('Geodude', 382900, 12),
    new GymPokemon('Nosepass', 410200, 15),
], BadgeEnums.Stone, 1000, 'So… I lost… It seems that I still have much more to learn… I understand. The Pokémon League\'s rules state that Trainers are to be given this if they defeat a Gym Leader. Please accept the official Pokémon League Stone Badge.', [new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion)]);
GymList['Dewford Town'] = new Gym('Brawly', 'Dewford Town', [
    new GymPokemon('Machop', 424000, 16),
    new GymPokemon('Meditite', 424000, 16),
    new GymPokemon('Makuhita', 444000, 19),
], BadgeEnums.Knuckle, 2000, 'Whoah, wow! You made a much bigger splash than I expected! You swamped me! Okay, you\'ve got me. Take this Gym Badge!');
GymList['Mauville City'] = new Gym('Wattson', 'Mauville City', [
    new GymPokemon('Voltorb', 452000, 20),
    new GymPokemon('Electrike', 448000, 20),
    new GymPokemon('Magneton', 483000, 22),
    new GymPokemon('Manectric', 448000, 24),
], BadgeEnums.Dynamo, 3000, 'Wahahahah! Fine, I lost! You ended up giving me a thrill! Take this Badge!', undefined, () => {
    App.game.quests.getQuestLine('Land vs. Water').beginQuest();
});
GymList['Lavaridge Town'] = new Gym('Flannery', 'Lavaridge Town', [
    new GymPokemon('Numel', 472000, 24),
    new GymPokemon('Slugma', 472000, 24),
    new GymPokemon('Camerupt', 492000, 26),
    new GymPokemon('Torkoal', 524000, 29),
], BadgeEnums.Heat, 4000, 'Oh... I guess I was trying too hard... I... I\'ve only recently become a Gym Leader. I tried too hard to be someone I\'m not. I have to do things my natural way. If I don\'t, my Pokémon will be confused. Thanks for teaching me that. For that, you deserve this.');
GymList['Petalburg City'] = new Gym('Norman', 'Petalburg City', [
    new GymPokemon('Spinda', 490000, 27),
    new GymPokemon('Vigoroth', 530000, 27),
    new GymPokemon('Linoone', 560000, 29),
    new GymPokemon('Slaking', 596000, 31),
], BadgeEnums.Balance, 5000, '… I… I can\'t… I can\'t believe it. I lost to you? But, rules are rules! Here, take this.', [
    new GymBadgeRequirement(BadgeEnums.Knuckle),
    new GymBadgeRequirement(BadgeEnums.Heat),
]);
GymList['Fortree City'] = new Gym('Winona', 'Fortree City', [
    new GymPokemon('Swablu', 605000, 29),
    new GymPokemon('Tropius', 650000, 29),
    new GymPokemon('Pelipper', 630000, 30),
    new GymPokemon('Skarmory', 667000, 31),
    new GymPokemon('Altaria', 669000, 33),
], BadgeEnums.Feather, 6000, 'Never before have I seen a Trainer command Pokémon with more grace than I... In recognition of your prowess, I present to you this Gym Badge.');
GymList['Mossdeep City'] = new Gym('Tate & Liza', 'Mossdeep City', [
    new GymPokemon('Claydol', 702000, 41),
    new GymPokemon('Xatu', 703000, 41),
    new GymPokemon('Lunatone', 702000, 42),
    new GymPokemon('Solrock', 703000, 42),
], BadgeEnums.Mind, 8000, 'What? Our combination... was shattered! It can\'t be helped. You\'ve won... So, in recognition, take this Gym Badge.');
GymList['Sootopolis City'] = new Gym('Juan', 'Sootopolis City', [
    new GymPokemon('Luvdisc', 798000, 41),
    new GymPokemon('Whiscash', 813000, 41),
    new GymPokemon('Sealeo', 823400, 43),
    new GymPokemon('Crawdaunt', 842000, 43),
    new GymPokemon('Kingdra', 865000, 46),
], BadgeEnums.Rain, 10000, 'Ahahaha, excellent! Very well, you are the winner. From you, I sense the brilliant shine of skill that will overcome all. However, compared with me or even Wallace, you are lacking in elegance. Perhaps I should make you a loan of my outfit? ... Hahaha, I merely jest! Rather than my clothes, I shall reward you with this, the Rain Badge.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Sky Pillar'))]);
// Hoenn Elite 4
GymList['Elite Sidney'] = new Gym('Sidney', 'Elite Sidney', [
    new GymPokemon('Mightyena', 972000, 46),
    new GymPokemon('Shiftry', 980000, 48),
    new GymPokemon('Cacturne', 1002000, 46),
    new GymPokemon('Crawdaunt', 1015000, 48),
    new GymPokemon('Absol', 1020000, 49),
], BadgeEnums.Elite_Sidney, 15000, 'Well, listen to what this loser has to say. You\'ve got what it takes to go far. Now, go on to the next room and enjoy your next battle!', [
    new GymBadgeRequirement(BadgeEnums.Feather),
    new GymBadgeRequirement(BadgeEnums.Rain),
]);
GymList['Elite Phoebe'] = new Gym('Phoebe', 'Elite Phoebe', [
    new GymPokemon('Dusclops', 1036700, 48),
    new GymPokemon('Banette', 1038000, 49),
    new GymPokemon('Sableye', 1052000, 50),
    new GymPokemon('Banette', 1038000, 49),
    new GymPokemon('Dusclops', 1063000, 51),
], BadgeEnums.Elite_Phoebe, 15000, 'There\'s a definite bond between you and your Pokémon, too. I didn\'t recognize it, so it\'s only natural that I lost. Yup, I\'d like to see how far your bond will carry you. Go ahead, move to the next room.', [new GymBadgeRequirement(BadgeEnums.Elite_Sidney)]);
GymList['Elite Glacia'] = new Gym('Glacia', 'Elite Glacia', [
    new GymPokemon('Sealeo', 1082000, 50),
    new GymPokemon('Glalie', 1072000, 50),
    new GymPokemon('Sealeo', 1086000, 52),
    new GymPokemon('Glalie', 1076000, 52),
    new GymPokemon('Walrein', 1100000, 53),
], BadgeEnums.Elite_Glacia, 15000, 'Advance to the next room. And there, confirm the truly fearsome side of the Pokémon League.', [new GymBadgeRequirement(BadgeEnums.Elite_Phoebe)]);
GymList['Elite Drake'] = new Gym('Drake', 'Elite Drake', [
    new GymPokemon('Shelgon', 1064000, 52),
    new GymPokemon('Altaria', 1072000, 54),
    new GymPokemon('Flygon', 1076000, 53),
    new GymPokemon('Flygon', 1076000, 53),
    new GymPokemon('Salamence', 1157000, 55),
], BadgeEnums.Elite_Drake, 15000, 'You deserve every credit for coming this far as a Trainer of Pokémon. You do seem to know what is needed. Yes, what a Trainer needs is a virtuous heart. Pokémon touch the good hearts of Trainers and learn good from wrong. They touch the good hearts of Trainers and grow strong. Go! Go onwards! The Champion is waiting!', [new GymBadgeRequirement(BadgeEnums.Elite_Glacia)]);
// Hoenn Champion
GymList['Champion Wallace'] = new Champion('Wallace', 'Champion Wallace', [
    new GymPokemon('Wailord', 1202000, 57),
    new GymPokemon('Tentacruel', 1164000, 55),
    new GymPokemon('Ludicolo', 1184000, 56),
    new GymPokemon('Whiscash', 1172000, 56),
    new GymPokemon('Gyarados', 1163000, 56),
    new GymPokemon('Milotic', 1182000, 58),
], BadgeEnums.Elite_HoennChampion, 16000, 'I, the Champion, fall in defeat… That was wonderful work. You were elegant, infuriatingly so. And yet it was utterly glorious! Kudos to you! You are a truly noble Pokémon Trainer!', [new GymBadgeRequirement(BadgeEnums.Elite_Drake)], undefined, undefined, undefined, () => {
    App.game.quests.getQuestLine('Mystery of Deoxys').beginQuest();
});
// Orange league gyms
GymList['Mikan Island'] = new Gym('Cissy', 'Mikan Island', [
    new GymPokemon('Seadra', 2307500, 24),
    new GymPokemon('Blastoise', 2307500, 24),
], BadgeEnums['Coral-Eye'], 740, 'I can see why you made it so far in the Indigo League, and I bet you\'ll do pretty well in the Orange League.\n' +
    'This is the Coral-Eye Badge of the Mikan Gym, to prove that you won your match!');
GymList['Navel Island'] = new Gym('Danny', 'Navel Island', [
    new GymPokemon('Geodude', 923000, 24),
    new GymPokemon('Nidoqueen', 923000, 24),
    new GymPokemon('Machoke', 923000, 24),
    new GymPokemon('Scyther', 923000, 24),
    new GymPokemon('Electrode', 923000, 24),
], BadgeEnums.Sea_Ruby, 740, 'You and the others were great.\nNow I\'d like to give you and your fellow challengers something you really deserve. The Sea Ruby badge. It\'s yours.');
GymList['Trovita Island'] = new Gym('Rudy', 'Trovita Island', [
    new GymPokemon('Electabuzz', 1538333, 24),
    new GymPokemon('Exeggutor', 1538333, 24),
    new GymPokemon('Starmie', 1538333, 24),
], BadgeEnums.Spike_Shell, 740, 'Nice job, guys. Here are your Spike Shell badges, guys.');
GymList['Kumquat Island'] = new Gym('Luana', 'Kumquat Island', [
    new GymPokemon('Alakazam', 2307500, 24),
    new GymPokemon('Marowak', 2307500, 24),
], BadgeEnums.Jade_Star, 740, //TODO
'You did a fine job.\nAnd now, as Kumquat Island gym leader, and a member of the Orange Crew, I happily present this token of your victory.');
// Orange league champion
GymList['Supreme Gym Leader Drake'] = new Gym('Supreme Gym Leader Drake', 'Supreme Gym Leader Drake', [
    new GymPokemon('Ditto', 899520, 38),
    new GymPokemon('Onix', 899520, 39),
    new GymPokemon('Gengar', 899520, 40),
    new GymPokemon('Venusaur', 899520, 40),
    new GymPokemon('Electabuzz', 899520, 41),
    new GymPokemon('Dragonite', 1124400, 37),
], BadgeEnums.Elite_OrangeChampion, 4800, 'You really deserve that trophy. You\'re a great Pokémon trainer.');
//Sinnoh Gyms
GymList['Oreburgh City'] = new Gym('Roark', 'Oreburgh City', [
    new GymPokemon('Geodude', 1338000, 12),
    new GymPokemon('Onix', 1342000, 12),
    new GymPokemon('Cranidos', 1342000, 14),
], BadgeEnums.Coal, 250, 'This is embarrassing... I went and lost to a Trainer who didn\'t have a single Gym Badge... But that\'s tough. You were strong, and I was weak. That\'s all there is. According to Pokémon League rules, I have to give you our Gym Badge since you\'ve beaten me, the Leader. Heres your official Pokémon League Coal Badge.', [new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)], () => {
    App.game.quests.getQuestLine('A New World').beginQuest();
});
GymList['Eterna City'] = new Gym('Gardenia', 'Eterna City', [
    new GymPokemon('Turtwig', 1433000, 20),
    new GymPokemon('Cherrim (Overcast)', 1437500, 20),
    new GymPokemon('Roserade', 1439000, 22),
], BadgeEnums.Forest, 400, 'I might\'ve said it before, but you\'re really tough! Wasn\'t it hard for you to raise your Pokémon to be so good? I guess that\'s a measure of how much you love your Pokémon. In recognition of that, I proudly grant you this!"', [new GymBadgeRequirement(BadgeEnums.Coal)]);
GymList['Hearthome City'] = new Gym('Fantina', 'Hearthome City', [
    new GymPokemon('Duskull', 1450000, 24),
    new GymPokemon('Haunter', 1480000, 24),
    new GymPokemon('Mismagius', 1480000, 26),
], BadgeEnums.Relic, 740, 'I am dumbfounded! So very, very strong! You, your Pokémon, so strong! Your power is admirable! I shall honor it with this Gym Badge!"', [new GymBadgeRequirement(BadgeEnums.Forest)]);
GymList['Veilstone City'] = new Gym('Maylene', 'Veilstone City', [
    new GymPokemon('Meditite', 1537000, 28),
    new GymPokemon('Machoke', 1538000, 29),
    new GymPokemon('Lucario', 1540000, 32),
], BadgeEnums.Cobble, 1200, '...OK. You win. That was a tough loss. I learned a lot from it. Please, accept this Gym Badge.', [new GymBadgeRequirement(BadgeEnums.Relic)]);
GymList['Pastoria City'] = new Gym('Crasher Wake', 'Pastoria City', [
    new GymPokemon('Gyarados', 1687000, 33),
    new GymPokemon('Quagsire', 1693000, 34),
    new GymPokemon('Floatzel', 1693000, 37),
], BadgeEnums.Fen, 2500, 'It seems the undertow pulled me under... But I had a great time battling with you! You\'ve earned this!', [new GymBadgeRequirement(BadgeEnums.Cobble)]);
GymList['Canalave City'] = new Gym('Byron', 'Canalave City', [
    new GymPokemon('Magneton', 1767000, 37),
    new GymPokemon('Steelix', 1772000, 38),
    new GymPokemon('Bastiodon', 1768000, 41),
], BadgeEnums.Mine, 4800, 'You were strong enough to take down my prized team of Pokémon. In recognition of that power, I give you this: the Mine Badge!', [new GymBadgeRequirement(BadgeEnums.Fen)]);
GymList['Snowpoint City'] = new Gym('Candice', 'Snowpoint City', [
    new GymPokemon('Sneasel', 1872500, 40),
    new GymPokemon('Piloswine', 1876000, 40),
    new GymPokemon('Abomasnow', 1870000, 42),
    new GymPokemon('Froslass', 1870000, 44),
], BadgeEnums.Icicle, 8000, 'Wow! You\'re great! You\'ve earned my respect! I think your focus and will bowled us over totally. Oh, that\'s right! I\'m supposed to give you this!', [new GymBadgeRequirement(BadgeEnums.Mine)]);
GymList['Sunyshore City'] = new Gym('Volkner', 'Sunyshore City', [
    new GymPokemon('Jolteon', 1965000, 46),
    new GymPokemon('Raichu', 1965000, 46),
    new GymPokemon('Luxray', 1978000, 48),
    new GymPokemon('Electivire', 1980000, 50),
], BadgeEnums.Beacon, 12000, '...Hehehe. Hahahah! ...That was the most fun I\'ve had in a battle since...I don\'t know when! It\'s also made me excited to know you and your team will keep battling to greater heights! This is your eighth Gym Badge. You\'ve earned this!', [new GymBadgeRequirement(BadgeEnums.Icicle)]);
//Sinnoh Elite 4
GymList['Elite Aaron'] = new Gym('Aaron', 'Elite Aaron', [
    new GymPokemon('Yanmega', 2545330, 49),
    new GymPokemon('Scizor', 2548300, 49),
    new GymPokemon('Vespiquen', 2552000, 50),
    new GymPokemon('Heracross', 2557000, 51),
    new GymPokemon('Drapion', 2560250, 53),
], BadgeEnums.Elite_Aaron, 18000, 'I lost with the most beautiful and toughest of the bug Pokémon... We lost because I wasn\'t good enough... That\'s it! Back to training camp! Let\'s hear it for me! No... That was wrong... Anyway... Go on to the next room! Three Trainers are waiting for you. They are all tougher than me.', [new GymBadgeRequirement(BadgeEnums.Beacon)]);
GymList['Elite Bertha'] = new Gym('Bertha', 'Elite Bertha', [
    new GymPokemon('Whiscash', 2645330, 50),
    new GymPokemon('Gliscor', 2648300, 53),
    new GymPokemon('Hippowdon', 2652000, 52),
    new GymPokemon('Golem', 2657000, 52),
    new GymPokemon('Rhyperior', 2660250, 55),
], BadgeEnums.Elite_Bertha, 18000, 'You\'re quite something, youngster. I like how you and your Pokémon earned the win by working as one. That\'s what makes you so strong. Ahahaha! I think that you can go as far as you want.', [new GymBadgeRequirement(BadgeEnums.Elite_Aaron)]);
GymList['Elite Flint'] = new Gym('Flint', 'Elite Flint', [
    new GymPokemon('Houndoom', 2845330, 52),
    new GymPokemon('Flareon', 2848300, 55),
    new GymPokemon('Rapidash', 2852000, 53),
    new GymPokemon('Infernape', 2857000, 55),
    new GymPokemon('Magmortar', 2860250, 57),
], BadgeEnums.Elite_Flint, 18000, '.........Keep going...I know your spirit burns hot. Your whole team does.', [new GymBadgeRequirement(BadgeEnums.Elite_Bertha)]);
GymList['Elite Lucian'] = new Gym('Lucian', 'Elite Lucian', [
    new GymPokemon('Mr. Mime', 3048300, 53),
    new GymPokemon('Espeon', 3052000, 55),
    new GymPokemon('Bronzong', 3057000, 54),
    new GymPokemon('Alakazam', 3060250, 56),
    new GymPokemon('Gallade', 3066000, 59),
], BadgeEnums.Elite_Lucian, 18000, 'Congratulations. You have beaten the Elite Four. However, that doesn\'t mean you\'re done with the Pokémon league. There remains the Champion. I should warn you—the Champion is far stronger than the Elite Four. Now, go on. Step through the doorway to your final battle.', [new GymBadgeRequirement(BadgeEnums.Elite_Flint)]);
// Sinnoh Champion
GymList['Champion Cynthia'] = new Champion('Cynthia', 'Champion Cynthia', [
    new GymPokemon('Spiritomb', 3458300, 58),
    new GymPokemon('Roserade', 3462000, 58),
    new GymPokemon('Togekiss', 3464000, 60),
    new GymPokemon('Lucario', 3460250, 60),
    new GymPokemon('Milotic', 3470000, 58),
    new GymPokemon('Garchomp', 3570000, 62),
], BadgeEnums.Elite_SinnohChampion, 32000, 'That was excellent. Truly, an outstanding battle. You gave the support your Pokémon needed to maximize their power. And you guided them with certainty to secure victory. You have both passion and calculating coolness. Together, you and your Pokémon can overcome any challenge that may come your way. Those are the impressions I got from our battle. I\'m glad I got to take part in the crowning of Sinnoh\'s new Champion!', [new GymBadgeRequirement(BadgeEnums.Elite_Lucian)]);
//Unova Gyms
//TODO: Balancing of gym Pokemon HP & rewards.
GymList['Aspertia City'] = new Gym('Cheren', 'Aspertia City', [
    new GymPokemon('Patrat', 3458300, 58),
    new GymPokemon('Pidove', 3462000, 58),
    new GymPokemon('Lillipup', 3464000, 58),
], BadgeEnums.Basic, 500, 'That battle has made me feel really glad you were my first challenger as a Gym Leader… I give you this in honor of the strength you and your Pokémon showed!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Floccesy Ranch'))]);
GymList['Virbank City'] = new Gym('Roxie', 'Virbank City', [
    new GymPokemon('Koffing', 3658300, 58),
    new GymPokemon('Grimer', 3662000, 58),
    new GymPokemon('Whirlipede', 3664000, 58),
], BadgeEnums.Toxic, 800, 'Sigh! What are you doing losing, Roxie?! Well…I guess that means you\'re strong! This stinks, but I gave it everything I had, and I feel revitalized and refreshed now! Here! Proof that you beat me!', [new GymBadgeRequirement(BadgeEnums.Basic)], () => {
    App.game.quests.getQuestLine('Quest for the DNA Splicers').beginQuest();
});
GymList['Castelia City'] = new Gym('Burgh', 'Castelia City', [
    new GymPokemon('Dwebble', 3858300, 58),
    new GymPokemon('Shelmet', 3862000, 58),
    new GymPokemon('Karrablast', 3964000, 58),
    new GymPokemon('Leavanny', 4064000, 58),
], BadgeEnums.Insect, 1500, 'Oh hoo… You are very strong indeed! I guess it\'s no surprise I lost. Here! Take this Insect Badge! I think it\'ll suit you!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Castelia Sewers'))]);
GymList['Nimbasa City'] = new Gym('Elesa', 'Nimbasa City', [
    new GymPokemon('Emolga', 4258300, 58),
    new GymPokemon('Flaaffy', 4262000, 58),
    new GymPokemon('Joltik', 4464000, 58),
    new GymPokemon('Zebstrika', 4464000, 58),
], BadgeEnums.Bolt, 2600, 'Well… Now you… you\'re an even more wonderful Trainer than I expected. Your sweet fighting style swept me off my feet! Take this!', [new GymBadgeRequirement(BadgeEnums.Insect)]);
GymList['Driftveil City'] = new Gym('Clay', 'Driftveil City', [
    new GymPokemon('Krokorok', 4658300, 58),
    new GymPokemon('Sandslash', 4662000, 58),
    new GymPokemon('Onix', 4864000, 58),
    new GymPokemon('Excadrill', 5064000, 58),
], BadgeEnums.Quake, 4800, 'Phew… You\'re really somethin\'! Li\'l whippersnapper Trainers who pack a real punch keep showin\' up one after another. Mrmph. Here! Take this!', [new GymBadgeRequirement(BadgeEnums.Bolt)]);
GymList['Mistralton City'] = new Gym('Skyla', 'Mistralton City', [
    new GymPokemon('Swoobat', 5458300, 58),
    new GymPokemon('Skarmory', 6062000, 58),
    new GymPokemon('Sigilyph', 5664000, 58),
    new GymPokemon('Swanna', 5864000, 58),
], BadgeEnums.Jet, 7600, 'You\'re an amazing Pokémon Trainer. My Pokémon and I are happy because for the first time in quite a while--about two years, I\'d say--we could fight with our full strength. This is an official League Gym Badge. But this is just a stepping-stone.', [new GymBadgeRequirement(BadgeEnums.Quake)]);
GymList['Opelucid City'] = new Gym('Drayden', 'Opelucid City', [
    new GymPokemon('Druddigon', 6558300, 58),
    new GymPokemon('Flygon', 6662000, 58),
    new GymPokemon('Altaria', 6464000, 58),
    new GymPokemon('Haxorus', 6964000, 58),
], BadgeEnums.Legend, 14000, 'Wonderful. I\'m grateful that we had a chance to meet and battle. It reminded me that Pokémon battles are about working with others to meet our challenges together.', [new GymBadgeRequirement(BadgeEnums.Jet)]);
GymList['Humilau City'] = new Gym('Marlon', 'Humilau City', [
    new GymPokemon('Wailord', 7458300, 58),
    new GymPokemon('Mantine', 7262000, 58),
    new GymPokemon('Carracosta', 7064000, 58),
    new GymPokemon('Jellicent', 7464000, 58),
], BadgeEnums.Wave, 27000, 'You don\'t just look strong, you\'re strong fo\' reals! Eh, I was swept away, too! Oh yeah, yo. I was so surprised that I forgot! I gotta give this to you!', [new GymBadgeRequirement(BadgeEnums.Legend)]);
//Unova Elite 4
//TODO: Balancing of elite Pokemon HP & rewards.
GymList['Elite Shauntal'] = new Gym('Shauntal', 'Elite Shauntal', [
    new GymPokemon('Cofagrigus', 10957000, 60),
    new GymPokemon('Drifblim', 10957000, 60),
    new GymPokemon('Golurk', 10957000, 60),
    new GymPokemon('Banette', 10957000, 60),
    new GymPokemon('Chandelure', 11960250, 62),
], BadgeEnums.Elite_Shauntal, 32000, 'My Pokémon and the challenger\'s Pokémon. Everyone battled even though they were hurt... Thank you.', [new GymBadgeRequirement(BadgeEnums.Wave)]);
GymList['Elite Marshal'] = new Gym('Marshal', 'Elite Marshal', [
    new GymPokemon('Throh', 10957000, 60),
    new GymPokemon('Sawk', 10957000, 60),
    new GymPokemon('Mienshao', 10957000, 60),
    new GymPokemon('Lucario', 10957000, 60),
    new GymPokemon('Conkeldurr', 11960250, 62),
], BadgeEnums.Elite_Marshal, 32000, 'Whew! Well done! As your battles continue, aim for even greater heights!', [new GymBadgeRequirement(BadgeEnums.Wave)]);
GymList['Elite Grimsley'] = new Gym('Grimsley', 'Elite Grimsley', [
    new GymPokemon('Liepard', 10945330, 60),
    new GymPokemon('Scrafty', 10948300, 60),
    new GymPokemon('Krookodile', 10952000, 60),
    new GymPokemon('Absol', 10957000, 60),
    new GymPokemon('Bisharp', 11960250, 62),
], BadgeEnums.Elite_Grimsley, 32000, 'Whether or not you get to fight at full strength, whether or not luck smiles on you--none of that matters. Only results matter. And a loss is a loss. See, victory shines like a bright light. And right now, you and your Pokémon are shining brilliantly.', [new GymBadgeRequirement(BadgeEnums.Wave)]);
GymList['Elite Caitlin'] = new Gym('Caitlin', 'Elite Caitlin', [
    new GymPokemon('Musharna', 10957000, 60),
    new GymPokemon('Sigilyph', 10957000, 60),
    new GymPokemon('Reuniclus', 10957000, 60),
    new GymPokemon('Gothitelle', 10957000, 60),
    new GymPokemon('Metagross', 11960250, 62),
], BadgeEnums.Elite_Caitlin, 32000, 'You and your Pokémon are both excellent and elegant. To have been able to battle against such a splendid team... My Pokémon and I learned a lot! I offer you my thanks.', [new GymBadgeRequirement(BadgeEnums.Wave)]);
// Unova Champion
GymList['Champion Iris'] = new Champion('Iris', 'Champion Iris', [
    new GymPokemon('Hydreigon', 12458300, 61),
    new GymPokemon('Druddigon', 12462000, 61),
    new GymPokemon('Archeops', 12464000, 61),
    new GymPokemon('Aggron', 12460250, 61),
    new GymPokemon('Lapras', 12470000, 61),
    new GymPokemon('Haxorus', 14570000, 63),
], BadgeEnums.Elite_UnovaChampion, 64000, 'I\'m upset I couldn\'t win! But you know what? More than that, I\'m happy! I mean, come on. By having a serious battle, you and your Pokémon, and me and my Pokémon, we all got to know one another better than before! Yep, we sure did! OK, let\'s go!', [
    new GymBadgeRequirement(BadgeEnums.Elite_Shauntal),
    new GymBadgeRequirement(BadgeEnums.Elite_Marshal),
    new GymBadgeRequirement(BadgeEnums.Elite_Grimsley),
    new GymBadgeRequirement(BadgeEnums.Elite_Caitlin),
]);
//Kalos Gyms
//TODO: Balancing of gym Pokemon HP & rewards.
GymList['Santalune City'] = new Gym('Viola', 'Santalune City', [
    new GymPokemon('Surskit', 13737400, 10),
    new GymPokemon('Vivillon (Meadow)', 17395730, 12),
], BadgeEnums.Bug, 800, 'Young Trainer, you... No, it wasn\'t you alone. You and your Pokémon have shown me a whole new depth of field! Fantastic! Just fantastic!', [new RouteKillRequirement(10, GameConstants.Region.kalos, 3)]);
GymList['Cyllage City'] = new Gym('Grant', 'Cyllage City', [
    new GymPokemon('Amaura', 16937530, 25),
    new GymPokemon('Tyrunt', 19837400, 25),
], BadgeEnums.Cliff, 1700, 'There are some things that seem out of reach no matter how hard you try. However, it\'s important that you never give up--no matter the opponent or the odds. I could tell from our battle that you and your Pokémon understand that. To commemorate such an impressive show of teamwork, please accept the Cliff Badge!', [new GymBadgeRequirement(BadgeEnums.Bug)]);
GymList['Shalour City'] = new Gym('Korrina', 'Shalour City', [
    new GymPokemon('Mienfoo', 21558300, 29),
    new GymPokemon('Machoke', 22062000, 28),
    new GymPokemon('Hawlucha', 22362000, 32),
], BadgeEnums.Rumble, 3800, 'Oh! I have been defeated! Alack, alay! Lady Korrina gave a terrible display! This is it. I must give up my title and admit that your strength far exceeds-- Just teasing! But here\'s your Badge. Boy, you\'ll be rolling in \'em soon!', [new GymBadgeRequirement(BadgeEnums.Cliff)]);
GymList['Coumarine City'] = new Gym('Ramos', 'Coumarine City', [
    new GymPokemon('Jumpluff', 25508300, 30),
    new GymPokemon('Weepinbell', 27562000, 31),
    new GymPokemon('Gogoat', 29502000, 34),
], BadgeEnums.Plant, 5500, 'Yeh believe in yer Pokémon... And they believe in yeh, too... Mighty oaks from acorns grow. Go on, then. Yeh\'ve earned it. Here\'s yer own Plant Badge, sprout.', [new GymBadgeRequirement(BadgeEnums.Rumble)]);
GymList['Lumiose City'] = new Gym('Clemont', 'Lumiose City', [
    new GymPokemon('Emolga', 30058300, 35),
    new GymPokemon('Magneton', 31062000, 35),
    new GymPokemon('Heliolisk', 32062000, 37),
], BadgeEnums.Voltage, 9000, 'Oh, Bonnie... When will you learn there\'s no shame in losing? I\'m glad whenever I get to learn something new thanks to strong challengers like you here.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Kalos Power Plant'))]);
GymList['Laverre City'] = new Gym('Valerie', 'Laverre City', [
    new GymPokemon('Mawile', 33058300, 38),
    new GymPokemon('Mr. Mime', 36462000, 38),
    new GymPokemon('Sylveon', 38062000, 42),
], BadgeEnums.Fairy, 16000, 'Yes... That was a fine battle. I shall reward you for this great victory. This is the Fairy Badge. It is yours now. Its beauty is captivating, is it not? ... ... ... ... ... ... Ah... Do forgive me. I was so captivated, I forgot for a moment that it is yours.', [new GymBadgeRequirement(BadgeEnums.Voltage)]);
GymList['Anistar City'] = new Gym('Olympia', 'Anistar City', [
    new GymPokemon('Sigilyph', 40058300, 44),
    new GymPokemon('Slowking', 42062000, 45),
    new GymPokemon('Meowstic', 44462000, 48),
], BadgeEnums.Psychic, 30000, 'Now, the Psychic Badge. A testament to your skill. Proof of your power.', [new GymBadgeRequirement(BadgeEnums.Fairy)]);
GymList['Snowbelle City'] = new Gym('Wulfric', 'Snowbelle City', [
    new GymPokemon('Abomasnow', 46558300, 56),
    new GymPokemon('Cryogonal', 47654830, 55),
    new GymPokemon('Avalugg', 50062000, 59),
], BadgeEnums.Iceberg, 52000, 'Impressive! Your Pokémon fought with great courage. I can tell that you\'ve trained your Pokémon well.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pokémon Village'))]);
//Kalos Elite 4
//TODO: Balancing of elite Pokemon HP & rewards.
GymList['Elite Malva'] = new Gym('Malva', 'Elite Malva', [
    new GymPokemon('Pyroar', 54696969, 63),
    new GymPokemon('Torkoal', 55048300, 63),
    new GymPokemon('Chandelure', 55052000, 63),
    new GymPokemon('Talonflame', 55557000, 65),
], BadgeEnums.Elite_Malva, 64000, 'What news... So a new challenger has defeated Malva of the Elite Four!', [new GymBadgeRequirement(BadgeEnums.Iceberg)]);
GymList['Elite Siebold'] = new Gym('Siebold', 'Elite Siebold', [
    new GymPokemon('Clawitzer', 54696969, 63),
    new GymPokemon('Gyarados', 55405330, 63),
    new GymPokemon('Starmie', 55405330, 63),
    new GymPokemon('Barbaracle', 55557000, 65),
], BadgeEnums.Elite_Siebold, 64000, 'I shall store my memory of you and your Pokémon forever away within my heart.', [new GymBadgeRequirement(BadgeEnums.Iceberg)]);
GymList['Elite Wikstrom'] = new Gym('Wikstrom', 'Elite Wikstrom', [
    new GymPokemon('Klefki', 54696969, 63),
    new GymPokemon('Probopass', 55405330, 63),
    new GymPokemon('Scizor', 55405330, 63),
    new GymPokemon('Aegislash (Shield)', 55557000, 65),
], BadgeEnums.Elite_Wikstrom, 64000, 'Glorious! The trust that you share with your honorable Pokémon surpasses even mine!', [new GymBadgeRequirement(BadgeEnums.Iceberg)]);
GymList['Elite Drasna'] = new Gym('Drasna', 'Elite Drasna', [
    new GymPokemon('Dragalge', 54696969, 63),
    new GymPokemon('Druddigon', 55405330, 63),
    new GymPokemon('Altaria', 55405330, 63),
    new GymPokemon('Noivern', 55557000, 65),
], BadgeEnums.Elite_Drasna, 64000, 'Oh, dear me. That sure was a quick battle... I do hope you\'ll come back again sometime!', [new GymBadgeRequirement(BadgeEnums.Iceberg)]);
// Kalos Champion
GymList['Champion Diantha'] = new Champion('Diantha', 'Champion Diantha', [
    new GymPokemon('Hawlucha', 60083000, 64),
    new GymPokemon('Tyrantrum', 62057000, 65),
    new GymPokemon('Aurorus', 62057000, 65),
    new GymPokemon('Gourgeist (Average)', 62557000, 65),
    new GymPokemon('Goodra', 62170000, 66),
    new GymPokemon('Mega Gardevoir', 63070000, 68),
], BadgeEnums.Elite_KalosChampion, 128000, 'Witnessing the noble spirits of you and your Pokémon in battle has really touched my heart...', [
    new GymBadgeRequirement(BadgeEnums.Elite_Malva),
    new GymBadgeRequirement(BadgeEnums.Elite_Siebold),
    new GymBadgeRequirement(BadgeEnums.Elite_Wikstrom),
    new GymBadgeRequirement(BadgeEnums.Elite_Drasna),
]);
//Alola Gyms
//TODO: Balancing of gym Pokemon HP & rewards.
GymList['Iki Town'] = new Gym('Hala', 'Iki Town', [
    new GymPokemon('Machop', 62058739, 15),
    new GymPokemon('Makuhita', 62058739, 15),
    new GymPokemon('Crabrawler', 63069612, 16),
], BadgeEnums.FightiniumZ, 128000, 'The results come as no surprise to me. What a fine Trainer...and what fine Pokémon, too!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Melemele Meadow'))]);
GymList['Konikoni City'] = new Gym('Olivia', 'Konikoni City', [
    new GymPokemon('Anorith', 66147743, 27),
    new GymPokemon('Lileep', 66147743, 27),
    new GymPokemon('Lycanroc (Midnight)', 67478674, 28),
], BadgeEnums.RockiumZ, 128000, 'How lovely.', [new RouteKillRequirement(10, GameConstants.Region.alola, 9)], () => {
    App.game.quests.getQuestLine('Eater of Light').beginQuest();
});
GymList['Malie City'] = new Gym('Nanu', 'Malie City', [
    new GymPokemon('Sableye', 70650480, 43),
    new GymPokemon('Krokorok', 70650480, 43),
    new GymPokemon('Alolan Persian', 71735104, 44),
], BadgeEnums.DarkiniumZ, 128000, 'Hmph...', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Po Town'))]);
GymList['Exeggutor Island'] = new Gym('Hapu', 'Exeggutor Island', [
    new GymPokemon('Golurk', 76658268, 53),
    new GymPokemon('Gastrodon (East)', 76658268, 53),
    new GymPokemon('Flygon', 76658268, 53),
    new GymPokemon('Mudsdale', 77747374, 54),
], BadgeEnums.GroundiumZ, 128000, 'You have succeeded in your final grand trial!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mina\'s Houseboat'))]);
//trials
GymList['Ilima\'s Trial'] = new Gym('Ilima', 'Verdant Cavern', [
    new GymPokemon('Gumshoos', 2458300, 51),
    new GymPokemon('Smeargle', 2462000, 51),
    new GymPokemon('Komala', 2462000, 51),
], BadgeEnums.NormaliumZ, 128000, 'You have received the Normalium-Z!', undefined, undefined, {
    quest: false,
    achievement: false,
});
GymList['Lana\'s Trial'] = new Gym('Lana', 'Brooklet Hill', [
    new GymPokemon('Lanturn', 2458300, 51),
    new GymPokemon('Cloyster', 2462000, 51),
    new GymPokemon('Araquanid', 2462000, 51),
], BadgeEnums.WateriumZ, 128000, 'You have received the Waterium-Z!', undefined, undefined, {
    quest: false,
    achievement: false,
});
GymList['Kiawe\'s Trial'] = new Gym('Kiawe', 'Wela Volcano Park', [
    new GymPokemon('Arcanine', 2458300, 51),
    new GymPokemon('Talonflame', 2462000, 51),
    new GymPokemon('Alolan Marowak', 2462000, 51),
], BadgeEnums.FiriumZ, 128000, 'You have received the Firium-Z!', undefined, undefined, {
    quest: false,
    achievement: false,
});
GymList['Mallow\'s Trial'] = new Gym('Mallow', 'Lush Jungle', [
    new GymPokemon('Trevenant', 2458300, 51),
    new GymPokemon('Shiinotic', 2462000, 51),
    new GymPokemon('Tsareena', 2462000, 51),
], BadgeEnums.GrassiumZ, 128000, 'You have received the Grassium-Z!', undefined, undefined, {
    quest: false,
    achievement: false,
});
GymList['Sophocles\' Trial'] = new Gym('Sophocles', 'Hokulani Observatory', [
    new GymPokemon('Togedemaru', 2458300, 51),
    new GymPokemon('Magnezone', 2462000, 51),
    new GymPokemon('Alolan Golem', 2462000, 51),
], BadgeEnums.ElectriumZ, 128000, 'You have received the Electrium-Z!', undefined, undefined, {
    quest: false,
    achievement: false,
});
GymList['Acerola\'s Trial'] = new Gym('Acerola', 'Thrifty Megamart', [
    new GymPokemon('Haunter', 2458300, 51),
    new GymPokemon('Gengar', 2462000, 51),
    new GymPokemon('Mimikyu', 2462000, 51),
], BadgeEnums.GhostiumZ, 128000, 'You have received the Ghostium-Z!', undefined, undefined, {
    quest: false,
    achievement: false,
});
GymList['Vast Poni Canyon Trial'] = new Gym('Totem Kommo-o', 'Vast Poni Canyon', [
    new GymPokemon('Jangmo-o', 2458300, 51),
    new GymPokemon('Hakamo-o', 2462000, 51),
    new GymPokemon('Kommo-o', 2462000, 51),
], BadgeEnums.DragoniumZ, 128000, 'You have received the Dragonium-Z!', undefined, undefined, {
    quest: false,
    achievement: false,
});
GymList['Mina\'s Trial'] = new Gym('Mina', 'Mina\'s Houseboat', [
    new GymPokemon('Pelipper', 2458300, 51),
    new GymPokemon('Chansey', 2462000, 51),
    new GymPokemon('Ribombee', 2462000, 51),
], BadgeEnums.FairiumZ, 128000, 'You have received the Fairium-Z!', undefined, undefined, {
    quest: false,
    achievement: false,
});
//Alola Elite 4
//TODO: Balancing of elite Pokemon HP & rewards.
GymList['Elite Molayne'] = new Gym('Molayne', 'Elite Molayne', [
    new GymPokemon('Klefki', 85547357, 56),
    new GymPokemon('Bisharp', 85547357, 56),
    new GymPokemon('Magnezone', 85547357, 56),
    new GymPokemon('Metagross', 85547357, 56),
    new GymPokemon('Alolan Dugtrio', 86456446, 57),
], BadgeEnums.Elite_Molayne, 64000, 'That Kukui... He certainly found an interesting Trainer for me to face!', [new GymBadgeRequirement(BadgeEnums.GroundiumZ)]);
GymList['Elite Olivia'] = new Gym('Olivia', 'Elite Olivia', [
    new GymPokemon('Armaldo', 85547357, 56),
    new GymPokemon('Cradily', 85547357, 56),
    new GymPokemon('Gigalith', 85547357, 56),
    new GymPokemon('Probopass', 85547357, 56),
    new GymPokemon('Lycanroc (Midnight)', 86456446, 57),
], BadgeEnums.Elite_Olivia, 64000, 'I don\'t see the same look in your eyes that I saw when we first met on Akala Island. Have you had some experiences that you\'ll carry with you in your heart forever? Well, it\'s time for you to move on.', [new GymBadgeRequirement(BadgeEnums.GroundiumZ)]);
GymList['Elite Acerola'] = new Gym('Acerola', 'Elite Acerola', [
    new GymPokemon('Banette', 85547357, 56),
    new GymPokemon('Drifblim', 85547357, 56),
    new GymPokemon('Dhelmise', 85547357, 56),
    new GymPokemon('Froslass', 85547357, 56),
    new GymPokemon('Palossand', 86456446, 57),
], BadgeEnums.Elite_Acerola, 64000, 'I\'m...I\'m speechless! You\'ve done me in!', [new GymBadgeRequirement(BadgeEnums.GroundiumZ)]);
GymList['Elite Kahili'] = new Gym('Kahili', 'Elite Kahili', [
    new GymPokemon('Braviary', 85547357, 56),
    new GymPokemon('Hawlucha', 85547357, 56),
    new GymPokemon('Oricorio (Baile)', 85547357, 56),
    new GymPokemon('Mandibuzz', 85547357, 56),
    new GymPokemon('Toucannon', 86456446, 57),
], BadgeEnums.Elite_Kahili, 64000, 'It\'s frustrating to me as a member of the Elite Four, but it seems your strength is the real deal.', [new GymBadgeRequirement(BadgeEnums.GroundiumZ)]);
// Alola Champion
// TODO: Balancing - Set HP
GymList['Champion Hau'] = new Champion('Hau', 'Champion Hau', [
    new GymPokemon('Alolan Raichu', 91545555, 59),
    new GymPokemon('Tauros', 89636471, 58),
    new GymPokemon('Noivern', 89636471, 58),
    new GymPokemon('Crabominable', 91545555, 59),
], BadgeEnums.Elite_AlolaChampion, 100000, 'We\'re gonna keep moving forward, by staying at full power all the time!', [
    new GymBadgeRequirement(BadgeEnums.Elite_Molayne),
    new GymBadgeRequirement(BadgeEnums.Elite_Olivia),
    new GymBadgeRequirement(BadgeEnums.Elite_Acerola),
    new GymBadgeRequirement(BadgeEnums.Elite_Kahili),
], 
// Bulbasaur
[
    new GymPokemon('Flareon', 89636471, 58),
    new GymPokemon('Primarina', 96725389, 60),
], 
// Charmander
[
    new GymPokemon('Vaporeon', 89636471, 58),
    new GymPokemon('Decidueye', 96725389, 60),
], 
// Squirtle/Pikachu
[
    new GymPokemon('Leafeon', 89636471, 58),
    new GymPokemon('Incineroar', 96725389, 60),
]);
//Galar Leaders
//TODO Addition of G-Max forms?
GymList.Turffield = new Gym('Milo', 'Turffield', [
    new GymPokemon('Gossifleur', 81538851, 19),
    new GymPokemon('Eldegoss', 90598724, 20),
], BadgeEnums.Galar_Grass, 40000, 'The power of Grass has wilted... What an incredible Gym Challenger!', [new RouteKillRequirement(10, GameConstants.Region.galar, 13)]);
GymList.Hulbury = new Gym('Nessa', 'Hulbury', [
    new GymPokemon('Goldeen', 87532510, 22),
    new GymPokemon('Arrokuda', 87532510, 23),
    new GymPokemon('Gigantamax Drednaw', 90185011, 24),
], BadgeEnums.Galar_Water, 60000, 'I may proudly be the strongest member of this Gym, but I was totally washed away!', [new TemporaryBattleRequirement('Hop4')]);
GymList.Motostoke = new Gym('Kabu', 'Motostoke', [
    new GymPokemon('Ninetales', 91921207, 25),
    new GymPokemon('Arcanine', 91921207, 25),
    new GymPokemon('Gigantamax Centiskorch', 97666283, 27),
], BadgeEnums.Galar_Fire, 60000, 'I\'m often regarded as the first real roadblock of the Gym Challenge, and yet you defeated me! Clearly, your talent surpassed my many years of experience. I still have much to learn!', [new TemporaryBattleRequirement('Marnie1')]);
GymList['Stow-on-Side1'] = new Gym('Bea', 'Stow-on-Side1', [
    new GymPokemon('Hitmontop', 96582649, 34),
    new GymPokemon('Pangoro', 96582649, 34),
    new GymPokemon('Sirfetch\'d', 96582649, 35),
    new GymPokemon('Gigantamax Machamp', 104466958, 36),
], BadgeEnums.Galar_Fighting, 80000, 'Your strength nearly made me want to turn and run in my bare feet.', [new TemporaryBattleRequirement('Hop5')], 
// Starts Galar story quest if both Stow-on-Side gyms are defeated.
() => {
    if (App.game.badgeCase.hasBadge(BadgeEnums.Galar_Ghost)) {
        App.game.quests.getQuestLine('The Darkest Day').beginQuest();
    }
});
GymList['Stow-on-Side2'] = new Gym('Allister', 'Stow-on-Side2', [
    new GymPokemon('Galarian Yamask', 96582649, 34),
    new GymPokemon('Mimikyu', 96582649, 34),
    new GymPokemon('Cursola', 96582649, 35),
    new GymPokemon('Gigantamax Gengar', 104466958, 36),
], BadgeEnums.Galar_Ghost, 80000, 'Maybe my mask... kept me from seeing just how strong you really are...', [new TemporaryBattleRequirement('Hop5')], 
// Starts Galar story quest if both Stow-on-Side gyms are defeated.
() => {
    if (App.game.badgeCase.hasBadge(BadgeEnums.Galar_Fighting)) {
        App.game.quests.getQuestLine('The Darkest Day').beginQuest();
    }
});
GymList.Ballonlea = new Gym('Opal', 'Ballonlea', [
    new GymPokemon('Galarian Weezing', 99999999, 36),
    new GymPokemon('Mawile', 99999999, 36),
    new GymPokemon('Togekiss', 99999999, 37),
    new GymPokemon('Gigantamax Alcremie', 108160234, 38),
], BadgeEnums.Galar_Fairy, 80000, 'Your pink is still lacking, but you\'re an excellent Trainer with some excellent Pokémon.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Glimwood Tangle'))]);
GymList.Circhester1 = new Gym('Gordie', 'Circhester1', [
    new GymPokemon('Barbaracle', 103122110, 40),
    new GymPokemon('Shuckle', 103122110, 40),
    new GymPokemon('Stonjourner', 103122110, 41),
    new GymPokemon('Gigantamax Coalossal', 111540241, 42),
], BadgeEnums.Galar_Rock, 80000, 'I just want to climb into a hole... Well, I guess it\'d be more like falling from here.', [new RouteKillRequirement(10, GameConstants.Region.galar, 26)]);
GymList.Circhester2 = new Gym('Melony', 'Circhester2', [
    new GymPokemon('Frosmoth', 103122110, 40),
    new GymPokemon('Galarian Darmanitan', 103122110, 40),
    new GymPokemon('Eiscue (Ice Face)', 103122110, 41),
    new GymPokemon('Gigantamax Lapras', 111540241, 42),
], BadgeEnums.Galar_Ice, 80000, 'I think you took breaking the ice a little too literally...', [new RouteKillRequirement(10, GameConstants.Region.galar, 26)]);
GymList.Spikemuth = new Gym('Piers', 'Spikemuth', [
    new GymPokemon('Scrafty', 107024027, 44),
    new GymPokemon('Malamar', 107024027, 45),
    new GymPokemon('Skuntank', 107024027, 45),
    new GymPokemon('Obstagoon', 115760683, 46),
], BadgeEnums.Galar_Dark, 96000, 'Me an\' my team gave it our best. Let\'s meet up again for a battle some time...', [new TemporaryBattleRequirement('Marnie2')]);
GymList.Hammerlocke = new Gym('Raihan', 'Hammerlocke', [
    new GymPokemon('Gigalith', 111232838, 46),
    new GymPokemon('Flygon', 111232838, 47),
    new GymPokemon('Sandaconda', 111232838, 46),
    new GymPokemon('Gigantamax Duraludon', 120313069, 48),
], BadgeEnums.Galar_Dragon, 128000, 'I might have lost, but I still look good. Maybe I should snap a quick selfie...', [new GymBadgeRequirement(BadgeEnums.Galar_Dark)]);
GymList['Elite Trainer Marnie'] = new Gym('Marnie', 'Elite Trainer Marnie', [
    new GymPokemon('Liepard', 117681650, 47),
    new GymPokemon('Toxicroak', 117681650, 47),
    new GymPokemon('Scrafty', 117681650, 47),
    new GymPokemon('Morpeko', 121675557, 48),
    new GymPokemon('Gigantamax Grimmsnarl', 126153272, 49),
], BadgeEnums.Elite_Marnie, 150000, 'OK, so I lost... but I got to see a lot of the good points of you and your Pokémon!', [new RouteKillRequirement(10, GameConstants.Region.galar, 26)]);
GymList['Elite Gym Leader Bede'] = new Gym('Bede', 'Elite Gym Leader Bede', [
    new GymPokemon('Mawile', 117681650, 51),
    new GymPokemon('Sylveon', 117681650, 51),
    new GymPokemon('Gardevoir', 117681650, 51),
    new GymPokemon('Galarian Rapidash', 121675557, 52),
    new GymPokemon('Gigantamax Hatterene', 126153272, 53),
], BadgeEnums.Elite_Bede, 150000, 'I couldn\'t win, but at least I was able to show everyone how great Fairy types are.', [new GymBadgeRequirement(BadgeEnums.Elite_Marnie)]);
GymList['Elite Trainer Hop'] = new Gym('Hop', 'Elite Trainer Hop', [
    new GymPokemon('Dubwool', 127578161, 59),
    new GymPokemon('Pincurchin', 124130462, 58),
    new GymPokemon('Snorlax', 124130462, 58),
    new GymPokemon('Inteleon', 131993475, 59),
    new GymPokemon('Gigantamax Corviknight', 139216928, 60),
], BadgeEnums.Elite_Hop, 200000, 'Thanks, mate. I\'m really glad you were the one here with me.', [new GymBadgeRequirement(BadgeEnums.Elite_Bede)]
// TODO: Add ability to change gym leaders pokemon based on your starter
// Grookey
// [new GymPokemon('Inteleon', 137833678, 60)],
// Scorbunny
// [new GymPokemon('Rillaboom', 137833678, 60)],
// Sobble
// [new GymPokemon('Cinderace', 137833678, 60)]
);
// Galar Champion
GymList['Champion Leon'] = new Champion('Leon', 'Champion Leon', [
    new GymPokemon('Aegislash (Shield)', 130579274, 62),
    new GymPokemon('Dragapult', 130579274, 62),
    new GymPokemon('Haxorus', 130579274, 63),
], BadgeEnums.Elite_GalarChampion, 250000, 'My time as Champion is over... But what a champion time it\'s been! Thank you for the greatest battle I\'ve ever had!', [new QuestLineStepCompletedRequirement('The Darkest Day', 19)], 
// Grookey
[
    new GymPokemon('Seismitoad', 133481036, 64),
    new GymPokemon('Cinderace', 137833678, 64),
    new GymPokemon('Gigantamax Charizard', 145088815, 65),
], 
// Scorbunny
[
    new GymPokemon('Mr. Rime', 133481036, 64),
    new GymPokemon('Inteleon', 137833678, 64),
    new GymPokemon('Gigantamax Charizard', 145088818, 65),
], 
// Sobble
[
    new GymPokemon('Rhyperior', 133481036, 64),
    new GymPokemon('Rillaboom', 137833678, 64),
    new GymPokemon('Gigantamax Charizard', 145088812, 65),
]);
// Armor + Crown gyms
GymList['Elite Gym Leader Klara'] = new Gym('Klara', 'Elite Gym Leader Klara', [
    new GymPokemon('Galarian Slowking', 144036193, 68),
    new GymPokemon('Galarian Weezing', 144036193, 68),
    new GymPokemon('Drapion', 144036193, 68),
    new GymPokemon('Scolipede', 147068434, 69),
    new GymPokemon('Galarian Slowbro', 151617045, 70),
], BadgeEnums.Elite_ArmorPoison, 150000, 'Aww, come on! What a drag! But...I guess it was also kinda fun!', [new QuestLineCompletedRequirement('The Dojo\'s Armor')]);
GymList['Elite Gym Leader Avery'] = new Gym('Avery', 'Elite Gym Leader Avery', [
    new GymPokemon('Galarian Slowbro', 144036193, 68),
    new GymPokemon('Swoobat', 144036193, 68),
    new GymPokemon('Galarian Rapidash', 144036193, 68),
    new GymPokemon('Alakazam', 147068434, 69),
    new GymPokemon('Galarian Slowking', 151617045, 70),
], BadgeEnums.Elite_ArmorPsychic, 150000, 'More! I require more! Show me your Stored Power!', [new QuestLineCompletedRequirement('The Dojo\'s Armor')]);
GymList['Elite Dojo Matron Honey'] = new Gym('Honey', 'Elite Dojo Matron Honey', [
    new GymPokemon('Galarian Darmanitan', 151617046, 73),
    new GymPokemon('Gallade', 151617046, 74),
    new GymPokemon('Salazzle', 154808984, 73),
    new GymPokemon('Togekiss', 154808984, 75),
    new GymPokemon('Gigantamax Venusaur', 159596891, 75),
    new GymPokemon('Gigantamax Blastoise', 159596891, 75),
], BadgeEnums.Elite_ArmorMatron, 250000, 'That was a delight! Nice battling, love!', [
    new MultiRequirement([
        new GymBadgeRequirement(BadgeEnums.Elite_ArmorPoison),
        new GymBadgeRequirement(BadgeEnums.Elite_ArmorPsychic),
    ]),
]);
GymList['Elite Dojo Master Mustard'] = new Gym('Mustard', 'Elite Dojo Master Mustard', [
    new GymPokemon('Mienshao', 151617046, 73),
    new GymPokemon('Luxray', 151617046, 73),
    new GymPokemon('Lycanroc (Midday)', 154808984, 75),
    new GymPokemon('Kommo-o', 154808984, 75),
    new GymPokemon('Gigantamax Urshifu (Single Strike)', 159596891, 75),
    new GymPokemon('Gigantamax Urshifu (Rapid Strike)', 159596891, 75),
], BadgeEnums.Elite_ArmorChampion, 250000, 'That strength of yours doesn\'t bend easily!', [new GymBadgeRequirement(BadgeEnums.Elite_ArmorMatron)]);
GymList['Elite Trainer Peony'] = new Gym('Peony', 'Elite Trainer Peony', [
    new GymPokemon('Perrserker', 197029616, 74),
    new GymPokemon('Bronzong', 192967150, 73),
    new GymPokemon('Scizor', 192967150, 73),
    new GymPokemon('Aggron', 197029616, 74),
    new GymPokemon('Copperajah', 203123316, 74),
], BadgeEnums.Elite_CrownChampion, 250000, 'Gone and got stronger again, have you? Ah well! Hats off to you-in more ways than one!', [
    new MultiRequirement([
        new QuestLineCompletedRequirement('The Crown of Galar'),
        new QuestLineCompletedRequirement('The Birds of the Dyna Tree'),
        new QuestLineCompletedRequirement('The Ancient Golems'),
    ]),
]);
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/enums/Badges.d.ts" />
class GymRunner {
    static startGym(gym, autoRestart = false, initialRun = true) {
        this.initialRun = initialRun;
        this.autoRestart(autoRestart);
        this.running(false);
        this.gymObservable(gym);
        if (gym instanceof Champion) {
            gym.setPokemon(player.regionStarters[player.region]());
        }
        App.game.gameState = GameConstants.GameState.idle;
        DungeonRunner.timeBonus(FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.Time_Flute));
        GymRunner.timeLeft(GameConstants.GYM_TIME * this.timeBonus());
        GymRunner.timeLeftPercentage(100);
        GymBattle.gym = gym;
        GymBattle.totalPokemons(gym.pokemons.length);
        GymBattle.index(0);
        GymBattle.generateNewEnemy();
        App.game.gameState = GameConstants.GameState.gym;
        this.running(true);
        this.resetGif();
        setTimeout(() => {
            this.hideGif();
        }, GameConstants.GYM_COUNTDOWN);
    }
    static hideGif() {
        $('#gymGoContainer').hide();
    }
    static resetGif() {
        // If the user doesn't want the animation, just return
        if (!Settings.getSetting('showGymGoAnimation').value) {
            return;
        }
        if (!this.autoRestart() || this.initialRun) {
            $('#gymGoContainer').show();
            setTimeout(() => {
                $('#gymGo').attr('src', 'assets/gifs/go.gif');
            }, 0);
        }
    }
    static tick() {
        if (!this.running()) {
            return;
        }
        if (this.timeLeft() < 0) {
            GymRunner.gymLost();
        }
        this.timeLeft(this.timeLeft() - GameConstants.GYM_TICK);
        this.timeLeftPercentage(Math.floor(this.timeLeft() / (GameConstants.GYM_TIME * FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.Time_Flute)) * 100));
        const currentFluteBonus = FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.Time_Flute);
        if (currentFluteBonus != this.timeBonus()) {
            if (currentFluteBonus > this.timeBonus()) {
                if (this.timeBonus() === 1) {
                    this.timeBonus(currentFluteBonus);
                    this.timeLeft(this.timeLeft() * this.timeBonus());
                }
                else {
                    this.timeLeft(this.timeLeft() / this.timeBonus());
                    this.timeBonus(currentFluteBonus);
                    this.timeLeft(this.timeLeft() * this.timeBonus());
                }
            }
            else {
                this.timeLeft(this.timeLeft() / this.timeBonus());
                this.timeBonus(currentFluteBonus);
            }
        }
    }
    static gymLost() {
        if (this.running()) {
            this.running(false);
            Notifier.notify({
                message: `It appears you are not strong enough to defeat ${GymBattle.gym.leaderName}.`,
                type: NotificationConstants.NotificationOption.danger,
            });
            App.game.gameState = GameConstants.GameState.town;
        }
    }
    static gymWon(gym) {
        if (this.running()) {
            this.running(false);
            Notifier.notify({
                message: `Congratulations, you defeated ${GymBattle.gym.leaderName}!`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.General.gym_won,
            });
            // If this is the first time defeating this gym
            if (!App.game.badgeCase.hasBadge(gym.badgeReward)) {
                gym.firstWinReward();
            }
            GameHelper.incrementObservable(App.game.statistics.gymsDefeated[GameConstants.getGymIndex(gym.town)]);
            // Auto restart gym battle
            if (this.autoRestart()) {
                const cost = (this.gymObservable().moneyReward || 10) * 2;
                const amt = new Amount(cost, GameConstants.Currency.money);
                // If the player can afford it, restart the gym
                if (App.game.wallet.loseAmount(amt)) {
                    this.startGym(this.gymObservable(), this.autoRestart(), false);
                    return;
                }
            }
            // Award money for defeating gym
            App.game.wallet.gainMoney(gym.moneyReward);
            // Send the player back to the town they were in
            player.town(gym.parent);
            App.game.gameState = GameConstants.GameState.town;
        }
    }
}
GymRunner.timeLeft = ko.observable(GameConstants.GYM_TIME);
GymRunner.timeLeftPercentage = ko.observable(100);
GymRunner.timeBonus = ko.observable(1);
GymRunner.gymObservable = ko.observable(GymList['Pewter City']);
GymRunner.running = ko.observable(false);
GymRunner.autoRestart = ko.observable(false);
GymRunner.initialRun = true;
GymRunner.timeLeftSeconds = ko.pureComputed(() => {
    return (Math.ceil(GymRunner.timeLeft() / 100) / 10).toFixed(1);
});
document.addEventListener('DOMContentLoaded', () => {
    $('#receiveBadgeModal').on('hidden.bs.modal', () => {
        if (GymBattle.gym.badgeReward == BadgeEnums.Soul) {
            KeyItemController.showGainModal(KeyItemType.Safari_ticket);
        }
        if (GymBattle.gym.badgeReward == BadgeEnums.Earth) {
            KeyItemController.showGainModal(KeyItemType.Gem_case);
        }
    });
});
/**
 * Static class as an API for handling items.
 */
class BagHandler {
    /**
     * Gets the display name for the item
     * @param item The item identifier
     */
    static displayName(item) {
        if (!item) {
            return '';
        }
        switch (item.type) {
            case ItemType.item:
                return this.getItem(item.id).displayName;
            case ItemType.underground:
                return this.getUndergroundItem(item.id).displayName;
            case ItemType.berry:
                return `${BerryType[this.getBerry(item.id)]} Berry`;
            case ItemType.gem:
                return `${PokemonType[this.getGem(item.id)]} Gem`;
        }
    }
    /**
     * Gets the image path for the item
     * @param item The item identifier
     */
    static image(item) {
        if (!item) {
            return '';
        }
        switch (item.type) {
            case ItemType.item:
                return this.getItem(item.id).image;
            case ItemType.underground:
                return this.getUndergroundItem(item.id).image;
            case ItemType.berry:
                return FarmController.getBerryImage(this.getBerry(item.id));
            case ItemType.gem:
                return Gems.image(this.getGem(item.id));
        }
    }
    /**
     * Gets the amount observable for the item. NOTE: You shouldn't use this to modify the amount, as there might
     * be some additional code that needs to be run via the base gainItem API calls. Use BagHandler.gainItem instead.
     * @param item The item identifier
     */
    static amount(item) {
        if (!item) {
            return null;
        }
        switch (item.type) {
            case ItemType.item:
                return player.itemList[this.getItem(item.id).name];
            case ItemType.underground:
                return player.mineInventory()[player.mineInventoryIndex(this.getUndergroundItem(item.id).id)].amount;
            case ItemType.berry:
                return App.game.farming.berryList[this.getBerry(item.id)];
            case ItemType.gem:
                return App.game.gems.gemWallet[this.getGem(item.id)];
        }
    }
    /**
     * Handles updating the amount for an item. This should be used instead of modifying the amount observable
     * directly, as the base method might have additional handling.
     * @param item The item identifier
     * @param amount The amount to be added to the Bag. Defaults to 1.
     */
    static gainItem(item, amount = 1) {
        if (!item) {
            return;
        }
        switch (item.type) {
            case ItemType.item:
                this.getItem(item.id).gain(amount);
                return;
            case ItemType.underground:
                Underground.gainMineItem(this.getUndergroundItem(item.id).id, amount);
                return;
            case ItemType.berry:
                App.game.farming.gainBerry(this.getBerry(item.id), amount, false);
                return;
            case ItemType.gem:
                App.game.gems.gainGems(amount, this.getGem(item.id));
                return;
        }
    }
    //#region Item getters
    static getItem(id) {
        return ItemList[id];
    }
    static getUndergroundItem(id) {
        if (typeof id === 'string') {
            return UndergroundItems.getByName(id);
        }
        else {
            return UndergroundItems.getById(id);
        }
    }
    static getBerry(id) {
        if (typeof id === 'string') {
            id = App.game.farming.berryData.findIndex((_, idx) => BerryType[idx] === id);
        }
        return id;
    }
    static getGem(id) {
        if (typeof id === 'string') {
            id = PokemonType[id];
        }
        return id;
    }
}
///<reference path="../towns/TownContent.ts"/>
class Shop extends TownContent {
    constructor(items, name = undefined, requirements = []) {
        super(requirements);
        this.items = items;
        this.name = name;
        this.tooltip = 'Visit shops to buy items.';
        this.amountInput = () => $('#shopModal').find('input[name="amountOfItems"]');
    }
    cssClass() {
        return 'btn btn-secondary';
    }
    text() {
        var _a;
        return (_a = this.name) !== null && _a !== void 0 ? _a : 'Poké Mart';
    }
    isVisible() {
        return true;
    }
    onclick() {
        ShopHandler.showShop(this);
        $('#shopModal').modal('show');
    }
    get displayName() {
        if (this.name) {
            return this.name;
        }
        if (!this.parent) {
            return 'Poké Mart';
        }
        return `Poké Mart ${this.parent.name}`;
    }
}
///<reference path="Shop.ts"/>
class ShopHandler {
    static showShop(shop) {
        this.setSelected(0);
        this.resetAmount();
        this.shopObservable(shop);
        shop.items.forEach(item => {
            item.price(Math.round(item.basePrice * (player.itemMultipliers[item.saveName] || 1)));
        });
    }
    //#region Controls
    static setSelected(i) {
        this.selected(i);
    }
    static buyItem() {
        const item = this.shopObservable().items[ShopHandler.selected()];
        item.buy(this.amount());
        if (Settings.getSetting('resetShopAmountOnPurchase').observableValue()) {
            ShopHandler.resetAmount();
        }
    }
    static resetAmount() {
        this.shopObservable().amountInput().val(1).change();
    }
    static increaseAmount(n) {
        const newVal = (parseInt(this.shopObservable().amountInput().val().toString(), 10) || 0) + n;
        this.shopObservable().amountInput().val(newVal > 1 ? newVal : 1).change();
    }
    static multiplyAmount(n) {
        const newVal = (parseInt(this.shopObservable().amountInput().val().toString(), 10) || 0) * n;
        this.shopObservable().amountInput().val(newVal > 1 ? newVal : 1).change();
    }
    static maxAmount() {
        const item = this.shopObservable().items[ShopHandler.selected()];
        if (!item || !item.isAvailable()) {
            return this.shopObservable().amountInput().val(0).change();
        }
        const tooMany = (amt) => amt > item.maxAmount || !App.game.wallet.hasAmount(new Amount(item.totalPrice(amt), item.currency));
        const amt = GameHelper.binarySearch(tooMany, 0, Number.MAX_SAFE_INTEGER);
        this.shopObservable().amountInput().val(amt).change();
    }
    //#endregion
    //#region UI
    static calculateCss(i) {
        if (this.selected() == i) {
            return 'shopItem clickable btn btn-secondary active';
        }
        else {
            return 'shopItem clickable btn btn-secondary';
        }
    }
    static calculateButtonCss() {
        const item = this.shopObservable().items[ShopHandler.selected()];
        if (item && !(item.isAvailable() && App.game.wallet.hasAmount(new Amount(item.totalPrice(this.amount()), item.currency)))
            || this.amount() < 1) {
            return 'btn btn-danger smallButton smallFont';
        }
        else {
            return 'btn btn-success smallButton smallFont';
        }
    }
}
ShopHandler.shopObservable = ko.observable(new Shop([]));
ShopHandler.selected = ko.observable(0);
ShopHandler.amount = ko.observable(1);
///<reference path="../shop/ShopHandler.ts"/>
/**
 * Source event for decreasing shop multipliers
 */
var MultiplierDecreaser;
(function (MultiplierDecreaser) {
    MultiplierDecreaser[MultiplierDecreaser["Battle"] = 0] = "Battle";
    MultiplierDecreaser[MultiplierDecreaser["Berry"] = 1] = "Berry";
})(MultiplierDecreaser || (MultiplierDecreaser = {}));
class Item {
    constructor(name, basePrice, currency = GameConstants.Currency.money, { saveName = '', maxAmount = Number.MAX_SAFE_INTEGER, multiplier = GameConstants.ITEM_PRICE_MULTIPLIER, multiplierDecrease = true, multiplierDecreaser = MultiplierDecreaser.Battle, } = {}, displayName, description, imageDirectory) {
        this.name = name;
        this.basePrice = basePrice;
        this.currency = currency;
        this.price = ko.observable(this.basePrice);
        // If no custom save name specified, default to item name
        this.saveName = saveName || name || `${name}|${GameConstants.Currency[currency]}`;
        this.maxAmount = maxAmount || Number.MAX_SAFE_INTEGER;
        // Multiplier needs to be above 1
        this.multiplier = Math.max(1, multiplier || GameConstants.ITEM_PRICE_MULTIPLIER);
        this.multiplierDecrease = multiplierDecrease;
        this.multiplierDecreaser = multiplierDecreaser || MultiplierDecreaser.Battle;
        if (!ItemList[this.saveName]) {
            ItemList[this.saveName] = this;
        }
        this._displayName = displayName !== null && displayName !== void 0 ? displayName : name;
        this._description = description;
        this.imageDirectory = imageDirectory;
    }
    totalPrice(amount) {
        if (this.name == GameConstants.Pokeball[GameConstants.Pokeball.Pokeball]) {
            return Math.max(0, this.basePrice * amount);
        }
        else {
            // multiplier should be capped at 100, so work out how many to buy at increasing price and how many at max
            //    (m_start) * (m^k) = 100
            // => k = (2 - log(m_start)) / log(m)
            const mStart = Math.max(player.itemMultipliers[this.saveName] || 1, 1);
            const k = (mStart < 100)
                ? Math.ceil((2 - Math.log10(mStart)) / Math.log10(this.multiplier))
                : 0;
            const incAmount = Math.min(k, amount);
            const incCost = (this.price() * (1 - Math.pow(this.multiplier, incAmount))) / (1 - this.multiplier);
            const maxCost = (this.basePrice * 100 * (amount - incAmount));
            const total = incCost + maxCost;
            return Math.max(0, Math.round(total));
        }
    }
    buy(n) {
        if (n <= 0) {
            return;
        }
        if (n > this.maxAmount) {
            Notifier.notify({
                message: `You can only buy ${this.maxAmount.toLocaleString('en-US')} &times; ${GameConstants.humanifyString(this.displayName)}!`,
                type: NotificationConstants.NotificationOption.danger,
            });
            n = this.maxAmount;
        }
        if (!this.isAvailable()) {
            Notifier.notify({
                message: `${GameConstants.humanifyString(this.displayName)} is sold out!`,
                type: NotificationConstants.NotificationOption.danger,
            });
            return;
        }
        const multiple = n > 1 ? 's' : '';
        if (App.game.wallet.loseAmount(new Amount(this.totalPrice(n), this.currency))) {
            this.gain(n);
            this.increasePriceMultiplier(n);
            Notifier.notify({
                message: `You bought ${n.toLocaleString('en-US')} × <img src="${this.image}" height="24px"/> ${GameConstants.humanifyString(this.displayName)}${multiple}.`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Items.item_bought,
            });
        }
        else {
            let curr = GameConstants.camelCaseToString(GameConstants.Currency[this.currency]);
            switch (this.currency) {
                case GameConstants.Currency.money:
                    curr = 'Pokédollars';
                    break;
                default:
                    curr += 's';
                    break;
            }
            Notifier.notify({
                message: `You don't have enough ${curr} to buy ${n.toLocaleString('en-US')} ${GameConstants.humanifyString(this.displayName) + multiple}!`,
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    gain(n) {
        player.gainItem(this.name, n);
        if (this.name == 'Protein') {
            GameHelper.incrementObservable(App.game.statistics.totalProteinsPurchased, n);
            GameHelper.incrementObservable(App.game.statistics.totalProteinsObtained, n);
        }
    }
    use() {
        return false;
    }
    checkCanUse() {
        if (!player.itemList[this.name]()) {
            Notifier.notify({
                message: `You don't have any ${ItemList[this.name].displayName}s left...`,
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        return true;
    }
    isAvailable() {
        return true;
    }
    isSoldOut() {
        return false;
    }
    getDescription() {
        return this._description;
    }
    increasePriceMultiplier(amount = 1) {
        player.itemMultipliers[this.saveName] = Math.min(100, (player.itemMultipliers[this.saveName] || 1) * Math.pow(this.multiplier, amount));
        this.price(Math.round(this.basePrice * player.itemMultipliers[this.saveName]));
    }
    decreasePriceMultiplier(amount = 1, multiplierDecreaser) {
        if (!this.multiplierDecrease) {
            return;
        }
        if (this.multiplierDecreaser !== multiplierDecreaser) {
            return;
        }
        player.itemMultipliers[this.saveName] = Math.max(1, (player.itemMultipliers[this.saveName] || 1) / Math.pow(this.multiplier, amount));
        this.price(Math.round(this.basePrice * player.itemMultipliers[this.saveName]));
    }
    get description() {
        return this._description;
    }
    get displayName() {
        return GameConstants.humanifyString(this._displayName);
    }
    get image() {
        const subDirectory = this.imageDirectory ? `${this.imageDirectory}/` : '';
        return `assets/images/items/${subDirectory}${this.name}.png`;
    }
}
const ItemList = {};
///<reference path="Item.ts"/>
class BattleItem extends Item {
    constructor(type, description, basePrice, currency = GameConstants.Currency.money, displayName, multiplierType, multiplyBy) {
        super(GameConstants.BattleItemType[type], basePrice, currency, undefined, displayName, description, 'battleItem');
        this.multiplierType = multiplierType;
        this.multiplyBy = multiplyBy;
        this.type = type;
    }
    use() {
        EffectEngineRunner.addEffect(this.name, ItemHandler.amountToUse);
        return true;
    }
    checkCanUse() {
        if (App.game.challenges.list.disableBattleItems.active()) {
            Notifier.notify({
                title: 'Challenge Mode',
                message: 'Battle Items are disabled',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        if (!player.itemList[this.name]()) {
            Notifier.notify({
                message: `You don't have any ${ItemList[this.name].displayName}s left...`,
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        return true;
    }
}
ItemList.xAttack = new BattleItem(GameConstants.BattleItemType.xAttack, '+50% Bonus to Pokémon attack for 30 seconds', 600, undefined, 'X Attack', 'pokemonAttack', 1.5);
ItemList.xClick = new BattleItem(GameConstants.BattleItemType.xClick, '+50% Bonus to click attack for 30 seconds', 400, undefined, 'X Click', 'clickAttack', 1.5);
ItemList.Lucky_egg = new BattleItem(GameConstants.BattleItemType.Lucky_egg, '+50% Bonus to experience gained for 30 seconds', 800, undefined, 'Lucky Egg', 'exp', 1.5);
ItemList.Token_collector = new BattleItem(GameConstants.BattleItemType.Token_collector, '+50% Bonus to Dungeon Tokens gained for 30 seconds', 1000, undefined, 'Token Collector', 'dungeonToken', 1.5);
ItemList.Dowsing_machine = new BattleItem(GameConstants.BattleItemType.Dowsing_machine, 'Increased chance of gaining extra items for 30 seconds', 1500, undefined, 'Dowsing Machine');
ItemList.Lucky_incense = new BattleItem(GameConstants.BattleItemType.Lucky_incense, '+50% Bonus to Pokédollars gained for 30 seconds', 2000, undefined, 'Lucky Incense', 'money', 1.5);
///<reference path="Item.ts"/>
class BerryItem extends Item {
    constructor(berry, basePrice, currency = GameConstants.Currency.farmPoint, berryReq) {
        super(`${BerryType[berry]}Berry`, basePrice, currency, { maxAmount: 1 }, `${BerryType[berry]} Berry`);
        this.berry = berry;
        this.berryReq = berryReq;
        this.berryName = BerryType[berry];
    }
    gain(amt) {
        App.game.farming.gainBerry(this.berry, amt, false);
    }
    get description() {
        return `Obtain a ${this.berryName}<br/><i>(No Oak Item challenge runs only)</i>`;
    }
    isAvailable() {
        var _a, _b, _c, _d;
        const hasBerry = (_a = !!App.game.farming.berryList[this.berry]()) !== null && _a !== void 0 ? _a : false;
        const unlockedBerryReq = (_d = (_c = (_b = App.game.farming.unlockedBerries)[this.berryReq]) === null || _c === void 0 ? void 0 : _c.call(_b)) !== null && _d !== void 0 ? _d : false;
        const noOakItemChallenge = App.game.challenges.list.disableOakItems.active();
        return super.isAvailable() && !hasBerry && unlockedBerryReq && noOakItemChallenge;
    }
    get image() {
        return `assets/images/items/berry/${this.berryName}.png`;
    }
}
ItemList.ChopleBerry = new BerryItem(BerryType.Chople, 10000, GameConstants.Currency.farmPoint, BerryType.Spelon);
ItemList.KebiaBerry = new BerryItem(BerryType.Kebia, 10000, GameConstants.Currency.farmPoint, BerryType.Pamtre);
ItemList.ShucaBerry = new BerryItem(BerryType.Shuca, 10000, GameConstants.Currency.farmPoint, BerryType.Watmel);
ItemList.ChartiBerry = new BerryItem(BerryType.Charti, 10000, GameConstants.Currency.farmPoint, BerryType.Cornn);
class CaughtIndicatingItem extends Item {
}
/// <reference path="CaughtIndicatingItem.ts" />
class EggItem extends CaughtIndicatingItem {
    constructor(type, basePrice, currency = GameConstants.Currency.questPoint, displayName) {
        super(GameConstants.EggItemType[type], basePrice, currency, undefined, displayName, 'An egg. Can be hatched in the Day Care.', 'egg');
        this.type = type;
    }
    use() {
        if (player.itemList[this.name]() <= 0) {
            return false;
        }
        let success;
        if (this.type === GameConstants.EggItemType.Pokemon_egg) {
            success = App.game.breeding.gainPokemonEgg(pokemonMap.randomRegion(player.highestRegion()));
        }
        else if (this.type === GameConstants.EggItemType.Mystery_egg) {
            success = App.game.breeding.gainRandomEgg();
        }
        else {
            const etype = EggType[GameConstants.EggItemType[this.type].split('_')[0]];
            success = App.game.breeding.gainEgg(App.game.breeding.createTypedEgg(etype));
        }
        if (success) {
            player.loseItem(this.name, 1);
        }
        return success;
    }
    getCaughtStatus() {
        switch (this.type) {
            case (GameConstants.EggItemType.Pokemon_egg): {
                // random pokemon
                return CaughtStatus.NotCaught;
            }
            case (GameConstants.EggItemType.Mystery_egg): {
                return App.game.breeding.getAllCaughtStatus();
            }
            default: {
                const etype = EggType[GameConstants.EggItemType[this.type].split('_')[0]];
                return App.game.breeding.getTypeCaughtStatus(etype);
            }
        }
    }
}
ItemList.Fire_egg = new EggItem(GameConstants.EggItemType.Fire_egg, 1000, undefined, 'Fire Egg');
ItemList.Water_egg = new EggItem(GameConstants.EggItemType.Water_egg, 1000, undefined, 'Water Egg');
ItemList.Grass_egg = new EggItem(GameConstants.EggItemType.Grass_egg, 1000, undefined, 'Grass Egg');
ItemList.Fighting_egg = new EggItem(GameConstants.EggItemType.Fighting_egg, 1000, undefined, 'Fighting Egg');
ItemList.Electric_egg = new EggItem(GameConstants.EggItemType.Electric_egg, 1000, undefined, 'Electric Egg');
ItemList.Dragon_egg = new EggItem(GameConstants.EggItemType.Dragon_egg, 1000, undefined, 'Dragon Egg');
ItemList.Pokemon_egg = new EggItem(GameConstants.EggItemType.Pokemon_egg, 1000, undefined, 'Pokémon Egg');
ItemList.Mystery_egg = new EggItem(GameConstants.EggItemType.Mystery_egg, 700, undefined, 'Mystery Egg');
///<reference path="Item.ts"/>
class EnergyRestore extends Item {
    constructor(type, basePrice, currency = GameConstants.Currency.money, displayName) {
        super(GameConstants.EnergyRestoreSize[type], basePrice, currency, undefined, displayName, 'Restores Energy in the Underground.');
        this.type = type;
    }
    use() {
        if (player.itemList[this.name]() <= 0) {
            return false;
        }
        if (App.game.underground.energy === App.game.underground.getMaxEnergy()) {
            Notifier.notify({
                message: 'Your mining energy is already full!',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        App.game.underground.gainEnergyThroughItem(this.type);
        player.loseItem(this.name, 1);
        return true;
    }
}
ItemList.SmallRestore = new EnergyRestore(GameConstants.EnergyRestoreSize.SmallRestore, 30000, undefined, 'Small Restore');
ItemList.MediumRestore = new EnergyRestore(GameConstants.EnergyRestoreSize.MediumRestore, 100000, undefined, 'Medium Restore');
ItemList.LargeRestore = new EnergyRestore(GameConstants.EnergyRestoreSize.LargeRestore, 400000, undefined, 'Large Restore');
///<reference path="Item.ts"/>
class EvolutionStone extends CaughtIndicatingItem {
    constructor(type, basePrice, currency = GameConstants.Currency.questPoint, displayName, unlockedRegion) {
        super(GameConstants.StoneType[type], basePrice, currency, undefined, displayName, 'An evolution item. See your Item Bag for more information.', 'evolution');
        this.getCaughtStatus = ko.pureComputed(() => {
            // Only include Pokémon which have evolutions
            const unlockedEvolutions = pokemonList.filter((p) => p.evolutions)
                // only include base Pokémon we have caught
                .filter(p => PartyController.getCaughtStatusByName(p.name))
                // Map to the evolution which uses this stone type
                .map((p) => p.evolutions.filter(e => e.type.includes(EvolutionType.Stone) && e.stone === this.type))
                // Flatten the array (in case of multiple evolutions)
                .flat()
                // Ensure the we actually found an evolution
                .filter(evolution => evolution)
                // Filter out any Pokémon which can't be obtained yet (future region)
                .filter(evolution => PokemonHelper.calcNativeRegion(evolution.getEvolvedPokemon()) <= player.highestRegion())
                // Finally get the evolution
                .map(evolution => evolution.getEvolvedPokemon());
            if (unlockedEvolutions.length == 0) {
                return undefined;
            }
            // Calculate the lowest caught status
            return unlockedEvolutions.reduce((status, pokemonName) => {
                return Math.min(status, PartyController.getCaughtStatusByName(pokemonName));
            }, CaughtStatus.CaughtShiny);
        });
        this.type = type;
        this.unlockedRegion = unlockedRegion;
    }
    gain(n) {
        player.gainItem(GameConstants.StoneType[this.type], n);
    }
    use(pokemon) {
        const partyPokemon = App.game.party.getPokemon(PokemonHelper.getPokemonByName(pokemon).id);
        const shiny = partyPokemon.useStone(this.type);
        return shiny;
    }
}
// TODO: Set prices for different kinds of stones
ItemList.Leaf_stone = new EvolutionStone(GameConstants.StoneType.Leaf_stone, 2500, undefined, 'Leaf Stone');
ItemList.Fire_stone = new EvolutionStone(GameConstants.StoneType.Fire_stone, 2500, undefined, 'Fire Stone');
ItemList.Water_stone = new EvolutionStone(GameConstants.StoneType.Water_stone, 2500, undefined, 'Water Stone');
ItemList.Thunder_stone = new EvolutionStone(GameConstants.StoneType.Thunder_stone, 2500, undefined, 'Thunder Stone');
ItemList.Moon_stone = new EvolutionStone(GameConstants.StoneType.Moon_stone, 2500, undefined, 'Moon Stone');
ItemList.Linking_cord = new EvolutionStone(GameConstants.StoneType.Linking_cord, 2500, undefined, 'Linking Cord');
ItemList.Sun_stone = new EvolutionStone(GameConstants.StoneType.Sun_stone, 2500, undefined, 'Sun Stone');
ItemList.Soothe_bell = new EvolutionStone(GameConstants.StoneType.Soothe_bell, 2500, undefined, 'Soothe Bell');
ItemList.Metal_coat = new EvolutionStone(GameConstants.StoneType.Metal_coat, 2500, undefined, 'Metal Coat');
ItemList.Kings_rock = new EvolutionStone(GameConstants.StoneType.Kings_rock, 2500, undefined, 'King\'s Rock');
ItemList.Upgrade = new EvolutionStone(GameConstants.StoneType.Upgrade, 2500, undefined, 'Upgrade');
ItemList.Dragon_scale = new EvolutionStone(GameConstants.StoneType.Dragon_scale, 2500, undefined, 'Dragon Scale');
ItemList.Prism_scale = new EvolutionStone(GameConstants.StoneType.Prism_scale, 2500, undefined, 'Prism Scale');
ItemList.Deepsea_tooth = new EvolutionStone(GameConstants.StoneType.Deepsea_tooth, 2500, undefined, 'Deep Sea Tooth');
ItemList.Deepsea_scale = new EvolutionStone(GameConstants.StoneType.Deepsea_scale, 2500, undefined, 'Deep Sea Scale');
ItemList.Shiny_stone = new EvolutionStone(GameConstants.StoneType.Shiny_stone, 2500, undefined, 'Shiny Stone');
ItemList.Dusk_stone = new EvolutionStone(GameConstants.StoneType.Dusk_stone, 2500, undefined, 'Dusk Stone');
ItemList.Dawn_stone = new EvolutionStone(GameConstants.StoneType.Dawn_stone, 2500, undefined, 'Dawn Stone');
ItemList.Razor_claw = new EvolutionStone(GameConstants.StoneType.Razor_claw, 2500, undefined, 'Razor Claw');
ItemList.Razor_fang = new EvolutionStone(GameConstants.StoneType.Razor_fang, 2500, undefined, 'Razor Fang');
ItemList.Electirizer = new EvolutionStone(GameConstants.StoneType.Electirizer, 2500, undefined, 'Electirizer');
ItemList.Magmarizer = new EvolutionStone(GameConstants.StoneType.Magmarizer, 2500, undefined, 'Magmarizer');
ItemList.Protector = new EvolutionStone(GameConstants.StoneType.Protector, 2500, undefined, 'Protector');
ItemList.Dubious_disc = new EvolutionStone(GameConstants.StoneType.Dubious_disc, 2500, undefined, 'Dubious Disc');
ItemList.Reaper_cloth = new EvolutionStone(GameConstants.StoneType.Reaper_cloth, 2500, undefined, 'Reaper Cloth');
ItemList.Black_DNA = new EvolutionStone(GameConstants.StoneType.Black_DNA, 2500, undefined, 'Black DNA');
ItemList.White_DNA = new EvolutionStone(GameConstants.StoneType.White_DNA, 2500, undefined, 'White DNA');
ItemList.Sachet = new EvolutionStone(GameConstants.StoneType.Sachet, 2500, undefined, 'Sachet');
ItemList.Whipped_dream = new EvolutionStone(GameConstants.StoneType.Whipped_dream, 2500, undefined, 'Whipped Dream');
ItemList.Ice_stone = new EvolutionStone(GameConstants.StoneType.Ice_stone, 2500, undefined, 'Ice Stone');
ItemList.Solar_light = new EvolutionStone(GameConstants.StoneType.Solar_light, 2500, undefined, 'Solar Light');
ItemList.Lunar_light = new EvolutionStone(GameConstants.StoneType.Lunar_light, 2500, undefined, 'Lunar Light');
ItemList.Sweet_apple = new EvolutionStone(GameConstants.StoneType.Sweet_apple, 5000, undefined, 'Sweet Apple');
ItemList.Tart_apple = new EvolutionStone(GameConstants.StoneType.Tart_apple, 5000, undefined, 'Tart Apple');
ItemList.Cracked_pot = new EvolutionStone(GameConstants.StoneType.Cracked_pot, 5000, undefined, 'Cracked Pot');
ItemList.Galarica_cuff = new EvolutionStone(GameConstants.StoneType.Galarica_cuff, 5000, undefined, 'Galarica Cuff');
ItemList.Galarica_wreath = new EvolutionStone(GameConstants.StoneType.Galarica_wreath, 5000, undefined, 'Galarica Wreath');
ItemList.Black_mane_hair = new EvolutionStone(GameConstants.StoneType.Black_mane_hair, 2500, undefined, 'Black Mane Hair');
ItemList.White_mane_hair = new EvolutionStone(GameConstants.StoneType.White_mane_hair, 2500, undefined, 'White Mane Hair');
///<reference path="Item.ts"/>
class FarmHandItem extends Item {
    constructor(farmHandName, basePrice, currency = GameConstants.Currency.farmPoint) {
        super(`FarmHand${farmHandName}`, basePrice, currency, { maxAmount: 1 }, `Farm Hand ${farmHandName}`);
        this.farmHandName = farmHandName;
    }
    get farmHand() {
        return FarmHands.list.find(f => f.name == this.farmHandName);
    }
    get description() {
        var _a, _b, _c, _d, _e;
        const farmHand = this.farmHand;
        return `Cost: <img alt="Farm Points" src="assets/images/currency/farmPoint.svg" width="20px">&nbsp;${((_b = (_a = farmHand === null || farmHand === void 0 ? void 0 : farmHand.cost) === null || _a === void 0 ? void 0 : _a.amount) !== null && _b !== void 0 ? _b : 0).toLocaleString('en-US')}/hour<br/>
        Work Speed: ${GameConstants.formatTimeFullLetters(((_c = farmHand === null || farmHand === void 0 ? void 0 : farmHand.workTick) !== null && _c !== void 0 ? _c : GameConstants.MINUTE) / 1000)}<br/>
        Efficiency: ${((_d = farmHand === null || farmHand === void 0 ? void 0 : farmHand.efficiency) !== null && _d !== void 0 ? _d : 0).toLocaleString('en-US')}<br/>
        Max Energy: ${((_e = farmHand === null || farmHand === void 0 ? void 0 : farmHand.maxEnergy) !== null && _e !== void 0 ? _e : 0).toLocaleString('en-US')}`;
    }
    isAvailable() {
        var _a, _b;
        const purchased = (_b = (_a = this.farmHand) === null || _a === void 0 ? void 0 : _a.isUnlocked()) !== null && _b !== void 0 ? _b : true;
        return super.isAvailable() && !purchased;
    }
    get image() {
        var _a;
        const trainerID = ((_a = this.farmHand) === null || _a === void 0 ? void 0 : _a.trainerSprite) || 0;
        return `assets/images/profile/trainer-${trainerID}.png`;
    }
}
// Berry Masters
ItemList.FarmHandBailey = new FarmHandItem('Bailey', 50000, GameConstants.Currency.farmPoint); // Johto (50k)
ItemList.FarmHandKerry = new FarmHandItem('Kerry', 100000, GameConstants.Currency.farmPoint); // Hoenn (100k)
ItemList.FarmHandRiley = new FarmHandItem('Riley', 200000, GameConstants.Currency.farmPoint); // Sinnoh (200k)
//ItemList['FarmHandJessie']   = new FarmHandItem('Jessie', 500000, GameConstants.Currency.farmPoint); // Alola (500k) (not implemented)
// Battle Frontier
ItemList.FarmHandJamie = new FarmHandItem('Jamie', 20000, GameConstants.Currency.battlePoint);
///<reference path="Item.ts"/>
class FluteItem extends Item {
    constructor(name, description, gemTypes, multiplierType, multiplyBy) {
        super(name, Infinity, undefined, { maxAmount: 1 }, undefined, description, 'fluteItem');
        this.gemTypes = gemTypes;
        this.multiplierType = multiplierType;
        this.multiplyBy = multiplyBy;
    }
    use() {
        FluteEffectRunner.toggleEffect(this.name);
        return true;
    }
    getDescription() {
        const multiplier = ((this.getMultiplier() - 1) * 100).toFixed(2);
        return `+${multiplier}% bonus to ${this.description}`;
    }
    getMultiplier() {
        return (this.multiplyBy - 1) * (AchievementHandler.achievementBonus() + 1) + 1;
    }
    isSoldOut() {
        return player.itemList[this.name]() > 0 || FluteEffectRunner.isActive(GameConstants.FluteItemType[this.name])();
    }
    checkCanUse() {
        if (App.game.challenges.list.disableGems.active()) {
            Notifier.notify({
                title: 'Challenge Mode',
                message: 'Gems are Disabled',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        if (App.game.challenges.list.disableBattleItems.active()) {
            Notifier.notify({
                title: 'Challenge Mode',
                message: 'Battle Items are Disabled',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        if (!FluteEffectRunner.isActive(GameConstants.FluteItemType[this.name])() && !player.itemList[this.name]()) {
            Notifier.notify({
                message: `You don't have the ${this.displayName}...`,
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        if (FluteEffectRunner.getLowestGem(this.name) <= FluteEffectRunner.numActiveFlutes() + 1) {
            Notifier.notify({
                message: 'You don\'t have enough gems to use this Flute.',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        return true;
    }
}
ItemList.Yellow_Flute = new FluteItem(GameConstants.FluteItemType.Yellow_Flute, 'Pokémon Attack', ['Grass', 'Flying', 'Electric'], 'pokemonAttack', 1.02);
ItemList.Time_Flute = new FluteItem(GameConstants.FluteItemType.Time_Flute, 'Gym and Dungeon Timers', ['Ground', 'Poison', 'Steel'], undefined, 1.02);
ItemList.Black_Flute = new FluteItem(GameConstants.FluteItemType.Black_Flute, 'Click Attack', ['Dark', 'Psychic', 'Fighting'], 'clickAttack', 1.02);
ItemList.Red_Flute = new FluteItem(GameConstants.FluteItemType.Red_Flute, 'Egg Steps', ['Fire', 'Rock', 'Dragon'], 'eggStep', 1.02);
ItemList.White_Flute = new FluteItem(GameConstants.FluteItemType.White_Flute, 'Shiny Chance', ['Normal', 'Fairy', 'Ice'], 'shiny', 1.02);
ItemList.Blue_Flute = new FluteItem(GameConstants.FluteItemType.Blue_Flute, 'EV Yield', ['Water', 'Bug', 'Ghost'], 'ev', 1.02);
///<reference path="Item.ts"/>
class HatcheryHelperItem extends Item {
    constructor(hatcheryHelperName, basePrice, currency = GameConstants.Currency.money) {
        super(`HatcheryHelper${hatcheryHelperName}`, basePrice, currency, { maxAmount: 1 }, `Hatchery Helper ${hatcheryHelperName}`);
        this.hatcheryHelperName = hatcheryHelperName;
    }
    get hatcheryHelper() {
        return HatcheryHelpers.list.find(f => f.name == this.hatcheryHelperName);
    }
    get description() {
        var _a, _b, _c, _d, _e;
        const hatcheryHelper = this.hatcheryHelper;
        return `Cost: <img src="assets/images/currency/${GameConstants.Currency[(_a = hatcheryHelper === null || hatcheryHelper === void 0 ? void 0 : hatcheryHelper.cost) === null || _a === void 0 ? void 0 : _a.currency]}.svg" width="20px">&nbsp;${((_c = (_b = hatcheryHelper === null || hatcheryHelper === void 0 ? void 0 : hatcheryHelper.cost) === null || _b === void 0 ? void 0 : _b.amount) !== null && _c !== void 0 ? _c : 0).toLocaleString('en-US')}/hatch<br/>
        Step Efficiency: ${((_d = hatcheryHelper === null || hatcheryHelper === void 0 ? void 0 : hatcheryHelper.stepEfficiencyBase) !== null && _d !== void 0 ? _d : 0).toLocaleString('en-US')}%<br/>
        Attack Efficiency: ${((_e = hatcheryHelper === null || hatcheryHelper === void 0 ? void 0 : hatcheryHelper.attackEfficiencyBase) !== null && _e !== void 0 ? _e : 0).toLocaleString('en-US')}%`;
    }
    isAvailable() {
        var _a, _b;
        const purchased = (_b = (_a = this.hatcheryHelper) === null || _a === void 0 ? void 0 : _a.isUnlocked()) !== null && _b !== void 0 ? _b : true;
        return super.isAvailable() && !purchased;
    }
    get image() {
        var _a;
        const trainerID = ((_a = this.hatcheryHelper) === null || _a === void 0 ? void 0 : _a.trainerSprite) || 0;
        return `assets/images/profile/trainer-${trainerID}.png`;
    }
}
// Berry Masters
ItemList.HatcheryHelperJasmine = new HatcheryHelperItem('Jasmine', 10000000, GameConstants.Currency.money);
ItemList.HatcheryHelperDakota = new HatcheryHelperItem('Dakota', 100000, GameConstants.Currency.dungeonToken);
ItemList.HatcheryHelperCameron = new HatcheryHelperItem('Cameron', 100000, GameConstants.Currency.farmPoint);
ItemList.HatcheryHelperCarey = new HatcheryHelperItem('Carey', 10000, GameConstants.Currency.questPoint);
ItemList.HatcheryHelperKris = new HatcheryHelperItem('Kris', 2000, GameConstants.Currency.diamond);
ItemList.HatcheryHelperNoel = new HatcheryHelperItem('Noel', 20000, GameConstants.Currency.battlePoint);
///<reference path="Item.ts"/>
class HeldItem extends Item {
    constructor(name, basePrice, currency, shopOptions, displayName, description, regionUnlocked, canUse) {
        super(name, basePrice, currency, shopOptions, displayName, description, 'heldItems');
        this.canUse = canUse;
        this.regionUnlocked = regionUnlocked;
    }
    static getHeldItems() {
        return Object.values(ItemList).filter(i => i instanceof HeldItem);
    }
    isUnlocked() {
        return player.highestRegion() >= this.regionUnlocked;
    }
}
HeldItem.heldItemSelected = ko.observable(undefined);
class AttackBonusHeldItem extends HeldItem {
    constructor(name, basePrice, currency, shopOptions, displayName, attackBonus, regionUnlocked, pokemonDescription = 'the Pokémon', canUse = (pokemon) => true) {
        super(name, basePrice, currency, shopOptions, displayName, `A held item that raises the attack of ${pokemonDescription} by ${((attackBonus - 1) * 100).toFixed(0)}%.`, regionUnlocked, canUse);
        this.attackBonus = attackBonus;
    }
}
class TypeRestrictedAttackBonusHeldItem extends AttackBonusHeldItem {
    constructor(name, basePrice, currency, shopOptions, displayName, attackBonus, type, regionUnlocked) {
        super(name, basePrice, currency, shopOptions, displayName, attackBonus, regionUnlocked, `${GameHelper.anOrA(PokemonType[type])} ${PokemonType[type]}-type Pokémon`, (pokemon) => {
            const dataPokemon = PokemonHelper.getPokemonById(pokemon.id);
            return dataPokemon.type1 == type || dataPokemon.type2 == type;
        });
        this.attackBonus = attackBonus;
    }
}
class EVsGainedBonusHeldItem extends HeldItem {
    constructor(name, basePrice, currency, shopOptions, displayName, gainedBonus, regionUnlocked) {
        super(name, basePrice, currency, shopOptions, displayName, `A held item that increases EV gains for the holding Pokémon by ${((gainedBonus - 1) * 100).toFixed(0)}%.`, regionUnlocked, (pokemon) => {
            return pokemon.pokerus > GameConstants.Pokerus.Uninfected;
        });
        this.gainedBonus = gainedBonus;
    }
}
class ExpGainedBonusHeldItem extends HeldItem {
    constructor(name, basePrice, currency, shopOptions, displayName, gainedBonus, regionUnlocked, canUse = (pokemon) => true) {
        super(name, basePrice, currency, shopOptions, displayName, `A held item that earns the holding Pokémon ${((gainedBonus - 1) * 100).toFixed(0)}% bonus Experience Points.`, regionUnlocked, canUse);
        this.gainedBonus = gainedBonus;
    }
}
ItemList.Wonder_Chest = new ExpGainedBonusHeldItem('Wonder_Chest', 10000, GameConstants.Currency.money, undefined, 'Wonder Chest', 1.15, GameConstants.Region.johto);
ItemList.Muscle_Band = new AttackBonusHeldItem('Muscle_Band', 1000, GameConstants.Currency.battlePoint, undefined, 'Muscle Band', 1.05, GameConstants.Region.hoenn);
// Pokemon specific items
ItemList.Light_Ball = new AttackBonusHeldItem('Light_Ball', 10000, GameConstants.Currency.money, undefined, 'Light Ball', 1.2, GameConstants.Region.final /* GameConstants.Region.johto */, 'any Pikachu', (pokemon) => Math.floor(pokemon.id) == 25);
ItemList.Quick_Powder = new AttackBonusHeldItem('Quick_Powder', 10000, GameConstants.Currency.money, undefined, 'Quick Powder', 1.2, GameConstants.Region.final /* GameConstants.Region.johto */, 'Ditto', (pokemon) => Math.floor(pokemon.id) == 132);
ItemList.Thick_Club = new AttackBonusHeldItem('Thick_Club', 10000, GameConstants.Currency.money, undefined, 'Thick Club', 1.2, GameConstants.Region.final /* GameConstants.Region.johto */, 'Cubone or Marowak', (pokemon) => Math.floor(pokemon.id) == 104 || Math.floor(pokemon.id) == 105);
ItemList.Soul_Dew = new AttackBonusHeldItem('Soul_Dew', 10000, GameConstants.Currency.money, undefined, 'Soul Dew', 1.5, GameConstants.Region.sinnoh, 'Latias or Latios', (pokemon) => Math.floor(pokemon.id) == 380 || Math.floor(pokemon.id) == 381);
ItemList.Adamant_Orb = new AttackBonusHeldItem('Adamant_Orb', 10000, GameConstants.Currency.money, undefined, 'Adamant Orb', 1.5, GameConstants.Region.sinnoh, 'Dialga', (pokemon) => Math.floor(pokemon.id) == 483);
ItemList.Lustrous_Orb = new AttackBonusHeldItem('Lustrous_Orb', 10000, GameConstants.Currency.money, undefined, 'Lustrous Orb', 1.5, GameConstants.Region.sinnoh, 'Palkia', (pokemon) => Math.floor(pokemon.id) == 484);
ItemList.Leek = new AttackBonusHeldItem('Leek', 10000, GameConstants.Currency.money, undefined, 'Leek', 1.2, GameConstants.Region.galar, 'Farfetch\'d or Sirfetch\'d', (pokemon) => Math.floor(pokemon.id) == 83 || Math.floor(pokemon.id) == 865);
ItemList.Rusted_Sword = new AttackBonusHeldItem('Rusted_Sword', 10000, GameConstants.Currency.money, undefined, 'Rusted Sword', 1.5, GameConstants.Region.galar, 'Zacian', (pokemon) => Math.floor(pokemon.id) == 888);
ItemList.Rusted_Shield = new AttackBonusHeldItem('Rusted_Shield', 10000, GameConstants.Currency.money, undefined, 'Rusted Shield', 1.5, GameConstants.Region.galar, 'Zamazenta', (pokemon) => Math.floor(pokemon.id) == 889);
// Typebased attack items
ItemList.Black_Belt = new TypeRestrictedAttackBonusHeldItem('Black_Belt', 10000, GameConstants.Currency.money, undefined, 'Black Belt', 1.1, PokemonType.Fighting, GameConstants.Region.johto);
ItemList.Black_Glasses = new TypeRestrictedAttackBonusHeldItem('Black_Glasses', 10000, GameConstants.Currency.money, undefined, 'Black Glasses', 1.1, PokemonType.Dark, GameConstants.Region.johto);
ItemList.Charcoal = new TypeRestrictedAttackBonusHeldItem('Charcoal', 10000, GameConstants.Currency.money, undefined, 'Charcoal', 1.1, PokemonType.Fire, GameConstants.Region.johto);
ItemList.Dragon_Fang = new TypeRestrictedAttackBonusHeldItem('Dragon_Fang', 10000, GameConstants.Currency.money, undefined, 'Dragon Fang', 1.1, PokemonType.Dragon, GameConstants.Region.johto);
// TODO: Hard Stone is in the underground. We can keep it there, and give it two uses.
ItemList.Magnet = new TypeRestrictedAttackBonusHeldItem('Magnet', 10000, GameConstants.Currency.money, undefined, 'Magnet', 1.1, PokemonType.Electric, GameConstants.Region.johto);
// TODO: Metal Coat is a evo-stone. Can be turned into a held item evolution
ItemList.Miracle_Seed = new TypeRestrictedAttackBonusHeldItem('Miracle_Seed', 10000, GameConstants.Currency.money, undefined, 'Miracle Seed', 1.1, PokemonType.Grass, GameConstants.Region.johto);
ItemList.Mystic_Water = new TypeRestrictedAttackBonusHeldItem('Mystic_Water', 10000, GameConstants.Currency.money, undefined, 'Mystic Water', 1.1, PokemonType.Water, GameConstants.Region.johto);
ItemList.Never_Melt_Ice = new TypeRestrictedAttackBonusHeldItem('Never_Melt_Ice', 10000, GameConstants.Currency.money, undefined, 'Never-Melt Ice', 1.1, PokemonType.Ice, GameConstants.Region.johto);
ItemList.Pink_Bow = new TypeRestrictedAttackBonusHeldItem('Pink_Bow', 10000, GameConstants.Currency.money, undefined, 'Pink Bow', 1.1, PokemonType.Fairy, GameConstants.Region.johto);
ItemList.Poison_Barb = new TypeRestrictedAttackBonusHeldItem('Poison_Barb', 10000, GameConstants.Currency.money, undefined, 'Poison Barb', 1.1, PokemonType.Poison, GameConstants.Region.johto);
ItemList.Sharp_Beak = new TypeRestrictedAttackBonusHeldItem('Sharp_Beak', 10000, GameConstants.Currency.money, undefined, 'Sharp Beak', 1.1, PokemonType.Flying, GameConstants.Region.johto);
ItemList.Silk_Scarf = new TypeRestrictedAttackBonusHeldItem('Silk_Scarf', 10000, GameConstants.Currency.money, undefined, 'Silk Scarf', 1.1, PokemonType.Normal, GameConstants.Region.johto);
ItemList.Silver_Powder = new TypeRestrictedAttackBonusHeldItem('Silver_Powder', 10000, GameConstants.Currency.money, undefined, 'Silver Powder', 1.1, PokemonType.Bug, GameConstants.Region.johto);
ItemList.Soft_Sand = new TypeRestrictedAttackBonusHeldItem('Soft_Sand', 10000, GameConstants.Currency.money, undefined, 'Soft Sand', 1.1, PokemonType.Ground, GameConstants.Region.johto);
ItemList.Spell_Tag = new TypeRestrictedAttackBonusHeldItem('Spell_Tag', 10000, GameConstants.Currency.money, undefined, 'Spell Tag', 1.1, PokemonType.Ghost, GameConstants.Region.johto);
ItemList.Twisted_Spoon = new TypeRestrictedAttackBonusHeldItem('Twisted_Spoon', 10000, GameConstants.Currency.money, undefined, 'Twisted Spoon', 1.1, PokemonType.Psychic, GameConstants.Region.johto);
ItemList.Macho_Brace = new EVsGainedBonusHeldItem('Macho_Brace', 2000, GameConstants.Currency.questPoint, undefined, 'Macho Brace', 2, GameConstants.Region.sinnoh);
class ItemHandler {
    static useItem(name, amount = 1) {
        if (!ItemList[name].checkCanUse()) {
            return false;
        }
        // Only allow the player to use the amount they have maximum
        this.amountToUse = Math.min(player.itemList[name](), amount);
        player.itemList[name](player.itemList[name]() - this.amountToUse);
        // run the function
        const result = ItemList[name].use();
        // If the function returned nothing assume it went fine
        return result == undefined ? true : result;
    }
    static hasItem(name) {
        return player.itemList[name] ? !!player.itemList[name]() : false;
    }
    static resetAmount() {
        const input = $('input[name="amountOfStones"]');
        input.val(1).change();
    }
    static increaseAmount(n) {
        const input = $('input[name="amountOfItems"]');
        const newVal = (parseInt(input.val().toString(), 10) || 0) + n;
        input.val(newVal > 1 ? newVal : 1).change();
    }
    static useStones() {
        if (!this.pokemonSelected()) {
            return Notifier.notify({
                message: 'No Pokémon selected.',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
        const amountTotal = Math.min(this.amountSelected(), player.itemList[this.stoneSelected()]());
        if (!amountTotal) {
            return Notifier.notify({
                // TODO: PMX - Update plural system to handle all cases
                message: `You don't have any ${ItemList[this.stoneSelected()].displayName}s left...`,
                type: NotificationConstants.NotificationOption.danger,
            });
        }
        let amountUsed = 0;
        for (let i = 0; i < amountTotal; i++) {
            player.itemList[this.stoneSelected()](player.itemList[this.stoneSelected()]() - 1);
            amountUsed++;
            if (ItemList[this.stoneSelected()].use(this.pokemonSelected())) {
                // Stop when a shiny is encountered
                break;
            }
        }
        const multiple = amountUsed == 1 ? '' : 's';
        const stoneUsed = ItemList[this.stoneSelected()];
        Notifier.notify({
            // TODO: PMX - Update plural system to handle all cases
            message: `You used ${amountUsed.toLocaleString('en-US')} × <img src="${stoneUsed.image}" height="24px"/> ${stoneUsed.displayName}${multiple} on ${this.pokemonSelected()}.`,
            type: NotificationConstants.NotificationOption.success,
        });
    }
    static initilizeEvoStones() {
        // Set our unlock regions
        Object.values(ItemList).filter(item => item instanceof EvolutionStone).forEach(evoStone => {
            // If a region has already been manually set
            if (evoStone.unlockedRegion > GameConstants.Region.none) {
                return false;
            }
            // Get a list of evolutions that use this stone, set the unlock region to the lowest region
            evoStone.unlockedRegion = Math.min(...pokemonList.filter(p => 
            // Filter to only include pokemon that make use of this evolution stone
            p.nativeRegion > GameConstants.Region.none &&
                p.evolutions != undefined &&
                p.evolutions.some(e => e instanceof StoneEvolution && e.stone == evoStone.type)).map(p => {
                // Map to the native region for evolutions that use this stone
                return Math.min(...p.evolutions.filter(e => e instanceof StoneEvolution && e.stone == evoStone.type)
                    .map(e => Math.max(p.nativeRegion, PokemonHelper.calcNativeRegion(e.getEvolvedPokemon())))
                    .filter(r => r > GameConstants.Region.none));
            }));
        });
    }
}
ItemHandler.stoneSelected = ko.observable('Fire_stone');
ItemHandler.pokemonSelected = ko.observable('Vulpix');
ItemHandler.amountSelected = ko.observable(1);
ItemHandler.amount = ko.observable(1);
ItemHandler.amountToUse = 1;
/*
To update this type when adding new items:

Open the game, and run the following code in the browser console

copy(`type ItemNameType
    = ${[...new Set(Object.values(ItemList).map(i => i.name))].map(i => `'${i.replace(/'/g, "\\'")}'`).join('\n    | ')};`);

Replace the everything in this file (except for this comment) with what was copied
*/
/// <reference path="Item.ts"/>
/// <reference path="../../declarations/enums/MulchType.d.ts"/>
class MulchItem extends Item {
    constructor(type, basePrice, displayName, description) {
        super(MulchType[type], basePrice, GameConstants.Currency.farmPoint, { multiplierDecreaser: MultiplierDecreaser.Berry }, displayName, description, 'farm');
        this.type = type;
    }
    gain(amt) {
        GameHelper.incrementObservable(App.game.farming.mulchList[this.type], amt);
    }
}
ItemList.Boost_Mulch = new MulchItem(MulchType.Boost_Mulch, 50, 'Boost Mulch', 'Increases Berry growth rate.');
ItemList.Rich_Mulch = new MulchItem(MulchType.Rich_Mulch, 100, 'Rich Mulch', 'Increases Berry harvest rate.');
ItemList.Surprise_Mulch = new MulchItem(MulchType.Surprise_Mulch, 150, 'Surprise Mulch', 'Increases Berry mutation rate.');
ItemList.Amaze_Mulch = new MulchItem(MulchType.Amaze_Mulch, 200, 'Amaze Mulch', 'Increases all Berry effects.');
ItemList.Freeze_Mulch = new MulchItem(MulchType.Freeze_Mulch, 350, 'Freeze Mulch', 'Stops Berry growth and aura.');
class PokeBlock extends Item {
    constructor(color, basePrice, currency = GameConstants.Currency.money) {
        super(`PokeBlock_${GameConstants.PokeBlockColor[color]}`, basePrice, currency);
        this.type = color;
    }
}
ItemList.PokeBlock_Black = new PokeBlock(GameConstants.PokeBlockColor.Black, Infinity);
ItemList.PokeBlock_Red = new PokeBlock(GameConstants.PokeBlockColor.Red, Infinity);
ItemList.PokeBlock_Gold = new PokeBlock(GameConstants.PokeBlockColor.Gold, Infinity);
ItemList.PokeBlock_Purple = new PokeBlock(GameConstants.PokeBlockColor.Purple, Infinity);
ItemList.PokeBlock_Gray = new PokeBlock(GameConstants.PokeBlockColor.Gray, Infinity);
ItemList.PokeBlock_White = new PokeBlock(GameConstants.PokeBlockColor.White, Infinity);
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="Item.ts" />
class PokeballItem extends Item {
    constructor(type, basePrice, currency = GameConstants.Currency.money, options, displayName) {
        super(GameConstants.Pokeball[type], basePrice, currency, options, displayName, undefined, 'pokeball');
        this.type = type;
    }
    gain(amt) {
        App.game.pokeballs.gainPokeballs(this.type, amt);
    }
}
ItemList.Pokeball = new PokeballItem(GameConstants.Pokeball.Pokeball, 100, undefined, undefined, 'Poké Ball');
ItemList.Greatball = new PokeballItem(GameConstants.Pokeball.Greatball, 500, undefined, undefined, 'Great Ball');
ItemList.Ultraball = new PokeballItem(GameConstants.Pokeball.Ultraball, 2000, undefined, undefined, 'Ultra Ball');
ItemList.Masterball = new PokeballItem(GameConstants.Pokeball.Masterball, 2500, GameConstants.Currency.questPoint, undefined, 'Master Ball');
// Not sold in shops
ItemList.Fastball = new PokeballItem(GameConstants.Pokeball.Fastball, Infinity, GameConstants.Currency.farmPoint, undefined, 'Fast Ball');
ItemList.Quickball = new PokeballItem(GameConstants.Pokeball.Quickball, Infinity, GameConstants.Currency.farmPoint, undefined, 'Quick Ball');
ItemList.Timerball = new PokeballItem(GameConstants.Pokeball.Timerball, Infinity, GameConstants.Currency.farmPoint, undefined, 'Timer Ball');
ItemList.Duskball = new PokeballItem(GameConstants.Pokeball.Duskball, Infinity, GameConstants.Currency.farmPoint, undefined, 'Dusk Ball');
ItemList.Luxuryball = new PokeballItem(GameConstants.Pokeball.Luxuryball, Infinity, GameConstants.Currency.farmPoint, undefined, 'Luxury Ball');
ItemList.Diveball = new PokeballItem(GameConstants.Pokeball.Diveball, Infinity, GameConstants.Currency.battlePoint, undefined, 'Dive Ball');
ItemList.Lureball = new PokeballItem(GameConstants.Pokeball.Lureball, Infinity, GameConstants.Currency.battlePoint, undefined, 'Lure Ball');
ItemList.Nestball = new PokeballItem(GameConstants.Pokeball.Nestball, Infinity, GameConstants.Currency.battlePoint, undefined, 'Nest Ball');
ItemList.Repeatball = new PokeballItem(GameConstants.Pokeball.Repeatball, Infinity, GameConstants.Currency.battlePoint, undefined, 'Repeat Ball');
ItemList.Beastball = new PokeballItem(GameConstants.Pokeball.Beastball, 500, GameConstants.Currency.questPoint, undefined, 'Beast Ball');
/// <reference path="CaughtIndicatingItem.ts" />
class PokemonItem extends CaughtIndicatingItem {
    constructor(pokemon, basePrice, currency = GameConstants.Currency.questPoint) {
        super(pokemon, basePrice, currency, undefined, undefined, `Add ${pokemon} to your party.`, 'pokemonItem');
        this.type = pokemon;
    }
    gain(amt) {
        let shiny = false;
        let numShiny = 0;
        const pokemonName = this.name;
        const pokemonID = PokemonHelper.getPokemonByName(pokemonName).id;
        for (let i = 0; i < amt; i++) {
            const shinyBool = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_SHOP);
            if (shinyBool) {
                numShiny++;
            }
            shiny = shiny || shinyBool;
            // Statistics
            if (i < amt - 1) { // -1 because gainPokemonById will add 1 to statistics
                const gender = PokemonFactory.generateGenderById(pokemonID);
                PokemonHelper.incrementPokemonStatistics(pokemonID, GameConstants.STATISTIC_CAPTURED, shinyBool, gender);
            }
        }
        if (shiny || !App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(pokemonName).id)) {
            Notifier.notify({
                message: `${(shiny) ? `✨ You obtained a shiny ${pokemonName}! ✨` : `You obtained ${GameHelper.anOrA(pokemonName)} ${pokemonName}!`}`,
                type: (shiny ? NotificationConstants.NotificationOption.warning : NotificationConstants.NotificationOption.success),
                setting: NotificationConstants.NotificationSetting.General.new_catch,
                sound: ((!App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(pokemonName).id) || (shiny && (!App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(pokemonName).id, true))) ? NotificationConstants.NotificationSound.General.new_catch : null)),
            });
        }
        if (shiny) {
            App.game.logbook.newLog(LogBookTypes.SHINY, `The purchased ${pokemonName} turned out to be shiny! ${App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(pokemonName).id, true) ? '(duplicate)' : ''}`);
        }
        App.game.party.gainPokemonById(pokemonID, shiny, true);
        const partyPokemon = App.game.party.getPokemon(pokemonID);
        partyPokemon.effortPoints += App.game.party.calculateEffortPoints(partyPokemon, false, GameConstants.SHOPMON_EP_YIELD * (amt - numShiny));
        partyPokemon.effortPoints += App.game.party.calculateEffortPoints(partyPokemon, true, GameConstants.SHOPMON_EP_YIELD * numShiny);
    }
    getCaughtStatus() {
        return PartyController.getCaughtStatusByName(this.name);
    }
    get image() {
        const subDirectory = this.imageDirectory ? `${this.imageDirectory}/` : '';
        return `assets/images/items/${subDirectory}${this.name.replace(/[^\s\w.()-]/g, '')}.png`;
    }
}
ItemList['Pinkan Arbok'] = new PokemonItem('Pinkan Arbok', undefined);
ItemList['Pinkan Oddish'] = new PokemonItem('Pinkan Oddish', undefined);
ItemList['Pinkan Poliwhirl'] = new PokemonItem('Pinkan Poliwhirl', undefined);
ItemList['Pinkan Geodude'] = new PokemonItem('Pinkan Geodude', undefined);
ItemList['Pinkan Dodrio'] = new PokemonItem('Pinkan Dodrio', 50000);
ItemList.Lickitung = new PokemonItem('Lickitung', 1000);
ItemList['Pinkan Weezing'] = new PokemonItem('Pinkan Weezing', undefined);
ItemList['Pinkan Scyther'] = new PokemonItem('Pinkan Scyther', undefined);
ItemList['Mr. Mime'] = new PokemonItem('Mr. Mime', 1000);
ItemList['Pinkan Electabuzz'] = new PokemonItem('Pinkan Electabuzz', undefined);
ItemList.Jynx = new PokemonItem('Jynx', 2000);
ItemList.Magikarp = new PokemonItem('Magikarp', 50000, Currency.money);
ItemList.Eevee = new PokemonItem('Eevee', 4000);
ItemList.Porygon = new PokemonItem('Porygon', 2000);
ItemList.Togepi = new PokemonItem('Togepi', 15000);
ItemList.Beldum = new PokemonItem('Beldum', 22500);
ItemList.Skorupi = new PokemonItem('Skorupi', 6750);
ItemList.Combee = new PokemonItem('Combee', 6750);
ItemList['Burmy (Plant)'] = new PokemonItem('Burmy (Plant)', 6750);
ItemList.Cherubi = new PokemonItem('Cherubi', 6750);
ItemList.Spiritomb = new PokemonItem('Spiritomb', 6750);
ItemList.Zorua = new PokemonItem('Zorua', 50625);
ItemList['Meloetta (Pirouette)'] = new PokemonItem('Meloetta (Pirouette)', 200000);
ItemList['Furfrou (Debutante)'] = new PokemonItem('Furfrou (Debutante)', 5000000000, Currency.money);
ItemList['Furfrou (Diamond)'] = new PokemonItem('Furfrou (Diamond)', 15000, Currency.diamond);
ItemList['Furfrou (Matron)'] = new PokemonItem('Furfrou (Matron)', 1500000, Currency.farmPoint);
ItemList['Furfrou (Dandy)'] = new PokemonItem('Furfrou (Dandy)', 250000);
ItemList['Furfrou (Kabuki)'] = new PokemonItem('Furfrou (Kabuki)', 75000, Currency.battlePoint);
ItemList['Furfrou (Pharaoh)'] = new PokemonItem('Furfrou (Pharaoh)', 300000000, Currency.dungeonToken);
ItemList['Furfrou (Star)'] = new PokemonItem('Furfrou (Star)', 10000);
ItemList['Furfrou (La Reine)'] = new PokemonItem('Furfrou (La Reine)', undefined);
ItemList['Type: Null'] = new PokemonItem('Type: Null', 114000);
ItemList.Poipole = new PokemonItem('Poipole', 90000);
ItemList.Dracozolt = new PokemonItem('Dracozolt', 100000);
ItemList.Arctozolt = new PokemonItem('Arctozolt', 100000);
ItemList.Dracovish = new PokemonItem('Dracovish', 100000);
ItemList.Arctovish = new PokemonItem('Arctovish', 100000);
ItemList['Zarude (Dada)'] = new PokemonItem('Zarude (Dada)', 500000);
///<reference path="Item.ts"/>
class ShovelItem extends Item {
    constructor(basePrice, displayName, description) {
        super('Berry_Shovel', basePrice, GameConstants.Currency.farmPoint, { multiplierDecreaser: MultiplierDecreaser.Berry }, displayName, description, 'farm');
    }
    gain(amt) {
        GameHelper.incrementObservable(App.game.farming.shovelAmt, amt);
    }
}
ItemList.Berry_Shovel = new ShovelItem(300, 'Berry Shovel', 'Removes Berry Plants in the Farm.');
class MulchShovelItem extends Item {
    constructor(basePrice, displayName, description) {
        super('Mulch_Shovel', basePrice, GameConstants.Currency.farmPoint, { multiplierDecreaser: MultiplierDecreaser.Berry }, displayName, description, 'farm');
    }
    gain(amt) {
        GameHelper.incrementObservable(App.game.farming.mulchShovelAmt, amt);
    }
}
ItemList.Mulch_Shovel = new MulchShovelItem(300, 'Mulch Shovel', 'Removes Mulch from a plot in the Farm.');
class Vitamin extends Item {
    constructor(type, basePrice, currency = GameConstants.Currency.money, options, displayName, description) {
        super(GameConstants.VitaminType[type], basePrice, currency, options, displayName, description);
        this.type = type;
    }
    use() {
        return true;
    }
}
ItemList.RareCandy = new Vitamin(GameConstants.VitaminType.RareCandy, Infinity, undefined, undefined, 'Rare Candy', 'A rare-to-find candy that currently has no use.');
ItemList.Protein = new Vitamin(GameConstants.VitaminType.Protein, 1e4, GameConstants.Currency.money, { multiplier: 1.1, multiplierDecrease: false, saveName: `${GameConstants.VitaminType[GameConstants.VitaminType.Protein]}|${GameConstants.Currency[GameConstants.Currency.money]}` }, undefined, 'Increases Pokémon attack bonus.<br/><i>(attack gained per breeding cycle)</i>');
class VitaminController {
    static incrementMultiplier() {
        this.multiplierIndex((this.multiplierIndex() + 1) % this.multiplier.length);
    }
    static decrementMultiplier() {
        this.multiplierIndex((this.multiplierIndex() + this.multiplier.length - 1) % this.multiplier.length);
    }
    static getMultiplier() {
        return Number(VitaminController.multiplier[VitaminController.multiplierIndex()].replace(/\D/g, '')) || Infinity;
    }
}
VitaminController.multiplier = ['×1', '×5', 'x10', 'Max'];
VitaminController.multiplierIndex = ko.observable(0);
///<reference path="../../declarations/keyItems/KeyItems.d.ts"/>
class BuyKeyItem extends Item {
    constructor(item, basePrice, currency = GameConstants.Currency.questPoint, options, displayName) {
        super(KeyItemType[item], basePrice, currency, Object.assign({ maxAmount: 1 }, options), displayName);
        this.item = item;
    }
    totalPrice(amt) {
        if (amt > this.maxAmount) {
            amt = this.maxAmount;
        }
        return this.basePrice * amt;
    }
    gain(amt) {
        App.game.keyItems.gainKeyItem(this.item);
    }
    isAvailable() {
        return super.isAvailable() && !App.game.keyItems.hasKeyItem(this.item);
    }
    get image() {
        return `assets/images/keyitems/${this.name}.png`;
    }
}
ItemList.Dungeon_ticket = new BuyKeyItem(KeyItemType.Dungeon_ticket, 100, undefined, undefined, 'Dungeon Ticket');
ItemList.Explorer_kit = new BuyKeyItem(KeyItemType.Explorer_kit, 5000, undefined, undefined, 'Explorer Kit');
///<reference path="../../declarations/enums/OakItemType.d.ts"/>
class BuyOakItem extends Item {
    constructor(item, basePrice, currency = GameConstants.Currency.questPoint) {
        super(OakItemType[item], basePrice, currency, { maxAmount: 1 }, undefined, 'Purchase to unlock this Oak Item');
        this.item = item;
    }
    totalPrice(amt) {
        if (amt > this.maxAmount) {
            amt = this.maxAmount;
        }
        return this.basePrice * amt;
    }
    gain(amt) {
        const oakItem = App.game.oakItems.itemList[this.item];
        if (oakItem instanceof BoughtOakItem) {
            oakItem.purchased = true;
        }
    }
    isAvailable() {
        const oakItem = App.game.oakItems.itemList[this.item];
        const purchased = (oakItem instanceof BoughtOakItem) ? oakItem.purchased : true;
        return super.isAvailable() && !purchased;
    }
    get image() {
        return `assets/images/oakitems/${this.name}.png`;
    }
}
ItemList.Squirtbottle = new BuyOakItem(OakItemType.Squirtbottle, 5000, Currency.farmPoint);
ItemList.Sprinklotad = new BuyOakItem(OakItemType.Sprinklotad, 10000, Currency.farmPoint);
ItemList.Explosive_Charge = new BuyOakItem(OakItemType.Explosive_Charge, 5000, Currency.questPoint);
ItemList.Treasure_Scanner = new BuyOakItem(OakItemType.Treasure_Scanner, 10000, Currency.questPoint);
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Feature.d.ts" />
///<reference path="../../declarations/enums/CaughtStatus.d.ts"/>
class Party {
    constructor(multiplier) {
        this.multiplier = multiplier;
        this.name = 'Pokemon Party';
        this.saveKey = 'party';
        this.defaults = {
            caughtPokemon: [],
        };
        this.pokemonAttackObservable = ko.pureComputed(() => {
            return App.game.party.calculatePokemonAttack();
        }).extend({ rateLimit: 1000 });
        this._caughtPokemon = ko.observableArray([]);
        this.hasMaxLevelPokemon = ko.pureComputed(() => {
            for (let i = 0; i < this.caughtPokemon.length; i++) {
                if (this.caughtPokemon[i].level === 100) {
                    return true;
                }
            }
            return false;
        }).extend({ rateLimit: 1000 });
        // This will be completely rebuilt each time a pokemon is caught.
        // Not ideal but still better than mutliple locations scanning through the list to find what they want
        this._caughtPokemonLookup = ko.pureComputed(() => {
            return this.caughtPokemon.reduce((map, p) => {
                map.set(p.id, p);
                return map;
            }, new Map());
        });
    }
    gainPokemonById(id, shiny = false, suppressNotification = false, gender = -1) {
        // If no gender defined, calculate it
        if (gender === -1) {
            gender = PokemonFactory.generateGenderById(id);
        }
        this.gainPokemon(PokemonFactory.generatePartyPokemon(id, shiny, gender), suppressNotification);
    }
    gainPokemon(pokemon, suppressNotification = false) {
        PokemonHelper.incrementPokemonStatistics(pokemon.id, GameConstants.STATISTIC_CAPTURED, pokemon.shiny, pokemon.gender);
        if (pokemon.shiny) {
            // Add all shiny catches to the log book
            App.game.logbook.newLog(LogBookTypes.CAUGHT, `You have captured a shiny ${pokemon.name}! ${this.alreadyCaughtPokemon(pokemon.id, true) ? '(duplicate)' : ''}`);
            // Already caught (shiny)
            if (this.alreadyCaughtPokemon(pokemon.id, true)) {
                return;
            }
            // Notify if not already caught
            Notifier.notify({
                message: `✨ You have captured a shiny ${pokemon.name}! ✨`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.General.new_catch,
                setting: NotificationConstants.NotificationSetting.General.new_catch,
            });
            // Already caught (non shiny) we need to update the party pokemon directly
            if (this.alreadyCaughtPokemon(pokemon.id, false)) {
                this.getPokemon(pokemon.id).shiny = true;
                return;
            }
        }
        // Already caught (non shiny)
        if (this.alreadyCaughtPokemon(pokemon.id, false)) {
            return;
        }
        if (!suppressNotification) {
            Notifier.notify({
                message: `You have captured ${GameHelper.anOrA(pokemon.name)} ${pokemon.name}!`,
                type: NotificationConstants.NotificationOption.success,
                sound: NotificationConstants.NotificationSound.General.new_catch,
                setting: NotificationConstants.NotificationSetting.General.new_catch,
            });
        }
        App.game.logbook.newLog(LogBookTypes.CAUGHT, `You have captured ${GameHelper.anOrA(pokemon.name)} ${pokemon.name}!`);
        this._caughtPokemon.push(pokemon);
    }
    gainExp(exp = 0, level = 1, trainer = false) {
        const multBonus = this.multiplier.getBonus('exp', true);
        const trainerBonus = trainer ? 1.5 : 1;
        const expTotal = Math.floor(exp * level * trainerBonus * multBonus / 9);
        const maxLevel = App.game.badgeCase.maxLevel();
        for (const pokemon of this.caughtPokemon) {
            if (pokemon.level < maxLevel) {
                pokemon.gainExp(expTotal);
            }
        }
    }
    /**
     * Calculate the attack of all your Pokémon
     * @param type1
     * @param type2 types of the enemy we're calculating damage against.
     * @returns {number} damage to be done.
     */
    calculatePokemonAttack(type1 = PokemonType.None, type2 = PokemonType.None, ignoreRegionMultiplier = false, region = player.region, includeBreeding = false, useBaseAttack = false, overrideWeather, ignoreLevel = false, includeFlute = true) {
        let attack = 0;
        for (const pokemon of this.caughtPokemon) {
            attack += this.calculateOnePokemonAttack(pokemon, type1, type2, region, ignoreRegionMultiplier, includeBreeding, useBaseAttack, overrideWeather, ignoreLevel, includeFlute);
        }
        const bonus = this.multiplier.getBonus('pokemonAttack');
        return Math.round(attack * bonus);
    }
    calculateOnePokemonAttack(pokemon, type1 = PokemonType.None, type2 = PokemonType.None, region = player.region, ignoreRegionMultiplier = false, includeBreeding = false, useBaseAttack = false, overrideWeather, ignoreLevel = false, includeFlute = true) {
        var _a;
        let multiplier = 1, attack = 0;
        const pAttack = useBaseAttack ? pokemon.baseAttack : (ignoreLevel ? pokemon.calculateAttack(ignoreLevel) : pokemon.attack);
        const nativeRegion = PokemonHelper.calcNativeRegion(pokemon.name);
        // Check if the pokemon is in their native region
        if (!ignoreRegionMultiplier && nativeRegion != region && nativeRegion != GameConstants.Region.none) {
            // Check if the challenge mode is active
            if (App.game.challenges.list.regionalAttackDebuff.active()) {
                // Pokemon only retain a % of their total damage in other regions based on highest region.
                multiplier = this.getRegionAttackMultiplier();
            }
        }
        // Check if the Pokemon is currently breeding (no attack)
        if (includeBreeding || !pokemon.breeding) {
            if (type1 == PokemonType.None) {
                attack = pAttack * multiplier;
            }
            else {
                const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
                attack = pAttack * TypeHelper.getAttackModifier(dataPokemon.type1, dataPokemon.type2, type1, type2) * multiplier;
            }
        }
        // Weather boost
        const weather = Weather.weatherConditions[overrideWeather !== null && overrideWeather !== void 0 ? overrideWeather : Weather.currentWeather()];
        const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
        (_a = weather.multipliers) === null || _a === void 0 ? void 0 : _a.forEach(value => {
            if (value.type == dataPokemon.type1) {
                attack *= value.multiplier;
            }
            if (value.type == dataPokemon.type2) {
                attack *= value.multiplier;
            }
        });
        // Should we take flute boost into account
        if (includeFlute) {
            const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
            FluteEffectRunner.activeGemTypes().forEach(value => {
                if (value == dataPokemon.type1) {
                    attack *= GameConstants.FLUTE_TYPE_ATTACK_MULTIPLIER;
                }
                if (value == dataPokemon.type2) {
                    attack *= GameConstants.FLUTE_TYPE_ATTACK_MULTIPLIER;
                }
            });
        }
        return attack;
    }
    getRegionAttackMultiplier(highestRegion = player.highestRegion()) {
        // between 0.2 -> 1 based on highest region
        return Math.min(1, Math.max(0.2, 0.1 + (highestRegion / 10)));
    }
    calculateEffortPoints(pokemon, shiny, number = GameConstants.BASE_EP_YIELD) {
        if (pokemon.pokerus < GameConstants.Pokerus.Contagious) {
            return 0;
        }
        let EPNum = number * App.game.multiplier.getBonus('ev');
        if (pokemon.heldItem() && pokemon.heldItem() instanceof EVsGainedBonusHeldItem) {
            EPNum *= pokemon.heldItem().gainedBonus;
        }
        if (shiny) {
            EPNum *= GameConstants.SHINY_EP_MODIFIER;
        }
        return Math.floor(EPNum);
    }
    getPokemon(id) {
        return this._caughtPokemonLookup().get(id);
    }
    getPokemonByName(name) {
        return this._caughtPokemonLookup().get(pokemonMap[name].id);
    }
    alreadyCaughtPokemonByName(name, shiny = false) {
        return this.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(name).id, shiny);
    }
    alreadyCaughtPokemon(id, shiny = false) {
        const pokemon = this.getPokemon(id);
        if (pokemon) {
            return (!shiny || pokemon.shiny);
        }
        return false;
    }
    calculateClickAttack(useItem = false) {
        // Base power
        // Shiny pokemon help with a 50% boost
        const clickAttack = Math.pow(this.caughtPokemon.length + (this.caughtPokemon.filter(p => p.shiny).length / 2) + 1, 1.4) * (1 + AchievementHandler.achievementBonus());
        const bonus = this.multiplier.getBonus('clickAttack', useItem);
        return Math.floor(clickAttack * bonus);
    }
    canAccess() {
        return true;
    }
    fromJSON(json) {
        if (json == null) {
            return;
        }
        const caughtPokemonSave = json.caughtPokemon;
        for (let i = 0; i < caughtPokemonSave.length; i++) {
            const partyPokemon = PokemonFactory.generatePartyPokemon(caughtPokemonSave[i].id);
            partyPokemon.fromJSON(caughtPokemonSave[i]);
            this._caughtPokemon.push(partyPokemon);
        }
    }
    initialize() {
    }
    toJSON() {
        return {
            caughtPokemon: this._caughtPokemon().map(x => x.toJSON()),
        };
    }
    update(delta) {
        // This method intentionally left blank
    }
    get caughtPokemon() {
        return this._caughtPokemon();
    }
}
class PartyController {
    static getCaughtStatusByName(name) {
        return this.getCaughtStatus(PokemonHelper.getPokemonByName(name).id);
    }
    static getCaughtStatus(id) {
        if (App.game.party.alreadyCaughtPokemon(id, true)) {
            return CaughtStatus.CaughtShiny;
        }
        if (App.game.party.alreadyCaughtPokemon(id, false)) {
            return CaughtStatus.Caught;
        }
        return CaughtStatus.NotCaught;
    }
    static getStoneEvolutionsCaughtStatus(id, evoType) {
        const pokemon = App.game.party.caughtPokemon.find(p => p.id == id);
        const statuses = [];
        if (pokemon) {
            for (const evolution of pokemon.evolutions) {
                // skip other Restrictions to show all eevee evolutions for the region
                const regionStatisfied = PokemonHelper.calcNativeRegion(evolution.getEvolvedPokemon()) <= player.highestRegion();
                if (evolution instanceof StoneEvolution && evolution.stone == evoType && regionStatisfied) {
                    const pStatus = this.getCaughtStatusByName(evolution.getEvolvedPokemon());
                    statuses.push(pStatus);
                }
            }
        }
        return statuses;
    }
    static hasMultipleStoneEvolutionsAvailable(pokemonName, evoType) {
        const pokemon = App.game.party.getPokemonByName(pokemonName);
        // We only want to check against pokemon that have multiple possible evolutions that can happen now
        let found = false;
        if (pokemon) {
            for (const evolution of pokemon.evolutions) {
                if (evolution instanceof StoneEvolution && evolution.stone == evoType && evolution.isSatisfied()) {
                    // If we've already found 1 evolution, then there are multiple possible evolutions
                    if (found) {
                        return true;
                    }
                    // We've found 1 possible evolution
                    found = true;
                }
            }
        }
        return false;
    }
    static getMaxLevelPokemonList() {
        return App.game.party.caughtPokemon.filter((partyPokemon) => {
            return !partyPokemon.breeding && partyPokemon.level >= 100;
        });
    }
    static calculateRegionalMultiplier(pokemon, region) {
        if (region > -1 && PokemonHelper.calcNativeRegion(pokemon.name) !== region) {
            return App.game.party.getRegionAttackMultiplier();
        }
        return 1.0;
    }
    static compareBy(option, direction, region = -1) {
        return function (a, b) {
            let res, dir = (direction) ? -1 : 1;
            const config = SortOptionConfigs[option];
            let aValue = config.getValue(a);
            let bValue = config.getValue(b);
            // Apply regional debuff if needed
            if (region > -1 && [SortOptions.attack, SortOptions.breedingEfficiency].includes(option)) {
                aValue *= PartyController.calculateRegionalMultiplier(a, region);
                bValue *= PartyController.calculateRegionalMultiplier(b, region);
            }
            if (config.invert) {
                dir *= -1;
            }
            //Compare by provided property
            if (aValue == bValue) {
                //If they are equal according to provided property, sort by id
                return a.id - b.id;
            }
            else if (aValue < bValue) {
                res = -1;
            }
            else if (aValue > bValue) {
                res = 1;
            }
            else {
                res = 0;
            }
            return res * dir;
        };
    }
}
PartyController.getSortedList = ko.pureComputed(() => {
    const list = [...App.game.party.caughtPokemon];
    return list.sort(PartyController.compareBy(Settings.getSetting('partySort').observableValue(), Settings.getSetting('partySortDirection').observableValue()));
}).extend({ rateLimit: 500 });
PartyController.hatcherySortedList = [];
PartyController.getHatcherySortedList = ko.pureComputed(() => {
    // If the breeding modal is open, we should sort it.
    if (modalUtils.observableState.breedingModal === 'show') {
        // Don't adjust attack based on region if debuff is disabled
        const region = App.game.challenges.list.regionalAttackDebuff.active() ? BreedingController.regionalAttackDebuff() : -1;
        PartyController.hatcherySortedList = [...App.game.party.caughtPokemon];
        return PartyController.hatcherySortedList.sort(PartyController.compareBy(Settings.getSetting('hatcherySort').observableValue(), Settings.getSetting('hatcherySortDirection').observableValue(), region));
    }
    return PartyController.hatcherySortedList;
}).extend({ rateLimit: 500 });
PartyController.proteinSortedList = [];
PartyController.getProteinSortedList = ko.pureComputed(() => {
    // If the protein modal is open, we should sort it.
    if (modalUtils.observableState.pokemonSelectorModal === 'show') {
        PartyController.proteinSortedList = [...App.game.party.caughtPokemon];
        return PartyController.proteinSortedList.sort(PartyController.compareBy(Settings.getSetting('proteinSort').observableValue(), Settings.getSetting('proteinSortDirection').observableValue()));
    }
    return PartyController.proteinSortedList;
}).extend({ rateLimit: 500 });
PartyController.heldItemSortedList = [];
PartyController.getHeldItemSortedList = ko.pureComputed(() => {
    // If the held item modal is open, we should sort it.
    if (modalUtils.observableState.heldItemModal === 'show') {
        PartyController.heldItemSortedList = [...App.game.party.caughtPokemon];
        return PartyController.heldItemSortedList.sort(PartyController.compareBy(Settings.getSetting('heldItemSort').observableValue(), Settings.getSetting('heldItemSortDirection').observableValue()));
    }
    return PartyController.heldItemSortedList;
}).extend({ rateLimit: 500 });
PartyController.pokemonsWithHeldItemSortedList = [];
PartyController.getPokemonsWithHeldItemSortedList = ko.pureComputed(() => {
    // If the held item modal is open, we should sort it.
    if (modalUtils.observableState.heldItemModal === 'show') {
        PartyController.pokemonsWithHeldItemSortedList = [...App.game.party.caughtPokemon.filter(p => p.heldItem())];
        return PartyController.pokemonsWithHeldItemSortedList.sort(PartyController.compareBy(Settings.getSetting('heldItemSort').observableValue(), Settings.getSetting('heldItemSortDirection').observableValue()));
    }
    return PartyController.pokemonsWithHeldItemSortedList;
}).extend({ rateLimit: 500 });
var PartyPokemonSaveKeys;
(function (PartyPokemonSaveKeys) {
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["attackBonusPercent"] = 0] = "attackBonusPercent";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["attackBonusAmount"] = 1] = "attackBonusAmount";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["proteinsUsed"] = 2] = "proteinsUsed";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["exp"] = 3] = "exp";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["breeding"] = 4] = "breeding";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["shiny"] = 5] = "shiny";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["category"] = 6] = "category";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["levelEvolutionTriggered"] = 7] = "levelEvolutionTriggered";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["pokerus"] = 8] = "pokerus";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["effortPoints"] = 9] = "effortPoints";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["heldItem"] = 10] = "heldItem";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["defaultFemaleSprite"] = 11] = "defaultFemaleSprite";
})(PartyPokemonSaveKeys || (PartyPokemonSaveKeys = {}));
class PartyPokemon {
    constructor(id, name, evolutions, baseAttack, shiny = false, gender) {
        this.id = id;
        this.name = name;
        this.evolutions = evolutions;
        this.baseAttack = baseAttack;
        this.gender = gender;
        this.exp = 0;
        this.defaults = {
            attackBonusPercent: 0,
            attackBonusAmount: 0,
            proteinsUsed: 0,
            exp: 0,
            breeding: false,
            shiny: false,
            category: 0,
            levelEvolutionTriggered: false,
            pokerus: GameConstants.Pokerus.Uninfected,
            effortPoints: 0,
            defaultFemaleSprite: false,
        };
        this.proteinUsesRemaining = () => {
            // Allow 5 for every region visited (including Kanto)
            return (player.highestRegion() + 1) * 5 - this.proteinsUsed();
        };
        this.hideFromProteinList = ko.pureComputed(() => {
            if (this._breeding()) {
                return true;
            }
            if (!new RegExp(Settings.getSetting('proteinSearchFilter').observableValue(), 'i').test(this.name)) {
                return true;
            }
            if (Settings.getSetting('proteinRegionFilter').observableValue() > -2) {
                if (PokemonHelper.calcNativeRegion(this.name) !== Settings.getSetting('proteinRegionFilter').observableValue()) {
                    return true;
                }
            }
            const type = Settings.getSetting('proteinTypeFilter').observableValue();
            if (type > -2 && !pokemonMap[this.name].type.includes(type)) {
                return true;
            }
            if (this.proteinUsesRemaining() == 0 && Settings.getSetting('proteinHideMaxedPokemon').observableValue()) {
                return true;
            }
            if (this._shiny() && Settings.getSetting('proteinHideShinyPokemon').observableValue()) {
                return true;
            }
            return false;
        });
        this.giveHeldItem = (heldItem) => {
            if (!this.heldItem() || heldItem.name != this.heldItem().name) {
                if (heldItem && !heldItem.canUse(this)) {
                    Notifier.notify({
                        message: `This pokémon cannot use ${heldItem.displayName}.`,
                        type: NotificationConstants.NotificationOption.warning,
                    });
                    return;
                }
                if (player.amountOfItem(heldItem.name) < 1) {
                    Notifier.notify({
                        message: `You don't have any ${heldItem.displayName} left.`,
                        type: NotificationConstants.NotificationOption.warning,
                    });
                    return;
                }
                if (App.game.party.caughtPokemon.some(p => p.heldItem() && p.heldItem().name == heldItem.name)) {
                    Notifier.notify({
                        message: 'Only one of each held items can be used.',
                        type: NotificationConstants.NotificationOption.warning,
                    });
                    return;
                }
                if (App.game.party.caughtPokemon.filter(p => p.heldItem()).length >= 6) {
                    Notifier.notify({
                        message: 'Only 6 pokemons can hold items at a time.',
                        type: NotificationConstants.NotificationOption.warning,
                    });
                    return;
                }
            }
            if (this.heldItem()) {
                Notifier.confirm({
                    title: 'Remove held item',
                    message: 'Held items are one time use only.\nRemoved items will be lost.\nAre you sure you want to remove it?',
                    confirm: 'Remove',
                    type: NotificationConstants.NotificationOption.warning,
                }).then((confirmed) => {
                    if (confirmed) {
                        this.addOrRemoveHeldItem(heldItem);
                    }
                });
            }
            else { // Notifier.confirm is async
                this.addOrRemoveHeldItem(heldItem);
            }
        };
        this.proteinsUsed = ko.observable(0).extend({ numeric: 0 });
        this._breeding = ko.observable(false).extend({ boolean: null });
        this._shiny = ko.observable(shiny).extend({ boolean: null });
        this._level = ko.observable(1).extend({ numeric: 0 });
        this._attackBonusPercent = ko.observable(0).extend({ numeric: 0 });
        this._attackBonusAmount = ko.observable(0).extend({ numeric: 0 });
        this._category = ko.observable(0).extend({ numeric: 0 });
        this._pokerus = ko.observable(GameConstants.Pokerus.Uninfected).extend({ numeric: 0 });
        this._effortPoints = ko.observable(0).extend({ numeric: 0 });
        this.evs = ko.pureComputed(() => {
            const power = App.game.challenges.list.slowEVs.active() ? GameConstants.EP_CHALLENGE_MODIFIER : 1;
            return Math.floor(this.effortPoints / GameConstants.EP_EV_RATIO / power);
        });
        this.evs.subscribe((newValue) => {
            // Change Pokerus status to Resistant when reaching 50 EVs
            if (this.pokerus && this.pokerus < GameConstants.Pokerus.Resistant && newValue >= 50) {
                this.pokerus = GameConstants.Pokerus.Resistant;
                // Log and notify player
                Notifier.notify({
                    message: `${this.name} has become Resistant to Pokérus.`,
                    type: NotificationConstants.NotificationOption.info,
                    setting: NotificationConstants.NotificationSetting.General.pokerus,
                });
                App.game.logbook.newLog(LogBookTypes.NEW, `${this.name} has become Resistant to Pokérus.`);
            }
        });
        this._attack = ko.pureComputed(() => this.calculateAttack());
        this.heldItem = ko.observable(undefined);
        this.defaultFemaleSprite = ko.observable(false);
    }
    calculateAttack(ignoreLevel = false) {
        const attackBonusMultiplier = 1 + (this.attackBonusPercent / 100);
        const levelMultiplier = ignoreLevel ? 1 : this.level / 100;
        const evsMultiplier = this.calculateEVAttackBonus();
        const heldItemMultiplier = this.heldItem && this.heldItem() instanceof AttackBonusHeldItem ? this.heldItem().attackBonus : 1;
        return Math.max(1, Math.floor((this.baseAttack * attackBonusMultiplier + this.attackBonusAmount) * levelMultiplier * evsMultiplier * heldItemMultiplier));
    }
    calculateEVAttackBonus() {
        if (this.pokerus < GameConstants.Pokerus.Contagious) {
            return 1;
        }
        return (this.evs() < 50) ? (1 + 0.01 * this.evs()) : (Math.pow(this.evs(), Math.log(1.5) / Math.log(50)));
    }
    canCatchPokerus() {
        return App.game.keyItems.hasKeyItem(KeyItemType.Pokerus_virus);
    }
    calculatePokerusTypes() {
        var _a;
        // Egg can't hatch and valid Egg has pokerus
        const eggTypes = new Set();
        for (let i = 0; i < App.game.breeding.eggList.length; i++) {
            if (i > App.game.breeding.hatcheryHelpers.hired().length - 1) {
                const egg = App.game.breeding.eggList[i]();
                if (!egg.canHatch() && !egg.isNone()) {
                    const pokerus = (_a = App.game.party.getPokemon(pokemonMap[egg.pokemon].id)) === null || _a === void 0 ? void 0 : _a.pokerus;
                    if (pokerus && pokerus >= GameConstants.Pokerus.Contagious) {
                        eggTypes.add(PokemonHelper.getPokemonByName(pokemonMap[App.game.breeding.eggList[i]().pokemon].name).type1);
                        eggTypes.add(PokemonHelper.getPokemonByName(pokemonMap[App.game.breeding.eggList[i]().pokemon].name).type2);
                    }
                }
            }
        }
        if (eggTypes.has(PokemonType.None)) {
            eggTypes.delete(PokemonType.None);
        }
        return eggTypes;
    }
    calculatePokerus(index) {
        const eggTypes = this.calculatePokerusTypes();
        for (let i = index; i < App.game.breeding.eggList.length; i++) {
            const pokemon = App.game.breeding.eggList[i]().partyPokemon();
            if (pokemon && pokemon.pokerus == GameConstants.Pokerus.Uninfected) {
                const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
                if (eggTypes.has(dataPokemon.type1) || eggTypes.has(dataPokemon.type2)) {
                    pokemon.pokerus = GameConstants.Pokerus.Infected;
                }
            }
        }
    }
    calculateLevelFromExp() {
        const levelType = PokemonHelper.getPokemonByName(this.name).levelType;
        for (let i = this.level - 1; i < levelRequirements[levelType].length; i++) {
            if (levelRequirements[levelType][i] > this.exp) {
                return i;
            }
        }
        return this.level;
    }
    gainExp(exp) {
        this.exp += exp * this.getExpMultiplier();
        const oldLevel = this.level;
        const newLevel = this.calculateLevelFromExp();
        if (oldLevel !== newLevel) {
            this.level = newLevel;
            this.checkForLevelEvolution();
        }
    }
    getExpMultiplier() {
        let result = 1;
        if (this.heldItem() && this.heldItem() instanceof ExpGainedBonusHeldItem) {
            result *= this.heldItem().gainedBonus;
        }
        return result;
    }
    checkForLevelEvolution() {
        if (this.breeding || this.evolutions == null || this.evolutions.length == 0) {
            return;
        }
        for (const evolution of this.evolutions) {
            if (evolution instanceof LevelEvolution && evolution.isSatisfied()) {
                evolution.evolve();
            }
        }
    }
    useStone(stoneType) {
        const possibleEvolutions = [];
        for (const evolution of this.evolutions) {
            if (evolution instanceof StoneEvolution && evolution.stone == stoneType && evolution.isSatisfied()) {
                possibleEvolutions.push(evolution);
            }
        }
        if (possibleEvolutions.length !== 0) {
            return Rand.fromArray(possibleEvolutions).evolve();
        }
        return false;
    }
    useProtein(amount) {
        if (App.game.challenges.list.disableProteins.active()) {
            Notifier.notify({
                title: 'Challenge Mode',
                message: 'Proteins are disabled',
                type: NotificationConstants.NotificationOption.danger,
            });
            return;
        }
        const usesRemaining = this.proteinUsesRemaining();
        // If no more proteins can be used on this Pokemon
        if (!usesRemaining) {
            Notifier.notify({
                message: 'This Pokémon cannot increase their power any higher!',
                type: NotificationConstants.NotificationOption.warning,
            });
            return;
        }
        // The lowest number of amount they want to use, total in inventory, uses remaining for this Pokemon
        amount = Math.min(amount, player.itemList.Protein(), usesRemaining);
        // Apply the proteins
        if (ItemHandler.useItem('Protein', amount)) {
            GameHelper.incrementObservable(this.proteinsUsed, amount);
        }
    }
    addOrRemoveHeldItem(heldItem) {
        if (this.heldItem() && this.heldItem().name == heldItem.name) {
            this.heldItem(undefined);
        }
        else {
            player.loseItem(heldItem.name, 1);
            this.heldItem(heldItem);
        }
    }
    fromJSON(json) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        if (json == null) {
            return;
        }
        if (json.id == null) {
            return;
        }
        this.attackBonusPercent = (_a = json[PartyPokemonSaveKeys.attackBonusPercent]) !== null && _a !== void 0 ? _a : this.defaults.attackBonusPercent;
        this.attackBonusAmount = (_b = json[PartyPokemonSaveKeys.attackBonusAmount]) !== null && _b !== void 0 ? _b : this.defaults.attackBonusAmount;
        this.proteinsUsed = ko.observable((_c = json[PartyPokemonSaveKeys.proteinsUsed]) !== null && _c !== void 0 ? _c : this.defaults.proteinsUsed);
        this.exp = (_d = json[PartyPokemonSaveKeys.exp]) !== null && _d !== void 0 ? _d : this.defaults.exp;
        this.breeding = (_e = json[PartyPokemonSaveKeys.breeding]) !== null && _e !== void 0 ? _e : this.defaults.breeding;
        this.shiny = (_f = json[PartyPokemonSaveKeys.shiny]) !== null && _f !== void 0 ? _f : this.defaults.shiny;
        this.category = (_g = json[PartyPokemonSaveKeys.category]) !== null && _g !== void 0 ? _g : this.defaults.category;
        this.level = this.calculateLevelFromExp();
        this.pokerus = (_h = json[PartyPokemonSaveKeys.pokerus]) !== null && _h !== void 0 ? _h : this.defaults.pokerus;
        this.effortPoints = (_j = json[PartyPokemonSaveKeys.effortPoints]) !== null && _j !== void 0 ? _j : this.defaults.effortPoints;
        this.heldItem(json[PartyPokemonSaveKeys.heldItem] && ItemList[json[PartyPokemonSaveKeys.heldItem]] instanceof HeldItem ? ItemList[json[PartyPokemonSaveKeys.heldItem]] : undefined);
        this.defaultFemaleSprite((_k = json[PartyPokemonSaveKeys.defaultFemaleSprite]) !== null && _k !== void 0 ? _k : this.defaults.defaultFemaleSprite);
        if (this.evolutions != null) {
            for (const evolution of this.evolutions) {
                if (evolution instanceof LevelEvolution) {
                    evolution.triggered = (_l = json[PartyPokemonSaveKeys.levelEvolutionTriggered]) !== null && _l !== void 0 ? _l : this.defaults.levelEvolutionTriggered;
                }
            }
        }
    }
    toJSON() {
        var _a;
        let levelEvolutionTriggered = false;
        if (this.evolutions != null) {
            for (const evolution of this.evolutions) {
                if (evolution instanceof LevelEvolution && evolution.triggered) {
                    levelEvolutionTriggered = true;
                }
            }
        }
        const output = {
            id: this.id,
            [PartyPokemonSaveKeys.attackBonusPercent]: this.attackBonusPercent,
            [PartyPokemonSaveKeys.attackBonusAmount]: this.attackBonusAmount,
            [PartyPokemonSaveKeys.proteinsUsed]: this.proteinsUsed(),
            [PartyPokemonSaveKeys.exp]: this.exp,
            [PartyPokemonSaveKeys.breeding]: this.breeding,
            [PartyPokemonSaveKeys.shiny]: this.shiny,
            [PartyPokemonSaveKeys.levelEvolutionTriggered]: levelEvolutionTriggered,
            [PartyPokemonSaveKeys.category]: this.category,
            [PartyPokemonSaveKeys.pokerus]: this.pokerus,
            [PartyPokemonSaveKeys.effortPoints]: this.effortPoints,
            [PartyPokemonSaveKeys.heldItem]: (_a = this.heldItem()) === null || _a === void 0 ? void 0 : _a.name,
            [PartyPokemonSaveKeys.defaultFemaleSprite]: this.defaultFemaleSprite(),
        };
        // Don't save anything that is the default option
        Object.entries(output).forEach(([key, value]) => {
            if (value === this.defaults[PartyPokemonSaveKeys[key]]) {
                delete output[key];
            }
        });
        return output;
    }
    // Knockout getters/setter
    get level() {
        return this._level();
    }
    set level(level) {
        this._level(level);
    }
    get attack() {
        return this._attack();
    }
    get attackBonusAmount() {
        return this._attackBonusAmount();
    }
    set attackBonusAmount(attackBonusAmount) {
        this._attackBonusAmount(attackBonusAmount);
    }
    get attackBonusPercent() {
        return this._attackBonusPercent();
    }
    set attackBonusPercent(attackBonusPercent) {
        this._attackBonusPercent(attackBonusPercent);
    }
    get breeding() {
        return this._breeding();
    }
    set breeding(bool) {
        this._breeding(bool);
    }
    get pokerus() {
        return this._pokerus();
    }
    set pokerus(index) {
        this._pokerus(index);
    }
    get effortPoints() {
        return this._effortPoints();
    }
    set effortPoints(amount) {
        this._effortPoints(amount);
    }
    get shiny() {
        return this._shiny();
    }
    set shiny(bool) {
        this._shiny(bool);
    }
    get category() {
        return this._category();
    }
    set category(index) {
        this._category(index);
    }
}
/// <reference path="./LocationRestriction.ts" />
function ByRegion(Base) {
    return class extends Base {
        constructor(...args) {
            const [region, ...rest] = args;
            super(...rest);
            this.type.push(EvolutionType.Region);
            this.regions = region;
        }
        atLocation() {
            let regionSatisfied = false;
            for (const region of this.regions) {
                if (player.region == region) {
                    regionSatisfied = true;
                }
            }
            return regionSatisfied;
        }
    };
}
function RegionRestricted(Base) {
    return LocationRestricted(ByRegion(Base));
}
class Pokeball {
    constructor(type, catchBonus, catchTime, description, unlockRequirement = new MultiRequirement(), quantity = 0) {
        this.type = type;
        this.catchBonus = catchBonus;
        this.catchTime = catchTime;
        this.description = description;
        this.unlockRequirement = unlockRequirement;
        this.quantity = ko.observable(quantity);
    }
    unlocked() {
        return this.unlockRequirement.isCompleted();
    }
}
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="Pokeball.ts" />
class Pokeballs {
    constructor() {
        this.name = 'Pokeballs';
        this.saveKey = 'pokeballs';
        this.defaults = {
            alreadyCaughtSelection: GameConstants.Pokeball.None,
            alreadyCaughtShinySelection: GameConstants.Pokeball.Pokeball,
            notCaughtSelection: GameConstants.Pokeball.Pokeball,
            notCaughtShinySelection: GameConstants.Pokeball.Pokeball,
        };
        this.pokeballs = [
            new Pokeball(GameConstants.Pokeball.Pokeball, () => 0, 1250, 'A standard Poké Ball', undefined, 25),
            new Pokeball(GameConstants.Pokeball.Greatball, () => 5, 1000, '+5% chance to catch'),
            new Pokeball(GameConstants.Pokeball.Ultraball, () => 10, 750, '+10% chance to catch'),
            new Pokeball(GameConstants.Pokeball.Masterball, () => 100, 500, '100% chance to catch'),
            new Pokeball(GameConstants.Pokeball.Fastball, () => 0, 500, 'Reduced catch time', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
            new Pokeball(GameConstants.Pokeball.Quickball, () => {
                var _a, _b;
                if (App.game.gameState == GameConstants.GameState.fighting && player.route()) {
                    const kills = ((_b = (_a = App.game.statistics.routeKills[GameConstants.Region[player.region]]) === null || _a === void 0 ? void 0 : _a[player.route()]) === null || _b === void 0 ? void 0 : _b.call(_a)) || 0;
                    // between 15 (0 kills) → 0 (4012 kills)
                    return Math.min(15, Math.max(0, Math.pow(16, 1 - Math.pow(Math.max(0, kills - 10), 0.6) / 145) - 1));
                }
                if (App.game.gameState == GameConstants.GameState.dungeon) {
                    return Math.min(15, Math.pow(DungeonRunner.timeLeftPercentage(), 2) / 500);
                }
                return 0;
            }, 1000, 'Increased catch rate on routes with less Pokémon defeated', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
            new Pokeball(GameConstants.Pokeball.Timerball, () => {
                var _a, _b;
                if (App.game.gameState == GameConstants.GameState.fighting && player.route()) {
                    const kills = ((_b = (_a = App.game.statistics.routeKills[GameConstants.Region[player.region]]) === null || _a === void 0 ? void 0 : _a[player.route()]) === null || _b === void 0 ? void 0 : _b.call(_a)) || 0;
                    // between 0 (0 kills) → 15 (9920 kills)
                    return Math.min(15, Math.max(0, Math.pow(16, Math.pow(kills, 0.6) / 250) - 1));
                }
                if (App.game.gameState == GameConstants.GameState.dungeon) {
                    const maxBonus = 15;
                    const timeLeftPercent = DungeonRunner.timeLeftPercentage();
                    const timeLeftPercentWhenMax = 15;
                    return (timeLeftPercentWhenMax < timeLeftPercent) ? (200 / timeLeftPercent - 2) : maxBonus;
                }
                return 0;
            }, 1000, 'Increased catch rate on routes with more Pokémon defeated', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
            new Pokeball(GameConstants.Pokeball.Duskball, () => {
                const now = new Date();
                // If player in a dungeon or it's night time
                if (App.game.gameState == GameConstants.GameState.dungeon || now.getHours() >= 18 || now.getHours() < 6) {
                    return 15;
                }
                return 0;
            }, 1000, 'Increased catch rate at night time or in dungeons', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
            // TODO: this needs some sort of bonus, possibly extra dungeon tokens
            new Pokeball(GameConstants.Pokeball.Luxuryball, () => 0, 1250, 'A Luxury Poké Ball', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
            new Pokeball(GameConstants.Pokeball.Diveball, () => {
                // If area is a water environment,
                if (MapHelper.getCurrentEnvironment() == 'Water') {
                    return 15;
                }
                return 0;
            }, 1250, 'Increased catch rate on water routes', new RouteKillRequirement(10, GameConstants.Region.hoenn, 101)),
            new Pokeball(GameConstants.Pokeball.Lureball, () => {
                const numLandPokemon = Routes.getRoute(player.region, player.route()).pokemon.land.length > 0;
                const isWaterPokemon = Routes.getRoute(player.region, player.route()).pokemon.water.includes(Battle.enemyPokemon().name);
                // If route has Land Pokémon and the current pokémon is a Water Pokémon
                if (numLandPokemon == true && isWaterPokemon == true) {
                    return 15;
                }
                return 0;
            }, 1250, 'Increased catch rate on fished Pokémon', new RouteKillRequirement(10, GameConstants.Region.hoenn, 101)),
            new Pokeball(GameConstants.Pokeball.Nestball, () => {
                const highestRegionRoutes = Routes.getRoutesByRegion(player.highestRegion());
                const maxRoute = MapHelper.normalizeRoute(highestRegionRoutes[highestRegionRoutes.length - 1].number, player.highestRegion());
                const currentRoute = MapHelper.normalizeRoute(player.route(), player.region);
                // Increased rate for earlier routes, scales with regional progression
                return Math.min(15, Math.max(1, player.highestRegion()) * Math.max(1, (maxRoute / currentRoute)));
            }, 1250, 'Increased catch rate on earlier routes', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
            new Pokeball(GameConstants.Pokeball.Repeatball, () => {
                const amountCaught = App.game.statistics.pokemonCaptured[Battle.enemyPokemon().id]();
                return Math.min(15, Math.pow(amountCaught, 2) / 5000);
            }, 1250, 'Increased catch rate and EV gain rate with more catches', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
            new Pokeball(GameConstants.Pokeball.Beastball, () => {
                return 10;
            }, 1000, 'Can only be used on Ultra Beasts', new TemporaryBattleRequirement('Anabel')),
        ];
        this._alreadyCaughtSelection = ko.observable(this.defaults.alreadyCaughtSelection);
        this._alreadyCaughtShinySelection = ko.observable(this.defaults.alreadyCaughtShinySelection);
        this._notCaughtSelection = ko.observable(this.defaults.notCaughtSelection);
        this._notCaughtShinySelection = ko.observable(this.defaults.notCaughtShinySelection);
        this.selectedTitle = ko.observable('');
        this.selectedSelection = ko.observable(this._alreadyCaughtSelection);
    }
    initialize() {
        ([
            this._alreadyCaughtSelection,
            this._alreadyCaughtShinySelection,
            this._notCaughtSelection,
            this._notCaughtShinySelection,
        ]).forEach(selection => {
            selection.subscribe(value => {
                var _a;
                // switch to Ultraball if Masterball is selected
                if (value == GameConstants.Pokeball.Masterball && App.game.challenges.list.disableMasterballs.active()) {
                    selection(GameConstants.Pokeball.Ultraball);
                    Notifier.notify({
                        title: 'Challenge Mode',
                        message: 'Master Balls are disabled!',
                        type: NotificationConstants.NotificationOption.danger,
                    });
                }
                else if (!((_a = this.pokeballs[value]) === null || _a === void 0 ? void 0 : _a.unlocked())) {
                    selection(GameConstants.Pokeball.None);
                }
            });
        });
    }
    /**
     * Checks the players preferences to see what pokéball needs to be used on the next throw.
     * Checks from the players pref to the most basic ball to see if the player has any.
     * @param id the pokemon we are trying to catch.
     * @param isShiny if the Pokémon is shiny.
     * @returns {GameConstants.Pokeball} pokéball to use.
     */
    calculatePokeballToUse(id, isShiny) {
        var _a;
        const alreadyCaught = App.game.party.alreadyCaughtPokemon(id);
        const alreadyCaughtShiny = App.game.party.alreadyCaughtPokemon(id, true);
        const pokemon = PokemonHelper.getPokemonById(id);
        let pref;
        // just check against alreadyCaughtShiny as this returns false when you don't have the pokemon yet.
        if (isShiny) {
            if (!alreadyCaughtShiny) {
                pref = this.notCaughtShinySelection;
            }
            else {
                pref = this.alreadyCaughtShinySelection;
            }
        }
        else {
            if (!alreadyCaught) {
                pref = this.notCaughtSelection;
            }
            else {
                pref = this.alreadyCaughtSelection;
            }
        }
        let use = GameConstants.Pokeball.None;
        if (pref == GameConstants.Pokeball.Beastball) {
            if (GameConstants.UltraBeastType[pokemon.name] != undefined && this.pokeballs[GameConstants.Pokeball.Beastball].quantity() > 0) {
                return GameConstants.Pokeball.Beastball;
            }
            else {
                return GameConstants.Pokeball.None;
            }
        }
        else if (GameConstants.UltraBeastType[pokemon.name] != undefined) {
            return GameConstants.Pokeball.None;
        }
        if ((_a = this.pokeballs[pref]) === null || _a === void 0 ? void 0 : _a.quantity()) {
            return pref;
        }
        else if (pref <= GameConstants.Pokeball.Masterball) {
            // Check which Pokeballs we have in stock that are of equal or lesser than selection (upto Masterball)
            for (let i = pref; i >= 0; i--) {
                if (this.pokeballs[i].quantity() > 0) {
                    use = i;
                    break;
                }
            }
            return use;
        }
        else {
            // Use a normal Pokeball or None if we don't have Pokeballs in stock
            return this.pokeballs[GameConstants.Pokeball.Pokeball].quantity() ? GameConstants.Pokeball.Pokeball : GameConstants.Pokeball.None;
        }
    }
    calculateCatchTime(ball) {
        return this.pokeballs[ball].catchTime;
    }
    gainPokeballs(ball, amount, purchase = true) {
        GameHelper.incrementObservable(this.pokeballs[ball].quantity, amount);
        GameHelper.incrementObservable(App.game.statistics.pokeballsObtained[ball], amount);
        if (purchase === true) {
            GameHelper.incrementObservable(App.game.statistics.pokeballsPurchased[ball], amount);
        }
    }
    usePokeball(ball) {
        GameHelper.incrementObservable(this.pokeballs[ball].quantity, -1);
        GameHelper.incrementObservable(App.game.statistics.pokeballsUsed[ball]);
    }
    getCatchBonus(ball) {
        return this.pokeballs[ball].catchBonus();
    }
    getBallQuantity(ball) {
        const pokeball = this.pokeballs[ball];
        return pokeball ? pokeball.quantity() : 0;
    }
    getEPBonus(ball) {
        const pokeballType = this.pokeballs[ball].type;
        return pokeballType == GameConstants.Pokeball.Repeatball ? GameConstants.REPEATBALL_EP_MODIFIER : 1;
    }
    canAccess() {
        return true;
    }
    fromJSON(json) {
        var _a, _b, _c, _d;
        if (json == null) {
            return;
        }
        if (json.pokeballs != null) {
            json.pokeballs.map((amt, type) => this.pokeballs[type].quantity(amt));
        }
        this.notCaughtSelection = (_a = json.notCaughtSelection) !== null && _a !== void 0 ? _a : this.defaults.notCaughtSelection;
        this.notCaughtShinySelection = (_b = json.notCaughtShinySelection) !== null && _b !== void 0 ? _b : this.defaults.notCaughtShinySelection;
        this.alreadyCaughtSelection = (_c = json.alreadyCaughtSelection) !== null && _c !== void 0 ? _c : this.defaults.alreadyCaughtSelection;
        this.alreadyCaughtShinySelection = (_d = json.alreadyCaughtShinySelection) !== null && _d !== void 0 ? _d : this.defaults.alreadyCaughtShinySelection;
    }
    toJSON() {
        return {
            'pokeballs': this.pokeballs.map(p => p.quantity()),
            'notCaughtSelection': this.notCaughtSelection,
            'notCaughtShinySelection': this.notCaughtShinySelection,
            'alreadyCaughtSelection': this.alreadyCaughtSelection,
            'alreadyCaughtShinySelection': this.alreadyCaughtShinySelection,
        };
    }
    update(delta) {
        // This method intentionally left blank
    }
    // Knockout getters/setters
    get notCaughtSelection() {
        return this._notCaughtSelection();
    }
    set notCaughtSelection(ball) {
        this._notCaughtSelection(ball);
    }
    get notCaughtShinySelection() {
        return this._notCaughtShinySelection();
    }
    set notCaughtShinySelection(ball) {
        this._notCaughtShinySelection(ball);
    }
    get alreadyCaughtSelection() {
        return this._alreadyCaughtSelection();
    }
    set alreadyCaughtSelection(ball) {
        this._alreadyCaughtSelection(ball);
    }
    get alreadyCaughtShinySelection() {
        return this._alreadyCaughtShinySelection();
    }
    set alreadyCaughtShinySelection(ball) {
        this._alreadyCaughtShinySelection(ball);
    }
}
var TypeColor = GameConstants.TypeColor;
class PokedexHelper {
    static getBackgroundColors(name) {
        const pokemon = PokemonHelper.getPokemonByName(name);
        if (!this.pokemonSeen(pokemon.id)()) {
            return 'grey';
        }
        if (pokemon.type2 == PokemonType.None) {
            return TypeColor[pokemon.type1];
        }
        return `linear-gradient(90deg,${TypeColor[pokemon.type1]} 50%, ${TypeColor[pokemon.type2]} 50%)`;
    }
    /**
     * Returns true if you have seen the pokemon
     * @param {number} id
     * @returns {boolean}
     */
    static pokemonSeen(id) {
        return ko.pureComputed(() => {
            try {
                return App.game.statistics.pokemonEncountered[id]() > 0 || App.game.statistics.pokemonDefeated[id]() > 0 || App.game.statistics.pokemonCaptured[id]() > 0 || App.game.party.alreadyCaughtPokemon(id);
            }
            catch (error) {
                return false;
            }
        });
    }
    static populateFilters() {
        let options = $('#pokedex-filter-type1');
        $.each(PokemonType, function () {
            if (isNaN(Number(this)) && this != PokemonType.None) {
                options.append($('<option />').val(PokemonType[this]).text(this));
            }
        });
        options = $('#pokedex-filter-type2');
        $.each(PokemonType, function () {
            if (isNaN(Number(this)) && this != PokemonType.None) {
                options.append($('<option />').val(PokemonType[this]).text(this));
            }
        });
        options = $('#pokedex-filter-region');
        for (let i = 0; i <= GameConstants.MAX_AVAILABLE_REGION; i++) {
            options.append($('<option />').val(i).text(GameConstants.camelCaseToString(GameConstants.Region[i])));
        }
    }
    static updateList() {
        PokedexHelper.filteredList(PokedexHelper.getList());
    }
    static getList() {
        const filter = PokedexHelper.getFilters();
        const highestEncountered = App.game.statistics.pokemonEncountered.highestID;
        const highestDefeated = App.game.statistics.pokemonDefeated.highestID;
        const highestCaught = App.game.statistics.pokemonCaptured.highestID;
        const highestDex = Math.max(highestEncountered, highestDefeated, highestCaught);
        return pokemonList.filter((pokemon) => {
            var _a;
            // Checks based on caught/shiny status
            const alreadyCaught = App.game.party.alreadyCaughtPokemon(pokemon.id);
            const alreadyCaughtShiny = App.game.party.alreadyCaughtPokemon(pokemon.id, true);
            // If the Pokemon shouldn't be unlocked yet
            const nativeRegion = PokemonHelper.calcNativeRegion(pokemon.name);
            if (nativeRegion > GameConstants.MAX_AVAILABLE_REGION || nativeRegion == GameConstants.Region.none) {
                return false;
            }
            // If not showing this region
            const region = filter.region ? parseInt(filter.region, 10) : null;
            if (region != null && region != nativeRegion) {
                return false;
            }
            // Event Pokemon
            if (pokemon.id <= 0 && !alreadyCaught) {
                return false;
            }
            // If we haven't seen a pokemon this high yet
            if (pokemon.id > highestDex) {
                return false;
            }
            // Check if the name contains the string
            if (filter.name && !pokemon.name.toLowerCase().includes(filter.name.toLowerCase().trim())) {
                return false;
            }
            // Check if either of the types match
            const type1 = filter.type1 ? parseInt(filter.type1, 10) : null;
            const type2 = filter.type2 ? parseInt(filter.type2, 10) : null;
            if ([type1, type2].includes(PokemonType.None)) {
                const type = (type1 == PokemonType.None) ? type2 : type1;
                if (!PokedexHelper.isPureType(pokemon, type)) {
                    return false;
                }
            }
            else if ((type1 != null && !pokemon.type.includes(type1)) || (type2 != null && !pokemon.type.includes(type2))) {
                return false;
            }
            // Alternate forms that we haven't caught yet
            if (!alreadyCaught && pokemon.id != Math.floor(pokemon.id)) {
                return false;
            }
            // Only uncaught
            if (filter['caught-shiny'] == 'uncaught' && alreadyCaught) {
                return false;
            }
            // All caught
            if (filter['caught-shiny'] == 'caught' && !alreadyCaught) {
                return false;
            }
            // Only caught not shiny
            if (filter['caught-shiny'] == 'caught-not-shiny' && (!alreadyCaught || alreadyCaughtShiny)) {
                return false;
            }
            // Only caught shiny
            if (filter['caught-shiny'] == 'caught-shiny' && !alreadyCaughtShiny) {
                return false;
            }
            /* Only base form if alternate exist (Zarbi, Basculin, ...)
             * if Mega are not alternative pokemon, this work
             * else change condition by `filter['hide-alternate'] && (!Number.isInteger(pokemon.id) || Math.sign(pokemon.id) === -1)`
             */
            if (filter['hide-alternate'] && !Number.isInteger(pokemon.id)) {
                return false;
            }
            // Only pokemon with a hold item
            if (filter['held-item'] && !BagHandler.displayName(pokemon.heldItem)) {
                return false;
            }
            // Only pokemon uninfected by pokerus || None
            if (filter['status-pokerus'] != -1 && filter['status-pokerus'] != ((_a = App.game.party.getPokemon(pokemon.id)) === null || _a === void 0 ? void 0 : _a.pokerus)) {
                return false;
            }
            return true;
        });
    }
    static getFilters() {
        const res = {};
        res.name = $('#nameFilter').val();
        res.type1 = $('#pokedex-filter-type1').val();
        res.type2 = $('#pokedex-filter-type2').val();
        res.region = $('#pokedex-filter-region').val();
        res['caught-shiny'] = $('#pokedex-filter-shiny-caught').val();
        res['status-pokerus'] = $('#pokedex-filter-pokerus-status').val();
        res['held-item'] = $('#pokedex-filter-held-item').is(':checked');
        res['hide-alternate'] = $('#pokedex-filter-hide-alternate').is(':checked');
        return res;
    }
    // Gender ratio
    static getGenderRatioData(pokemon) {
        const genderType = pokemon.gender.type;
        const genderRatio = pokemon.gender.femaleRatio;
        const genderObject = { 'male': 0, 'female': 0 };
        // console.log(pokemon);
        genderObject.male = 100 - (100 * genderRatio);
        genderObject.female = 100 * genderRatio;
        return genderObject;
    }
    static isPureType(pokemon, type) {
        return (pokemon.type.length === 1 && (type == null || pokemon.type[0] === type));
    }
}
PokedexHelper.toggleStatisticShiny = ko.observable(true);
PokedexHelper.hideShinyImages = ko.observable(false);
PokedexHelper.filteredList = ko.observableArray([]);
$(document).ready(() => {
    $('#pokemonStatisticsModal').on('hidden.bs.modal', () => {
        PokedexHelper.toggleStatisticShiny(true);
    });
});
class PokedexPokemon {
    constructor(name, id, type1, type2, kills, catches, shiny) {
        this.name = name;
        this.id = id;
        this.type1 = type1;
        this.type2 = type2;
        this.kills = kills;
        this.catches = catches;
        this.shiny = shiny;
    }
}
class DataPokemon {
    constructor(id, name, catchRate, evolutions, type1, type2, attack, hitpoints, levelType, exp, eggCycles, heldItem, gender) {
        this.id = id;
        this.name = name;
        this.catchRate = catchRate;
        this.evolutions = evolutions;
        this.type1 = type1;
        this.type2 = type2;
        this.attack = attack;
        this.hitpoints = hitpoints;
        this.levelType = levelType;
        this.exp = exp;
        this.eggCycles = eggCycles;
        this.heldItem = heldItem;
        this.gender = gender;
        this.shiny = false;
    }
}
class RoamingPokemon {
    constructor(pokemonName, unlockRequirement) {
        this.pokemonName = pokemonName;
        this.unlockRequirement = unlockRequirement;
        this.pokemon = pokemonMap[pokemonName];
    }
    isRoaming() {
        return this.unlockRequirement ? this.unlockRequirement.isCompleted() : true;
    }
}
/// <reference path="../../declarations/enums/Badges.d.ts"/>
///<reference path="../../declarations/subRegion/SubRegions.d.ts"/>
///<reference path="../../declarations/requirements/SubregionRequirement.d.ts"/>
///<reference path="../../declarations/requirements/OneFromManyRequirement.d.ts"/>
class RoamingPokemonList {
    constructor() { }
    static add(region, subRegionGroup, roamer) {
        if (!RoamingPokemonList.list[region]) {
            RoamingPokemonList.list[region] = [];
        }
        if (!RoamingPokemonList.list[region][subRegionGroup]) {
            RoamingPokemonList.list[region][subRegionGroup] = [];
        }
        RoamingPokemonList.list[region][subRegionGroup].push(roamer);
    }
    static remove(region, subRegionGroup, pokemonName) {
        const index = RoamingPokemonList.list[region][subRegionGroup].findIndex(r => r.pokemon.name == pokemonName);
        if (index >= 0) {
            RoamingPokemonList.list[region][subRegionGroup].splice(index, 1);
        }
    }
    static getSubRegionalGroupRoamers(region, subRegionGroup) {
        return RoamingPokemonList.list[region] && RoamingPokemonList.list[region][subRegionGroup] ?
            RoamingPokemonList.list[region][subRegionGroup].filter(p => p.isRoaming()) :
            [];
    }
    static getIncreasedChanceRouteBySubRegionGroup(region, subRegionGroup) {
        var _a;
        return (_a = RoamingPokemonList.increasedChanceRoute[region]) === null || _a === void 0 ? void 0 : _a[subRegionGroup];
    }
    static generateIncreasedChanceRoutes(date = new Date()) {
        // Seed the random runmber generator
        SeededRand.seedWithDateHour(date, this.period);
        RoamingPokemonList.increasedChanceRoute.forEach((subRegionGroups, region) => {
            subRegionGroups.forEach((route, group) => {
                const routes = Routes.getRoutesByRegion(region).filter(r => { var _a; return this.findGroup(region, (_a = r.subRegion) !== null && _a !== void 0 ? _a : 0) === group; });
                // Select a route
                const selectedRoute = SeededRand.fromArray(routes);
                route(selectedRoute);
            });
        });
    }
    static findGroup(region, subRegion) {
        return this.roamerGroups[region].findIndex(g => g.includes(subRegion));
    }
}
RoamingPokemonList.roamerGroups = [
    [[GameConstants.KantoSubRegions.Kanto], [GameConstants.KantoSubRegions.Sevii123, GameConstants.KantoSubRegions.Sevii4567]],
    [[GameConstants.JohtoSubRegions.Johto]],
    [[GameConstants.HoennSubRegions.Hoenn]],
    [[GameConstants.SinnohSubRegions.Sinnoh]],
    [[GameConstants.UnovaSubRegions.Unova]],
    [[GameConstants.KalosSubRegions.Kalos]],
    [[GameConstants.AlolaSubRegions.MelemeleIsland, GameConstants.AlolaSubRegions.AkalaIsland, GameConstants.AlolaSubRegions.UlaulaIsland, GameConstants.AlolaSubRegions.PoniIsland]],
    [[GameConstants.GalarSubRegions.SouthGalar], [GameConstants.GalarSubRegions.NorthGalar], [GameConstants.GalarSubRegions.IsleofArmor], [GameConstants.GalarSubRegions.CrownTundra]],
];
RoamingPokemonList.list = {};
RoamingPokemonList.increasedChanceRoute = new Array(GameHelper.enumLength(GameConstants.Region) - 2) // Remove None and Final
    .fill(0).map((v, i) => new Array(RoamingPokemonList.roamerGroups[i].length)
    .fill(0).map(() => ko.observable(undefined)));
// How many hours between when the roaming Pokemon change routes for increased chances
RoamingPokemonList.period = 8;
// Kanto
RoamingPokemonList.add(GameConstants.Region.kanto, 0, new RoamingPokemon('Mew'));
//Kanto - Sevii Islands
RoamingPokemonList.add(GameConstants.Region.kanto, 1, new RoamingPokemon('Raikou', new QuestLineCompletedRequirement('Celio\'s Errand')));
RoamingPokemonList.add(GameConstants.Region.kanto, 1, new RoamingPokemon('Entei', new QuestLineCompletedRequirement('Celio\'s Errand')));
RoamingPokemonList.add(GameConstants.Region.kanto, 1, new RoamingPokemon('Suicune', new MultiRequirement([new QuestLineCompletedRequirement('Celio\'s Errand'), new ObtainedPokemonRequirement(pokemonMap.Suicune)])));
RoamingPokemonList.add(GameConstants.Region.kanto, 1, new RoamingPokemon('Pink Butterfree', new GymBadgeRequirement(BadgeEnums.Elite_OrangeChampion)));
RoamingPokemonList.add(GameConstants.Region.kanto, 1, new RoamingPokemon('Ash\'s Butterfree', new GymBadgeRequirement(BadgeEnums.Elite_OrangeChampion)));
// Johto
RoamingPokemonList.add(GameConstants.Region.johto, 0, new RoamingPokemon('Raikou', new QuestLineStepCompletedRequirement('The Legendary Beasts', 2)));
RoamingPokemonList.add(GameConstants.Region.johto, 0, new RoamingPokemon('Entei', new QuestLineStepCompletedRequirement('The Legendary Beasts', 2)));
// Hoenn
RoamingPokemonList.add(GameConstants.Region.hoenn, 0, new RoamingPokemon('Latios', new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)));
RoamingPokemonList.add(GameConstants.Region.hoenn, 0, new RoamingPokemon('Latias', new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)));
// TODO: these need another way to be obtained
RoamingPokemonList.add(GameConstants.Region.hoenn, 0, new RoamingPokemon('Jirachi', new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)));
// Sinnoh
RoamingPokemonList.add(GameConstants.Region.sinnoh, 0, new RoamingPokemon('Manaphy'));
RoamingPokemonList.add(GameConstants.Region.sinnoh, 0, new RoamingPokemon('Mesprit', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Distortion World'))));
RoamingPokemonList.add(GameConstants.Region.sinnoh, 0, new RoamingPokemon('Cresselia', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Fullmoon Island'))));
// Unova
RoamingPokemonList.add(GameConstants.Region.unova, 0, new RoamingPokemon('Tornadus', new GymBadgeRequirement(BadgeEnums.Legend)));
RoamingPokemonList.add(GameConstants.Region.unova, 0, new RoamingPokemon('Thundurus', new GymBadgeRequirement(BadgeEnums.Legend)));
RoamingPokemonList.add(GameConstants.Region.unova, 0, new RoamingPokemon('Meloetta (Aria)', new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion)));
// Kalos
RoamingPokemonList.add(GameConstants.Region.kalos, 0, new RoamingPokemon('Zapdos', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Sea Spirit\'s Den'))));
RoamingPokemonList.add(GameConstants.Region.kalos, 0, new RoamingPokemon('Moltres', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Sea Spirit\'s Den'))));
RoamingPokemonList.add(GameConstants.Region.kalos, 0, new RoamingPokemon('Articuno', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Sea Spirit\'s Den'))));
RoamingPokemonList.add(GameConstants.Region.kalos, 0, new RoamingPokemon('Hoopa', new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion)));
//Alola
RoamingPokemonList.add(GameConstants.Region.alola, 0, new RoamingPokemon('Magearna', new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion)));
RoamingPokemonList.add(GameConstants.Region.alola, 0, new RoamingPokemon('Marshadow', new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion)));
RoamingPokemonList.add(GameConstants.Region.alola, 0, new RoamingPokemon('Zeraora', new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion)));
//Galar
RoamingPokemonList.add(GameConstants.Region.galar, 0, new RoamingPokemon('Galarian Zapdos', new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 5)));
//Galar - Isle of Armor
RoamingPokemonList.add(GameConstants.Region.galar, 2, new RoamingPokemon('Zarude', new QuestLineStepCompletedRequirement('Secrets of the Jungle', 1)));
RoamingPokemonList.add(GameConstants.Region.galar, 2, new RoamingPokemon('Galarian Moltres', new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 5)));
//Galar - Crown Tundra
RoamingPokemonList.add(GameConstants.Region.galar, 3, new RoamingPokemon('Spectrier', new QuestLineStepCompletedRequirement('The Crown of Galar', 6)));
RoamingPokemonList.add(GameConstants.Region.galar, 3, new RoamingPokemon('Glastrier', new QuestLineStepCompletedRequirement('The Crown of Galar', 6)));
RoamingPokemonList.add(GameConstants.Region.galar, 3, new RoamingPokemon('Galarian Articuno', new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 5)));
class BulletinBoard extends TownContent {
    constructor(board) {
        super();
        this.board = board;
    }
    cssClass() {
        return 'btn btn-secondary';
    }
    text() {
        return 'Bulletin Board';
    }
    isVisible() {
        return true;
    }
    onclick() {
        BulletinBoard.selectedBulletinBoard(this);
        $('#bulletinBoardModal').modal('show');
    }
    areaStatus() {
        if (this.getQuests().filter((q) => q.state() == QuestLineState.inactive).length) {
            return areaStatus.unlockedUnfinished;
        }
        return areaStatus.completed;
    }
    getQuests() {
        return App.game.quests.questLines().filter(q => {
            if (q.state() == QuestLineState.ended) {
                return false;
            }
            if (q.requirement ? !q.requirement.isCompleted() : false) {
                return false;
            }
            if (q.bulletinBoard !== GameConstants.BulletinBoards.All && q.bulletinBoard !== this.board) {
                return false;
            }
            return true;
        });
    }
}
BulletinBoard.selectedBulletinBoard = ko.observable(undefined);
/// <reference path="../../declarations/GameHelper.d.ts" />
class Quest {
    constructor(amount, pointsReward) {
        this.amount = amount;
        this.pointsReward = pointsReward;
        this.initial = ko.observable(null);
        this.claimed = ko.observable(false);
        this.notified = false;
        this.onLoadCalled = false;
    }
    static canComplete() {
        return true;
    }
    get description() {
        var _a;
        return (_a = this.customDescription) !== null && _a !== void 0 ? _a : 'Generic Quest Description. This should be overriden.';
    }
    static generateData() {
        return [1, 0];
    }
    static randomizeReward(pointsReward) {
        const randomPointBonus = 0.9 + SeededRand.float(0.2); // random between 0.9 and 1.1
        return Math.ceil(pointsReward * randomPointBonus);
    }
    get xpReward() {
        return 100 + (this.pointsReward / 10);
    }
    //#region Quest Status
    claim() {
        if (this.isCompleted() && !this.claimed()) {
            App.game.quests.addXP(this.xpReward);
            this.claimed(true);
            if (this.pointsReward) {
                App.game.wallet.gainQuestPoints(this.pointsReward);
                Notifier.notify({
                    message: `You have completed your quest!\nYou claimed <img src="./assets/images/currency/questPoint.svg" height="24px"/> ${this.pointsReward.toLocaleString('en-US')}!`,
                    strippedMessage: `You have completed your quest and claimed ${this.pointsReward.toLocaleString('en-US')} Quest Points!`,
                    type: NotificationConstants.NotificationOption.success,
                    setting: NotificationConstants.NotificationSetting.General.quest_completed,
                });
                App.game.logbook.newLog(LogBookTypes.QUEST, `Completed "${this.description}" for ${this.pointsReward.toLocaleString('en-US')} Quest Points.`);
            }
            else {
                Notifier.notify({
                    message: 'You have completed a quest!',
                    type: NotificationConstants.NotificationOption.success,
                    setting: NotificationConstants.NotificationSetting.General.quest_completed,
                });
                App.game.logbook.newLog(LogBookTypes.QUEST, `Completed "${this.description}".`);
            }
            GameHelper.incrementObservable(App.game.statistics.questsCompleted);
            return true;
        }
        return false;
    }
    quit(shouldConfirm = false) {
        if (shouldConfirm) {
            Notifier.confirm({
                title: 'Quit Quest',
                message: 'Are you sure?\n\nYou can start the quest again later but you will lose all progress!',
                type: NotificationConstants.NotificationOption.warning,
                confirm: 'Quit',
            }).then(confirmed => {
                if (confirmed) {
                    this.initial(null);
                }
            });
        }
        else {
            this.initial(null);
        }
    }
    begin() {
        this.initial(this.focus());
    }
    set focus(value) {
        this._focus = value;
        this.createProgressObservables();
    }
    get focus() {
        return this._focus;
    }
    createProgressObservables() {
        this.progress = ko.pureComputed(() => {
            if (this.initial() !== null) {
                return Math.min(1, (this.focus() - this.initial()) / this.amount);
            }
            else {
                return 0;
            }
        });
        this.progressText = ko.pureComputed(() => {
            if (this.initial() !== null) {
                return `${Math.min((this.focus() - this.initial()), this.amount).toLocaleString('en-US')} / ${this.amount.toLocaleString('en-US')}`;
            }
            else {
                return `0 / ${this.amount.toLocaleString('en-US')}`;
            }
        });
        this.inProgress = ko.pureComputed(() => {
            return this.initial() !== null && !this.claimed();
        });
        // This computed has a side effect - creating a notification - so we cannot safely make it a pureComputed
        // This will only be a problem if we make it subscribe to a function which lives longer than itself
        // Since it is only subscribing to observables on `this`, and the function is being kept on `this`, we shouldn't have a problem
        this.isCompleted = ko.computed(() => {
            const completed = this.progress() == 1 || this.claimed();
            if (!this.autoComplete && completed && !this.notified) {
                Notifier.notify({
                    message: `You can complete your quest for <img src="./assets/images/currency/questPoint.svg" height="24px"/> ${this.pointsReward.toLocaleString('en-US')}!`,
                    strippedMessage: `You can complete your quest for ${this.pointsReward.toLocaleString('en-US')} Quest Points!`,
                    type: NotificationConstants.NotificationOption.success,
                    timeout: 5e3,
                    sound: NotificationConstants.NotificationSound.Quests.quest_ready_to_complete,
                    setting: NotificationConstants.NotificationSetting.General.quest_ready_to_complete,
                });
                this.notified = true;
            }
            return completed;
        });
    }
    onLoad() {
        if (typeof this._onLoad === 'function' && !this.onLoadCalled) {
            this._onLoad();
            this.onLoadCalled = true;
        }
    }
    complete() {
        this.initial(this.focus() - this.amount);
    }
    createAutoCompleter() {
        this.autoComplete = true;
        this.autoCompleter = this.isCompleted.subscribe(() => {
            if (this.isCompleted()) {
                this.claim();
                this.autoCompleter.dispose();
            }
        });
    }
    //#endregion
    toJSON() {
        return {
            index: this.index || 0,
            customDescription: this.customDescription,
            data: [this.amount, this.pointsReward],
            initial: this.initial(),
            claimed: this.claimed(),
            notified: this.notified,
        };
    }
    fromJSON(json) {
        if (!json) {
            this.index = 0;
            this.claimed(false);
            this.initial(null);
            this.notified = false;
        }
        this.index = json.hasOwnProperty('index') ? json.index : 0;
        this.claimed(json.hasOwnProperty('claimed') ? json.claimed : false);
        this.initial(json.hasOwnProperty('initial') ? json.initial : null);
        this.notified = json.hasOwnProperty('notified') ? json.notified : false;
    }
}
/// <reference path="../Quest.ts" />
class DefeatPokemonsQuest extends Quest {
    constructor(killsNeeded, reward, route, region, customDescription = undefined) {
        super(killsNeeded, reward);
        this.route = route;
        this.region = region;
        this.focus = App.game.statistics.routeKills[this.region][this.route];
        this.customDescription = customDescription;
    }
    static generateData() {
        const amount = SeededRand.intBetween(100, 500);
        const region = SeededRand.intBetween(0, player.highestRegion());
        // Only use unlocked routes
        const possibleRoutes = Routes.getRoutesByRegion(region).map(route => route.number).filter(route => MapHelper.accessToRoute(route, region));
        // If no routes unlocked in this region, just use the first route of the region
        const route = possibleRoutes.length ? SeededRand.fromArray(possibleRoutes) : GameConstants.StartingRoutes[region];
        const reward = this.calcReward(amount, route, region);
        return [amount, reward, route, region];
    }
    static calcReward(killsNeeded, route, region) {
        const attacksPerPokemon = Math.ceil(Math.min(4, PokemonFactory.routeHealth(route, region) / Math.max(1, App.game.party.pokemonAttackObservable())));
        const reward = Math.ceil(GameConstants.DEFEAT_POKEMONS_BASE_REWARD * attacksPerPokemon * killsNeeded);
        return super.randomizeReward(reward);
    }
    get description() {
        var _a;
        return (_a = this.customDescription) !== null && _a !== void 0 ? _a : `Defeat ${this.amount.toLocaleString('en-US')} Pokémon on ${Routes.getName(this.route, this.region, true)}.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        json.data.push(this.route);
        json.data.push(this.region);
        return json;
    }
}
/// <reference path="../Quest.ts" />
class CapturePokemonsQuest extends Quest {
    constructor(capturesNeeded, reward) {
        super(capturesNeeded, reward);
        this.focus = App.game.statistics.totalPokemonCaptured;
    }
    static generateData() {
        const amount = SeededRand.intBetween(100, 500);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = amount * GameConstants.CAPTURE_POKEMONS_BASE_REWARD;
        return super.randomizeReward(reward);
    }
    get description() {
        return `Capture ${this.amount.toLocaleString('en-US')} Pokémon.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class CapturePokemonTypesQuest extends Quest {
    constructor(capturesNeeded, reward, type) {
        super(capturesNeeded, reward);
        this.type = type;
        this.focus = ko.pureComputed(() => pokemonMap.filter(p => p.type.includes(this.type)).map(p => App.game.statistics.pokemonCaptured[p.id]()).reduce((a, b) => a + b, 0));
    }
    static typeWeights() {
        const types = new Array(GameHelper.enumLength(PokemonType) - 1).fill(0);
        Routes.regionRoutes.filter(r => r.isUnlocked()).forEach(r => {
            Object.values(r.pokemon).flat().forEach(p => {
                const pokemon = pokemonMap[p];
                if (!pokemon || pokemon.id <= 0) {
                    return;
                }
                pokemon.type.forEach(t => types[t]++);
            });
        });
        const max = Math.max(...types);
        // Calculate the weight
        return types.map(v => ((-v + max) / max) * (this.maxWeight - this.minWeight))
            // map the type and rounded values
            .map((weight, type) => ({ type, weight: Math.round((weight + this.minWeight) * 100) / 100 }));
    }
    static generateData() {
        const amount = SeededRand.intBetween(50, 250);
        this.weights = this.typeWeights();
        const type = SeededRand.fromArray(this.weights.filter(w => w.weight < this.maxWeight).map(w => w.type));
        const reward = this.calcReward(amount, type);
        return [amount, reward, type];
    }
    static calcReward(amount, type) {
        const reward = amount * GameConstants.CAPTURE_POKEMONS_BASE_REWARD * this.weights[type].weight;
        return super.randomizeReward(reward);
    }
    get description() {
        return `Capture ${this.amount.toLocaleString('en-US')} ${PokemonType[this.type]}-type Pokémon.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        json.data.push(this.type);
        return json;
    }
}
CapturePokemonTypesQuest.maxWeight = 4;
CapturePokemonTypesQuest.minWeight = 1.2;
CapturePokemonTypesQuest.weights = [];
/// <reference path="../Quest.ts" />
class GainFarmPointsQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.totalFarmPoints;
    }
    static canComplete() {
        return App.game.farming.canAccess();
    }
    static generateData() {
        const amount = SeededRand.intBetween(500, 5000);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.GAIN_FARM_POINTS_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        return `Gain ${this.amount.toLocaleString('en-US')} Farm Points.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class GainMoneyQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.totalMoney;
    }
    static generateData() {
        const amount = SeededRand.intBetween(20000, 60000);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.GAIN_MONEY_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        return `Gain ${this.amount.toLocaleString('en-US')} Pokédollars.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class GainTokensQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.totalDungeonTokens;
    }
    static generateData() {
        const amount = SeededRand.intBetween(1000, 8000);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.GAIN_TOKENS_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        return `Gain ${this.amount.toLocaleString('en-US')} Dungeon Tokens.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class GainGemsQuest extends Quest {
    constructor(amount, reward, type) {
        super(amount, reward);
        this.type = type;
        this.focus = App.game.statistics.gemsGained[this.type];
    }
    static canComplete() {
        return App.game.gems.canAccess();
    }
    static typeWeights() {
        const types = new Array(GameHelper.enumLength(PokemonType) - 1).fill(0);
        Routes.regionRoutes.filter(r => r.isUnlocked()).forEach(r => {
            Object.values(r.pokemon).flat().forEach(p => {
                const pokemon = pokemonMap[p];
                if (!pokemon || pokemon.id <= 0) {
                    return;
                }
                pokemon.type.forEach(t => types[t]++);
            });
        });
        const max = Math.max(...types);
        // Calculate the weight
        return types.map(v => ((-v + max) / max) * (this.maxWeight - this.minWeight))
            // map the type and rounded values
            .map((weight, type) => ({ type, weight: Math.round((weight + this.minWeight) * 100) / 100 }));
    }
    static generateData() {
        const amount = SeededRand.intBetween(200, 600);
        this.weights = this.typeWeights();
        const type = SeededRand.fromArray(this.weights.filter(w => w.weight < this.maxWeight).map(w => w.type));
        const reward = this.calcReward(type, amount);
        return [amount, reward, type];
    }
    static calcReward(type, amount) {
        const reward = amount * GameConstants.DEFEAT_POKEMONS_BASE_REWARD * this.weights[type].weight;
        return super.randomizeReward(reward);
    }
    get description() {
        return `Gain ${this.amount.toLocaleString('en-US')} ${PokemonType[this.type]} gems.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        json.data.push(this.type);
        return json;
    }
}
GainGemsQuest.maxWeight = 4;
GainGemsQuest.minWeight = 1.2;
GainGemsQuest.weights = [];
/// <reference path="../Quest.ts" />
class HatchEggsQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.totalPokemonHatched;
    }
    static canComplete() {
        return App.game.breeding.canAccess();
    }
    static generateData() {
        const amount = SeededRand.intBetween(1, 30);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.HATCH_EGGS_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        return `Hatch ${this.amount.toLocaleString('en-US')} Eggs.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class MineLayersQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.undergroundLayersMined;
    }
    static canComplete() {
        return App.game.underground.canAccess();
    }
    static generateData() {
        const amount = SeededRand.intBetween(1, 3);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.MINE_LAYERS_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        const suffix = this.amount > 1 ? 's' : '';
        return `Mine ${this.amount.toLocaleString('en-US')} layer${suffix} in the Underground.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class MineItemsQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.undergroundItemsFound;
    }
    static canComplete() {
        return App.game.underground.canAccess();
    }
    static generateData() {
        const amount = SeededRand.intBetween(3, 15);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.MINE_ITEMS_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        const suffix = this.amount > 1 ? 's' : '';
        return `Mine ${this.amount.toLocaleString('en-US')} item${suffix} in the Underground.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class CatchShiniesQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.totalShinyPokemonCaptured;
    }
    static generateData() {
        const amount = 1;
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.SHINY_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        return `Catch ${this.amount.toLocaleString('en-US')} shiny Pokémon.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class DefeatGymQuest extends Quest {
    constructor(amount, reward, gymTown) {
        super(amount, reward);
        this.gymTown = gymTown;
        this.region = GameConstants.getGymRegion(this.gymTown);
        this.focus = App.game.statistics.gymsDefeated[GameConstants.getGymIndex(this.gymTown)];
    }
    static generateData() {
        const amount = SeededRand.intBetween(5, 20);
        const region = SeededRand.intBetween(0, player.highestRegion());
        // Only use unlocked gyms
        const possibleGyms = GameConstants.RegionGyms[region].filter(gymTown => GymList[gymTown].flags.quest && GymList[gymTown].isUnlocked());
        // If no gyms unlocked in this region, just use the first gym of the region
        const gymTown = possibleGyms.length ? SeededRand.fromArray(possibleGyms) : GameConstants.RegionGyms[region][0];
        const reward = this.calcReward(amount, gymTown);
        return [amount, reward, gymTown];
    }
    static calcReward(amount, gymTown) {
        const gym = GymList[gymTown];
        if (gym instanceof Champion) {
            gym.setPokemon(player.starter());
        }
        const playerDamage = App.game.party.pokemonAttackObservable();
        let attacksToWin = 0;
        for (const pokemon of gym.pokemons) {
            attacksToWin += Math.ceil(Math.min(4, pokemon.maxHealth / Math.max(1, playerDamage)));
        }
        const reward = Math.min(5000, Math.ceil(attacksToWin * GameConstants.DEFEAT_POKEMONS_BASE_REWARD * GameConstants.ACTIVE_QUEST_MULTIPLIER * amount));
        return super.randomizeReward(reward);
    }
    get description() {
        const desc = [];
        desc.push(`Defeat ${this.gymTown}`);
        if (!this.gymTown.includes('Elite') && !this.gymTown.includes('Champion')) {
            desc.push('gym');
        }
        desc.push(`in ${GameConstants.camelCaseToString(GameConstants.Region[this.region])}`);
        desc.push(`${this.amount.toLocaleString('en-US')} times.`);
        return desc.join(' ');
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        json.data.push(this.gymTown);
        return json;
    }
}
/// <reference path="../Quest.ts" />
class DefeatDungeonQuest extends Quest {
    constructor(amount, reward, dungeon) {
        super(amount, reward);
        this.dungeon = dungeon;
        this.region = GameConstants.getDungeonRegion(this.dungeon);
        this.focus = App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(this.dungeon)];
    }
    static generateData() {
        // Allow up to highest region
        const amount = SeededRand.intBetween(5, 20);
        const region = SeededRand.intBetween(0, player.highestRegion());
        // Only use unlocked dungeons
        const possibleDungeons = GameConstants.RegionDungeons[region].filter(dungeon => TownList[dungeon].isUnlocked());
        // If no dungeons unlocked in this region, just use the first dungeon of the region
        const dungeon = possibleDungeons.length ? SeededRand.fromArray(possibleDungeons) : GameConstants.RegionDungeons[region][0];
        const reward = this.calcReward(amount, dungeon);
        return [amount, reward, dungeon];
    }
    static calcReward(amount, dungeon) {
        const playerDamage = App.game.party.calculateClickAttack() + (App.game.party.pokemonAttackObservable() / GameConstants.QUEST_CLICKS_PER_SECOND);
        const attacksToDefeatPokemon = Math.ceil(Math.min(4, dungeonList[dungeon].baseHealth / playerDamage));
        const averageTilesToBoss = 13;
        const attacksToCompleteDungeon = attacksToDefeatPokemon * averageTilesToBoss;
        const completeDungeonsReward = attacksToCompleteDungeon * GameConstants.DEFEAT_POKEMONS_BASE_REWARD * GameConstants.ACTIVE_QUEST_MULTIPLIER * amount;
        let region, route;
        for (region = player.highestRegion(); region >= 0; region--) {
            route = QuestHelper.highestOneShotRoute(region); // returns 0 if no routes in this region can be one shot
            if (route) {
                break;
            }
        }
        if (!route) {
            route = 1, region = GameConstants.Region.kanto;
        }
        const tokens = PokemonFactory.routeDungeonTokens(route, region);
        const routeKillsPerDungeon = dungeonList[dungeon].tokenCost / tokens;
        const collectTokensReward = routeKillsPerDungeon * GameConstants.DEFEAT_POKEMONS_BASE_REWARD * amount;
        const reward = Math.min(5000, Math.ceil(completeDungeonsReward + collectTokensReward));
        return super.randomizeReward(reward);
    }
    get description() {
        return `Defeat the ${this.dungeon} dungeon in ${GameConstants.camelCaseToString(GameConstants.Region[this.region])} ${this.amount.toLocaleString('en-US')} times.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        json.data.push(this.dungeon);
        return json;
    }
}
/// <reference path="../Quest.ts" />
class UsePokeballQuest extends Quest {
    constructor(amount, reward, pokeball) {
        super(amount, reward);
        this.pokeball = pokeball;
        this.focus = App.game.statistics.pokeballsUsed[this.pokeball];
    }
    static generateData() {
        const possiblePokeballs = [GameConstants.Pokeball.Pokeball, GameConstants.Pokeball.Greatball, GameConstants.Pokeball.Ultraball];
        const pokeball = SeededRand.fromArray(possiblePokeballs);
        const amount = SeededRand.intBetween(100, 500);
        const reward = this.calcReward(amount, pokeball);
        return [amount, reward, pokeball];
    }
    static calcReward(amount, pokeball) {
        // Reward for Greatballs is 4x Pokeballs, Ultraballs are 9x Pokeballs
        const reward = Math.ceil(amount * (pokeball + 1) * (pokeball + 1) * GameConstants.DEFEAT_POKEMONS_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        return `Use ${this.amount.toLocaleString('en-US')} ${ItemList[GameConstants.Pokeball[this.pokeball]].displayName}s.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        json.data.push(this.pokeball);
        return json;
    }
}
/// <reference path="../Quest.ts" />
class UseOakItemQuest extends Quest {
    constructor(amount, reward, item) {
        super(amount, reward);
        this.item = item;
        this.focus = App.game.statistics.oakItemUses[this.item];
    }
    static canComplete() {
        return App.game.oakItems.canAccess() && !App.game.challenges.list.disableOakItems.active();
    }
    static generateData() {
        const possibleItems = [
            OakItemType.Magic_Ball,
            OakItemType.Amulet_Coin,
            // OakItemType.Poison_Barb,
            OakItemType.Exp_Share,
        ];
        const oakItem = SeededRand.fromArray(possibleItems);
        const amount = SeededRand.intBetween(100, 500);
        const reward = this.calcReward(amount, oakItem);
        return [amount, reward, oakItem];
    }
    static calcReward(amount, item) {
        const reward = amount * GameConstants.USE_OAK_ITEM_BASE_REWARD;
        return super.randomizeReward(reward);
    }
    get description() {
        const desc = [];
        desc.push(`Equip the ${GameConstants.humanifyString(OakItemType[this.item])} and`);
        if (this.item == OakItemType.Magic_Ball) {
            desc.push(`capture ${this.amount.toLocaleString('en-US')} wild Pokémon.`);
        }
        else if (this.item == OakItemType.Amulet_Coin) {
            desc.push(`earn Pokédollars ${this.amount.toLocaleString('en-US')} times.`);
        }
        else if (this.item == OakItemType.Exp_Share) {
            desc.push(`defeat ${this.amount.toLocaleString('en-US')} Pokémon.`);
        }
        else {
            desc.push(`gain its benefit ${this.amount.toLocaleString('en-US')} times.`);
        }
        return desc.join(' ');
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        json.data.push(this.item);
        return json;
    }
}
/// <reference path="../Quest.ts" />
class HarvestBerriesQuest extends Quest {
    constructor(amount, reward, berryType) {
        super(amount, reward);
        this.berryType = berryType;
        this.focus = App.game.statistics.berriesHarvested[this.berryType];
    }
    static canComplete() {
        return App.game.farming.canAccess();
    }
    static generateData() {
        // Getting available Berries (always include Gen 1 Berries)
        const availableBerries = App.game.farming.berryData.filter(berry => App.game.farming.unlockedBerries[berry.type]() || berry.type < BerryType.Persim);
        const berry = SeededRand.fromArray(availableBerries);
        const maxAmt = Math.min(300, Math.ceil(432000 / berry.growthTime[3]));
        const minAmt = Math.min(10, Math.ceil(maxAmt / 2));
        const amount = SeededRand.intBetween(minAmt, maxAmt);
        const reward = this.calcReward(amount, berry.type);
        return [amount, reward, berry.type];
    }
    static calcReward(amount, berryType) {
        const harvestTime = App.game.farming.berryData[berryType].growthTime[3];
        const harvestAmt = Math.max(4, Math.ceil(App.game.farming.berryData[berryType].harvestAmount));
        const plantAmt = amount / harvestAmt;
        const fieldAmt = plantAmt / App.game.farming.plotList.length;
        const reward = Math.ceil(fieldAmt * Math.pow(harvestTime, .7) * 10);
        return super.randomizeReward(reward);
    }
    get description() {
        const berryPlural = (this.amount === 1) ? 'Berry' : 'Berries';
        return `Harvest ${this.amount.toLocaleString('en-US')} ${BerryType[this.berryType]} ${berryPlural} at the farm.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        json.data.push(this.berryType);
        return json;
    }
}
/// <reference path="./questTypes/DefeatPokemonsQuest.ts" />
/// <reference path="./questTypes/CapturePokemonsQuest.ts" />
/// <reference path="./questTypes/CapturePokemonTypesQuest.ts" />
/// <reference path="./questTypes/GainFarmPointsQuest.ts" />
/// <reference path="./questTypes/GainMoneyQuest.ts" />
/// <reference path="./questTypes/GainTokensQuest.ts" />
/// <reference path="./questTypes/GainGemsQuest.ts" />
/// <reference path="./questTypes/HatchEggsQuest.ts" />
/// <reference path="./questTypes/MineLayersQuest.ts" />
/// <reference path="./questTypes/MineItemsQuest.ts" />
/// <reference path="./questTypes/CatchShiniesQuest.ts" />
/// <reference path="./questTypes/DefeatGymQuest.ts" />
/// <reference path="./questTypes/DefeatDungeonQuest.ts" />
/// <reference path="./questTypes/UsePokeballQuest.ts" />
/// <reference path="./questTypes/UseOakItemQuest.ts" />
/// <reference path="./questTypes/HarvestBerriesQuest.ts" />
class QuestHelper {
    static createQuest(questType, data) {
        if (!this.quests[questType]) {
            console.error(`Error: Invalid quest type - ${questType}.`);
            return;
        }
        // Creating randomly generated quest
        if (!data) {
            const QuestClass = this.quests[questType];
            return new QuestClass(...QuestClass.generateData());
        }
        return new this.quests[questType](...data);
    }
    static generateQuestList(seed, amount = 10, uniqueQuestTypes = true) {
        const quests = [];
        SeededRand.seed(+seed);
        // Only use unlocked quest types
        const QuestTypes = new Set(Object.entries(this.quests).filter(([key, quest]) => quest.canComplete()).map(([key]) => key));
        while (quests.length < amount && QuestTypes.size) {
            const questType = SeededRand.fromArray(Array.from(QuestTypes));
            if (uniqueQuestTypes) {
                QuestTypes.delete(questType);
            }
            const quest = this.createQuest(questType);
            quest.index = quests.length;
            quests.push(quest);
        }
        return quests;
    }
    static highestOneShotRoute(region) {
        const routes = Routes.getRoutesByRegion(region).map(r => r.number);
        const first = Math.min(...routes);
        const last = Math.max(...routes);
        const attack = Math.max(1, App.game.party.calculatePokemonAttack(PokemonType.None, PokemonType.None, false, region, true, false, WeatherType.Clear));
        for (let route = last; route >= first; route--) {
            if (PokemonFactory.routeHealth(route, region) < attack) {
                return route;
            }
        }
        return 0;
    }
}
QuestHelper.quests = {
    DefeatPokemonsQuest,
    CapturePokemonsQuest,
    CapturePokemonTypesQuest,
    GainFarmPointsQuest,
    GainMoneyQuest,
    GainTokensQuest,
    GainGemsQuest,
    HatchEggsQuest,
    MineLayersQuest,
    MineItemsQuest,
    CatchShiniesQuest,
    DefeatGymQuest,
    DefeatDungeonQuest,
    UsePokeballQuest,
    UseOakItemQuest,
    HarvestBerriesQuest,
};
class QuestLine {
    constructor(name, description, requirement, bulletinBoard = GameConstants.BulletinBoards.None) {
        this.name = name;
        this.description = description;
        this.requirement = requirement;
        this.bulletinBoard = bulletinBoard;
        this.state = ko.observable(QuestLineState.inactive).extend({ numeric: 0 });
        this.name = name;
        this.description = description;
        this.quests = ko.observableArray();
        this.totalQuests = 0;
        this.curQuest = ko.pureComputed(() => {
            const acc = 0;
            return this.quests().map((quest) => {
                return +quest.isCompleted();
            })
                .reduce((acc, iscompleted) => {
                return acc + iscompleted;
            }, 0);
        });
        this.curQuestInitial = ko.observable();
        this.curQuestInitial.equalityComparer = () => {
            return false;
        }; //Always update subscriptions, even if same data pushed in
        this.curQuestObject = ko.pureComputed(() => {
            this.quests(); //register dependency on this computed so it will update
            if (this.totalQuests > 0 && this.curQuest() < this.totalQuests) {
                return this.quests()[this.curQuest()];
            }
            else {
                return { progress: () => {
                        return 0;
                    }, progressText: () => {
                        return '';
                    } };
            }
        });
        this.autoBegin = this.curQuest.subscribe((num) => {
            if (this.curQuest() < this.totalQuests) {
                if (this.curQuestObject().initial() == null) {
                    this.beginQuest(this.curQuest());
                }
            }
            else {
                this.state(QuestLineState.ended);
            }
        });
    }
    addQuest(quest) {
        this.totalQuests++;
        quest.index = this.totalQuests;
        quest.inQuestLine = true;
        quest.createAutoCompleter();
        this.quests.push(quest);
    }
    beginQuest(index = 0, initial) {
        const quest = this.quests()[index];
        if (initial != undefined) {
            quest.initial(initial);
        }
        else {
            quest.begin();
        }
        quest.onLoad();
        this.curQuestInitial(quest.initial());
        this.state(QuestLineState.started);
    }
    resumeAt(index, initial) {
        if (initial != undefined) {
            for (let i = 0; i < Math.min(index, this.totalQuests); i++) {
                this.quests()[i].autoCompleter.dispose();
                this.quests()[i].complete();
            }
            if (index < this.totalQuests) {
                this.beginQuest(index, initial);
            }
        }
        else {
            this.beginQuest(0);
        }
    }
    toJSON() {
        const json = {
            state: this.state(),
            name: this.name,
            quest: this.curQuest(),
            initial: this.curQuestInitial(),
        };
        if (this.curQuestObject() instanceof MultipleQuestsQuest) {
            json.initial = this.curQuestObject().quests.map((q) => q.initial());
        }
        return json;
    }
}
/**
 * Static class used to handle Quest Lines
 */
class QuestLineHelper {
    // Kanto QuestLines
    static createTutorial() {
        const tutorial = new QuestLine('Tutorial Quests', 'A short set of quests to get you going.');
        //Defeat Starter
        const defeatStarter = new CustomQuest(1, 10, 'Defeat the Pokémon. Click to deal damage!', () => App.game.statistics.totalPokemonDefeated(), 0 // Initial of 0 so it auto completes if bugged
        );
        tutorial.addQuest(defeatStarter);
        //Capture 1 pokemon
        const captureOne = new CustomQuest(1, 20, 'Capture 1 Pokémon. When you defeat a Pokémon, a Poké Ball is thrown and you have a chance to capture it.', () => App.game.statistics.totalPokemonCaptured(), 1 // Initial of 1 so it auto completes if bugged
        );
        tutorial.addQuest(captureOne);
        //Kill 10 on route 2
        const routeTwo = new CustomQuest(10, 20, 'Defeat 10 Pokémon on Route 2. Click Route 2 on the map to move there and begin fighting.', () => App.game.statistics.routeKills[GameConstants.Region.kanto]['2'](), 0 // Initial of 0 so it auto completes if bugged
        );
        tutorial.addQuest(routeTwo);
        //Say bye to mom
        const talkToMom = new TalkToNPCQuest(PalletMom1, 'Go back to Pallet Town and say bye to mom.');
        tutorial.addQuest(talkToMom);
        //Buy pokeballs
        const buyPokeballs = new CustomQuest(10, 20, 'Buy 10 Poké Balls. You can find these in the Viridian City Shop.', () => App.game.statistics.pokeballsPurchased[GameConstants.Pokeball.Pokeball](), 0 // Initial of 0 so it auto completes if bugged
        );
        tutorial.addQuest(buyPokeballs);
        //Learn about catching from old man
        const OldManReward = () => {
            $('#npc-modal').one('hidden.bs.modal', () => {
                Information.show({
                    steps: [
                        {
                            element: document.getElementById('pokeballSelector'),
                            intro: 'Select which Poké Ball types to catch Pokémon with based on their caught/shiny status.<br/><i><sup>Hover over the column titles for more info.</sup></i><br/><br/>Capturing Pokémon gains you <img title="Dungeon Tokens\nGained by capturing Pokémon" src="assets/images/currency/dungeonToken.svg" height="25px"> Dungeon Tokens.<br/><br/>Try now by clicking the "Caught" selector to change it.',
                        },
                    ],
                    exitOnEsc: false,
                    showButtons: false,
                });
                const caughtSelector = document.querySelector('.pokeball-small.clickable.pokeball-selected');
                caughtSelector.addEventListener('click', () => {
                    Information.hide();
                    $('#pokeballSelectorModal').one('shown.bs.modal', null, () => {
                        // Need to set a timeout, otherwise it messes up the modal layout
                        setTimeout(() => {
                            Information.show({
                                steps: [
                                    {
                                        element: document.querySelector('#pokeballSelectorModal .modal-body'),
                                        intro: 'Select the <img title="Poké Ball" src="assets/images/pokeball/Pokeball.svg" height="25px"> Poké Ball to use this type of ball to capture already caught Pokémon, which will give you <img title="Dungeon Tokens\nGained by capturing Pokémon" src="assets/images/currency/dungeonToken.svg" height="25px"> Dungeon Tokens when captured.',
                                    },
                                ],
                                // Needed for IntroJs on modals
                                overlayOpacity: 0,
                            });
                        }, 100);
                        // Hide the IntroJS overlay once the user selects the Pokeball
                        const selectPokeball = document.querySelectorAll('#pokeballSelectorModal .clickable')[1];
                        selectPokeball.addEventListener('click', () => {
                            Information.hide();
                        }, {
                            once: true,
                        });
                    });
                }, {
                    once: true,
                });
            });
        };
        const talkToOldMan = new TalkToNPCQuest(ViridianCityOldMan2, 'Talk to the Old Man in Viridian City to learn about catching.', OldManReward);
        tutorial.addQuest(talkToOldMan);
        const catch5Pidgey = new CustomQuest(5, 30, 'Use what you\'ve learned to catch 5 Pidgey. Talk to the Old Man again if you need a reminder.', () => App.game.statistics.pokemonCaptured[PokemonHelper.getPokemonByName('Pidgey').id]());
        tutorial.addQuest(catch5Pidgey);
        //Buy Dungeon ticket
        const buyDungeonTicket = new CustomQuest(1, 50, 'Buy the Dungeon Ticket from Viridian City Shop.', () => +App.game.keyItems.hasKeyItem(KeyItemType.Dungeon_ticket), 0);
        tutorial.addQuest(buyDungeonTicket);
        //Clear Viridian Forest
        const clearViridianForest = new CustomQuest(1, 50, 'Gather 50 Dungeon Tokens by (re)capturing Pokémon, then clear the Viridian Forest dungeon.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Viridian Forest')](), 0);
        tutorial.addQuest(clearViridianForest);
        //Defeat Pewter Gym
        const pewterReward = () => {
            Notifier.notify({ message: 'Tutorial completed!', type: NotificationConstants.NotificationOption.success });
            Information.show({
                steps: [
                    {
                        element: document.getElementById('questDisplayContainer'),
                        intro: 'Click "List" to see the current quests that can be completed for <img title="Quest points" src="assets/images/currency/questPoint.svg" height="24px"> Quest Points.',
                    },
                    {
                        element: document.getElementById('startMenu'),
                        intro: 'See the badges you\'ve earned in the Badge Case. Badges influence the max level of your Pokémon.',
                    },
                ],
            });
        };
        const pewter = new CustomQuest(1, pewterReward, 'Defeat Pewter City Gym. Click the town on the map to move there, then click the Gym button to start the battle.', () => App.game.statistics.gymsDefeated[GameConstants.getGymIndex('Pewter City')](), 0);
        tutorial.addQuest(pewter);
        App.game.quests.questLines().push(tutorial);
    }
    // Started upon defeating Cerulean City's gym.
    static createRocketKantoQuestLine() {
        const rocketKantoQuestLine = new QuestLine('Team Rocket', 'Some nasty villains are up to no good.');
        const clearRocketGameCorner = new CustomQuest(1, 0, 'Illegal activity is afoot. Clear the Rocket Game Corner in Celadon City.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Rocket Game Corner')]());
        rocketKantoQuestLine.addQuest(clearRocketGameCorner);
        const clearSilphCo = new CustomQuest(1, 0, 'Team Rocket has occupied Silph Co. Clear Silph Co. in Saffron City.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Silph Co.')]());
        rocketKantoQuestLine.addQuest(clearSilphCo);
        const ViridianGymReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Masterball, 1, false);
            Notifier.notify({
                title: rocketKantoQuestLine.name,
                message: 'The President of Silph Co. has rewarded you with a Master Ball!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const clearViridianGym = new CustomQuest(1, ViridianGymReward, 'If you take down Team Rocket\'s leader one more time they will surely never come back from this! Clear Viridian City Gym.', () => App.game.statistics.gymsDefeated[GameConstants.getGymIndex('Viridian City')]());
        rocketKantoQuestLine.addQuest(clearViridianGym);
        App.game.quests.questLines().push(rocketKantoQuestLine);
    }
    // Started upon defeating Fuchsia City's gym.
    static createUndergroundQuestLine() {
        const undergroundQuestLine = new QuestLine('Mining Expedition', 'Explore the underground!');
        //Buy Explorer Kit (no reward)
        const buyExplorerKit = new CustomQuest(1, () => { }, 'Buy the Explorer Kit from Cinnabar Island Shop.', () => +App.game.keyItems.hasKeyItem(KeyItemType.Explorer_kit), 0);
        undergroundQuestLine.addQuest(buyExplorerKit);
        // Mine 5 layers in the Unerground
        const oldAmberReward = () => {
            // Gain an Old Amber
            const oldAmber = UndergroundItems.list.find(item => item.name == 'Old Amber');
            if (!oldAmber) {
                return console.error('Unable to find item Old Amber');
            }
            Underground.gainMineItem(oldAmber.id);
            Notifier.notify({
                title: undergroundQuestLine.name,
                message: 'You have gained an Old Amber fossil!\n<i>You can breed this in the hatchery.</i>',
                type: NotificationConstants.NotificationOption.success,
                timeout: GameConstants.MINUTE,
            });
        };
        const mineLayers = new CustomQuest(5, oldAmberReward, 'Mine 5 layers in the Underground.', App.game.statistics.undergroundLayersMined);
        undergroundQuestLine.addQuest(mineLayers);
        App.game.quests.questLines().push(undergroundQuestLine);
    }
    // Started upon defeating Cinnabar Island's gym.
    static createBillSeviiQuestLine() {
        const billSeviiQuestLine = new QuestLine('Bill\'s Errand', 'Bill has asked you to journey to the Sevii Islands with him to set up a digital connection to mainland Kanto.');
        const talktoCelio1 = new TalkToNPCQuest(OneIslandCelio1, 'Use the Subregional Travel button at the top of the map to travel to the Sevii Islands and speak with Celio on One Island.');
        billSeviiQuestLine.addQuest(talktoCelio1);
        const talktoGameCornerOwner1 = new TalkToNPCQuest(TwoIslandGameCornerOwner1, 'Ask the Game Corner owner on Two Island about the meteorite.');
        billSeviiQuestLine.addQuest(talktoGameCornerOwner1);
        const clearBikerGangTemporaryBattles = new CustomQuest(3, 0, 'A biker gang has invaded Three island. They will not let you continue to Berry Forest. Defeat the Biker Goons.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Biker Goon 1')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Biker Goon 2')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Biker Goon 3')]());
        billSeviiQuestLine.addQuest(clearBikerGangTemporaryBattles);
        const clearCueBallPaxtonTemporaryBattle = new CustomQuest(1, 0, 'Defeat the biker gang\'s leader.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Cue Ball Paxton')]());
        billSeviiQuestLine.addQuest(clearCueBallPaxtonTemporaryBattle);
        const clearBerryForest = new CustomQuest(1, 0, 'Find Lostelle. Clear Berry Forest.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Berry Forest')]());
        billSeviiQuestLine.addQuest(clearBerryForest);
        const talktoGameCornerOwner2 = new TalkToNPCQuest(TwoIslandGameCornerOwner2, 'Lostelle has been found. Return to the Game Corner owner on Two Island.');
        billSeviiQuestLine.addQuest(talktoGameCornerOwner2);
        const BillsErrandReward = () => {
            App.game.wallet.gainQuestPoints(1000, true);
            Notifier.notify({
                title: billSeviiQuestLine.name,
                message: 'Celio has rewarded you with 1,000 Quest Points!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const talktoCelio2 = new TalkToNPCQuest(OneIslandCelio2, 'Deliver the meteorite to Celio on One Island.', BillsErrandReward);
        billSeviiQuestLine.addQuest(talktoCelio2);
        App.game.quests.questLines().push(billSeviiQuestLine);
    }
    // Started upon defeating Viridian City's gym.
    static createPersonsofInterestQuestLine() {
        const personsofInterestQuestLine = new QuestLine('Persons of Interest', 'Some people want to talk to you.');
        const talktoBreeder = new TalkToNPCQuest(SaffronBreeder, 'Talk to the Breeder in Saffron City.', 250);
        personsofInterestQuestLine.addQuest(talktoBreeder);
        const talktoGemScientist = new TalkToNPCQuest(PewterScientist, 'Talk to the Gem Scientist in Pewter City.', 250);
        personsofInterestQuestLine.addQuest(talktoGemScientist);
        App.game.quests.questLines().push(personsofInterestQuestLine);
    }
    // Johto QuestLines
    // Started upon defeating Ecruteak City's gym.
    static createRocketJohtoQuestLine() {
        const rocketJohtoQuestLine = new QuestLine('Team Rocket Again', 'Team Rocket is up to no good again!');
        const clearTeamRocketHideout = new CustomQuest(1, 0, 'Clear the Team Rocket\'s Hideout dungeon in Mahogany Town', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Team Rocket\'s Hideout')]());
        rocketJohtoQuestLine.addQuest(clearTeamRocketHideout);
        const radioTowerReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Masterball, 1, false);
            Notifier.notify({
                title: rocketJohtoQuestLine.name,
                message: 'The grateful radio director gave you a Master Ball!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const clearRadioTower = new CustomQuest(1, radioTowerReward, 'Clear the Radio Tower dungeon in Goldenrod City', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Radio Tower')]());
        rocketJohtoQuestLine.addQuest(clearRadioTower);
        App.game.quests.questLines().push(rocketJohtoQuestLine);
    }
    static createJohtoBeastsQuestLine() {
        const johtoBeastsQuestLine = new QuestLine('The Legendary Beasts', 'Investigate the legends surrounding the strange Burned Tower in Ecruteak City.', new GymBadgeRequirement(BadgeEnums.Fog), GameConstants.BulletinBoards.Johto);
        const talktoEusine1 = new TalkToNPCQuest(EcruteakEusine, 'Talk to Eusine in Ecruteak City.');
        johtoBeastsQuestLine.addQuest(talktoEusine1);
        const clearBurnedTower = new CustomQuest(1, 0, 'Clear the Burned Tower.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Burned Tower')]());
        johtoBeastsQuestLine.addQuest(clearBurnedTower);
        const talktoPokéfanDerek = new TalkToNPCQuest(EcruteakPokéfan, 'Talk to Pokéfan Derek in Ecruteak City.');
        johtoBeastsQuestLine.addQuest(talktoPokéfanDerek);
        const catchRaikou = new CaptureSpecificPokemonQuest('Raikou', 'Catch Raikou', 1, true);
        const catchEntei = new CaptureSpecificPokemonQuest('Entei', 'Catch Entei', 1, true);
        const catchSuicune = new CaptureSpecificPokemonQuest('Suicune', 'Catch Suicune.');
        johtoBeastsQuestLine.addQuest(new MultipleQuestsQuest([
            catchRaikou,
            catchEntei,
            catchSuicune,
        ], 'Catch the Legendary Beasts.'));
        App.game.quests.questLines().push(johtoBeastsQuestLine);
    }
    static createJohtoSuicuneQuestLine() {
        const johtoSuicuneQuestLine = new QuestLine('Eusine\'s Chase', 'Eusine is looking for Suicune.', new QuestLineStepCompletedRequirement('The Legendary Beasts', 2), GameConstants.BulletinBoards.Johto);
        const clearCianwoodSuicune = new CustomQuest(1, 0, 'Find Suicune.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Suicune 1')]());
        johtoSuicuneQuestLine.addQuest(clearCianwoodSuicune);
        const talktoEusine2 = new TalkToNPCQuest(CianwoodEusine, 'Talk to Eusine in Cianwood City.');
        johtoSuicuneQuestLine.addQuest(talktoEusine2);
        const clearEusine = new CustomQuest(1, 0, 'Defeat Eusine.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Eusine')]());
        johtoSuicuneQuestLine.addQuest(clearEusine);
        const clearRoute42Suicune = new CustomQuest(1, 0, 'Find Suicune.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Suicune 2')]());
        johtoSuicuneQuestLine.addQuest(clearRoute42Suicune);
        const talktoEusine3 = new TalkToNPCQuest(MahoganyEusine, 'Talk to Eusine in Mahogany Town.');
        johtoSuicuneQuestLine.addQuest(talktoEusine3);
        const clearVermilionSuicune = new CustomQuest(1, 0, 'Find Suicune.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Suicune 3')]());
        johtoSuicuneQuestLine.addQuest(clearVermilionSuicune);
        const talktoEusine4 = new TalkToNPCQuest(VermilionEusine, 'Talk to Eusine in Vermilion City.');
        johtoSuicuneQuestLine.addQuest(talktoEusine4);
        const clearRoute14Suicune = new CustomQuest(1, 0, 'Find Suicune.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Suicune 4')]());
        johtoSuicuneQuestLine.addQuest(clearRoute14Suicune);
        const talktoEusine5 = new TalkToNPCQuest(FuchsiaEusine, 'Talk to Eusine in Fuchsia City.');
        johtoSuicuneQuestLine.addQuest(talktoEusine5);
        const clearRoute25Suicune = new CustomQuest(1, 0, 'Find Suicune.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Suicune 5')]());
        johtoSuicuneQuestLine.addQuest(clearRoute25Suicune);
        const talktoEusine6 = new TalkToNPCQuest(CeruleanEusine, 'Talk to Eusine in Cerulean City.');
        johtoSuicuneQuestLine.addQuest(talktoEusine6);
        const catchRoute25Suicune = new CaptureSpecificPokemonQuest('Suicune', 'Catch Suicune.');
        johtoSuicuneQuestLine.addQuest(catchRoute25Suicune);
        App.game.quests.questLines().push(johtoSuicuneQuestLine);
    }
    // Lugia Quest
    static createlugiaJohtoQuestLine() {
        const lugiaJohtoQuestLine = new QuestLine('Whirl Guardian', 'The Kimono Girls of Ecruteak City need help.', new QuestLineCompletedRequirement('Team Rocket Again'), GameConstants.BulletinBoards.Johto);
        const talktoZuki = new TalkToNPCQuest(Zuki, 'Talk to Kimono Girl Zuki in Violet City.');
        lugiaJohtoQuestLine.addQuest(talktoZuki);
        const helpZuki = new HatchEggsQuest(25, 0);
        lugiaJohtoQuestLine.addQuest(helpZuki);
        const talktoNaoko = new TalkToNPCQuest(Naoko, 'Talk to Kimono Girl Naoko in the Ilex Forest.');
        lugiaJohtoQuestLine.addQuest(talktoNaoko);
        const helpNaoko = new CustomQuest(1, 0, 'Clear Ilex Forest to lead Naoko to safety.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Ilex Forest')]());
        lugiaJohtoQuestLine.addQuest(helpNaoko);
        const kimonoReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Ultraball, 50, false);
            Notifier.notify({
                title: lugiaJohtoQuestLine.name,
                message: 'Kimono Girl Miki has given you a package containing 50 Ultra Balls.',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const talktoMiki = new TalkToNPCQuest(Miki, 'Talk to Kimono Girl Miki at the Ecruteak City Dance Theatre.', kimonoReward);
        lugiaJohtoQuestLine.addQuest(talktoMiki);
        const talktoSayo = new TalkToNPCQuest(Sayo, 'Talk to Kimono Girl Sayo in the Ice Path.');
        lugiaJohtoQuestLine.addQuest(talktoSayo);
        const helpSayo = new CustomQuest(1, 0, 'Clear the Ice Path to give Sayo a push.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Ice Path')]());
        lugiaJohtoQuestLine.addQuest(helpSayo);
        const talktoKuni = new TalkToNPCQuest(Kuni, 'Talk to Kimono Girl Kuni in Goldenrod City.');
        lugiaJohtoQuestLine.addQuest(talktoKuni);
        const helpKuni = new CustomQuest(1, 0, 'Clear the Radio Tower to get rid of any lingering Team Rocket activity.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Radio Tower')]());
        lugiaJohtoQuestLine.addQuest(helpKuni);
        const talktoKimonoGirlsWhirl = new TalkToNPCQuest(KimonoGirlsWhirl, 'Meet the Kimono Girls at the Whirl Islands.');
        lugiaJohtoQuestLine.addQuest(talktoKimonoGirlsWhirl);
        const LugiaCatch = new CaptureSpecificPokemonQuest('Lugia', 'Catch Lugia in the Whirl Islands.', 1, false, undefined, undefined);
        lugiaJohtoQuestLine.addQuest(LugiaCatch);
        App.game.quests.questLines().push(lugiaJohtoQuestLine);
    }
    // Ho-Oh Quest
    static createhoohJohtoQuestLine() {
        const hoohJohtoQuestLine = new QuestLine('Rainbow Guardian', 'The Kimono Girls of Ecruteak City wish to speak with you again.', new MultiRequirement([new QuestLineStepCompletedRequirement('Whirl Guardian', 9), new ObtainedPokemonRequirement(pokemonMap.Raikou), new ObtainedPokemonRequirement(pokemonMap.Entei), new ObtainedPokemonRequirement(pokemonMap.Suicune)]), GameConstants.BulletinBoards.Johto);
        const talkKimonoGirlsEcruteak = new TalkToNPCQuest(KimonoGirlsEcruteak, 'Meet the Kimono Girls at the Ecruteak Dance Theatre.');
        hoohJohtoQuestLine.addQuest(talkKimonoGirlsEcruteak);
        const clearKimonoGirls = new CustomQuest(1, 0, 'Prove your abilities as a trainer to the Kimono Girls of Ecruteak City.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Kimono Girls')]());
        hoohJohtoQuestLine.addQuest(clearKimonoGirls);
        const HoohCatch = new CaptureSpecificPokemonQuest('Ho-Oh', 'Catch Ho-Oh in the Tin Tower.', 1, false, undefined, undefined);
        hoohJohtoQuestLine.addQuest(HoohCatch);
        App.game.quests.questLines().push(hoohJohtoQuestLine);
    }
    static createCelebiJohtoQuestLine() {
        const celebiJohtoQuestLine = new QuestLine('Unfinished Business', 'A request from Professor Oak.', new QuestLineCompletedRequirement('Bill\'s Errand'), GameConstants.BulletinBoards.Kanto);
        const talktoProfOak1 = new TalkToNPCQuest(PalletCelebiProfOak1, 'Talk to Professor Oak in Pallet Town.');
        celebiJohtoQuestLine.addQuest(talktoProfOak1);
        const talktoProfIvy = new TalkToNPCQuest(CelebiProfIvy, 'Talk to Professor Ivy in her lab in the Sevii Islands.');
        celebiJohtoQuestLine.addQuest(talktoProfIvy);
        const talktoProfOak2 = new TalkToNPCQuest(PalletCelebiProfOak2, 'Deliver the GS Ball to Professor Oak in Pallet Town.');
        celebiJohtoQuestLine.addQuest(talktoProfOak2);
        const talktoKurt1 = new TalkToNPCQuest(AzaleaCelebiKurt2, 'Deliver the GS Ball to Kurt in Azalea Town.');
        celebiJohtoQuestLine.addQuest(talktoKurt1);
        const talktoKurt2 = new TalkToNPCQuest(AzaleaCelebiKurt4, 'Talk to Kurt again after becoming Champion of Johto.');
        celebiJohtoQuestLine.addQuest(talktoKurt2);
        const talktoProfOak3 = new TalkToNPCQuest(AzaleaCelebiOak1, 'Talk to Professor Oak in Azalea Town.');
        celebiJohtoQuestLine.addQuest(talktoProfOak3);
        const talktoIlexForestShrine1 = new TalkToNPCQuest(IlexForestShrine1, 'Investigate the shrine in Ilex Forest.');
        celebiJohtoQuestLine.addQuest(talktoIlexForestShrine1);
        const SpikyEaredPichuReward = () => {
            App.game.party.gainPokemonById(172.1);
            Notifier.notify({
                title: celebiJohtoQuestLine.name,
                message: 'You captured the Spiky-eared Pichu!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const clearSpikyEaredPichu = new CustomQuest(1, SpikyEaredPichuReward, 'Defeat the strange Pichu.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Spiky-eared Pichu')]());
        celebiJohtoQuestLine.addQuest(clearSpikyEaredPichu);
        const talktoProfOak4 = new TalkToNPCQuest(AzaleaCelebiOak2, 'Talk to Professor Oak in Azalea Town.');
        celebiJohtoQuestLine.addQuest(talktoProfOak4);
        const talktoTohjoFallsTimeDistortion = new TalkToNPCQuest(TohjoFallsCelebiTimeDistortion, 'Investigate the Time Distortion in Tohjo Falls.');
        celebiJohtoQuestLine.addQuest(talktoTohjoFallsTimeDistortion);
        const clearGiovanni = new CustomQuest(1, 0, 'Defeat Giovanni.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Rocket Boss Giovanni')]());
        celebiJohtoQuestLine.addQuest(clearGiovanni);
        const talktoProfOak5 = new TalkToNPCQuest(AzaleaCelebiOak3, 'Talk to Professor Oak in Azalea Town.');
        celebiJohtoQuestLine.addQuest(talktoProfOak5);
        const talktoIlexForestShrine2 = new TalkToNPCQuest(IlexForestShrine2, 'Investigate the shrine in Ilex Forest.');
        celebiJohtoQuestLine.addQuest(talktoIlexForestShrine2);
        const CelebiCatch = new CaptureSpecificPokemonQuest('Celebi', 'Play with the Celebi in Ilex Forest.');
        celebiJohtoQuestLine.addQuest(CelebiCatch);
        const talktoProfOak6 = new TalkToNPCQuest(AzaleaCelebiOak5, 'Talk to Professor Oak in Azalea Town.');
        celebiJohtoQuestLine.addQuest(talktoProfOak6);
        App.game.quests.questLines().push(celebiJohtoQuestLine);
    }
    // Hoenn QuestLines
    // Started upon defeating Mauville City's gym.
    static createAquaMagmaHoennQuestLine() {
        const aquaMagmaHoennQuestLine = new QuestLine('Land vs. Water', 'Put a stop to the schemes of Team Aqua and Team Magma!');
        const clearMtChimney = new CustomQuest(1, 0, 'Stop Team Magma at Mt. Chimney Crater.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Mt. Chimney Crater')]());
        aquaMagmaHoennQuestLine.addQuest(clearMtChimney);
        const clearWeatherInstitute = new CustomQuest(1, 0, 'Stop Team Aqua at the Weather Institute.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Weather Institute')]());
        aquaMagmaHoennQuestLine.addQuest(clearWeatherInstitute);
        const clearMagmaHideout = new CustomQuest(1, 0, 'Raid the Team Magma hideout.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Magma Hideout')]());
        aquaMagmaHoennQuestLine.addQuest(clearMagmaHideout);
        const clearAquaHideout = new CustomQuest(1, 0, 'Raid the Team Aqua hideout.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Aqua Hideout')]());
        aquaMagmaHoennQuestLine.addQuest(clearAquaHideout);
        const seafloorCavernReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Masterball, 1, false);
            Notifier.notify({
                title: aquaMagmaHoennQuestLine.name,
                message: 'You found a Master Ball!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const clearSeafloorCavern = new CustomQuest(1, seafloorCavernReward, 'Team Aqua\'s leader Archie escaped from their hideout. Find him in the Seafloor Cavern and put a stop to this once and for all!', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Seafloor Cavern')]());
        aquaMagmaHoennQuestLine.addQuest(clearSeafloorCavern);
        App.game.quests.questLines().push(aquaMagmaHoennQuestLine);
    }
    // Started upon becoming Hoenn's Chapmion.
    static createDeoxysQuestLine() {
        const deoxysQuestLine = new QuestLine('Mystery of Deoxys', 'Discover the mystery of Deoxys.');
        // Defeat 50 Pokemon on route 129
        const route129 = new DefeatPokemonsQuest(50, 0, 129, GameConstants.Region.hoenn);
        deoxysQuestLine.addQuest(route129);
        // Defeat 500 Psychic type Pokemon
        const psychicGemReward = () => {
            App.game.gems.gainGems(500, PokemonType.Psychic);
            Notifier.notify({
                title: deoxysQuestLine.name,
                message: 'You have gained 500 Psychic gems!',
                type: NotificationConstants.NotificationOption.success,
            });
        };
        const defeatPsychic = new CustomQuest(500, psychicGemReward, 'Defeat 500 Psychic-type Pokémon.', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Psychic)).map(p => App.game.statistics.pokemonDefeated[p.id]()).reduce((a, b) => a + b, 0);
        });
        deoxysQuestLine.addQuest(defeatPsychic);
        // Capture 200 Psychic type Pokemon
        const mindPlateReward = () => {
            const mindPlate = UndergroundItems.list.find(item => item.name == 'Mind Plate');
            if (!mindPlate) {
                return console.error('Unable to find item Mind Plate');
            }
            Underground.gainMineItem(mindPlate.id, 20);
            Notifier.notify({
                title: deoxysQuestLine.name,
                message: `You have gained 20 ${mindPlate.name}s!`,
                type: NotificationConstants.NotificationOption.success,
            });
        };
        const catchPsychic = new CustomQuest(200, mindPlateReward, 'Capture 200 Psychic-type Pokémon.', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Psychic)).map(p => App.game.statistics.pokemonCaptured[p.id]()).reduce((a, b) => a + b, 0);
        });
        deoxysQuestLine.addQuest(catchPsychic);
        // Reach stage 100 in battle frontier
        const reachStage100Reward = () => {
            Notifier.notify({
                title: deoxysQuestLine.name,
                message: 'Quest line completed!\n<i>You have uncovered the Mystery of Deoxys!</i>',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const reachStage100 = new CustomQuest(100, reachStage100Reward, 'Defeat stage 100 in the Battle Frontier.', App.game.statistics.battleFrontierHighestStageCompleted, 0);
        deoxysQuestLine.addQuest(reachStage100);
        App.game.quests.questLines().push(deoxysQuestLine);
    }
    static createRubySapphireSeviiQuestLine() {
        const rubySapphireSeviiQuestLine = new QuestLine('Celio\'s Errand', 'Celio has asked you to help him set up a digital connection between the Sevii Islands and Hoenn.', new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion), GameConstants.BulletinBoards.Hoenn);
        const talktoCelio3 = new TalkToNPCQuest(OneIslandCelio4, 'Speak with Celio on One Island in Sevii.');
        rubySapphireSeviiQuestLine.addQuest(talktoCelio3);
        const talktoRocketGrunts = new TalkToNPCQuest(SeviiRocketGrunts, 'Eavesdrop on the Team Rocket Grunts at Mt. Ember.');
        rubySapphireSeviiQuestLine.addQuest(talktoRocketGrunts);
        const clearSeviiRocketGrunts1 = new CustomQuest(2, 0, 'Two Team Rocket Grunts are blocking the entrance to Ruby Path. Defeat them.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Sevii Rocket Grunt 1')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Sevii Rocket Grunt 2')]());
        rubySapphireSeviiQuestLine.addQuest(clearSeviiRocketGrunts1);
        const clearRubyPath = new CustomQuest(1, 0, 'Locate the Ruby. Clear Ruby Path in Mt. Ember.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Ruby Path')]());
        rubySapphireSeviiQuestLine.addQuest(clearRubyPath);
        const talktoRuby = new TalkToNPCQuest(SeviiRuby, 'Take the Ruby in Ruby Path');
        rubySapphireSeviiQuestLine.addQuest(talktoRuby);
        const talktoCelio4 = new TalkToNPCQuest(OneIslandCelio5, 'Return the Ruby to Celio on One Island');
        rubySapphireSeviiQuestLine.addQuest(talktoCelio4);
        const clearIcefallCave = new CustomQuest(1, 0, 'Help Lorelei with Team Rocket Grunts by clearing Icefall Cave on Four Island.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Icefall Cave')]());
        rubySapphireSeviiQuestLine.addQuest(clearIcefallCave);
        const talktoLorelei = new TalkToNPCQuest(SeviiLorelei, 'Talk to Lorelei in Icefall Cave');
        rubySapphireSeviiQuestLine.addQuest(talktoLorelei);
        const talktoGideon = new TalkToNPCQuest(SeviiGideon2, 'Talk to Gideon in Dotted Hole');
        rubySapphireSeviiQuestLine.addQuest(talktoGideon);
        const clearSeviiRocketGrunts2 = new CustomQuest(3, 0, 'Defeat the Three Team Rocket Grunts in Rocket Warehouse.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Sevii Rocket Grunt 3')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Sevii Rocket Grunt 4')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Sevii Rocket Grunt 5')]());
        rubySapphireSeviiQuestLine.addQuest(clearSeviiRocketGrunts2);
        const clearSeviiAriana = new CustomQuest(1, 0, 'Defeat Team Rocket Executive Ariana in Rocket Warehouse.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Sevii Rocket Ariana')]());
        rubySapphireSeviiQuestLine.addQuest(clearSeviiAriana);
        const clearSeviiArcher = new CustomQuest(1, 0, 'Defeat Team Rocket Executive Archer in Rocket Warehouse.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Sevii Rocket Archer')]());
        rubySapphireSeviiQuestLine.addQuest(clearSeviiArcher);
        const clearSeviiGideon = new CustomQuest(1, 0, 'Defeat Scientist Gideon to reclaim the Sapphire.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Scientist Gideon')]());
        rubySapphireSeviiQuestLine.addQuest(clearSeviiGideon);
        const talktoCelio5 = new TalkToNPCQuest(OneIslandCelio6, 'Return the Sapphire to Celio on One Island');
        rubySapphireSeviiQuestLine.addQuest(talktoCelio5);
        App.game.quests.questLines().push(rubySapphireSeviiQuestLine);
    }
    static createPinkanThemeparkQuestLine() {
        const pinkanThemeparkQuestLine = new QuestLine('Team Rocket\'s Pinkan Theme Park', 'Help Team Rocket build a theme park on Pinkan Island?', new GymBadgeRequirement(BadgeEnums.Elite_OrangeChampion), GameConstants.BulletinBoards.Sevii4567);
        const talktoTeamRocket = new TalkToNPCQuest(ThemeparkTeamRocket1, 'Talk to Team Rocket on Pinkan Island to hear about their plans.');
        pinkanThemeparkQuestLine.addQuest(talktoTeamRocket);
        const farmPinkan = new HarvestBerriesQuest(1, undefined, BerryType.Pinkan);
        pinkanThemeparkQuestLine.addQuest(farmPinkan);
        const defeatPinkans = new MultipleQuestsQuest([
            new DefeatPokemonsQuest(500, 0, 41, GameConstants.Region.kanto),
            new DefeatPokemonsQuest(500, 0, 42, GameConstants.Region.kanto),
        ], 'Help Team Rocket recruit some Pinkan Pokémon', () => App.game.farming.gainBerry(BerryType.Pinkan, 20));
        pinkanThemeparkQuestLine.addQuest(defeatPinkans);
        const collectPinkanMaterials = new MultipleQuestsQuest([
            new GainGemsQuest(1000, 0, PokemonType.Fairy),
            new CustomQuest(10, undefined, 'Gain 10 Pixie Plates', () => player.mineInventory().find(item => item.name == 'Pixie Plate').amount()),
        ], 'Collect Fairy Gems and Pixie Plates');
        pinkanThemeparkQuestLine.addQuest(collectPinkanMaterials);
        const talktoTeamRocket2 = new TalkToNPCQuest(ThemeparkTeamRocket4, 'Talk to Team Rocket on Pinkan Island to open the theme park!');
        pinkanThemeparkQuestLine.addQuest(talktoTeamRocket2);
        const clearPinkanTeamRocket = new CustomQuest(1, 0, 'Defeat Team Rocket Jessie & James on Pinkan Island.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Pinkan Jessie & James')]());
        pinkanThemeparkQuestLine.addQuest(clearPinkanTeamRocket);
        const clearPinkanOfficerJenny = new CustomQuest(1, 0, 'Oh no! Officer Jenny has showed up. She\'s not happy! No time to plead your case, it\'s time to battle!', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Pinkan Officer Jenny')]());
        pinkanThemeparkQuestLine.addQuest(clearPinkanOfficerJenny);
        App.game.quests.questLines().push(pinkanThemeparkQuestLine);
    }
    //Regi Trio Quest
    static createRegiTrioQuestLine() {
        const regiTrioQuestLine = new QuestLine('The Three Golems', 'Discover the secrets of the Sealed Chamber.', new GymBadgeRequirement(BadgeEnums.Mind), GameConstants.BulletinBoards.Hoenn);
        const clearSealedChamber = new CustomQuest(1, 0, 'Enter the Sealed Chamber to find clues.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Sealed Chamber')]());
        regiTrioQuestLine.addQuest(clearSealedChamber);
        const readEntranceSign = new TalkToNPCQuest(SCEntrance, 'Investigate the strange markings in the Sealed Chamber.');
        regiTrioQuestLine.addQuest(readEntranceSign);
        const mazeStep1 = new TalkToNPCQuest(SCMazeLeft, 'Navigate the maze inside the Sealed Chamber.');
        regiTrioQuestLine.addQuest(mazeStep1);
        const mazeStep2 = new TalkToNPCQuest(SCMazeLeft, 'Navigate the maze inside the Sealed Chamber.');
        regiTrioQuestLine.addQuest(mazeStep2);
        const mazeStep3 = new TalkToNPCQuest(SCMazeStraight, 'Navigate the maze inside the Sealed Chamber.');
        regiTrioQuestLine.addQuest(mazeStep3);
        const mazeStep4 = new TalkToNPCQuest(SCMazeStraight, 'Navigate the maze inside the Sealed Chamber.');
        regiTrioQuestLine.addQuest(mazeStep4);
        const mazeStep5 = new TalkToNPCQuest(SCMazeRight, 'Navigate the maze inside the Sealed Chamber.');
        regiTrioQuestLine.addQuest(mazeStep5);
        const readSCHints = new TalkToNPCQuest(SCHints, 'Investigate the hidden message at the end of the Sealed Chamber maze.');
        regiTrioQuestLine.addQuest(readSCHints);
        const regiHint1 = new DefeatPokemonsQuest(100, 0, 111, GameConstants.Region.hoenn, 'Release Regirock');
        const regiHint2 = new DefeatPokemonsQuest(100, 0, 105, GameConstants.Region.hoenn, 'Release Regice');
        const regiHint3 = new DefeatPokemonsQuest(100, 0, 120, GameConstants.Region.hoenn, 'Release Registeel');
        regiTrioQuestLine.addQuest(new MultipleQuestsQuest([
            regiHint1,
            regiHint2,
            regiHint3,
        ], 'Explore Hoenn by defeating Pokémon on the hinted routes to release the Regi Trio.'));
        const catchRegirock = new CaptureSpecificPokemonQuest('Regirock', 'Catch Regirock');
        const catchRegice = new CaptureSpecificPokemonQuest('Regice', 'Catch Regice');
        const catchRegisteel = new CaptureSpecificPokemonQuest('Registeel', 'Catch Registeel');
        regiTrioQuestLine.addQuest(new MultipleQuestsQuest([
            catchRegirock,
            catchRegice,
            catchRegisteel,
        ], 'Catch the Regi Trio.'));
        App.game.quests.questLines().push(regiTrioQuestLine);
    }
    // Sinnoh QuestLines
    // Started upon defeating Oreburgh City's gym.
    static createGalacticSinnohQuestLine() {
        const galacticSinnohQuestLine = new QuestLine('A New World', 'End Team Galactic\'s plan to destroy the world and create a new one in its place.');
        const clearValleyWindworks = new CustomQuest(1, 0, 'Team Galactic is stealing energy. Clear Valley Windworks.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Valley Windworks')]());
        galacticSinnohQuestLine.addQuest(clearValleyWindworks);
        const clearTeamGalacticEternaBuilding = new CustomQuest(1, 0, 'Team Galactic is kidnapping Pokémon now. Clear Team Galactic Eterna Building in Eterna City.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Team Galactic Eterna Building')]());
        galacticSinnohQuestLine.addQuest(clearTeamGalacticEternaBuilding);
        const clearPastoriaCityGym = new CustomQuest(1, 0, 'All is quiet. Team Galactic isn\'t doing anything. Guess they learned their lesson. Just keep traveling, I guess. Clear the Pastoria City Gym.', () => App.game.statistics.gymsDefeated[GameConstants.getGymIndex('Pastoria City')]());
        galacticSinnohQuestLine.addQuest(clearPastoriaCityGym);
        const clearCyrus1TemporaryBattle = new CustomQuest(1, 0, 'The boss of Team Galactic has been spotted in Celestic Town!', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Galactic Boss Cyrus')]());
        galacticSinnohQuestLine.addQuest(clearCyrus1TemporaryBattle);
        const clearCanalaveCityGym = new CustomQuest(1, 0, 'Cyrus is gone. Nowhere to be found. Nothing to do but proceed. Adventure awaits! Clear the Canalave City Gym.', () => App.game.statistics.gymsDefeated[GameConstants.getGymIndex('Canalave City')]());
        galacticSinnohQuestLine.addQuest(clearCanalaveCityGym);
        const clearLakeValor = new CustomQuest(1, 0, 'A commotion was heard at Lake Valor. You must protect the lake\'s guardian! Clear Lake Valor.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Lake Valor')]());
        galacticSinnohQuestLine.addQuest(clearLakeValor);
        const clearLakeVerity = new CustomQuest(1, 0, 'Lake Valor\'s guardian was taken. Better try again at the next lake. Clear Lake Verity.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Lake Verity')]());
        galacticSinnohQuestLine.addQuest(clearLakeVerity);
        const clearLakeAcuity = new CustomQuest(1, 0, 'Lake Verity\'s guardian was also taken. Only one lake remains. Clear Lake Acuity.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Lake Acuity')]());
        galacticSinnohQuestLine.addQuest(clearLakeAcuity);
        const clearTeamGalacticHQ = new CustomQuest(1, 0, 'You failed to protect any of the lake guardians. They have been taken to Veilstone City. So that\'s what that strange building was... Clear Team Galactic HQ in Veilstone City.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Team Galactic HQ')]());
        galacticSinnohQuestLine.addQuest(clearTeamGalacticHQ);
        const clearSpearPillar = new CustomQuest(1, 0, 'The lake guardians have been rescued, but Cyrus has used them to forge the Red Chain. He is taking it to the top of Mount Coronet. Follow him! Clear Spear Pillar.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Spear Pillar')]());
        galacticSinnohQuestLine.addQuest(clearSpearPillar);
        const DistortionWorldReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Masterball, 1, false);
            Notifier.notify({
                title: galacticSinnohQuestLine.name,
                message: 'You found a Master Ball!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const clearDistortionWorld = new CustomQuest(1, DistortionWorldReward, 'Cyrus planned to use the Red Chain to enslave Dialga and Palkia, but he accidentally angered Giratina and has been taken to its realm. A portal has appeared on top of Mount Coronet. Use it to follow Cyrus and end his threat once and for all. Clear Distortion World.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Distortion World')]());
        galacticSinnohQuestLine.addQuest(clearDistortionWorld);
        App.game.quests.questLines().push(galacticSinnohQuestLine);
    }
    // Unova QuestLines
    // Started upon defeating Virbank City's gym.
    static createPlasmaUnovaQuestLine() {
        const plasmaUnovaQuestLine = new QuestLine('Quest for the DNA Splicers', 'Prevent Team Plasma from using these dangerous Splicers.');
        const clearVirbankGrunt = new CustomQuest(1, 0, 'A Team Plasma Grunt in Virbank City would like to steal your Pokémon. Defeat the grunt.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Team Plasma Grunt 1')]());
        plasmaUnovaQuestLine.addQuest(clearVirbankGrunt);
        const clearCastliaSewers = new CustomQuest(1, 0, 'Some Team Plasma Grunts were seen entering the Castelia Sewers. Clear Castelia Sewers.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Castelia Sewers')]());
        plasmaUnovaQuestLine.addQuest(clearCastliaSewers);
        const talktoPlasmaGrunt1 = new TalkToNPCQuest(PlasmaGrunt1, 'Investigate the Perfectly Ordinary Frigate.');
        plasmaUnovaQuestLine.addQuest(talktoPlasmaGrunt1);
        const clearNimbasaGym = new CustomQuest(1, 0, 'Seems there\'s nothing suspicious going on in Castelia City. Time to continue your journey. Clear the Nimbasa Gym.', () => App.game.statistics.gymsDefeated[GameConstants.getGymIndex('Nimbasa City')]());
        plasmaUnovaQuestLine.addQuest(clearNimbasaGym);
        const clearNimbasaGrunts = new CustomQuest(2, 0, 'Hugh thinks some Team Plasma Grunts in Nimbasa City are stealing Pokémon. Defeat the grunts.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Team Plasma Grunt 2')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Team Plasma Grunt 3')]());
        plasmaUnovaQuestLine.addQuest(clearNimbasaGrunts);
        const talktoPlasmaGrunt2 = new TalkToNPCQuest(PlasmaGrunt2, 'They are definitely stealing Pokémon. Investigate the Totally Unsuspicious Frigate.');
        plasmaUnovaQuestLine.addQuest(talktoPlasmaGrunt2);
        const clearDriftveilGrunts = new CustomQuest(4, 0, 'Defeat the Team Plasma Grunts on the Totally Unsuspicious Frigate.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Team Plasma Grunt 4')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Team Plasma Grunt 5')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Team Plasma Grunts 1')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Team Plasma Grunts 2')]());
        plasmaUnovaQuestLine.addQuest(clearDriftveilGrunts);
        const talktoZinzolinReward = () => {
            MapHelper.moveToTown('Driftveil City');
        };
        const talktoZinzolin = new TalkToNPCQuest(DriftveilZinzolin, 'Talk to Zinzolin.', talktoZinzolinReward);
        plasmaUnovaQuestLine.addQuest(talktoZinzolin);
        const unovaRoute13 = new CustomQuest(10, 0, 'The Frigate is gone. Nothing to do but move forward. Clear route 13.', () => App.game.statistics.routeKills[GameConstants.Region.unova]['13']());
        plasmaUnovaQuestLine.addQuest(unovaRoute13);
        const clearLacunosaGrunt = new CustomQuest(1, 0, 'You have stumbled upon Zinzolin and a Team Plasma Grunt in Lacunosa Town. Defeat the grunt.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Team Plasma Grunt 6')]());
        plasmaUnovaQuestLine.addQuest(clearLacunosaGrunt);
        const clearZinzolin1 = new CustomQuest(1, 0, 'Defeat Zinzolin.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Zinzolin 1')]());
        plasmaUnovaQuestLine.addQuest(clearZinzolin1);
        const clearOpelucidGym = new CustomQuest(1, 0, 'Defeat the Opelucid City gym leader to obtain the DNA Splicers before Team Plasma does!', () => App.game.statistics.gymsDefeated[GameConstants.getGymIndex('Opelucid City')]());
        plasmaUnovaQuestLine.addQuest(clearOpelucidGym);
        const clearOpelucidGrunts = new CustomQuest(3, 0, 'Team Plasma has stolen the DNA Splicers and is assaulting the city with an army of grunts and shadows! Defend against the Team Plasma Assault!', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Team Plasma Grunt 7')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Team Plasma Grunt 8')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Team Plasma Grunt 9')]());
        plasmaUnovaQuestLine.addQuest(clearOpelucidGrunts);
        const clearZinzolin2 = new CustomQuest(1, 0, 'Defeat Zinzolin.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Zinzolin 2')]());
        plasmaUnovaQuestLine.addQuest(clearZinzolin2);
        const clearPlasmaShadow1Reward = () => {
            MapHelper.moveToTown('Opelucid City');
        };
        const clearPlasmaShadow1 = new CustomQuest(1, clearPlasmaShadow1Reward, 'Defeat the Plasma Shadow.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Plasma Shadow 1')]());
        plasmaUnovaQuestLine.addQuest(clearPlasmaShadow1);
        const clearPlasmaFrigateReward = () => {
            MapHelper.moveToTown('Humilau City');
        };
        const clearPlasmaFrigate = new CustomQuest(1, clearPlasmaFrigateReward, 'Team Plasma has fled the scene with the stolen DNA Splicers. Find and clear out the Plasma Frigate.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Plasma Frigate')]());
        plasmaUnovaQuestLine.addQuest(clearPlasmaFrigate);
        const clearGiantChasm = new CustomQuest(1, 0, 'Team Plasma\'s leader Ghetsis plans on using the DNA Splicers on Kyurem in Giant Chasm. Clear the dungeon to end his evil plans.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Giant Chasm')]());
        plasmaUnovaQuestLine.addQuest(clearGiantChasm);
        const talktoColress = new TalkToNPCQuest(GiantChasmColress, 'Talk to Colress.');
        plasmaUnovaQuestLine.addQuest(talktoColress);
        const clearColress = new CustomQuest(1, 0, 'Defeat Colress.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Colress')]());
        plasmaUnovaQuestLine.addQuest(clearColress);
        const clearPlasmaShadow2 = new CustomQuest(3, 0, 'Defeat the Plasma Shadows.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Plasma Shadow 2')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Plasma Shadow 3')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Plasma Shadow 4')]());
        plasmaUnovaQuestLine.addQuest(clearPlasmaShadow2);
        const talktoShadowTriad = new TalkToNPCQuest(GiantChasmShadowTriad, 'Talk to the Shadow Triad.');
        plasmaUnovaQuestLine.addQuest(talktoShadowTriad);
        const clearGhetsis1 = new CustomQuest(1, 0, 'Ghetsis has done something to the legendary Dragon-type Pokémon!', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Ghetsis 1')]());
        plasmaUnovaQuestLine.addQuest(clearGhetsis1);
        const ghetsisReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Masterball, 1, false);
            Notifier.notify({
                title: plasmaUnovaQuestLine.name,
                message: 'You found a Master Ball!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
            App.game.keyItems.gainKeyItem(KeyItemType.DNA_splicers, true);
            $('#temporaryBattleWonModal').one('hidden.bs.modal', () => {
                KeyItemController.showGainModal(KeyItemType.DNA_splicers);
            });
        };
        const clearGhetsis2 = new CustomQuest(1, ghetsisReward, 'Defeat Ghetis one final time!', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Ghetsis 2')]());
        plasmaUnovaQuestLine.addQuest(clearGhetsis2);
        App.game.quests.questLines().push(plasmaUnovaQuestLine);
    }
    // Kalos QuestLines
    static createDetectivePikachuQuestLine() {
        const detectivePikachuQuestLine = new QuestLine('Detective Pikachu', 'Detective Pikachu\'s partner has gone missing, and he needs your help!', new MultiRequirement([new ObtainedPokemonRequirement(pokemonMap['Detective Pikachu']), new GymBadgeRequirement(BadgeEnums.Bug)]), GameConstants.BulletinBoards.Kalos);
        const searchForClues1 = new TalkToNPCQuest(searchForClues, 'Search Goldenrod City for clues.');
        detectivePikachuQuestLine.addQuest(searchForClues1);
        const aipomAlley = new CustomQuest(1, 0, 'Defeat the Aipoms', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Aipom Alley')]());
        detectivePikachuQuestLine.addQuest(aipomAlley);
        const searchForClues2 = new CustomQuest(1, 0, 'The Aipoms dropped some sort of vial while they were running away. It looks like they were headed towards the Radio Tower. Find it!', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Radio Tower')]());
        detectivePikachuQuestLine.addQuest(searchForClues2);
        const searchForClues3 = new TalkToNPCQuest(Informant1, 'Detective Pikachu has an informant who knows more about the mysterious vial. Meet with him in Saffron City.');
        detectivePikachuQuestLine.addQuest(searchForClues3);
        const mimeInterview = new CustomQuest(1, 0, 'The informant is proving hard to convince. Time to get physical!', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Mime Interview')]());
        detectivePikachuQuestLine.addQuest(mimeInterview);
        const searchForClues4 = new TalkToNPCQuest(Informant2, 'The informant is finally willing to "talk", find out what he has to say.');
        detectivePikachuQuestLine.addQuest(searchForClues4);
        const undergroundFightingRing = new CustomQuest(1, 0, 'Infiltrate the underground fighting ring.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Underground Fighting Ring')]());
        detectivePikachuQuestLine.addQuest(undergroundFightingRing);
        const searchForClues5 = new TalkToNPCQuest(HowardClifford1, 'Go to Clifford Industries in Goldenrod City to demand some answers.');
        detectivePikachuQuestLine.addQuest(searchForClues5);
        const searchForClues6 = new TalkToNPCQuest(LucyStevens1, 'Meet up with investigative journalist Lucy Stevens in Hearthome City');
        detectivePikachuQuestLine.addQuest(searchForClues6);
        const searchForClues7 = new CustomQuest(1, 0, 'Search the research laboratory for clues.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('P2 Laboratory')]());
        detectivePikachuQuestLine.addQuest(searchForClues7);
        const labAmbush = new CustomQuest(1, 0, 'It was an ambush! You have been followed to Nuvema Town, defeat the mysterious attackers and escape!', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Lab Ambush')]());
        detectivePikachuQuestLine.addQuest(labAmbush);
        const searchForClues8 = new TalkToNPCQuest(Mewtwo1, 'Detective Pikachu is injured. He asks you to get help from his friend near Cerulean Cave');
        detectivePikachuQuestLine.addQuest(searchForClues8);
        const searchForClues9 = new TalkToNPCQuest(HowardClifford2, 'Confront Howard Clifford in Goldenrod City about his involvement with the R vials.');
        detectivePikachuQuestLine.addQuest(searchForClues9);
        const imposterAttack = new CustomQuest(1, 0, 'Defeat Howard\'s bodyguard and escape.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Imposter')]());
        detectivePikachuQuestLine.addQuest(imposterAttack);
        const howardConfront = new TalkToNPCQuest(HowardClifford3, 'Give Howard Clifford one last chance to surrender!');
        detectivePikachuQuestLine.addQuest(howardConfront);
        const possessedFight = new CustomQuest(1, 0, 'Defeat Mewtwo to free it from Howard\'s control!', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Possessed Mewtwo')]());
        detectivePikachuQuestLine.addQuest(possessedFight);
        const searchForClues10 = new TalkToNPCQuest(Mewtwo2, 'Talk to Mewtwo near Cerulean Cave about Detective Pikachu\'s partner.');
        detectivePikachuQuestLine.addQuest(searchForClues10);
        const DetectiveRaichuReward = () => {
            App.game.party.gainPokemonById(26.02);
            Notifier.notify({
                title: detectivePikachuQuestLine.name,
                message: 'Detective Pikachu\'s partner has been nursed back to health!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const searchForClues11 = new TalkToNPCQuest(DetectiveRaichu, 'Talk to Detective Raichu', DetectiveRaichuReward);
        detectivePikachuQuestLine.addQuest(searchForClues11);
        App.game.quests.questLines().push(detectivePikachuQuestLine);
    }
    static createVivillonQuestLine() {
        const vivillonQuestLine = new QuestLine('The Great Vivillon Hunt!', 'Discover the beauty of Vivillon.', new GymBadgeRequirement(BadgeEnums.Iceberg), GameConstants.BulletinBoards.Kalos);
        const createVivillonQuest = (type, vivillon, dungeons, hint) => {
            // Capture 100 Water type Pokemon
            const catchType = new CustomQuest(100, undefined, `Capture 100 ${PokemonType[type]} type Pokémon`, () => {
                return pokemonMap.filter(p => p.type.includes(type)).map(p => App.game.statistics.pokemonCaptured[p.id]()).reduce((a, b) => a + b, 0);
            });
            vivillonQuestLine.addQuest(catchType);
            // Capture Vivillon in a dungeon
            const vivillonAdd = () => {
                dungeons.forEach(dungeon => {
                    dungeonList[dungeon].bossList.push(new DungeonBossPokemon(vivillon, 93659450, 80));
                });
                Notifier.notify({
                    title: vivillonQuestLine.name,
                    message: `A Vivillon is hiding somewhere.\n${hint}`,
                    type: NotificationConstants.NotificationOption.info,
                });
            };
            const vivillonRemove = () => {
                dungeons.forEach(dungeon => {
                    dungeonList[dungeon].bossList = dungeonList[dungeon].bossList.filter(boss => boss.name != vivillon);
                });
                Notifier.notify({
                    title: vivillonQuestLine.name,
                    message: `You caught the rare ${vivillon}!`,
                    type: NotificationConstants.NotificationOption.success,
                });
            };
            const catchVivillon = new CaptureSpecificPokemonQuest(vivillon, `Find and capture the rare Vivillon!\nHint: ${hint}`, 1, false, vivillonRemove, vivillonAdd);
            vivillonQuestLine.addQuest(catchVivillon);
        };
        createVivillonQuest(PokemonType.Water, 'Vivillon (Marine)', ['Lake Verity', 'Lake Valor', 'Lake Acuity'], 'It has been spotted at some Lakes.');
        createVivillonQuest(PokemonType.Psychic, 'Vivillon (Modern)', ['Cerulean Cave'], 'It\'s surrounded by strong Pokémon.');
        createVivillonQuest(PokemonType.Poison, 'Vivillon (Jungle)', ['Moor of Icirrus'], 'It has been spotted in a swamp.');
        createVivillonQuest(PokemonType.Dark, 'Vivillon (Monsoon)', ['Dark Cave'], 'It\'s hiding at a dark place.');
        createVivillonQuest(PokemonType.Steel, 'Vivillon (Tundra)', ['Poké Ball Factory'], 'It flew into a factory.');
        createVivillonQuest(PokemonType.Fire, 'Vivillon (Sun)', ['Mt. Chimney Crater'], 'It seems to like hot places.');
        createVivillonQuest(PokemonType.Fighting, 'Vivillon (Archipelago)', ['Sprout Tower'], 'It\'s sitting on a swaying pillar.');
        createVivillonQuest(PokemonType.Ghost, 'Vivillon (Elegant)', ['Lost Hotel'], 'It\'s visiting an abandoned and spooky place.');
        createVivillonQuest(PokemonType.Fairy, 'Vivillon (Ocean)', ['Dreamyard'], 'It\'s flying around an overgrown place full of dreams.');
        createVivillonQuest(PokemonType.Electric, 'Vivillon (Continental)', ['New Mauville'], 'It\'s currently in a City full of Electric-type Pokémon.');
        createVivillonQuest(PokemonType.Bug, 'Vivillon (River)', ['Eterna Forest'], 'It hides in a dark Forest.');
        createVivillonQuest(PokemonType.Flying, 'Vivillon (Polar)', ['Sky Pillar'], 'It\'s high up in the sky.');
        createVivillonQuest(PokemonType.Ground, 'Vivillon (Sandstorm)', ['Relic Castle'], 'It got lost in the desert sand.');
        createVivillonQuest(PokemonType.Grass, 'Vivillon (Garden)', ['Flower Paradise'], 'It only shows up amongst the most beautiful flowers.');
        createVivillonQuest(PokemonType.Rock, 'Vivillon (High Plains)', ['Mt. Moon'], 'It has been spotted dancing in the moonlight.');
        createVivillonQuest(PokemonType.Dragon, 'Vivillon (Savanna)', ['Dragonspiral Tower'], 'It\'s surrounded by dragons.');
        createVivillonQuest(PokemonType.Ice, 'Vivillon (Icy Snow)', ['Frost Cavern'], 'It can be found at a very cold place.');
        // Capture 200 Normal type Pokemon
        const catchNormal = new CustomQuest(200, undefined, 'Capture 200 Normal-type Pokémon.', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Normal)).map(p => App.game.statistics.pokemonCaptured[p.id]()).reduce((a, b) => a + b, 0);
        });
        vivillonQuestLine.addQuest(catchNormal);
        // Capture Vivillon (Pokéball)
        const viviBallAdd = () => {
            BattleFrontierMilestones.addMilestone(new BattleFrontierMilestonePokemon(666, 'Vivillon (Poké Ball)'));
            Notifier.notify({
                title: vivillonQuestLine.name,
                message: 'A Vivillon is hiding somewhere.\nOnly the strongest Challengers can reach it.',
                type: NotificationConstants.NotificationOption.success,
            });
        };
        const viviBalldone = () => {
            Notifier.notify({
                title: vivillonQuestLine.name,
                message: 'You caught the last rare Vivillon (Poké Ball).\nCongratulations!',
                type: NotificationConstants.NotificationOption.success,
            });
        };
        const catchBall = new CaptureSpecificPokemonQuest('Vivillon (Poké Ball)', 'Find and capture the rare Vivillon!\nHint: Only the strongest Challengers can reach it.', 1, false, viviBalldone, viviBallAdd);
        vivillonQuestLine.addQuest(catchBall);
        // Add quest to quest line
        App.game.quests.questLines().push(vivillonQuestLine);
    }
    static createAshKetchumQuestLine() {
        const ashKetchumQuestLine = new QuestLine('The New Kid', 'A new kid from your home town is making waves. Show him who the real prodigy of Pallet Town is.', new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion), GameConstants.BulletinBoards.Kalos);
        const clearKantoAsh = new CustomQuest(1, 0, 'Defeat the kid near Pallet Town.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Ash Ketchum Kanto')]());
        ashKetchumQuestLine.addQuest(clearKantoAsh);
        const clearJohtoAsh = new CustomQuest(1, 0, 'He\'s not stopping. Find the kid in Johto.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Ash Ketchum Johto')]());
        ashKetchumQuestLine.addQuest(clearJohtoAsh);
        const clearHoennAsh = new CustomQuest(1, 0, 'He just won\'t learn his lesson. Defeat the kid again in Hoenn.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Ash Ketchum Hoenn')]());
        ashKetchumQuestLine.addQuest(clearHoennAsh);
        const clearSinnohAsh = new CustomQuest(1, 0, 'Who does this kid think he is anyway? Pretending he\'s the main character. He\'s in Sinnoh now.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Ash Ketchum Sinnoh')]());
        ashKetchumQuestLine.addQuest(clearSinnohAsh);
        const clearUnovaAsh = new CustomQuest(1, 0, 'The kid is hiding in Unova!', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Ash Ketchum Unova')]());
        ashKetchumQuestLine.addQuest(clearUnovaAsh);
        const AshKetchumReward = () => {
            App.game.party.gainPokemonById(658.01);
            Notifier.notify({
                title: ashKetchumQuestLine.name,
                message: 'You obtained Ash-Greninja!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const clearKalosAsh = new CustomQuest(1, AshKetchumReward, 'Maybe you were too hard on the kid... You should offer him an apology in Kalos.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Ash Ketchum Kalos')]());
        ashKetchumQuestLine.addQuest(clearKalosAsh);
        App.game.quests.questLines().push(ashKetchumQuestLine);
    }
    static createPrincessDiancieQuestLine() {
        const princessDiancieQuestLine = new QuestLine('Princess Diancie', 'Princess Diancie has been spotted in Kalos! She\'s searching for something.', new MultiRequirement([new ObtainedPokemonRequirement(pokemonMap.Doublade), new GymBadgeRequirement(BadgeEnums.Elite_Malva), new GymBadgeRequirement(BadgeEnums.Elite_Siebold), new GymBadgeRequirement(BadgeEnums.Elite_Wikstrom), new GymBadgeRequirement(BadgeEnums.Elite_Drasna)]), GameConstants.BulletinBoards.Kalos);
        const catchFairy = new CustomQuest(100, undefined, 'Capture 100 Fairy-type Pokémon to follow Diancie\'s Fairy Aura.', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Fairy)).map(p => App.game.statistics.pokemonCaptured[p.id]()).reduce((a, b) => a + b, 0);
        });
        princessDiancieQuestLine.addQuest(catchFairy);
        const fightRiot = new CustomQuest(1, 0, 'Defend Diancie from the attacking ninja in Shalour City.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Riot')]());
        princessDiancieQuestLine.addQuest(fightRiot);
        const fightMerilyn = new CustomQuest(1, 0, 'Diancie has escaped to the shopping mall in Lumiose City, but is under attack again!', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Merilyn')]());
        princessDiancieQuestLine.addQuest(fightMerilyn);
        const diamondDomain = new CustomQuest(5, undefined, 'Diancie has fled to the Diamond Domain. Dig in the Underground to find it.', App.game.statistics.undergroundLayersMined);
        princessDiancieQuestLine.addQuest(diamondDomain);
        const fightSteels = new CustomQuest(1, 0, 'Millis and Argus Steel let you do the hard work while they set up an ambush in Shalour City.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Millis and Argus Steel')]());
        princessDiancieQuestLine.addQuest(fightSteels);
        const BladeAegislashReward = () => {
            App.game.party.gainPokemonById(681.1);
            Notifier.notify({
                title: princessDiancieQuestLine.name,
                message: 'Your Doublade has evolved into Blade Forme Aegislash!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const bladeForme = new TalkToNPCQuest(ExamineAegislash, 'Your Doublade learned something from the Steels, examine it in Shalour City to find out what!', BladeAegislashReward);
        princessDiancieQuestLine.addQuest(bladeForme);
        const heartDiamond = new CustomQuest(1000, undefined, 'Diancie needs help building a Heart Diamond to stabilize the Diamond Domain. Gather some Fairy Gems for her.', App.game.statistics.gemsGained[17]);
        princessDiancieQuestLine.addQuest(heartDiamond);
        const thanksDiancie = new TalkToNPCQuest(ThanksDiancie, 'Talk to Princess Diancie in Shalour City.');
        princessDiancieQuestLine.addQuest(thanksDiancie);
        const DiancieCatch = new CaptureSpecificPokemonQuest('Diancie', 'Capture Diancie in Reflection Cave.', 1, false, undefined, undefined);
        princessDiancieQuestLine.addQuest(DiancieCatch);
        App.game.quests.questLines().push(princessDiancieQuestLine);
    }
    // Alola QuestLines
    // Started upon defeating Konikoni City's gym.
    static createSkullAetherAlolaQuestLine() {
        const skullAetherAlolaQuestLine = new QuestLine('Eater of Light', 'A dangerous Pokémon from another world threatens the Alola region.');
        const clearUltraWormhole = new CustomQuest(1, 0, 'A strange creature has appeared in Aether Paradise. Make it go away. Clear the Ultra Wormhole.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Ultra Wormhole')]());
        skullAetherAlolaQuestLine.addQuest(clearUltraWormhole);
        const clearMalieGarden = new CustomQuest(1, 0, 'Team Skull are being annoying. Get rid of them. Clear the Malie Garden dungeon.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Malie Garden')]());
        skullAetherAlolaQuestLine.addQuest(clearMalieGarden);
        const clearPoTown = new CustomQuest(1, 0, 'Team Skull have stolen a child\'s Yungoos. Raid their base. Clear the Po Town dungeon.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Po Town')]());
        skullAetherAlolaQuestLine.addQuest(clearPoTown);
        const clearAetherFoundation = new CustomQuest(1, 0, 'Aether president Lusamine has recruited Team Skull in her own plan to stop the Eater of Light. She\'s an idiot. Stop her. Clear the Aether Foundation dungeon.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Aether Foundation')]());
        skullAetherAlolaQuestLine.addQuest(clearAetherFoundation);
        const UltraMegalopolisReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Masterball, 1, false);
            Notifier.notify({
                title: skullAetherAlolaQuestLine.name,
                message: 'You found a Master Ball!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const clearUltraMegalopolis = new CustomQuest(1, UltraMegalopolisReward, 'Stop the Eater of Light from absorbing all light in Alola. Clear Ultra Megalopolis at the Altar of the Sunne and Moone.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Ultra Megalopolis')]());
        skullAetherAlolaQuestLine.addQuest(clearUltraMegalopolis);
        App.game.quests.questLines().push(skullAetherAlolaQuestLine);
    }
    // Started upon defeating Ultra Necrozma temp battle.
    static createMinasTrialAlolaQuestLine() {
        const minasTrialAlolaQuestLine = new QuestLine('Mina\'s Trial', 'Mina has asked you to battle the Trial captains of the other islands to earn access to her Trial site.');
        const clearCaptainMina = new CustomQuest(1, 0, 'Defeat Captain Mina in Seafolk Village.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Captain Mina')]());
        minasTrialAlolaQuestLine.addQuest(clearCaptainMina);
        const clearCaptainIlima = new CustomQuest(1, 0, 'Defeat Captain Ilima in Hau\'oli Cemetery.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Captain Ilima')]());
        minasTrialAlolaQuestLine.addQuest(clearCaptainIlima);
        const clearCaptainMallow = new CustomQuest(1, 0, 'Defeat Captain Mallow in Lush Jungle.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Captain Mallow')]());
        minasTrialAlolaQuestLine.addQuest(clearCaptainMallow);
        const clearCaptainLana = new CustomQuest(1, 0, 'Defeat Captain Lana in Lush Jungle.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Captain Lana')]());
        minasTrialAlolaQuestLine.addQuest(clearCaptainLana);
        const clearCaptainKiawe = new CustomQuest(1, 0, 'Defeat Captain Kiawe in Wela Volcano Park.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Captain Kiawe')]());
        minasTrialAlolaQuestLine.addQuest(clearCaptainKiawe);
        const clearCaptainSophocles = new CustomQuest(1, 0, 'Defeat Captain Sophocles in Hokulani Observatory.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Captain Sophocles')]());
        minasTrialAlolaQuestLine.addQuest(clearCaptainSophocles);
        const clearKahunaNanu = new CustomQuest(1, 0, 'Captain Acerola is apparently busy with something at the top of Mount Lanakila. Defeat Kahuna Nanu in Tapu Village instead.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Kahuna Nanu')]());
        minasTrialAlolaQuestLine.addQuest(clearKahunaNanu);
        const clearMinasHouseboat = new CustomQuest(1, 0, 'Complete the Trial! Clear Mina\'s Houseboat in Seafolk Village.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Mina\'s Houseboat')]());
        minasTrialAlolaQuestLine.addQuest(clearMinasHouseboat);
        App.game.quests.questLines().push(minasTrialAlolaQuestLine);
    }
    static createUltraBeastQuestLine() {
        const UltraBeastQuestLine = new QuestLine('Ultra Beast Hunt', 'Track down the mysterious Ultra Beasts', new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion), GameConstants.BulletinBoards.Alola);
        const talkToLooker = new TalkToNPCQuest(RoadsideMotelLooker1, 'Talk to Looker at the Roadside Motel.');
        UltraBeastQuestLine.addQuest(talkToLooker);
        const AnabelReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Beastball, 5, false);
        };
        const AnabelBattle = new CustomQuest(1, AnabelReward, 'Defeat Agent Anabel at the Roadside Motel.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Anabel')](), 0);
        UltraBeastQuestLine.addQuest(AnabelBattle);
        const talkToAnabel1 = new TalkToNPCQuest(RoadsideMotelAnabel1, 'Talk to Anabel at the Roadside Motel.');
        UltraBeastQuestLine.addQuest(talkToAnabel1);
        const talkToLooker2 = new TalkToNPCQuest(RoadsideMotelLooker2, 'Talk to Looker at the Roadside Motel to learn about Beast Balls.');
        UltraBeastQuestLine.addQuest(talkToLooker2);
        const createUltraBeastQuest = (ultrabeast, hint, numberCaught, ultraBeastReward) => {
            const time = (numberCaught > 0) ? 'times!' : 'time!';
            const validHint = hint !== null && hint !== void 0 ? hint : '';
            const catchUltraBeast = new CaptureSpecificPokemonQuest(ultrabeast, `Capture ${ultrabeast} ${numberCaught} ${time} ${validHint}`, numberCaught, false, ultraBeastReward, undefined);
            return catchUltraBeast;
        };
        const ultraBeastReward = () => {
            Notifier.notify({
                title: UltraBeastQuestLine.name,
                message: 'An Ultra Beast is hiding somewhere...',
                type: NotificationConstants.NotificationOption.info,
                timeout: 3e1,
            });
        };
        UltraBeastQuestLine.addQuest(createUltraBeastQuest('Nihilego', ' Nihilego has been spotted at Wela Volcano Park and Diglett\'s Tunnel!', 1, ultraBeastReward));
        const talkToAnabel2 = new TalkToNPCQuest(RoadsideMotelAnabel2, 'Talk to Anabel at the Roadside Motel.');
        UltraBeastQuestLine.addQuest(talkToAnabel2);
        UltraBeastQuestLine.addQuest(new MultipleQuestsQuest([
            createUltraBeastQuest('Buzzwole', undefined, 2),
            createUltraBeastQuest('Pheromosa', undefined, 4),
        ], 'Rare Ultra Beasts have been spotted!\nBuzzwole in Melemele Meadow and Pheromosa in Verdant Cavern!', ultraBeastReward));
        const talkToAnabel3 = new TalkToNPCQuest(RoadsideMotelAnabel3, 'Talk to Anabel at the Roadside Motel.');
        UltraBeastQuestLine.addQuest(talkToAnabel3);
        const MinaBattle = new CustomQuest(1, undefined, 'Defeat Trial Captain Mina at the Roadside Motel.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Captain Mina UB')](), 0);
        UltraBeastQuestLine.addQuest(MinaBattle);
        const talkToMina1 = new TalkToNPCQuest(RoadsideMotelMina, 'Talk to Captain Mina at the Roadside Motel.');
        UltraBeastQuestLine.addQuest(talkToMina1);
        UltraBeastQuestLine.addQuest(createUltraBeastQuest('Xurkitree', ' Xurkitree has been spotted at Memorial Hill and Lush Jungle!', 2, ultraBeastReward));
        const talkToNanu1 = new TalkToNPCQuest(RoadsideMotelNanu1, 'Talk to Kahuna Nanu at the Roadside Motel.');
        UltraBeastQuestLine.addQuest(talkToNanu1);
        UltraBeastQuestLine.addQuest(new MultipleQuestsQuest([
            createUltraBeastQuest('Kartana', undefined, 4),
            createUltraBeastQuest('Celesteela', undefined, 2),
        ], 'Rare Ultra Beasts have been spotted! Kartana at Malie Garden and Route 17, and Celesteela at Malie Garden and Haina Desert!', ultraBeastReward));
        const talkToNanu2 = new TalkToNPCQuest(RoadsideMotelNanu2, 'Talk to Kahuna Nanu at the Roadside Motel.');
        UltraBeastQuestLine.addQuest(talkToNanu2);
        const NanuBattle = new CustomQuest(1, undefined, 'Defeat Kahuna Nanu at the Roadside Motel.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Kahuna Nanu UB')](), 0);
        UltraBeastQuestLine.addQuest(NanuBattle);
        const talkToAnabel4 = new TalkToNPCQuest(RoadsideMotelAnabel4, 'Talk to Anabel at the Roadside Motel.');
        UltraBeastQuestLine.addQuest(talkToAnabel4);
        UltraBeastQuestLine.addQuest(new MultipleQuestsQuest([
            createUltraBeastQuest('Blacephalon', undefined, 5),
            createUltraBeastQuest('Stakataka', undefined, 5),
        ], 'Rare Ultra Beasts have been spotted! Blacephalon and Stakataka are both at Poni Grove!', ultraBeastReward));
        const talkToAnabel5 = new TalkToNPCQuest(RoadsideMotelAnabel5, 'Talk to Anabel at the Roadside Motel.');
        UltraBeastQuestLine.addQuest(talkToAnabel5);
        const GuzzlordReward = () => {
            Notifier.notify({ message: 'You caught all the Ultra Beasts!', type: NotificationConstants.NotificationOption.success });
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Beastball, 50, false);
        };
        const GuzzlordCatch = new CaptureSpecificPokemonQuest('Guzzlord', 'Catch Guzzlord at Resolution Cave.', 1, false, GuzzlordReward, undefined);
        UltraBeastQuestLine.addQuest(GuzzlordCatch);
        App.game.quests.questLines().push(UltraBeastQuestLine);
    }
    // Galar QuestLines
    // Started by defeating both Stow-on-Side gyms.
    static createDarkestDayQuestLine() {
        const darkestDayQuestLine = new QuestLine('The Darkest Day', 'Stop the return of the Darkest Day!');
        const talkToMural1 = new TalkToNPCQuest(AncientMural1, 'Check out Stow-on-Side\'s mural.');
        darkestDayQuestLine.addQuest(talkToMural1); // 0
        const clearBede3 = new CustomQuest(1, 0, 'Stop Bede from destroying the mural!', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Bede3')]());
        darkestDayQuestLine.addQuest(clearBede3);
        const talkToMural2 = new TalkToNPCQuest(AncientMural2, '');
        const talkToSonia1 = new TalkToNPCQuest(StowonSideSonia, 'Talk to Sonia.');
        darkestDayQuestLine.addQuest(new MultipleQuestsQuest([
            talkToMural2,
            talkToSonia1,
        ], 'The mural was destroyed! See what you can learn by inspecting the ruins and speaking to the bystander.')); // Step 2
        const clearHop6 = new CustomQuest(1, 0, 'Defeat the next gym and catch up with Hop.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Hop6')]());
        darkestDayQuestLine.addQuest(clearHop6);
        const clearHop7 = new CustomQuest(1, 0, 'Continue your Gym Challenge and have a battle with Hop in Circhester.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Hop7')]());
        darkestDayQuestLine.addQuest(clearHop7);
        const talkToBath = new TalkToNPCQuest(HerosBath, '');
        const talkToHop1 = new TalkToNPCQuest(CirchesterHop, 'Talk to Hop.');
        const talkToSonia2 = new TalkToNPCQuest(CirchesterSonia, 'Talk to Sonia.');
        darkestDayQuestLine.addQuest(new MultipleQuestsQuest([
            talkToBath,
            talkToHop1,
            talkToSonia2,
        ], 'Learn more about the heroes who stopped The Darkest Day.')); // Step 5
        const clearHammerlockeGym = new CustomQuest(1, 0, 'Continue your Gym Challenge and gain entry to the Champion Cup.', () => App.game.statistics.gymsDefeated[GameConstants.getGymIndex('Hammerlocke')]());
        darkestDayQuestLine.addQuest(clearHammerlockeGym);
        const clearTrainerMarnie = new CustomQuest(1, 0, 'Defeat Marnie at Wyndon Stadium to reach the quarter-finals of the Champion Cup.', () => App.game.statistics.gymsDefeated[GameConstants.getGymIndex('Elite Trainer Marnie')]());
        darkestDayQuestLine.addQuest(clearTrainerMarnie);
        const clearGymLeaderBede = new CustomQuest(1, 0, 'Defeat Bede to reach the semi-finals of the Champion Cup.', () => App.game.statistics.gymsDefeated[GameConstants.getGymIndex('Elite Gym Leader Bede')]());
        darkestDayQuestLine.addQuest(clearGymLeaderBede);
        const clearTrainerHop = new CustomQuest(1, 0, 'Defeat Hop to reach the final of the Champion Cup!', () => App.game.statistics.gymsDefeated[GameConstants.getGymIndex('Elite Trainer Hop')]());
        darkestDayQuestLine.addQuest(clearTrainerHop);
        const clearRoseTower = new CustomQuest(1, 0, 'Champion Leon was seen heading to Rose Tower. Ascend Rose Tower so you can find him.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Rose Tower')]());
        darkestDayQuestLine.addQuest(clearRoseTower);
        const talktoRoseBroadcast = new TalkToNPCQuest(RoseBroadcast, 'The Championship Match is about to start, but Chairman Rose is broadcasting something to the Stadium? Listen to the broadcast.');
        darkestDayQuestLine.addQuest(talktoRoseBroadcast);
        const talktoHop2 = new TalkToNPCQuest(WyndonHop, 'Talk to Hop in Wyndon Stadium.');
        darkestDayQuestLine.addQuest(talktoHop2);
        const clearSlumberingWeald = new CustomQuest(1, 0, 'Chairman Rose has interrupted your fight with Leon and brought about the Darkest Day. Clear Slumbering Weald Shrine', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Slumbering Weald Shrine')]());
        darkestDayQuestLine.addQuest(clearSlumberingWeald);
        const talktoHop3 = new TalkToNPCQuest(SlumberingHop1, 'Talk to Hop in Slumbering Weald Shrine.');
        darkestDayQuestLine.addQuest(talktoHop3);
        const clearEnergyPlant = new CustomQuest(1, 0, 'Unfortunately, all you found at the Slumbering Weald was a rusty sword and shield. Go to the Energy Plant in Hammerlocke to put an end to Chairman Rose\'s plans!', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Energy Plant')]());
        darkestDayQuestLine.addQuest(clearEnergyPlant);
        const talktoRose = new TalkToNPCQuest(EnergyPlantRose, 'Talk to Chairman Rose in Energy Plant');
        darkestDayQuestLine.addQuest(talktoRose);
        const clearEternatus = new CustomQuest(1, 0, 'Leon failed to capture Eternatus. Defeat it before it can cause any more damage!', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Eternatus')]());
        darkestDayQuestLine.addQuest(clearEternatus);
        const TheDarkestDayReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Masterball, 1, false);
            Notifier.notify({
                title: darkestDayQuestLine.name,
                message: 'You found a Master Ball!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const clearTheDarkestDay = new CustomQuest(1, TheDarkestDayReward, 'Eternatus has ascended to its Eternamax form! Catch it to put an end to the Darkest Day!', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('The Darkest Day')]());
        darkestDayQuestLine.addQuest(clearTheDarkestDay);
        const talktoLeon = new TalkToNPCQuest(Leon, 'After all those interruptions, it\'s finally time for the Championship match! Talk to Leon at Wyndon Stadium.');
        darkestDayQuestLine.addQuest(talktoLeon);
        const clearLeon = new CustomQuest(1, 0, 'Defeat Leon to become the Champion of Galar!', () => App.game.statistics.gymsDefeated[GameConstants.getGymIndex('Champion Leon')]());
        darkestDayQuestLine.addQuest(clearLeon);
        App.game.quests.questLines().push(darkestDayQuestLine);
    }
    static createSwordShieldQuestLine() {
        const swordShieldQuestLine = new QuestLine('Sword and Shield', 'Stop the weapons from making a mess.', new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion), GameConstants.BulletinBoards.Galar);
        const talktoHop4 = new TalkToNPCQuest(SlumberingHop2, 'Talk to Hop in the Slumbering Weald.');
        swordShieldQuestLine.addQuest(talktoHop4);
        const clearHop8 = new CustomQuest(1, 0, 'Hop wants to fight you one more time at Slumbering Weald Shrine.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Hop8')]());
        swordShieldQuestLine.addQuest(clearHop8);
        const talktoSordwardShielbert1 = new TalkToNPCQuest(SordwardShielbert1, 'Talk to Sordward & Shielbert in the Slumbering Weald.');
        swordShieldQuestLine.addQuest(talktoSordwardShielbert1);
        const clearSordward1 = new CustomQuest(1, 0, 'Defeat Sordward.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Sordward1')]());
        const clearShielbert1 = new CustomQuest(1, 0, 'Defeat Shielbert.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Shielbert1')]());
        swordShieldQuestLine.addQuest(new MultipleQuestsQuest([
            clearSordward1,
            clearShielbert1,
        ], 'A pair with weird hair has taken the Rusted Sword and Rusted Shield. Defeat them to take them back.'));
        const clearRampagingTsareena = new CustomQuest(1, 0, 'Sordward and Shielbert are forcing Pokémon to rampage in Galar\'s Stadiums. First is a Tsareena in Turffield Stadium. Defeat it.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Rampaging Tsareena')]());
        swordShieldQuestLine.addQuest(clearRampagingTsareena);
        const clearRampagingGyarados = new CustomQuest(1, 0, 'Sordward and Shielbert have forced a Gyarados to rampage in Hulbury Stadium. Defeat it as well.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Rampaging Gyarados')]());
        swordShieldQuestLine.addQuest(clearRampagingGyarados);
        const clearRampagingTorkoal = new CustomQuest(1, 0, 'Sordward and Shielbert have forced a Torkoal to rampage in Motostoke Stadium. Defeat it as well.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Rampaging Torkoal')]());
        swordShieldQuestLine.addQuest(clearRampagingTorkoal);
        const talktoSordwardShielbert2 = new TalkToNPCQuest(SordwardShielbert2, 'Talk to Sordward & Shielbert in Wegehurst.');
        swordShieldQuestLine.addQuest(talktoSordwardShielbert2);
        const clearSordwardandShielbert = new CustomQuest(1, 0, 'Sordward and Shielbert are trying to steal the Wishing Stars at Professor Magnolia\'s Lab in Wedgehurst. Stop them.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Sordward & Shielbert')]());
        swordShieldQuestLine.addQuest(clearSordwardandShielbert);
        const clearRampagingConkeldurr = new CustomQuest(1, 0, 'Defeat Conkeldurr.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Rampaging Conkeldurr')]());
        const clearRampagingDusknoir = new CustomQuest(1, 0, 'Defeat Dusknoir.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Rampaging Dusknoir')]());
        swordShieldQuestLine.addQuest(new MultipleQuestsQuest([
            clearRampagingConkeldurr,
            clearRampagingDusknoir,
        ], 'Sordward and Shielbert have forced a Conkeldurr and a Dusknoir to rampage in Stow-on-Side Stadium. Defeat them both'));
        const clearGymLeaderBede2 = new CustomQuest(1, 0, 'There were rampaging Pokémon at Ballonlea Stadium but Bede already defeated them. There are no more rampaging Pokémon for now, and he wants to battle.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Gym Leader Bede')]());
        swordShieldQuestLine.addQuest(clearGymLeaderBede2);
        const clearRampagingGigalith = new CustomQuest(1, 0, 'Defeat Gigalith.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Rampaging Gigalith')]());
        const clearRampagingFroslass = new CustomQuest(1, 0, 'Defeat Froslass.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Rampaging Froslass')]());
        swordShieldQuestLine.addQuest(new MultipleQuestsQuest([
            clearRampagingGigalith,
            clearRampagingFroslass,
        ], 'Sordward and Shielbert have forced a Gigalith and a Froslass to rampage in Circhester Stadium. Defeat them both'));
        const clearGymLeaderMarnie = new CustomQuest(1, 0, 'There are no more rampaging Pokémon for now, and Marnie wants to battle you in Spikemuth.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Gym Leader Marnie')]());
        swordShieldQuestLine.addQuest(clearGymLeaderMarnie);
        const clearRampagingHaxorus = new CustomQuest(1, 0, 'Sordward and Shielbert have forced a Haxorus to rampage in Hammerlocke Stadium. Hopefully this is the last one.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Rampaging Haxorus')]());
        swordShieldQuestLine.addQuest(clearRampagingHaxorus);
        const talktoSordwardShielbert3 = new TalkToNPCQuest(SordwardShielbert3, 'Talk to Sordward & Shielbert in the Energy Plant.');
        swordShieldQuestLine.addQuest(talktoSordwardShielbert3);
        const clearSordward2 = new CustomQuest(1, 0, 'Defeat Sordward.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Sordward2')]());
        const clearShielbert2 = new CustomQuest(1, 0, 'Defeat Shielbert.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Shielbert2')]());
        swordShieldQuestLine.addQuest(new MultipleQuestsQuest([
            clearSordward2,
            clearShielbert2,
        ], 'Sordward and Shielbert are trying to use the Rusted Sword and Shield to make Zacian and Zamazenta go on a rampage in Energy Plant. Stop them.'));
        const talktoSordwardShielbert4 = new TalkToNPCQuest(SordwardShielbert4, 'Talk to Sordward & Shielbert in the Energy Plant.');
        swordShieldQuestLine.addQuest(talktoSordwardShielbert4);
        const clearRampagingZacian = new CustomQuest(1, 0, 'Defeat Zacian.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Rampaging Zacian')]());
        const clearRampagingZamazenta = new CustomQuest(1, 0, 'Defeat Zamazenta.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Rampaging Zamazenta')]());
        swordShieldQuestLine.addQuest(new MultipleQuestsQuest([
            clearRampagingZacian,
            clearRampagingZamazenta,
        ], 'Zacian and Zamazenta are rampaging in Energy Plant. Defeat them!'));
        const talktoPiers = new TalkToNPCQuest(Piers, 'Talk to Piers in the Energy Plant.');
        swordShieldQuestLine.addQuest(talktoPiers);
        const catchZacian = new CustomQuest(1, 0, 'Catch Zacian.', () => App.game.statistics.pokemonCaptured[pokemonMap['Zacian (Battle Hero)'].id](), 0);
        const catchZamazenta = new CustomQuest(1, 0, 'Catch Zamazenta.', () => App.game.statistics.pokemonCaptured[pokemonMap['Zamazenta (Battle Hero)'].id](), 0);
        swordShieldQuestLine.addQuest(new MultipleQuestsQuest([
            catchZacian,
            catchZamazenta,
        ], 'Now that they have calmed down, Zacian and Zamazenta seem to be willing to let you try to catch them!'));
        App.game.quests.questLines().push(swordShieldQuestLine);
    }
    static createDojoArmorQuestLine() {
        const dojoArmorQuestLine = new QuestLine('The Dojo\'s Armor', 'Obtain the Secret Armor of the Master Dojo.', new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion), GameConstants.BulletinBoards.Armor);
        const talktoMustard1 = new TalkToNPCQuest(Mustard1, 'Talk to Mustard at the Master Dojo.');
        dojoArmorQuestLine.addQuest(talktoMustard1);
        const clearMustard = new CustomQuest(1, 0, 'Mustard wants to test your ability at the Master Dojo. Defeat him.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Mustard')]());
        dojoArmorQuestLine.addQuest(clearMustard);
        const talktoMustard2 = new TalkToNPCQuest(Mustard2, 'Talk to Mustard at the Master Dojo.');
        dojoArmorQuestLine.addQuest(talktoMustard2);
        const catch6GalarianSlowpoke = new CaptureSpecificPokemonQuest('Galarian Slowpoke', 'Catch 6 Galarian Slowpoke.', 6, false, 0, undefined);
        dojoArmorQuestLine.addQuest(catch6GalarianSlowpoke);
        const talktoMustard3 = new TalkToNPCQuest(Mustard3, 'Talk to Mustard at the Master Dojo.');
        dojoArmorQuestLine.addQuest(talktoMustard3);
        const talktoMustard4 = new TalkToNPCQuest(Mustard4, 'It seems Mustard still wants to talk to you? Talk to Mustard again at the Master Dojo.');
        dojoArmorQuestLine.addQuest(talktoMustard4);
        const talktoKlara1 = new TalkToNPCQuest(Klara1, 'Talk to Klara.');
        const talktoAvery1 = new TalkToNPCQuest(Avery1, 'Talk to Avery.');
        dojoArmorQuestLine.addQuest(new MultipleQuestsQuest([
            talktoKlara1,
            talktoAvery1,
        ], 'Talk to Klara and Avery in Warm-Up Tunnel.'));
        const clearKlara2 = new CustomQuest(1, 0, 'Defeat Klara.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Klara2')]());
        const clearAvery2 = new CustomQuest(1, 0, 'Defeat Avery.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Avery2')]());
        dojoArmorQuestLine.addQuest(new MultipleQuestsQuest([
            clearKlara2,
            clearAvery2,
        ], 'You, Klara and Avery have happened upon the same Max Mushroom in Warm-Up Tunnel. Defeat them both to win it.'));
        const talktoMustard5 = new TalkToNPCQuest(Mustard5, 'Talk to Mustard at the Master Dojo.');
        dojoArmorQuestLine.addQuest(talktoMustard5);
        const talktoKlara2 = new TalkToNPCQuest(Klara2, 'Talk to Klara.');
        const talktoAvery2 = new TalkToNPCQuest(Avery2, 'Talk to Avery.');
        dojoArmorQuestLine.addQuest(new MultipleQuestsQuest([
            talktoKlara2,
            talktoAvery2,
        ], 'Talk to Klara and Avery in the Master Dojo.'));
        const clearKlara3 = new CustomQuest(1, 0, 'Defeat Klara.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Klara3')]());
        const clearAvery3 = new CustomQuest(1, 0, 'Defeat Avery', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Avery3')]());
        dojoArmorQuestLine.addQuest(new MultipleQuestsQuest([
            clearKlara3,
            clearAvery3,
        ], 'For the final trial, you must defeat both Klara and Avery on the Master Dojo Battle Court.'));
        const talktoMustard6 = new TalkToNPCQuest(Mustard6, 'Talk to Mustard at the Master Dojo.');
        dojoArmorQuestLine.addQuest(talktoMustard6);
        const catchKubfu = new CaptureSpecificPokemonQuest('Kubfu', 'Catch Kubfu', 1, false, 0, undefined);
        dojoArmorQuestLine.addQuest(catchKubfu);
        const talktoMustard7 = new TalkToNPCQuest(Mustard7, 'Talk to Mustard at the Master Dojo.');
        dojoArmorQuestLine.addQuest(talktoMustard7);
        const defeatDark = new CustomQuest(500, 0, 'Defeat 500 Dark type Pokémon.', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Dark)).map(p => App.game.statistics.pokemonDefeated[p.id]()).reduce((a, b) => a + b, 0);
        });
        const defeatWater = new CustomQuest(500, 0, 'Defeat 500 Water type Pokémon.', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Water)).map(p => App.game.statistics.pokemonDefeated[p.id]()).reduce((a, b) => a + b, 0);
        });
        dojoArmorQuestLine.addQuest(new MultipleQuestsQuest([
            defeatDark,
            defeatWater,
        ], 'Train Kubfu by defeating Dark and Water type Pokémon.'));
        const talktoMustard8 = new TalkToNPCQuest(Mustard8, 'Talk to Mustard at the Master Dojo.');
        dojoArmorQuestLine.addQuest(talktoMustard8);
        const catchDark = new CustomQuest(250, 0, 'Capture 250 Dark type Pokémon.', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Dark)).map(p => App.game.statistics.pokemonCaptured[p.id]()).reduce((a, b) => a + b, 0);
        });
        const catchWater = new CustomQuest(250, 0, 'Capture 250 Water type Pokémon.', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Water)).map(p => App.game.statistics.pokemonCaptured[p.id]()).reduce((a, b) => a + b, 0);
        });
        dojoArmorQuestLine.addQuest(new MultipleQuestsQuest([
            catchDark,
            catchWater,
        ], 'Train Kubfu more by catching Dark and Water type Pokémon.'));
        const talktoMustard9 = new TalkToNPCQuest(Mustard9, 'Talk to Mustard at the Master Dojo.');
        dojoArmorQuestLine.addQuest(talktoMustard9);
        const clearTowerofDarkness = new CustomQuest(1, 0, 'Defeat Tower of Darkness.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Tower of Darkness')]());
        const clearTowerofWaters = new CustomQuest(1, 0, 'Defeat Tower of Waters', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Tower of Waters')]());
        dojoArmorQuestLine.addQuest(new MultipleQuestsQuest([
            clearTowerofDarkness,
            clearTowerofWaters,
        ], 'Complete Kubfu\'s training in the Tower of Darkness and the Tower of Waters so it can evolve!'));
        const talktoMustard10 = new TalkToNPCQuest(Mustard10, 'Talk to Mustard at one of the Towers of Two Fists.');
        dojoArmorQuestLine.addQuest(talktoMustard10);
        App.game.quests.questLines().push(dojoArmorQuestLine);
    }
    static createJungleSecretsQuestLine() {
        const jungleSecretsQuestLine = new QuestLine('Secrets of the Jungle', 'Discover the secrets of the jungle.', new TemporaryBattleRequirement('Ash Ketchum Alola'), GameConstants.BulletinBoards.Armor);
        const talktoJungleAsh1 = new TalkToNPCQuest(JungleAsh1, 'Ash Ketchum wants to talk to you at the Master Dojo.');
        jungleSecretsQuestLine.addQuest(talktoJungleAsh1);
        const talktoJungleKoko1 = new TalkToNPCQuest(JungleKoko1, 'Talk to Ash Ketchum\'s friend, Koko, in Glimwood Tangle.');
        jungleSecretsQuestLine.addQuest(talktoJungleKoko1);
        const catchZarude = new CaptureSpecificPokemonQuest('Zarude', 'Catch the missing Zarude roaming around the Isle of Armor', 1, false, 0, undefined);
        jungleSecretsQuestLine.addQuest(catchZarude);
        const talktoJungleKoko2 = new TalkToNPCQuest(JungleKoko2, 'Take Zarude back to Koko in Glimwood Tangle.');
        jungleSecretsQuestLine.addQuest(talktoJungleKoko2);
        const clearZarudeTribe1 = new CustomQuest(1, 0, 'A group of Zarude are attacking you. Defeat them.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Zarude Tribe 1')]());
        jungleSecretsQuestLine.addQuest(clearZarudeTribe1);
        const talktoJungleKoko3 = new TalkToNPCQuest(JungleKoko3, 'Talk to Koko in Glimwood Tangle.');
        jungleSecretsQuestLine.addQuest(talktoJungleKoko3);
        const clearZarudeTribes = new CustomQuest(2, 0, 'Another two groups of Zarude are attacking you. Defeat them as well.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Zarude Tribe 2')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Zarude Tribe 3')]());
        jungleSecretsQuestLine.addQuest(clearZarudeTribes);
        const talktoJungleKoko4 = new TalkToNPCQuest(JungleKoko4, 'Talk to Koko in Glimwood Tangle.');
        jungleSecretsQuestLine.addQuest(talktoJungleKoko4);
        const talktoJungleAsh2 = new TalkToNPCQuest(JungleAsh2, 'Talk to Ash Ketchum at the Master Dojo.');
        jungleSecretsQuestLine.addQuest(talktoJungleAsh2);
        const clearGalarAsh = new CustomQuest(1, 0, 'Defeat Ash Ketchum outside the Master Dojo.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Ash Ketchum Galar')]());
        jungleSecretsQuestLine.addQuest(clearGalarAsh);
        const talktoJungleKoko5 = new TalkToNPCQuest(JungleKoko5, 'Talk to Koko in Glimwood Tangle.');
        jungleSecretsQuestLine.addQuest(talktoJungleKoko5);
        const clearZarudeDada = new CustomQuest(1, 0, 'A final Zarude wants to challenge you. Defeat Zarude (Dada)', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Zarude (Dada)')]());
        jungleSecretsQuestLine.addQuest(clearZarudeDada);
        const talktoJungleAsh3 = new TalkToNPCQuest(JungleAsh3, 'Talk to Ash Ketchum in Glimwood Tangle.');
        jungleSecretsQuestLine.addQuest(talktoJungleAsh3);
        const catchFloweringCelebi = new CaptureSpecificPokemonQuest('Flowering Celebi', 'Play with Flowering Celebi', 1, false, 0, undefined);
        jungleSecretsQuestLine.addQuest(catchFloweringCelebi);
        const talktoJungleKoko6 = new TalkToNPCQuest(JungleKoko6, 'Talk to Koko in Glimwood Tangle.');
        jungleSecretsQuestLine.addQuest(talktoJungleKoko6);
        App.game.quests.questLines().push(jungleSecretsQuestLine);
    }
    static createGalarCrownQuestLine() {
        const galarCrownQuestLine = new QuestLine('The Crown of Galar', 'Help the ancient king of Galar, Calyrex, return to its former glory.', new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion), GameConstants.BulletinBoards.Crown);
        const talktoCrownPeony1 = new TalkToNPCQuest(CrownPeony1, 'Talk to Peony to find out about the ancient king of Galar.');
        galarCrownQuestLine.addQuest(talktoCrownPeony1);
        const clearCalyrex = new CustomQuest(1, 0, 'A mysterious Pokémon has appeared and challenged you to a battle.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Calyrex')]());
        galarCrownQuestLine.addQuest(clearCalyrex);
        const talktoCalyrex1 = new TalkToNPCQuest(Calyrex1, 'The Pokémon you just fought has posessed Peony. Talk to it.');
        galarCrownQuestLine.addQuest(talktoCalyrex1);
        const oldCemetery = new DefeatPokemonsQuest(50, 0, 49, GameConstants.Region.galar, 'Old Cemetery');
        const snowslideSlope = new DefeatPokemonsQuest(50, 0, 54, GameConstants.Region.galar, 'Snowslide Slope');
        galarCrownQuestLine.addQuest(new MultipleQuestsQuest([
            oldCemetery,
            snowslideSlope,
        ], 'Calyrex is going to Old Cemetery and Snowslide Slope to grow a Shaderoot Carrot and an Iceroot Carrot. Protect it from wild Pokémon so it can concentrate.'));
        const talktoCalyrex2 = new TalkToNPCQuest(Calyrex2, 'After growing both carrots, Calyrex has returned to Freezington. Talk to it.');
        galarCrownQuestLine.addQuest(talktoCalyrex2);
        const clearSpectrier = new CustomQuest(1, 0, 'Defeat Spectrier.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Spectrier')]());
        const clearGlastrier = new CustomQuest(1, 0, 'Defeat Glastrier.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Glastrier')]());
        galarCrownQuestLine.addQuest(new MultipleQuestsQuest([
            clearSpectrier,
            clearGlastrier,
        ], 'Fight Calyrex\'s steeds to get them out of Freezington!'));
        const talktoCalyrex3 = new TalkToNPCQuest(Calyrex3, 'Talk to Calyrex again.');
        galarCrownQuestLine.addQuest(talktoCalyrex3);
        const catchSpectrier = new CaptureSpecificPokemonQuest('Spectrier', 'Catch Spectrier.', 1, false, 0, undefined);
        const catchGlastrier = new CaptureSpecificPokemonQuest('Glastrier', 'Catch Glastrier.', 1, false, 0, undefined);
        galarCrownQuestLine.addQuest(new MultipleQuestsQuest([
            catchSpectrier,
            catchGlastrier,
        ], 'Spectrier and Glastrier are now roaming the Crown Tundra. Catch them when the opportunity arises!'));
        const UnityReward = () => {
            App.game.keyItems.gainKeyItem(KeyItemType.Reins_of_unity, true);
            $('#npcModal').one('hidden.bs.modal', () => {
                KeyItemController.showGainModal(KeyItemType.Reins_of_unity);
            });
        };
        const talktoCalyrex4 = new TalkToNPCQuest(Calyrex4, 'Now that you have captured both of its steeds, talk to Calyrex at the Crown Shrine.', UnityReward);
        galarCrownQuestLine.addQuest(talktoCalyrex4);
        const catchCalyrex = new CaptureSpecificPokemonQuest('Calyrex', 'Now that you have found and caught Glastrier and Spectrier, Calyrex wants to challenge you at Crown Shrine. Catch it!', 1, false, 0, undefined);
        galarCrownQuestLine.addQuest(catchCalyrex);
        const talktoCrownPeony2 = new TalkToNPCQuest(CrownPeony2, 'Now that you have captured Calyrex, go report back to Peony!');
        galarCrownQuestLine.addQuest(talktoCrownPeony2);
        App.game.quests.questLines().push(galarCrownQuestLine);
    }
    static createDynaTreeBirdsQuestLine() {
        const dynaTreeBirdsQuestLine = new QuestLine('The Birds of the Dyna Tree', 'Find the Legendary birds of the Dyna Tree.', new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion), GameConstants.BulletinBoards.Crown);
        const talktoBirdPeony1 = new TalkToNPCQuest(BirdPeony1, 'Talk to Peony to find out about some legendary bird sightings.');
        dynaTreeBirdsQuestLine.addQuest(talktoBirdPeony1);
        const clearDynaTreeHill = new CustomQuest(1, 0, 'Some unknown bird Pokémon have been sighted near Dyna Tree Hill in Ballimere Lake. Explore the area to see for yourself.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Dyna Tree Hill')]());
        dynaTreeBirdsQuestLine.addQuest(clearDynaTreeHill);
        const clearDynaTreeBirds = new CustomQuest(1, 0, 'You witnessed 3 powerful looking bird pokemon resembling Articuno, Zapdos and Moltres fighting over the fruit of the Dyna Tree. Upon noticing you, they attack!', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Dyna Tree Birds')]());
        dynaTreeBirdsQuestLine.addQuest(clearDynaTreeBirds);
        const talktoBirdPeony2 = new TalkToNPCQuest(BirdPeony2, 'Tell Peony about your encounter with the birds resembling Articuno, Zapdos and Moltres.');
        dynaTreeBirdsQuestLine.addQuest(talktoBirdPeony2);
        const chaseGalarianArticuno = new CustomQuest(3, 0, 'Search for Galarian Articuno in the Crown Tundra.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Galarian Articuno 1')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Galarian Articuno 2')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Galarian Articuno 3')]());
        const chaseGalarianZapdos = new CustomQuest(3, 0, 'Search for Galarian Zapdos in the Wild Area of Southern Galar.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Galarian Zapdos 1')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Galarian Zapdos 2')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Galarian Zapdos 3')]());
        const chaseGalarianMoltres = new CustomQuest(3, 0, 'Search for Galarian Moltres in the Isle of Armor.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Galarian Moltres 1')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Galarian Moltres 2')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Galarian Moltres 3')]());
        dynaTreeBirdsQuestLine.addQuest(new MultipleQuestsQuest([
            chaseGalarianArticuno,
            chaseGalarianZapdos,
            chaseGalarianMoltres,
        ], 'Galarian Articuno, Zapdos and Moltres have fled to the Crown Tundra, Southern Galar and the Isle of Armor respectively. Search for them.'));
        const talktoBirdPeony3 = new TalkToNPCQuest(BirdPeony3, 'You defeated Galarian Articuno, Zapdos and Moltres multiple times each. Ask Peony what to do next.');
        dynaTreeBirdsQuestLine.addQuest(talktoBirdPeony3);
        const catchGalarianArticuno = new CaptureSpecificPokemonQuest('Galarian Articuno', 'Catch Galarian Articuno.', 1, false, 0, undefined);
        const catchGalarianZapdos = new CaptureSpecificPokemonQuest('Galarian Zapdos', 'Catch Galarian Zapdos.', 1, false, 0, undefined);
        const catchGalarianMoltres = new CaptureSpecificPokemonQuest('Galarian Moltres', 'Catch Galarian Moltres.', 1, false, 0, undefined);
        dynaTreeBirdsQuestLine.addQuest(new MultipleQuestsQuest([
            catchGalarianArticuno,
            catchGalarianZapdos,
            catchGalarianMoltres,
        ], 'Galarian Articuno, Zapdos and Moltres are now roaming in the Crown Tundra, Southern Galar and the Isle of Armor respectively. Catch them when the opportunity arises!'));
        const talktoBirdPeony4 = new TalkToNPCQuest(BirdPeony4, 'Now that you have captured Galarian Articuno, Zapdos and Moltres, go report back to Peony!');
        dynaTreeBirdsQuestLine.addQuest(talktoBirdPeony4);
        App.game.quests.questLines().push(dynaTreeBirdsQuestLine);
    }
    static createAncientGolemsQuestLine() {
        const ancientGolemsQuestLine = new QuestLine('The Ancient Golems', 'Discover the ancient Golems in the ruins of the Crown Tundra.', new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion), GameConstants.BulletinBoards.Crown);
        const talktoGolemPeony1 = new TalkToNPCQuest(GolemPeony1, 'Talk to Peony to find out about some ancient ruins.');
        ancientGolemsQuestLine.addQuest(talktoGolemPeony1);
        const threePointPass = new DefeatPokemonsQuest(100, 0, 52, GameConstants.Region.galar, 'Peony told you of a peculiar ruin located at Three-Point Pass. Explore the area to find it.');
        ancientGolemsQuestLine.addQuest(threePointPass);
        const talktoGolemPeony2 = new TalkToNPCQuest(GolemPeony2, 'The ruins were locked, go report back to Peony.');
        ancientGolemsQuestLine.addQuest(talktoGolemPeony2);
        const clearRockPeakRuins = new CustomQuest(10, 0, 'Clear Rock Peak Ruins 10 times.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Rock Peak Ruins')]());
        const clearIcebergRuins = new CustomQuest(10, 0, 'Clear Iceberg Ruins 10 times.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Iceberg Ruins')]());
        const clearIronRuins = new CustomQuest(10, 0, 'Clear Iron Ruins 10 times.', () => App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex('Iron Ruins')]());
        ancientGolemsQuestLine.addQuest(new MultipleQuestsQuest([
            clearRockPeakRuins,
            clearIcebergRuins,
            clearIronRuins,
        ], 'Clear Rock Peak Ruins, Iceberg Ruins and Iron ruins 10 times each.'));
        const talktoGolemPeony3 = new TalkToNPCQuest(GolemPeony3, 'The ruins are still locked, report to Peony.');
        ancientGolemsQuestLine.addQuest(talktoGolemPeony3);
        const catchRegirock = new CaptureSpecificPokemonQuest('Regirock', 'Catch Regirock.', 1, false, 0, undefined);
        const catchRegice = new CaptureSpecificPokemonQuest('Regice', 'Catch Regice.', 1, false, 0, undefined);
        const catchRegisteel = new CaptureSpecificPokemonQuest('Registeel', 'Catch Registeel.', 1, false, 0, undefined);
        ancientGolemsQuestLine.addQuest(new MultipleQuestsQuest([
            catchRegirock,
            catchRegice,
            catchRegisteel,
        ], 'Catch Regirock, Regice and Registeel in the Rock Peak Ruins, Iceberg Ruins and Iron Ruins respectively.'));
        const talktoGolemPeony4 = new TalkToNPCQuest(GolemPeony4, 'You have captured Regirock, Regice and Registeel, now go report back to Peony.');
        ancientGolemsQuestLine.addQuest(talktoGolemPeony4);
        const clearRegigigas = new CustomQuest(1, 0, 'Defeat Regigigas at Giants bed!', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Regigigas')]());
        const catchRegigigas = new CaptureSpecificPokemonQuest('Regigigas', 'Catch Regigigas.', 1, false, 0, undefined);
        ancientGolemsQuestLine.addQuest(new MultipleQuestsQuest([
            clearRegigigas,
            catchRegigigas,
        ], 'After you caught three of the legendary golems it created, Regigigas appeared in Giants Bed. Defeat and catch it!'));
        const talktoGolemPeony5 = new TalkToNPCQuest(GolemPeony5, 'You have captured Regigigas, now go report back to Peony.');
        ancientGolemsQuestLine.addQuest(talktoGolemPeony5);
        const catchRegieleki = new CaptureSpecificPokemonQuest('Regieleki', 'Catch Regieleki.', 1, false, 0, undefined);
        const catchRegidrago = new CaptureSpecificPokemonQuest('Regidrago', 'Catch Regidrago.', 1, false, 0, undefined);
        ancientGolemsQuestLine.addQuest(new MultipleQuestsQuest([
            catchRegieleki,
            catchRegidrago,
        ], 'Now that it has finally unlocked, catch Regieleki and Regidrago in the Split-Decision Ruins!'));
        const talktoGolemPeony6 = new TalkToNPCQuest(GolemPeony6, 'You finally captured Regieleki and Regidrago. Go report back to Peony!');
        ancientGolemsQuestLine.addQuest(talktoGolemPeony6);
        App.game.quests.questLines().push(ancientGolemsQuestLine);
    }
    static createOriginalColorMagearnaQuestLine() {
        const magearnaQuestLine = new QuestLine('A Mystery Gift', 'You have recieved a Mystery Gift.', new MultiRequirement([
            new CaughtUniqueShinyPokemonsByRegionRequirement(GameConstants.Region.kanto),
            new CaughtUniqueShinyPokemonsByRegionRequirement(GameConstants.Region.johto),
            new CaughtUniqueShinyPokemonsByRegionRequirement(GameConstants.Region.hoenn),
            new CaughtUniqueShinyPokemonsByRegionRequirement(GameConstants.Region.sinnoh),
            new CaughtUniqueShinyPokemonsByRegionRequirement(GameConstants.Region.unova),
            new CaughtUniqueShinyPokemonsByRegionRequirement(GameConstants.Region.kalos),
            new CaughtUniqueShinyPokemonsByRegionRequirement(GameConstants.Region.alola),
            new CaughtUniqueShinyPokemonsByRegionRequirement(GameConstants.Region.galar),
        ]), GameConstants.BulletinBoards.Galar);
        const mysteryGift = new TalkToNPCQuest(MagearnaMysteryGift, 'Go home and open your Mystery Gift', () => {
            App.game.party.gainPokemonById(801.1);
            Notifier.notify({
                title: magearnaQuestLine.name,
                message: 'You obtained Magearna (Original Color)!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        });
        magearnaQuestLine.addQuest(mysteryGift);
        App.game.quests.questLines().push(magearnaQuestLine);
    }
    // Event QuestLines
    // Open the game between April 8-29.
    static createFindSurpriseTogepiForEasterQuestLine() {
        const findSurpriseTogepiForEasterQuestLine = new QuestLine('Togepi Egg Hunt', 'A strange Togepi has been spotted, but cannot be found!');
        const surpriseTogepi = pokemonMap['Surprise Togepi'];
        const togepiInKantoSetup = () => {
            dungeonList['Viridian Forest'].bossList.push(new DungeonTrainer('Egg Hunter', [new GymPokemon('Surprise Togepi', 300000, 100)], { weight: 1, requirement: new GymBadgeRequirement(BadgeEnums.Elite_KantoChampion) }));
            App.game.statistics.pokemonDefeated[surpriseTogepi.id](0);
        };
        const afterDefeatingTogepiInKanto = () => {
            Notifier.notify({
                title: findSurpriseTogepiForEasterQuestLine.name,
                message: 'Seems like this was just an Easter egg after all...',
                image: `assets/images/profile/trainer-${App.game.profile.trainer() || 0}.png`,
                type: NotificationConstants.NotificationOption.info,
                timeout: 3e4,
            });
            dungeonList['Viridian Forest'].bossList = dungeonList['Viridian Forest'].bossList.filter(boss => boss.name != 'Egg Hunter');
        };
        const defeatTogepiInKanto = new CustomQuest(1, afterDefeatingTogepiInKanto, 'A strange Togepi has been seen around Kanto. Go look for it! Maybe Erika knows more.', App.game.statistics.pokemonDefeated[surpriseTogepi.id], 0, togepiInKantoSetup);
        findSurpriseTogepiForEasterQuestLine.addQuest(defeatTogepiInKanto);
        const togepiInJohtoSetup = () => {
            dungeonList['Ilex Forest'].bossList.push(new DungeonTrainer('Egg Hunter', [new GymPokemon('Surprise Togepi', 900000, 100)], { weight: 1, requirement: new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion) }));
        };
        const afterDefeatingTogepiInJohto = () => {
            Notifier.notify({
                title: findSurpriseTogepiForEasterQuestLine.name,
                message: 'I swear that was a Togepi... well, maybe not.',
                image: `assets/images/profile/trainer-${App.game.profile.trainer() || 0}.png`,
                type: NotificationConstants.NotificationOption.info,
                timeout: 3e4,
            });
            dungeonList['Ilex Forest'].bossList = dungeonList['Ilex Forest'].bossList.filter(boss => boss.name != 'Egg Hunter');
        };
        const encounterSurpriseTogepiInJohto = new CustomQuest(1, afterDefeatingTogepiInJohto, 'Another report just came in, stating that they saw a strange egg boarding the ferry to Johto!', App.game.statistics.pokemonDefeated[surpriseTogepi.id], 1, togepiInJohtoSetup);
        findSurpriseTogepiForEasterQuestLine.addQuest(encounterSurpriseTogepiInJohto);
        const togepiInHoennSetup = () => {
            dungeonList['Petalburg Woods'].bossList.push(new DungeonTrainer('Egg Hunter', [new GymPokemon('Surprise Togepi', 2700000, 100)], { weight: 1, requirement: new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion) }));
        };
        const afterDefeatingTogepiInHoenn = () => {
            App.game.party.gainPokemonById(surpriseTogepi.id);
            Notifier.notify({
                title: findSurpriseTogepiForEasterQuestLine.name,
                message: 'You found the special Togepi!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
            dungeonList['Petalburg Woods'].bossList = dungeonList['Petalburg Woods'].bossList.filter(boss => boss.name != 'Egg Hunter');
        };
        const encounterTogepiInHoenn = new CustomQuest(1, afterDefeatingTogepiInHoenn, 'There is a big Egg Hunt going on in Petalburg Woods right now; maybe you should take a look?', App.game.statistics.pokemonDefeated[surpriseTogepi.id], 2, togepiInHoennSetup);
        findSurpriseTogepiForEasterQuestLine.addQuest(encounterTogepiInHoenn);
        App.game.quests.questLines().push(findSurpriseTogepiForEasterQuestLine);
    }
    // Open the game on April 1.
    static createHoopaDayPikabluQuestLine() {
        const hoopaDayPikabluQuestLine = new QuestLine('How blu mouse?', 'Apparently a strange blue mouse-like Pokémon might be out there somewhere?');
        const PikabluCatch = new CaptureSpecificPokemonQuest('Marill', 'Catch Pikablu.', 1, false, 5000, undefined);
        hoopaDayPikabluQuestLine.addQuest(PikabluCatch);
        App.game.quests.questLines().push(hoopaDayPikabluQuestLine);
    }
    static isQuestLineCompleted(name) {
        var _a;
        return ((_a = App.game.quests.getQuestLine(name)) === null || _a === void 0 ? void 0 : _a.state()) == QuestLineState.ended;
    }
    static loadQuestLines() {
        this.createTutorial();
        this.createRocketKantoQuestLine();
        this.createUndergroundQuestLine();
        this.createBillSeviiQuestLine();
        this.createPersonsofInterestQuestLine();
        this.createRocketJohtoQuestLine();
        this.createJohtoBeastsQuestLine();
        this.createJohtoSuicuneQuestLine();
        this.createlugiaJohtoQuestLine();
        this.createhoohJohtoQuestLine();
        this.createCelebiJohtoQuestLine();
        this.createAquaMagmaHoennQuestLine();
        this.createDeoxysQuestLine();
        this.createRubySapphireSeviiQuestLine();
        this.createPinkanThemeparkQuestLine();
        this.createRegiTrioQuestLine();
        this.createGalacticSinnohQuestLine();
        this.createPlasmaUnovaQuestLine();
        this.createDetectivePikachuQuestLine();
        this.createVivillonQuestLine();
        this.createPrincessDiancieQuestLine();
        this.createAshKetchumQuestLine();
        this.createSkullAetherAlolaQuestLine();
        this.createMinasTrialAlolaQuestLine();
        this.createUltraBeastQuestLine();
        this.createDarkestDayQuestLine();
        this.createSwordShieldQuestLine();
        this.createDojoArmorQuestLine();
        this.createJungleSecretsQuestLine();
        this.createGalarCrownQuestLine();
        this.createDynaTreeBirdsQuestLine();
        this.createAncientGolemsQuestLine();
        this.createOriginalColorMagearnaQuestLine();
        this.createFindSurpriseTogepiForEasterQuestLine();
        this.createHoopaDayPikabluQuestLine();
    }
}
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Saveable.d.ts" />
class Quests {
    constructor() {
        this.saveKey = 'quests';
        this.defaults = {
            xp: 0,
            refreshes: 0,
            freeRefresh: false,
        };
        this.xp = ko.observable(0).extend({ numeric: 0 });
        this.refreshes = ko.observable(0);
        this.lastRefresh = new Date();
        this.lastRefreshLevel = 0;
        this.lastRefreshRegion = 0;
        this.freeRefresh = ko.observable(false);
        this.questList = ko.observableArray();
        this.questLines = ko.observableArray();
        this.level = ko.pureComputed(() => {
            return this.xpToLevel(this.xp());
        });
        this.questSlots = ko.pureComputed(() => {
            // Minimum of 1, Maximum of 4
            return Math.min(4, Math.max(1, Math.floor((this.level() + 5) / 5)));
        });
        // Get current quests by status
        this.completedQuests = ko.pureComputed(() => {
            return this.questList().filter(quest => quest.isCompleted());
        });
        this.currentQuests = ko.pureComputed(() => {
            return this.questList().filter(quest => quest.inProgress() && !quest.claimed());
        });
        this.incompleteQuests = ko.pureComputed(() => {
            return this.questList().filter(quest => !quest.isCompleted());
        });
        this.sortedQuestList = ko.pureComputed(() => {
            const list = [...this.questList()];
            return list.sort(Quests.questCompareBy);
        });
    }
    static questCompareBy(quest1, quest2) {
        if (Quests.getQuestSortStatus(quest1) < Quests.getQuestSortStatus(quest2)) {
            return -1;
        }
        else if (Quests.getQuestSortStatus(quest1) > Quests.getQuestSortStatus(quest2)) {
            return 1;
        }
        else if (quest1.pointsReward > quest2.pointsReward) {
            return -1;
        }
        else if (quest1.pointsReward < quest2.pointsReward) {
            return 1;
        }
        return 0;
    }
    static getQuestSortStatus(quest) {
        if (quest.isCompleted() && !quest.claimed()) {
            return 0;
        }
        else if (quest.isCompleted()) {
            return 3;
        }
        else if (quest.inProgress()) {
            return 1;
        }
        return 2;
    }
    /**
     * Gets a quest line by name
     * @param name The quest line name
     */
    getQuestLine(name) {
        return this.questLines().find(ql => ql.name.toLowerCase() == name.toLowerCase());
    }
    beginQuest(index) {
        const quest = this.questList()[index];
        // Check if we can start a new quest, and the requested quest isn't started or completed
        if (this.canStartNewQuest() && quest && !quest.inProgress() && !quest.isCompleted()) {
            quest.begin();
            if ((Settings.getSetting('hideQuestsOnFull').value) && this.currentQuests().length >= this.questSlots()) {
                $('#QuestModal').modal('hide');
            }
        }
        else {
            Notifier.notify({
                message: 'You cannot start more quests.',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    quitQuest(index, shouldConfirm = false) {
        // Check if we can quit this quest
        const quest = this.questList()[index];
        if (quest && quest.inProgress()) {
            quest.quit(shouldConfirm);
        }
        else {
            Notifier.notify({
                message: 'You cannot quit this quest.',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    claimQuest(index) {
        // Check if we can claim this quest
        const quest = this.questList()[index];
        if (quest && quest.isCompleted() && !quest.claimed()) {
            quest.claim();
            // Once the player completes every available quest, refresh the list for free
            if (this.allQuestClaimed()) {
                this.refreshQuests(true);
                // Give player a free refresh
                this.freeRefresh(true);
                Notifier.notify({
                    message: '<i>All quests completed. Your quest list has been refreshed.</i>',
                    type: NotificationConstants.NotificationOption.info,
                    timeout: 1e4,
                    setting: NotificationConstants.NotificationSetting.General.quest_completed,
                });
            }
            // Track quest completion and total quest completed
            LogEvent('completed quest', 'quests', `level (${this.level()})`, App.game.statistics.questsCompleted());
        }
        else {
            console.trace('cannot claim quest..');
            Notifier.notify({
                message: 'You cannot claim this quest.',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    addXP(amount) {
        if (isNaN(amount)) {
            return;
        }
        const currentLevel = this.level();
        GameHelper.incrementObservable(this.xp, amount);
        // Refresh the list each time a player levels up
        if (this.level() > currentLevel) {
            Notifier.notify({
                message: `Your quest level has increased to ${this.level()}!\n<i>You have a free quest refresh.</i>`,
                type: NotificationConstants.NotificationOption.success,
                timeout: 1e4,
                sound: NotificationConstants.NotificationSound.Quests.quest_level_increased,
            });
            this.freeRefresh(true);
            App.game.logbook.newLog(LogBookTypes.QUEST, `Quest level increased to level ${this.level()}!`);
            // Track when users gains a quest level and how long it took in seconds
            LogEvent('gain quest level', 'quests', `level (${this.level()})`, App.game.statistics.secondsPlayed());
        }
    }
    generateQuestList(date = new Date(), level = this.level()) {
        if (this.lastRefresh.toDateString() != date.toDateString()) {
            this.refreshes(0);
        }
        this.lastRefresh = date;
        this.lastRefreshLevel = level;
        this.lastRefreshRegion = player.highestRegion();
        this.currentQuests().forEach(quest => quest.quit());
        this.questList(QuestHelper.generateQuestList(this.generateSeed(date, level), GameConstants.QUESTS_PER_SET));
    }
    generateSeed(date = new Date(), level = this.level()) {
        return Number(level * (date.getFullYear() + this.refreshes() * 10) * date.getDate() + 1000 * date.getMonth() + 100000 * date.getDate());
    }
    refreshQuests(free = this.freeRefresh(), shouldConfirm = false) {
        return __awaiter(this, void 0, void 0, function* () {
            if (free || this.canAffordRefresh()) {
                if (!free) {
                    if (shouldConfirm && !(yield Notifier.confirm({
                        title: 'Refresh Quest List',
                        message: 'Are you sure you want to refresh the quest list?',
                        type: NotificationConstants.NotificationOption.warning,
                        confirm: 'Refresh',
                    }))) {
                        return;
                    }
                    App.game.wallet.loseAmount(this.getRefreshCost());
                }
                // Track when users refreshes the quest list and how much it cost
                LogEvent('refresh quest list', 'quests', `level (${this.level()})`, free ? 0 : this.getRefreshCost().amount);
                this.freeRefresh(false);
                GameHelper.incrementObservable(this.refreshes);
                this.generateQuestList();
            }
            else {
                Notifier.notify({
                    message: 'You cannot afford to do that!',
                    type: NotificationConstants.NotificationOption.danger,
                });
            }
        });
    }
    resetRefreshes() {
        this.refreshes(0);
    }
    canAffordRefresh() {
        return App.game.wallet.hasAmount(this.getRefreshCost());
    }
    /**
     * Formula for the Money cost for refreshing quests
     * @returns 0 when all quests are complete, ~1 million when none are
     */
    getRefreshCost() {
        // If we have a free refersh, just assume all the quest are completed
        const notComplete = this.freeRefresh() ? 0 : this.incompleteQuests().length;
        const cost = Math.floor((250000 * Math.LOG10E * Math.log(Math.pow(notComplete, 4) + 1)) / 1000) * 1000;
        return new Amount(Math.max(0, Math.min(1e6, cost)), GameConstants.Currency.money);
    }
    canStartNewQuest() {
        // Check we haven't already used up all quest slots
        if (this.currentQuests().length >= this.questSlots()) {
            return false;
        }
        // Check at least 1 quest is either not completed or in progress
        if (this.questList().find(quest => !quest.isCompleted() && !quest.inProgress())) {
            return true;
        }
        return false;
    }
    /**
     * Determines if all quests have been completed and claimed.
     */
    allQuestClaimed() {
        return !this.incompleteQuests().length && !this.currentQuests().length;
    }
    /**
     * Formula for the amount of exp to increase quest level.
     * 1000 XP is needed for level 2, and then increases 20% each level.
     * @param level The current quest level
     */
    levelToXP(level) {
        if (level >= 2) {
            // Sum of geometric series
            const a = 1000, r = 1.2, n = level - 1;
            const sum = a * (Math.pow(r, n) - 1) / (r - 1);
            return Math.ceil(sum);
        }
        else {
            return 0;
        }
    }
    xpToLevel(xp) {
        const sum = xp, a = 1000, r = 1.2;
        const n = Math.log(1 + ((r - 1) * sum) / a) / Math.log(r);
        return Math.floor(n + 1);
    }
    percentToNextQuestLevel() {
        const current = this.level();
        const requiredForCurrent = this.levelToXP(current);
        const requiredForNext = this.levelToXP(current + 1);
        return 100 * (this.xp() - requiredForCurrent) / (requiredForNext - requiredForCurrent);
    }
    isDailyQuestsUnlocked() {
        return QuestLineHelper.isQuestLineCompleted('Tutorial Quests');
    }
    loadQuestList(questList) {
        // Sanity Check
        this.questList.removeAll();
        questList.forEach(questData => {
            try {
                if (questData.hasOwnProperty('name')) {
                    const quest = QuestHelper.createQuest(questData.name, questData.data);
                    quest.fromJSON(questData);
                    this.questList.push(quest);
                }
                else {
                    this.questList.push(new CapturePokemonsQuest(10, 1));
                }
            }
            catch (e) {
                console.error(`Quest "${questData.name}" failed to load`, questData);
                this.questList.push(new CapturePokemonsQuest(10, 1));
            }
        });
    }
    loadQuestLines(questLines) {
        questLines.forEach(questLine => {
            try {
                if (questLine.state == QuestLineState.inactive) {
                    return;
                }
                const ql = this.getQuestLine(questLine.name);
                if (ql) {
                    ql.state(questLine.state);
                    if (questLine.state == QuestLineState.started) {
                        if (ql.quests()[questLine.quest] instanceof MultipleQuestsQuest) {
                            ql.resumeAt(questLine.quest, 0);
                            ql.curQuestObject().quests.forEach((q, i) => {
                                var _a;
                                q.initial((_a = questLine === null || questLine === void 0 ? void 0 : questLine.initial[i]) !== null && _a !== void 0 ? _a : 0);
                            });
                        }
                        else {
                            ql.resumeAt(questLine.quest, questLine.initial);
                        }
                    }
                }
            }
            catch (e) {
                console.error(`Quest line "${questLine.name}" failed to load`, questLine);
            }
        });
    }
    toJSON() {
        return {
            xp: this.xp(),
            refreshes: this.refreshes(),
            lastRefresh: this.lastRefresh,
            lastRefreshLevel: this.lastRefreshLevel,
            lastRefreshRegion: this.lastRefreshRegion,
            freeRefresh: this.freeRefresh(),
            questList: this.questList().map(quest => quest.toJSON()),
            questLines: this.questLines().filter(q => q.state()),
        };
    }
    fromJSON(json) {
        // Generate the questLines (statistics not yet loaded when constructing)
        QuestLineHelper.loadQuestLines();
        if (!json) {
            // Generate the questList
            this.generateQuestList();
            return;
        }
        this.xp(json.xp || this.defaults.xp);
        this.refreshes(json.refreshes || this.defaults.refreshes);
        this.lastRefresh = json.lastRefresh ? new Date(json.lastRefresh) : new Date();
        this.lastRefreshLevel = json.lastRefreshLevel || this.level();
        this.lastRefreshRegion = json.lastRefreshRegion || player.highestRegion();
        if (this.lastRefresh.toDateString() != new Date().toDateString()) {
            this.freeRefresh(true);
        }
        else {
            this.freeRefresh(json.freeRefresh || this.defaults.freeRefresh);
        }
        if (!json.hasOwnProperty('questList') || !json.questList.length) {
            // Generate new quest list
            this.generateQuestList(this.lastRefresh, this.lastRefreshLevel);
        }
        else {
            // Load saved quests
            this.loadQuestList(json.questList);
        }
        // Load our quest line progress
        if (json.questLines) {
            this.loadQuestLines(json.questLines);
        }
    }
}
/// <reference path="../Quest.ts" />
class BuyPokeballsQuest extends Quest {
    constructor(amount, reward, pokeball) {
        super(amount, reward);
        this.pokeball = pokeball;
        this.focus = App.game.statistics.pokeballsPurchased[this.pokeball];
    }
    get description() {
        return `Buy ${this.amount.toLocaleString('en-US')} ${GameConstants.Pokeball[this.pokeball]}s.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        json.data.push(this.pokeball);
        return json;
    }
}
/// <reference path="../Quest.ts" />
class CaptureSpecificPokemonQuest extends Quest {
    constructor(pokemonName, description = undefined, capturesNeeded = 1, includeBreeding = false, reward = undefined, onload = undefined) {
        const qpReward = typeof reward == 'number' ? reward : 0;
        super(capturesNeeded, qpReward);
        if (typeof reward != 'number') {
            this.customReward = reward;
        }
        this.pokemon = pokemonMap[pokemonName];
        this.customDescription = description;
        this.focus = ko.pureComputed(() => App.game.statistics.pokemonCaptured[this.pokemon.id]() - (includeBreeding ? 0 : App.game.statistics.pokemonHatched[this.pokemon.id]()));
        this._onLoad = onload;
    }
    get description() {
        if (this.customDescription) {
            return this.customDescription;
        }
        if (this.amount === 1) {
            return `Capture ${this.pokemon.name}.`;
        }
        return `Capture ${this.pokemon.name} ${this.amount} times.`;
    }
    claim() {
        if (this.customReward !== undefined) {
            this.customReward();
        }
        return super.claim();
    }
}
class CustomQuest extends Quest {
    constructor(amount, reward, description, focus, initialValue, onLoad) {
        const qpReward = typeof reward == 'number' ? reward : 0;
        super(amount, qpReward);
        this.customDescription = description;
        this.focus = focus;
        this.initialValue = initialValue;
        this.customReward = typeof reward == 'function' ? reward : undefined;
        this._onLoad = typeof onLoad == 'function' ? onLoad : undefined;
    }
    begin() {
        this.onLoad();
        if (this.initialValue !== undefined) {
            this.initial(this.initialValue);
        }
        else {
            super.begin();
        }
    }
    claim() {
        if (this.customReward !== undefined) {
            this.customReward();
        }
        return super.claim();
    }
}
/// <reference path="../Quest.ts" />
class MultipleQuestsQuest extends Quest {
    constructor(quests, description, reward, questCompletedRequired) {
        super(questCompletedRequired !== null && questCompletedRequired !== void 0 ? questCompletedRequired : quests.length, typeof reward == 'number' ? reward : 0);
        this.quests = quests;
        // Hide the quest ready to claim notifications
        quests.forEach((q) => q.autoComplete = true);
        this.customReward = typeof reward == 'function' ? reward : undefined;
        this.customDescription = description;
        this.focus = ko.pureComputed(() => {
            return quests.filter(q => q.isCompleted()).length;
        });
    }
    begin() {
        this.onLoad();
        this.quests.forEach(q => {
            q.begin();
        });
        super.begin();
    }
    claim() {
        if (this.customReward) {
            this.customReward();
        }
        return super.claim();
    }
}
class TalkToNPCQuest extends Quest {
    constructor(npc, description, reward = 0, onLoad) {
        const qpReward = typeof reward == 'number' ? reward : 0;
        super(1, qpReward);
        this.npc = npc;
        this.customDescription = description;
        this.customReward = typeof reward == 'function' ? reward : undefined;
        this._onLoad = typeof onLoad == 'function' ? onLoad : undefined;
        this.focus = npc.talkedTo;
    }
    begin() {
        this.onLoad();
        this.npc.talkedTo(false);
        super.begin();
    }
    claim() {
        if (this.customReward !== undefined) {
            this.customReward();
        }
        return super.claim();
    }
}
var BaitType;
(function (BaitType) {
    BaitType[BaitType["Bait"] = 0] = "Bait";
    BaitType[BaitType["Razz"] = 1] = "Razz";
    BaitType[BaitType["Nanab"] = 2] = "Nanab";
})(BaitType || (BaitType = {}));
class Bait {
    constructor(type, name, useName, image, amount, use) {
        this.type = type;
        this.name = name;
        this.useName = useName;
        this.image = image;
        this.amount = amount;
        this.use = use;
    }
    get btnName() {
        return `${this.name} (${this.amount()})`;
    }
}
const BaitList = {};
BaitList.Bait = new Bait(BaitType.Bait, 'Bait', 'some bait', 'assets/images/safari/bait.png', () => '∞', (pokemon) => {
    pokemon.eatingBait = BaitType.Bait;
    pokemon.eating = Math.max(pokemon.eating, Rand.intBetween(2, 6));
    pokemon.angry = 0;
});
BaitList.Razz = new Bait(BaitType.Razz, 'Razz Berry', 'a Razz Berry', FarmController.getBerryImage(BerryType.Razz), () => App.game.farming.berryList[BerryType.Razz](), (pokemon) => {
    GameHelper.incrementObservable(App.game.farming.berryList[BerryType.Razz], -1);
    pokemon.eatingBait = BaitType.Razz;
    pokemon.eating = Math.max(pokemon.eating, Rand.intBetween(2, 7));
    pokemon.angry = 0;
});
BaitList.Nanab = new Bait(BaitType.Nanab, 'Nanab Berry', 'a Nanab Berry', FarmController.getBerryImage(BerryType.Nanab), () => App.game.farming.berryList[BerryType.Nanab](), (pokemon) => {
    GameHelper.incrementObservable(App.game.farming.berryList[BerryType.Nanab], -1);
    pokemon.eatingBait = BaitType.Nanab;
    pokemon.eating = Math.max(pokemon.eating, Rand.intBetween(2, 7));
    pokemon.angry = 0;
});
class Safari {
    static sizeX() {
        return Math.floor(document.querySelector('#safariModal .modal-dialog').scrollWidth / 32);
    }
    static sizeY() {
        return Math.floor((window.innerHeight - 250) / 32);
    }
    static load() {
        Safari.grid = [];
        Safari.pokemonGrid([]);
        Safari.playerXY.x = 0;
        Safari.playerXY.y = 0;
        Safari.lastDirection = 'up';
        Safari.inBattle(false);
        Safari.inProgress(true);
        Safari.balls(this.calculateStartPokeballs());
        for (let i = 0; i < this.sizeY(); i++) {
            Safari.grid.push(Array(this.sizeX()).fill(0));
        }
        Safari.addRandomBody(new FenceBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new FenceBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new FenceBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new GrassBody());
        Safari.addRandomBody(new GrassBody());
        Safari.addRandomBody(new GrassBody());
        Safari.addRandomBody(new GrassBody());
        Safari.show();
    }
    static addRandomBody(body) {
        let x = Safari.getRandomCoord(this.sizeX() - 2);
        let y = Safari.getRandomCoord(this.sizeY() - 2);
        if (body.type === 'fence') {
            x = Math.max(0, x - 3);
            y = Math.max(0, y - 3);
        }
        const res = Safari.canAddBody(x, y, body);
        if (res || body.type === 'grass') {
            Safari.addBody(x, y, body);
        }
    }
    static getRandomCoord(max) {
        return Rand.intBetween(1, max - 3);
    }
    static canAddBody(x, y, body) {
        if (x == 0 ||
            y == 0 ||
            y + body.maxY() >= this.sizeY() ||
            x + body.maxX() >= this.sizeX()) {
            return false;
        }
        for (let i = 0; i < body.grid.length; i++) {
            for (let j = 0; j < body.grid[i].length; j++) {
                if ((i + y) < this.sizeY() && (j + x) < this.sizeX()) {
                    if (body.grid[i][j] !== 0) {
                        if (this.grid[i + y][j + x] !== 0) {
                            return false;
                        }
                    }
                }
                else {
                    return false;
                }
            }
        }
        return true;
    }
    static addBody(x, y, body) {
        for (let i = 0; i < body.grid.length; i++) {
            for (let j = 0; j < body.grid[i].length; j++) {
                if (body.grid[i][j] !== 0) {
                    if ((i + y) < this.sizeY() && (j + x) < this.sizeX()) {
                        if (this.grid[i + y][j + x] === 0) {
                            this.grid[i + y][j + x] = body.grid[i][j];
                        }
                    }
                }
            }
        }
    }
    static openModal() {
        if (this.canAccess()) {
            App.game.gameState = GameConstants.GameState.safari;
            $('#safariModal').modal({ backdrop: 'static', keyboard: false });
        }
        else {
            Notifier.notify({
                message: 'You need the Safari Pass to access this location.\n<i>Visit the Gym in Fuschia City</i>',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static closeModal() {
        if (!Safari.inBattle()) {
            $('#safariModal').modal('hide');
        }
    }
    static canPay() {
        return App.game.wallet.hasAmount(Safari.cost());
    }
    static cost() {
        return new Amount(100, GameConstants.Currency.questPoint);
    }
    static payEntranceFee() {
        if (Safari.canPay()) {
            // TODO: add increasing cost back
            //typeof player.safariCostModifier == undefined ? 1 : player.safariCostModifier++;
            App.game.wallet.loseAmount(Safari.cost());
            Safari.load();
        }
    }
    static canAccess() {
        return App.game.keyItems.hasKeyItem(KeyItemType.Safari_ticket);
    }
    static show() {
        let html = '';
        for (let i = 0; i < Safari.grid.length; i++) {
            html += '<div class="row flex-nowrap">';
            for (let j = 0; j < Safari.grid[0].length; j++) {
                html += Safari.square(i, j);
            }
            html += '</div>';
        }
        $('#safariBody').html(html);
        Safari.addPlayer(Math.floor((this.sizeX() - 1) / 2), this.sizeY() - 1);
    }
    static square(i, j) {
        const img = `assets/images/safari/${this.grid[i][j]}.png`;
        const divId = `safari-${j}-${i}`;
        return `<div id='${divId}' style=background-image:url('${img}') class='safariSquare'></div>`;
    }
    static addPlayer(i, j) {
        const topLeft = $('#safari-0-0').offset();
        const offset = {
            top: 32 * j + topLeft.top,
            left: 32 * i + topLeft.left,
        };
        $('#safariBody').append('<div id="sprite"></div>');
        document.getElementById('sprite').classList.value = `walk${Safari.lastDirection}`;
        $('#sprite').css('position', 'absolute');
        $('#sprite').offset(offset);
        Safari.playerXY.x = i;
        Safari.playerXY.y = j;
        Safari.origin = offset;
    }
    static move(dir) {
        if (!Safari.inProgress()) {
            return;
        }
        else if (!Safari.walking && !Safari.isMoving && !Safari.inBattle()) {
            Safari.queue = [];
            Safari.walking = true;
            Safari.queue.unshift(dir);
            Safari.startMoving(dir);
        }
        else {
            if (dir) {
                Safari.setNextDirection(dir);
            }
        }
    }
    static startMoving(dir) {
        Safari.nextDirection = dir;
        if (!Safari.isMoving) {
            Safari.step(dir);
        }
    }
    static step(direction) {
        Safari.lastDirection = direction;
        const directionOffset = Safari.directionToXY(direction);
        Safari.isMoving = true;
        const newPos = {
            x: Safari.playerXY.x + directionOffset.x,
            y: Safari.playerXY.y + directionOffset.y,
        };
        if (Safari.canMove(newPos.x, newPos.y)) {
            const next = $(`#safari-${newPos.x}-${newPos.y}`).offset();
            const offset = {
                top: `+=${directionOffset.y * 32}`,
                left: `+=${directionOffset.x * 32}`,
            };
            document.getElementById('sprite').classList.value = `walk${direction} moving`;
            Safari.playerXY.x = newPos.x;
            Safari.playerXY.y = newPos.y;
            $('#sprite').animate(offset, 250, 'linear', () => {
                Safari.checkBattle();
                Safari.isMoving = false;
                if (Safari.walking) {
                    if (!Safari.checkBattle() && Safari.queue[0]) {
                        Safari.step(Safari.queue[0]);
                    }
                    else {
                        document.getElementById('sprite').classList.value = `walk${direction}`;
                    }
                }
                else {
                    document.getElementById('sprite').classList.value = `walk${direction}`;
                }
            });
            App.game.breeding.progressEggs(1);
            this.spawnPokemonCheck();
            this.despawnPokemonCheck();
        }
        else {
            document.getElementById('sprite').classList.value = `walk${direction}`;
            setTimeout(() => {
                Safari.walking = false;
                Safari.isMoving = false;
                if (Safari.queue[0]) {
                    Safari.isMoving = true;
                    Safari.walking = true;
                    Safari.step(Safari.queue[0]);
                }
            }, 250);
        }
    }
    static spawnPokemonCheck() {
        this.steps++;
        if (this.steps % 10 === 0 && Rand.boolean()) {
            this.spawnRandomPokemon();
        }
    }
    static despawnPokemonCheck() {
        let index = this.pokemonGrid().length;
        while (index-- > 0) {
            if (--this.pokemonGrid()[index].steps <= 0) {
                this.pokemonGrid.splice(index, 1);
            }
        }
    }
    static spawnRandomPokemon() {
        const y = Rand.floor(this.sizeY());
        const x = Rand.floor(this.sizeX());
        if (!this.canMove(x, y) || (x == this.playerXY.x && y == this.playerXY.y) || this.pokemonGrid().find(p => p.x === x && p.y === y)) {
            return;
        }
        const pokemon = SafariPokemon.random();
        pokemon.x = x;
        pokemon.y = y;
        pokemon.steps = this.sizeX() + this.sizeY() + Rand.floor(21);
        this.pokemonGrid.push(pokemon);
    }
    static directionToXY(dir) {
        let x = 0;
        let y = 0;
        switch (dir) {
            case 'left':
                x = -1;
                break;
            case 'up':
                y = -1;
                break;
            case 'right':
                x = 1;
                break;
            case 'down':
                y = 1;
                break;
        }
        return { x: x, y: y };
    }
    static canMove(x, y) {
        if (!Safari.inProgress()) {
            return false;
        }
        for (let i = 0; i < GameConstants.LEGAL_WALK_BLOCKS.length; i++) {
            if (Safari.grid[y] && Safari.grid[y][x] === GameConstants.LEGAL_WALK_BLOCKS[i]) {
                return true;
            }
        }
        return false;
    }
    static setNextDirection(direction) {
        if (direction != Safari.lastDirection) {
            if (Safari.queue[0] != direction) {
                if (Safari.queue.length == 1) {
                    Safari.queue.unshift(direction);
                }
                else {
                    Safari.queue[0] = direction;
                }
            }
            Safari.nextDirection = direction;
            Safari.walking = true;
        }
    }
    static stop(dir) {
        for (let i = 0; i < Safari.queue.length; i++) {
            if (Safari.queue[i] == dir) {
                Safari.queue.splice(i, 1);
            }
        }
        if (!Safari.queue[0]) {
            Safari.walking = false;
        }
    }
    static checkBattle() {
        if (Safari.inBattle()) {
            return false;
        }
        const pokemonOnPlayer = this.pokemonGrid().findIndex(p => p.x === Safari.playerXY.x && p.y === Safari.playerXY.y);
        if (pokemonOnPlayer >= 0) {
            SafariBattle.load(this.pokemonGrid()[pokemonOnPlayer]);
            Safari.pokemonGrid.splice(pokemonOnPlayer, 1);
            return true;
        }
        if (Safari.grid[Safari.playerXY.y][Safari.playerXY.x] === 10) {
            if (Rand.chance(GameConstants.SAFARI_BATTLE_CHANCE)) {
                SafariBattle.load();
                return true;
            }
        }
        return false;
    }
    static calculateStartPokeballs() {
        return GameConstants.SAFARI_BASE_POKEBALL_COUNT;
    }
    static completed(shiny = false) {
        return SafariPokemon.list.reduce((all, poke) => {
            return all && App.game.party.alreadyCaughtPokemonByName(poke.name, shiny);
        }, true);
    }
}
Safari.pokemonGrid = ko.observableArray([]);
Safari.player = new Point(12, 20);
Safari.lastDirection = 'up';
Safari.steps = 0;
Safari.walking = false;
Safari.isMoving = false;
Safari.queue = [];
Safari.playerXY = { 'x': 0, 'y': 0 };
Safari.inProgress = ko.observable(false);
Safari.inBattle = ko.observable(false);
Safari.balls = ko.observable();
document.addEventListener('DOMContentLoaded', () => {
    $('#safariModal').on('hide.bs.modal', () => {
        MapHelper.moveToTown('Fuchsia City');
    });
});
class SafariBattle {
    static get enemy() {
        return SafariBattle._enemy();
    }
    static set enemy(pokemon) {
        SafariBattle._enemy(pokemon);
    }
    static load(enemy = SafariPokemon.random()) {
        // Stop left over keypresses
        GameController.simulateKey('ArrowUp', 'up');
        GameController.simulateKey('ArrowDown', 'up');
        GameController.simulateKey('ArrowLeft', 'up');
        GameController.simulateKey('ArrowRight', 'up');
        // Generate enemy
        SafariBattle.enemy = enemy;
        Safari.inBattle(true);
        SafariBattle.text('What will you do?');
        SafariBattle.escapeAttempts = 0;
        $('#safariBattleModal').modal({ backdrop: 'static', keyboard: false });
    }
    static throwBall() {
        if (!SafariBattle.busy()) {
            SafariBattle.busy(true);
            Safari.balls(Safari.balls() - 1);
            $('#safariBattleModal .enemy').css('transition-duration', `${0.75 * SafariBattle.Speed.enemyTransition}ms`);
            SafariBattle.text('You throw a ball...');
            const enemyImg = $('#safariBattleModal .enemy').offset();
            enemyImg.left += 36;
            enemyImg.top += 16;
            const ptclhtml = '<div><img id="safariBall" class="spin" src="assets/images/pokeball/Safariball.svg" height="30px"></div>';
            SafariBattle.particle = SafariBattle.dropParticle(ptclhtml, $('#safariBattleModal .pageItemFooter').offset(), enemyImg, SafariBattle.Speed.ballThrow, 'cubic-bezier(0,0,0.4,1)', true).css('z-index', 9999);
            SafariBattle.delay(1.1 * SafariBattle.Speed.ballThrow)(0) // throwing the ball
                .then(SafariBattle.startCapture) // pokemon being sucked into ball
                .then(SafariBattle.delay(0.75 * SafariBattle.Speed.enemyTransition))
                .then(SafariBattle.startBounce) // pokeball dropping to ground
                .then(SafariBattle.delay(1.7 * SafariBattle.Speed.ballBounce))
                .then(SafariBattle.calcIndex) // roll a dice for catching, use dice roll to determine how many pokeball rolls
                .then(SafariBattle.delayRoll)
                .then(SafariBattle.finishCapture); // capture pokemon or break free
        }
    }
    static delay(ms) {
        return function (pass) {
            return new Promise((resolve, reject) => {
                setTimeout((pass) => {
                    resolve(pass);
                }, ms);
            });
        };
    }
    static startCapture() {
        return new Promise((resolve, reject) => {
            $('#safariBattleModal .enemy').addClass('safariCapture');
            $('#safariBall').removeClass('spin');
            resolve();
        });
    }
    static startBounce() {
        return new Promise((resolve, reject) => {
            $('#safariBattleModal').css('animation-duration', `${1.6 * SafariBattle.Speed.ballBounce}ms`);
            $('#safariBattleModal .enemy > img').css('opacity', '0');
            SafariBattle.particle.addClass('bounce');
            resolve();
        });
    }
    static calcIndex() {
        return new Promise((resolve, reject) => {
            const random = Math.random();
            const catchF = SafariBattle.enemy.catchFactor / 100;
            const index = catchF >= 1 ? 3 : Math.floor(4 * (1 - Math.max(random, catchF)) / (1 - catchF));
            if (index != 0) {
                $('#safariBattleModal').css('animation-duration', `${SafariBattle.Speed.ballRoll}ms`);
                SafariBattle.startRoll(index);
            }
            resolve([random, index]);
        });
    }
    static delayRoll(result) {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                resolve(result);
            }, (0.2 + 1.2 * result[1]) * SafariBattle.Speed.ballRoll);
        });
    }
    static finishCapture(result) {
        const [random, index] = result;
        const isgameOver = (Safari.balls() == 0);
        return new Promise((resolve, reject) => {
            if (random * 100 < SafariBattle.enemy.catchFactor) {
                SafariBattle.capturePokemon();
                $('#safariBall').css('filter', 'brightness(0.4) grayscale(100%)');
                setTimeout(() => {
                    SafariBattle.particle.remove();
                    isgameOver ? SafariBattle.gameOver() : SafariBattle.endBattle();
                }, 1.7 * SafariBattle.Speed.enemyTransition);
            }
            else {
                $('#safariBattleModal .enemy > img').css('opacity', '1');
                $('#safariBattleModal .enemy').removeClass('safariCapture');
                SafariBattle.text(SafariBattle.CATCH_MESSAGES[index]);
                SafariBattle.particle.remove();
                setTimeout(() => {
                    isgameOver ? SafariBattle.gameOver() : SafariBattle.enemyTurn();
                }, 1 * SafariBattle.Speed.enemyTransition);
            }
        });
    }
    static capturePokemon() {
        SafariBattle.text(`GOTCHA!<br>${SafariBattle.enemy.name} was caught!`);
        const pokemonID = PokemonHelper.getPokemonByName(SafariBattle.enemy.name).id;
        App.game.party.gainPokemonById(pokemonID, SafariBattle.enemy.shiny);
        const partyPokemon = App.game.party.getPokemon(pokemonID);
        partyPokemon.effortPoints += App.game.party.calculateEffortPoints(partyPokemon, SafariBattle.enemy.shiny, GameConstants.SAFARI_EP_YIELD);
    }
    static throwBait(baitType) {
        if (!SafariBattle.busy()) {
            SafariBattle.busy(true);
            const bait = BaitList[BaitType[baitType]];
            if (bait.amount() <= 0) {
                SafariBattle.text(`You don't have enough ${bait.name}`);
                setTimeout(() => {
                    SafariBattle.text('What will you do?');
                    SafariBattle.busy(false);
                }, 1500);
                return;
            }
            SafariBattle.text(`You throw ${bait.useName} at ${SafariBattle.enemy.name}`);
            bait.use(SafariBattle.enemy);
            const enemy = $('#safariBattleModal .enemy').offset();
            enemy.left += 30;
            enemy.top += 70;
            SafariBattle.dropParticle(`<img width=16px src="${bait.image}">`, $('#safariBattleModal .pageItemFooter').offset(), enemy, 1000, 'cubic-bezier(0,0,0.4,1)').css('z-index', 9999);
            setTimeout(SafariBattle.enemyTurn, 1500);
        }
    }
    static throwRock() {
        if (!SafariBattle.busy()) {
            SafariBattle.busy(true);
            SafariBattle.text(`You throw a rock at ${SafariBattle.enemy.name}`);
            SafariBattle.enemy.angry = Math.max(SafariBattle.enemy.angry, Rand.intBetween(2, 6));
            SafariBattle.enemy.eating = 0;
            const enemy = $('#safariBattleModal .enemy').offset();
            enemy.left += 40;
            enemy.top += 10;
            SafariBattle.dropParticle('<img src="assets/images/safari/rock.png">', $('#safariBattleModal .pageItemFooter').offset(), enemy, 800, 'cubic-bezier(0,0,0.4,1)').css('z-index', 9999);
            setTimeout(() => {
                const hitSplash = $('<ptcl>').html('<img src="assets/images/safari/hit.png">').children().appendTo('#safariBattleModal');
                hitSplash.offset(enemy).css({ 'opacity': 0.8, 'z-index': 9998 });
                hitSplash.fadeOut(400, () => {
                    hitSplash.remove();
                });
                setTimeout(() => {
                    const newOffset = {
                        top: enemy.top + 4,
                        left: enemy.left - 20,
                    };
                    const ang = $('<ptcl>').html('<img src="assets/images/safari/angry.png">').children().appendTo('#safariBattleModal');
                    ang.css('position', 'absolute').css('z-index', 9999);
                    ang.offset(newOffset);
                    ang.addClass('pulse');
                    setTimeout(() => {
                        newOffset.top -= 10;
                        newOffset.left += 60;
                        ang.offset(newOffset);
                        setTimeout(() => {
                            ang.remove();
                        }, 350);
                    }, 350);
                }, 300);
            }, 800);
            setTimeout(SafariBattle.enemyTurn, 2000);
        }
    }
    static run() {
        if (!SafariBattle.busy()) {
            SafariBattle.busy(true);
            SafariBattle.text('You flee.');
            setTimeout(SafariBattle.endBattle, 1500);
        }
    }
    static enemyTurn() {
        // Enemy turn to flee;
        if (Rand.chance(SafariBattle.enemy.escapeFactor / 100)) {
            SafariBattle.text(`${SafariBattle.enemy.name} has fled.`);
            setTimeout(SafariBattle.endBattle, 1000);
        }
        else if (SafariBattle.enemy.eating > 0) {
            SafariBattle.text(`${SafariBattle.enemy.name} is eating..`);
        }
        else if (SafariBattle.enemy.angry > 0) {
            SafariBattle.text(`${SafariBattle.enemy.name} is angry!`);
        }
        else {
            SafariBattle.text(`${SafariBattle.enemy.name} is watching carefully...`);
        }
        SafariBattle.enemy.eating = Math.max(0, SafariBattle.enemy.eating - 1);
        SafariBattle.enemy.angry = Math.max(0, SafariBattle.enemy.angry - 1);
        setTimeout(() => {
            SafariBattle.text('What will you do?');
            SafariBattle.busy(false);
        }, 1500);
    }
    static endBattle() {
        $('#safariBattleModal').one('hidden.bs.modal', () => {
            Safari.inBattle(false);
            SafariBattle.busy(false);
        }).modal('hide');
    }
    static gameOver() {
        SafariBattle.text(GameConstants.SAFARI_OUT_OF_BALLS);
        setTimeout(() => {
            Safari.inBattle(false);
            Safari.inProgress(false);
            SafariBattle.busy(false);
            $('#safariBattleModal').modal('hide');
            $('#safariModal').modal('hide');
        }, 2000);
    }
    static dropParticle(html, pos, target, time = 2, top, persistentParticle = false) {
        const p = $('<ptcl>').html(html).children().appendTo('#safariBattleModal');
        p.css('position', 'absolute');
        p.offset(pos);
        if (!top) {
            top = 'cubic-bezier(0.6, -0.3, 0.7, 0)';
        }
        p[0].style.transition = `left ${time}ms linear, top ${time}ms ${top}`;
        p.offset(target);
        if (!persistentParticle) {
            setTimeout(() => {
                p.fadeOut();
            }, time - 200);
            setTimeout(() => {
                p.remove();
            }, time);
        }
        return p;
    }
}
SafariBattle._enemy = ko.observable();
SafariBattle.busy = ko.observable(false).extend({ boolean: null });
SafariBattle.text = ko.observable('What will you do?');
SafariBattle.escapeAttempts = 0;
SafariBattle.startRoll = function (n) {
    if (n == 4) {
        n--;
    }
    $('#safariBall').addClass('safari-roll-left');
    setTimeout(() => {
        SafariBattle.safariRoll(n - 1);
    }, 1200);
};
SafariBattle.safariRoll = function (n) {
    if (n != 0) {
        $('#safariBall').toggleClass('safari-roll-left').toggleClass('safari-roll-right');
        setTimeout(() => {
            SafariBattle.safariRoll(n - 1);
        }, 1200);
    }
};
(function (SafariBattle) {
    SafariBattle.Speed = {
        animation: 1000,
        ballThrow: 750,
        ballBounce: 850,
        ballRoll: 700,
        enemyTransition: 1000,
    };
    SafariBattle.CATCH_MESSAGES = [
        'Oh, no!<br>The Pokémon broke free!',
        'Aww! It appeared to be caught!',
        'Aargh! Almost had it!',
        'Shoot! It was so close, too!',
    ];
})(SafariBattle || (SafariBattle = {}));
class SafariBody {
    constructor() {
    }
    getTileNeighbours(x, y) {
        const ret = Array(4); //["N", "E", "S", "W"]
        const cross = Array(4); //["NE", "SE", "SW", "NW"]
        if (x === 0) {
            ret[3] = false;
        }
        else {
            ret[3] = this.grid[y][x - 1] !== 0;
        }
        if (y === 0) {
            ret[0] = false;
        }
        else {
            ret[0] = this.grid[y - 1][x] !== 0;
        }
        if (x === this.grid[0].length - 1) {
            ret[1] = false;
        }
        else {
            ret[1] = this.grid[y][x + 1] !== 0;
        }
        if (y === this.grid.length - 1) {
            ret[2] = false;
        }
        else {
            ret[2] = this.grid[y + 1][x] !== 0 && this.grid[y + 1][x] !== undefined;
        }
        if (ret.equals([true, true, true, true])) {
            cross[0] = this.grid[y - 1][x + 1] !== 0;
            cross[1] = this.grid[y + 1][x + 1] !== 0;
            cross[2] = this.grid[y + 1][x - 1] !== 0;
            cross[3] = this.grid[y - 1][x - 1] !== 0;
        }
        return {
            plus: ret,
            cross: cross,
        };
    }
    //duplicated in DungeonMap
    static shuffle(a) {
        let j, x, i;
        for (i = a.length; i; i--) {
            j = Rand.floor(i);
            x = a[i - 1];
            a[i - 1] = a[j];
            a[j] = x;
        }
    }
    maxY() {
        return this.grid.length;
    }
    maxX() {
        let max = 0;
        for (const row of this.grid) {
            if (row.length > max) {
                max = row.length;
            }
        }
        return max;
    }
}
class SandBody extends SafariBody {
    constructor(x = SandBody.randomInt(), y = SandBody.randomInt(), type = 'sand') {
        super();
        this.edgeDetectCheck = 15;
        this.type = type;
        this.grid = this.generateCube(x, y);
        this.edgeDetect();
    }
    static randomInt() {
        return Rand.intBetween(3, 5);
    }
    generateCube(sizeX, sizeY) {
        let body = [];
        for (let i = 0; i < sizeY; i++) {
            const row = [...Array(sizeX)].map(Number.prototype.valueOf, 0);
            body.push(row);
        }
        const amount = this.type === 'fence' ? 20 : 4;
        for (let i = 0; i < amount; i++) {
            const x = Rand.floor(sizeX - 2);
            const y = Rand.floor(sizeY - 2);
            body = SandBody.addCube(x, y, body);
        }
        return body;
    }
    static addCube(x, y, body) {
        if (Rand.boolean()) {
            body[y + 2][x] = 15;
            body[y + 2][x + 1] = 15;
            body[y][x + 2] = 15;
            body[y + 1][x + 2] = 15;
            body[y + 2][x + 2] = 15;
        }
        body[y][x] = 15;
        body[y + 1][x] = 15;
        body[y][x + 1] = 15;
        body[y + 1][x + 1] = 15;
        return body;
    }
    edgeDetect() {
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[i].length; j++) {
                if (this.grid[i][j] === this.edgeDetectCheck) {
                    this.grid[i][j] = this.getNumber(this.getTileNeighbours(j, i));
                }
            }
        }
    }
    getNumber(neighbours) {
        const plus = neighbours.plus;
        const cross = neighbours.cross;
        if (plus.equals([false, true, true, false])) {
            return 11;
        }
        if (plus.equals([false, true, true, true])) {
            return 12;
        }
        if (plus.equals([false, false, true, true])) {
            return 13;
        }
        if (plus.equals([true, true, true, false])) {
            return 14;
        }
        if (plus.equals([true, true, true, true])) {
            if (!cross[0]) {
                return 21;
            }
            if (!cross[1]) {
                return 22;
            }
            if (!cross[2]) {
                return 23;
            }
            if (!cross[3]) {
                return 24;
            }
            return 15;
        }
        if (plus.equals([true, false, true, true])) {
            return 16;
        }
        if (plus.equals([true, true, false, false])) {
            return 17;
        }
        if (plus.equals([true, true, false, true])) {
            return 18;
        }
        if (plus.equals([true, false, false, true])) {
            return 19;
        }
        return 10;
    }
}
class FenceBody extends SandBody {
    constructor() {
        super(7, 7, 'fence');
        this.edgeDetectCheck = 0;
        this.openFence();
    }
    getNumber(neighbours) {
        const plus = neighbours.plus;
        const cross = neighbours.cross;
        if (plus.equals([false, true, true, false])) {
            return 25;
        }
        if (plus.equals([false, true, true, true])) {
            return 26;
        }
        if (plus.equals([false, false, true, true])) {
            return 27;
        }
        if (plus.equals([true, true, true, false])) {
            return 28;
        }
        if (plus.equals([true, true, true, true])) {
            if (!cross[0]) {
                return 33;
            }
            if (!cross[1]) {
                return 34;
            }
            if (!cross[2]) {
                return 35;
            }
            if (!cross[3]) {
                return 36;
            }
            return 10;
        }
        if (plus.equals([true, false, true, true])) {
            return 29;
        }
        if (plus.equals([true, true, false, false])) {
            return 30;
        }
        if (plus.equals([true, true, false, true])) {
            return 31;
        }
        if (plus.equals([true, false, false, true])) {
            return 32;
        }
        return 10;
    }
    openFence() {
        const options = [26, 28, 29, 31];
        const pick = Rand.fromArray(options);
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[0].length; j++) {
                if (this.grid[i][j] === pick) {
                    this.grid[i][j] = 0;
                }
            }
        }
    }
}
class WaterBody extends SafariBody {
    constructor() {
        super();
        const x = Rand.intBetween(3, 5);
        const y = Rand.intBetween(3, 5);
        const body = [];
        for (let i = 0; i < y; i++) {
            const row = [];
            for (let j = 0; j < x; j++) {
                if (i === 0) {
                    if (j === 0) {
                        row.push(1);
                    }
                    else if (j < x - 1) {
                        row.push(2);
                    }
                    else if (j === x - 1) {
                        row.push(3);
                    }
                }
                else if (i < y - 1) {
                    if (j === 0) {
                        row.push(4);
                    }
                    else if (j < x - 1) {
                        row.push(5);
                    }
                    else if (j === x - 1) {
                        row.push(6);
                    }
                }
                else if (i === y - 1) {
                    if (j === 0) {
                        row.push(7);
                    }
                    else if (j < x - 1) {
                        row.push(8);
                    }
                    else if (j === x - 1) {
                        row.push(9);
                    }
                }
            }
            body.push(row);
        }
        this.grid = body;
        this.type = 'water';
    }
}
class GrassBody extends SafariBody {
    constructor() {
        super();
        const x = Rand.intBetween(4, 6);
        const y = Rand.intBetween(4, 6);
        const body = [];
        for (let i = 0; i < y; i++) {
            const row = [];
            for (let j = 0; j < x; j++) {
                if (j < x * 2 / 3 - 1) {
                    row.push(10);
                }
                else {
                    row.push(0);
                }
            }
            SafariBody.shuffle(row);
            body.push(row);
        }
        this.grid = body;
        this.fillHoles();
        this.type = 'grass';
    }
    fillHoles() {
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[0].length; j++) {
                if (this.grid[i][j] === 0) {
                    if (i !== 0 && i !== this.grid.length - 1) {
                        if (this.grid[i - 1][j] === 10 && this.grid[i + 1][j] === 10) {
                            this.grid[i][j] = 10;
                        }
                    }
                }
            }
        }
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[0].length; j++) {
                if (this.grid[i][j] === 0) {
                    if (j !== 0 && j !== this.grid[0].length - 1) {
                        if (this.grid[i][j - 1] === 10 && this.grid[i][j + 1] === 10) {
                            this.grid[i][j] = 10;
                        }
                    }
                }
            }
        }
    }
}
class TreeBody extends SafariBody {
    constructor() {
        super();
        this.grid = [[37, 38, 39], [40, 41, 42], [43, 44, 45], [46, 47, 48]];
        this.type = 'tree';
    }
}
Array.prototype.equals = function (array) {
    // if the other array is a falsy value, return
    if (!array) {
        return false;
    }
    // compare lengths - can save a lot of time
    if (this.length != array.length) {
        return false;
    }
    for (let i = 0, l = this.length; i < l; i++) {
        // Check if we have nested arrays
        if (this[i] instanceof Array && array[i] instanceof Array) {
            // recurse into the nested arrays
            if (!this[i].equals(array[i])) {
                return false;
            }
        }
        else if (this[i] != array[i]) {
            // Warning - two different object instances will never be equal: {x:20} != {x:20}
            return false;
        }
    }
    return true;
};
class SafariPokemon {
    constructor(name) {
        // Used for overworld sprites
        this.x = 0;
        this.y = 0;
        this.steps = 0;
        const data = PokemonHelper.getPokemonByName(name);
        this.name = data.name;
        this.id = data.id;
        this.type1 = data.type1;
        this.type2 = data.type2;
        this.shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_SAFARI);
        this.gender = PokemonFactory.generateGender(data.gender.femaleRatio, data.gender.type);
        PokemonHelper.incrementPokemonStatistics(this.id, GameConstants.STATISTIC_ENCOUNTERED, this.shiny, this.gender);
        // Shiny
        if (this.shiny) {
            Notifier.notify({
                message: `✨ You encountered a shiny ${name}! ✨`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.General.shiny_long,
                setting: NotificationConstants.NotificationSetting.General.encountered_shiny,
            });
            // Track shinies encountered, and rate of shinies
            LogEvent('encountered shiny', 'shiny pokemon', 'safari encounter', Math.floor(App.game.statistics.totalPokemonEncountered() / App.game.statistics.totalShinyPokemonEncountered()));
        }
        this.baseCatchFactor = data.catchRate * 1 / 6;
        this.baseEscapeFactor = 30;
        this._angry = ko.observable(0);
        this._eating = ko.observable(0);
        this._eatingBait = ko.observable(BaitType.Bait);
    }
    static calcPokemonWeight(pokemon) {
        return pokemon.weight * (App.game.party.alreadyCaughtPokemonByName(pokemon.name) ? 1 : 2);
    }
    get catchFactor() {
        const oakBonus = App.game.oakItems.calculateBonus(OakItemType.Magic_Ball);
        let catchF = this.baseCatchFactor + oakBonus;
        if (this.eating > 0) {
            catchF /= 2;
        }
        if (this.angry > 0) {
            catchF *= 2;
        }
        if (this.eatingBait === BaitType.Nanab) {
            catchF *= 1.5;
        }
        return Math.min(100, catchF);
    }
    get escapeFactor() {
        let escapeF = this.baseEscapeFactor;
        if (this.eating > 0) {
            escapeF /= 4;
        }
        if (this.angry > 0) {
            escapeF *= 2;
        }
        if (this.eatingBait === BaitType.Razz) {
            escapeF /= 1.5;
        }
        return escapeF;
    }
    get angry() {
        return this._angry();
    }
    set angry(value) {
        this._angry(value);
    }
    get eating() {
        return this._eating();
    }
    set eating(value) {
        this._eating(value);
    }
    get eatingBait() {
        return this._eatingBait();
    }
    set eatingBait(value) {
        this._eatingBait(value);
    }
    static random() {
        const pokemon = Rand.fromWeightedArray(SafariPokemon.list, SafariPokemon.list.map(p => p.weight));
        return new SafariPokemon(pokemon.name);
    }
}
// Lower weighted pokemon will appear less frequently, equally weighted are equally likely to appear
SafariPokemon.list = [
    { name: 'Nidoran(F)', weight: 15 },
    { name: 'Nidorina', weight: 10 },
    { name: 'Nidoran(M)', weight: 25 },
    { name: 'Nidorino', weight: 10 },
    { name: 'Exeggcute', weight: 20 },
    { name: 'Paras', weight: 5 },
    { name: 'Parasect', weight: 15 },
    { name: 'Rhyhorn', weight: 10 },
    { name: 'Chansey', weight: 4 },
    { name: 'Scyther', weight: 4 },
    { name: 'Pinsir', weight: 4 },
    { name: 'Kangaskhan', weight: 15 },
    { name: 'Tauros', weight: 10 },
    { name: 'Cubone', weight: 10 },
    { name: 'Marowak', weight: 5 },
    { name: 'Tangela', weight: 4 },
];
class BerryMasterShop extends Shop {
    constructor(location, items, name = 'Berry Master', requirements) {
        super(items, name, requirements);
        this.location = location;
        this.items = items;
        this.name = name;
        this.amountInput = () => $('#berryMasterModal').find('input[name="amountOfItems"]');
    }
    onclick() {
        ShopHandler.showShop(this);
        $('#berryMasterModal').modal('show');
    }
}
class GemMasterShop extends Shop {
    constructor(name = 'Gem Master') {
        super([], name);
        this.name = name;
    }
    onclick() {
        ShopHandler.showShop(this);
        $('#gemMasterModal').modal('show');
    }
}
class ShardTraderShop extends Shop {
    constructor(location, name = 'Shard Trader') {
        super([], name);
        this.location = location;
        this.name = name;
    }
    onclick() {
        ShopHandler.showShop(this);
        $('#shardTraderModal').modal('show');
    }
}
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Feature.d.ts" />
class SpecialEvents {
    constructor() {
        this.name = 'Events';
        this.saveKey = 'events';
    }
    static newEvent(title, description, startTime, startFunction, endTime, endFunction) {
        // Check if the event exist before adding it again
        if (!SpecialEvents.events.find(event => event.title == title)) {
            SpecialEvents.events.push(new SpecialEvent(title, description, startTime, startFunction, endTime, endFunction));
        }
    }
    initialize() {
        SpecialEvents.events.forEach(event => event.initialize());
    }
    fromJSON(json) {
        if (!json) {
            return;
        }
    }
    toJSON() {
        return {
        // no data to save yet
        };
    }
    canAccess() {
        return true;
    }
    update(delta) { } // This method intentionally left blank
}
SpecialEvents.events = [];
// TODO: Fetch events from a server each 1/2/3/6/12/24 hours?
// Create our events here for now (yearly)
// Lunar New Year
SpecialEvents.newEvent('Lunar New Year', 'Encounter Fancy Pattern Vivillon for a limited time roaming Kalos.', 
// Start
new Date(new Date().getFullYear(), 0, 24, 1), () => {
    RoamingPokemonList.add(GameConstants.Region.kalos, 0, new RoamingPokemon('Vivillon (Fancy)'));
}, 
// End
new Date(new Date().getFullYear(), 1, 7, 23), () => {
    RoamingPokemonList.remove(GameConstants.Region.kalos, 0, 'Vivillon (Fancy)');
});
//Hoopa Day
SpecialEvents.newEvent('Hoopa Day', 'The Mischief Pokémon unleashes his tricks upon the world.', 
// Start
new Date(new Date().getFullYear(), 3, 1, 1), () => {
    const pikabluQuestLine = App.game.quests.getQuestLine('How blu mouse?');
    if (pikabluQuestLine.state() == QuestLineState.inactive) {
        App.game.quests.getQuestLine('How blu mouse?').beginQuest();
    }
}, 
// End
new Date(new Date().getFullYear(), 3, 2, 1), () => {
    // do not end questline, so ppl can finish it
});
// Easter
SpecialEvents.newEvent('Easter', 'Encounter Surprise Togepi for a limited time with a dedicated Quest Line.', 
// Start
new Date(new Date().getFullYear(), 3, 8, 1), () => {
    const togepiEggHuntQuestLine = App.game.quests.getQuestLine('Togepi Egg Hunt');
    if (togepiEggHuntQuestLine.state() == QuestLineState.inactive) {
        App.game.quests.getQuestLine('Togepi Egg Hunt').beginQuest();
    }
}, 
// End
new Date(new Date().getFullYear(), 3, 29, 23), () => {
    // do not end questline, so ppl can finish it
});
// First Event
SpecialEvents.newEvent('Flying Pikachu', 'Encounter Flying Pikachu and Red Spearow for a limited time roaming Kanto.', 
// Start
new Date(new Date().getFullYear(), 6, 6, 1), () => {
    RoamingPokemonList.add(GameConstants.Region.kanto, 0, new RoamingPokemon('Flying Pikachu'));
    RoamingPokemonList.add(GameConstants.Region.kanto, 0, new RoamingPokemon('Red Spearow'));
}, 
// End
new Date(new Date().getFullYear(), 6, 12, 23), () => {
    RoamingPokemonList.remove(GameConstants.Region.kanto, 0, 'Flying Pikachu');
    RoamingPokemonList.remove(GameConstants.Region.kanto, 0, 'Red Spearow');
});
// Pokemon the first movie release date
SpecialEvents.newEvent('Mewtwo strikes back!', 'Encounter Armored Mewtwo for a limited time in Cerulean Cave.<br/>Encounter clone Pokémon roaming in Kanto.', 
// Start
new Date(new Date().getFullYear(), 6, 18, 1), () => {
    dungeonList['Cerulean Cave'].bossList.push(new DungeonBossPokemon('Armored Mewtwo', 1000000, 80));
    RoamingPokemonList.add(GameConstants.Region.kanto, 0, new RoamingPokemon('Bulbasaur (Clone)'));
    RoamingPokemonList.add(GameConstants.Region.kanto, 0, new RoamingPokemon('Charmander (Clone)'));
    RoamingPokemonList.add(GameConstants.Region.kanto, 0, new RoamingPokemon('Squirtle (Clone)'));
}, 
// End
new Date(new Date().getFullYear(), 6, 24, 23), () => {
    dungeonList['Cerulean Cave'].bossList = dungeonList['Cerulean Cave'].bossList.filter(boss => boss.name != 'Armored Mewtwo');
    RoamingPokemonList.remove(GameConstants.Region.kanto, 0, 'Bulbasaur (Clone)');
    RoamingPokemonList.remove(GameConstants.Region.kanto, 0, 'Charmander (Clone)');
    RoamingPokemonList.remove(GameConstants.Region.kanto, 0, 'Squirtle (Clone)');
});
// Halloween
SpecialEvents.newEvent('Halloween!', 'Encounter Spooky Pokémon for a limited time around Kanto, Johto and Hoenn.', 
// Start
new Date(new Date().getFullYear(), 9, 30, 1), () => {
    SeededRand.seed(new Date().getFullYear());
    Routes.getRoutesByRegion(GameConstants.Region.kanto).forEach(route => {
        SeededRand.boolean() ? route.pokemon.land.push('Spooky Bulbasaur') : null;
        SeededRand.boolean() ? route.pokemon.land.push('Gastly') : null;
    });
    Routes.getRoutesByRegion(GameConstants.Region.johto).forEach(route => {
        SeededRand.boolean() ? route.pokemon.land.push('Spooky Togepi') : null;
        SeededRand.boolean() ? route.pokemon.land.push('Misdreavus') : null;
    });
    Routes.getRoutesByRegion(GameConstants.Region.hoenn).forEach(route => {
        SeededRand.boolean() ? route.pokemon.land.push('Pikachu (Gengar)') : null;
        SeededRand.boolean() ? route.pokemon.land.push('Shuppet') : null;
        SeededRand.boolean() ? route.pokemon.land.push('Duskull') : null;
    });
}, 
// End
new Date(new Date().getFullYear(), 10, 5, 23), () => {
    Routes.getRoutesByRegion(GameConstants.Region.kanto).forEach(route => route.pokemon.land = route.pokemon.land.filter(p => !['Spooky Bulbasaur', 'Gastly'].includes(p)));
    Routes.getRoutesByRegion(GameConstants.Region.johto).forEach(route => route.pokemon.land = route.pokemon.land.filter(p => !['Spooky Togepi', 'Misdreavus'].includes(p)));
    Routes.getRoutesByRegion(GameConstants.Region.hoenn).forEach(route => route.pokemon.land = route.pokemon.land.filter(p => !['Pikachu (Gengar)', 'Shuppet', 'Duskull'].includes(p)));
});
// Let's Go P/E release date
SpecialEvents.newEvent('Let\'s GO!', 'Encounter special Eevee and Pikachu roaming in the Kanto region.', 
// Start
new Date(new Date().getFullYear(), 10, 16, 1), () => {
    RoamingPokemonList.add(GameConstants.Region.kanto, 0, new RoamingPokemon('Let\'s Go Pikachu'));
    RoamingPokemonList.add(GameConstants.Region.kanto, 0, new RoamingPokemon('Let\'s Go Eevee'));
}, 
// End
new Date(new Date().getFullYear(), 10, 23, 23), () => {
    RoamingPokemonList.remove(GameConstants.Region.kanto, 0, 'Let\'s Go Pikachu');
    RoamingPokemonList.remove(GameConstants.Region.kanto, 0, 'Let\'s Go Eevee');
});
// Christmas
SpecialEvents.newEvent('Merry Christmas!', 'Encounter Santa Snorlax roaming the regions and discover the Grinch of Ilex Forest.', 
// Start
new Date(new Date().getFullYear(), 11, 24, 1), () => {
    // Add to every region excluding None
    GameHelper.enumNumbers(GameConstants.Region).filter(i => i != GameConstants.Region.none).forEach(region => {
        RoamingPokemonList.add(region, 0, new RoamingPokemon('Santa Snorlax'));
    });
    dungeonList['Ilex Forest'].bossList.push(new DungeonBossPokemon('Grinch Celebi', 1600000, 100, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion) }));
}, 
// End
new Date(new Date().getFullYear(), 11, 30, 23), () => {
    // Remove from every region excluding None
    GameHelper.enumNumbers(GameConstants.Region).filter(i => i != GameConstants.Region.none).forEach(region => {
        RoamingPokemonList.remove(region, 0, 'Santa Snorlax');
    });
    dungeonList['Ilex Forest'].bossList = dungeonList['Ilex Forest'].bossList.filter(boss => boss.name != 'Grinch Celebi');
});
// Golden Week
SpecialEvents.newEvent('Golden Week', 'Enjoy your time off in the "Golden Week"! Travel tip: Visit the Flower Paradise in Sinnoh on your well earned vacation and enjoy the bloom of roses.', 
// Start
new Date(new Date().getFullYear(), 3, 29, 1), () => {
    dungeonList['Flower Paradise'].bossList.push(new DungeonBossPokemon('Bulbasaur (Rose)', 1600000, 100, { requirement: new ClearDungeonRequirement(10, GameConstants.getDungeonIndex('Flower Paradise')) }));
}, 
// End
new Date(new Date().getFullYear(), 4, 6, 23), () => {
    dungeonList['Flower Paradise'].bossList = dungeonList['Flower Paradise'].bossList.filter(boss => boss.name != 'Bulbasaur (Rose)');
});
class TemporaryBattle extends TownContent {
    constructor(name, pokemons, defeatMessage, requirements = [], completeRequirements = undefined, optionalArgs = {}) {
        super(requirements);
        this.name = name;
        this.pokemons = pokemons;
        this.defeatMessage = defeatMessage;
        this.optionalArgs = optionalArgs;
        if (!completeRequirements) {
            completeRequirements = [new TemporaryBattleRequirement(name)];
        }
        if (optionalArgs.isTrainerBattle == undefined) {
            optionalArgs.isTrainerBattle = true;
        }
        this.completeRequirements = completeRequirements;
    }
    cssClass() {
        return 'btn btn-secondary';
    }
    text() {
        return `Fight ${this.getDisplayName()}`;
    }
    isVisible() {
        var _a;
        return (this.isUnlocked() || ((_a = this.optionalArgs.visibleRequirement) === null || _a === void 0 ? void 0 : _a.isCompleted())) && !this.completeRequirements.every(r => r.isCompleted());
    }
    onclick() {
        TemporaryBattleRunner.startBattle(this);
    }
    areaStatus() {
        if (!this.isUnlocked()) {
            return areaStatus.locked;
        }
        else if (App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex(this.name)]() == 0) {
            return areaStatus.unlockedUnfinished;
        }
        else {
            return areaStatus.completed;
        }
    }
    getDisplayName() {
        var _a;
        return (_a = this.optionalArgs.displayName) !== null && _a !== void 0 ? _a : this.name;
    }
    getImageName() {
        var _a;
        return (_a = this.optionalArgs.imageName) !== null && _a !== void 0 ? _a : this.name;
    }
    getTown() {
        var _a, _b;
        return (_b = (_a = this.parent) !== null && _a !== void 0 ? _a : TownList[this.optionalArgs.returnTown]) !== null && _b !== void 0 ? _b : TownList[GameConstants.DockTowns[player.region]];
    }
    getImage() {
        var _a, _b;
        const imageName = (_b = (_a = this.optionalArgs) === null || _a === void 0 ? void 0 : _a.imageName) !== null && _b !== void 0 ? _b : this.name;
        return `assets/images/temporaryBattle/${imageName}.png`;
    }
}
///<reference path="../Battle.ts"/>
class TemporaryBattleBattle extends Battle {
    static pokemonAttack() {
        if (TemporaryBattleRunner.running()) {
            super.pokemonAttack();
        }
    }
    static clickAttack() {
        if (TemporaryBattleRunner.running()) {
            super.clickAttack();
        }
    }
    static defeatPokemon() {
        if (!TemporaryBattleBattle.battle.optionalArgs.isTrainerBattle) {
            // Attempting to catch Pokemon
            const enemyPokemon = super.enemyPokemon();
            const isShiny = enemyPokemon.shiny;
            const pokeBall = App.game.pokeballs.calculatePokeballToUse(enemyPokemon.id, isShiny);
            if (pokeBall !== GameConstants.Pokeball.None) {
                this.prepareCatch(enemyPokemon, pokeBall);
                setTimeout(() => {
                    this.attemptCatch(enemyPokemon, 1, player.region);
                    this.endFight();
                }, App.game.pokeballs.calculateCatchTime(pokeBall));
            }
            else {
                this.endFight();
            }
        }
        else {
            this.endFight();
        }
    }
    static endFight() {
        var _a;
        if (TemporaryBattleBattle.index() >= TemporaryBattleBattle.battle.pokemons.length) {
            TemporaryBattleRunner.battleWon(TemporaryBattleBattle.battle);
        }
        else {
            TemporaryBattleBattle.generateNewEnemy();
        }
        TemporaryBattleBattle.enemyPokemon().defeat((_a = this.battle.optionalArgs.isTrainerBattle) !== null && _a !== void 0 ? _a : true);
        TemporaryBattleBattle.index(TemporaryBattleBattle.index() + 1);
        if (TemporaryBattleBattle.index() >= TemporaryBattleBattle.battle.pokemons.length) {
            TemporaryBattleRunner.battleWon(TemporaryBattleBattle.battle);
        }
        else {
            TemporaryBattleBattle.generateNewEnemy();
        }
        player.lowerItemMultipliers(MultiplierDecreaser.Battle);
    }
    /**
     * Reset the counter.
     */
    static generateNewEnemy() {
        this.catching(false);
        TemporaryBattleBattle.counter = 0;
        TemporaryBattleBattle.enemyPokemon(PokemonFactory.generateTemporaryBattlePokemon(TemporaryBattleBattle.battle, TemporaryBattleBattle.index()));
    }
}
TemporaryBattleBattle.index = ko.observable(0);
TemporaryBattleBattle.totalPokemons = ko.observable(0);
TemporaryBattleBattle.pokemonsDefeatedComputable = ko.pureComputed(() => {
    return TemporaryBattleBattle.index();
});
TemporaryBattleBattle.pokemonsUndefeatedComputable = ko.pureComputed(() => {
    return TemporaryBattleBattle.totalPokemons() - TemporaryBattleBattle.index();
});
const TemporaryBattleList = {};
//Kanto Temporary Battles
TemporaryBattleList['Fighting Dojo'] = new TemporaryBattle('Fighting Dojo', [
    new GymPokemon('Hitmonlee', 108985, 37),
    new GymPokemon('Hitmonchan', 108985, 37),
], 'Hwa! Arrgh! Beaten!', [
    new OneFromManyRequirement([
        new GymBadgeRequirement(BadgeEnums.Rainbow),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rocket Game Corner')),
    ]),
], undefined, {
    firstTimeRewardFunction: () => {
        BagHandler.gainItem({ type: ItemType.item, id: 'Fighting_egg' }, 1);
        Notifier.notify({
            message: 'You were awarded a Fighting Egg for defeating the Fighting Dojo',
            type: NotificationConstants.NotificationOption.success,
            setting: NotificationConstants.NotificationSetting.Dungeons.rare_dungeon_item_found,
        });
    },
    imageName: '../trainers/Black Belt',
});
TemporaryBattleList['Snorlax route 12'] = new TemporaryBattle('Snorlax route 12', [new GymPokemon('Snorlax', 189990, 30)], undefined, [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 12),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pokémon Tower')),
], [new TemporaryBattleRequirement('Snorlax route 12'), new ObtainedPokemonRequirement(pokemonMap.Snorlax)], {
    displayName: 'Snorlax',
    returnTown: 'Lavender Town',
    isTrainerBattle: false,
    hideTrainer: true,
    visibleRequirement: new OneFromManyRequirement([new RouteKillRequirement(10, GameConstants.Region.kanto, 11), new RouteKillRequirement(5, GameConstants.Region.kanto, 12)]),
});
TemporaryBattleList['Snorlax route 16'] = new TemporaryBattle('Snorlax route 16', [new GymPokemon('Snorlax', 189990, 30)], undefined, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pokémon Tower'))], [new TemporaryBattleRequirement('Snorlax route 16'), new ObtainedPokemonRequirement(pokemonMap.Snorlax)], {
    displayName: 'Snorlax',
    returnTown: 'Celadon City',
    isTrainerBattle: false,
    hideTrainer: true,
    visibleRequirement: new RouteKillRequirement(10, GameConstants.Region.kanto, 7),
});
TemporaryBattleList['Biker Goon 1'] = new TemporaryBattle('Biker Goon 1', [
    new GymPokemon('Koffing', 198477, 37),
    new GymPokemon('Grimer', 198477, 37),
], 'Wha... What is this kid?!', [new QuestLineStepCompletedRequirement('Bill\'s Errand', 1)], undefined, {
    displayName: 'Biker Goon',
    imageName: 'Biker Goon',
});
TemporaryBattleList['Biker Goon 2'] = new TemporaryBattle('Biker Goon 2', [new GymPokemon('Koffing', 396954, 38)], 'Stop fooling around!', [new QuestLineStepCompletedRequirement('Bill\'s Errand', 1)], undefined, {
    displayName: 'Biker Goon',
    imageName: 'Biker Goon',
});
TemporaryBattleList['Biker Goon 3'] = new TemporaryBattle('Biker Goon 3', [new GymPokemon('Grimer', 396954, 38)], '... ... ... ... ... ...', [new QuestLineStepCompletedRequirement('Bill\'s Errand', 1)], undefined, {
    displayName: 'Biker Goon',
    imageName: 'Biker Goon',
});
TemporaryBattleList['Cue Ball Paxton'] = new TemporaryBattle('Cue Ball Paxton', [
    new GymPokemon('Koffing', 221664, 39),
    new GymPokemon('Grimer', 221664, 39),
], 'All right, enough! We\'ll leave like you wanted! We\'ll be happy to see the last of this boring island!', [
    new TemporaryBattleRequirement('Biker Goon 1'),
    new TemporaryBattleRequirement('Biker Goon 2'),
    new TemporaryBattleRequirement('Biker Goon 3'),
]);
// Johto Temporary Battles
TemporaryBattleList.Sudowoodo = new TemporaryBattle('Sudowoodo', [new GymPokemon('Sudowoodo', 540000, 20)], undefined, [
    new GymBadgeRequirement(BadgeEnums.Plain),
    new RouteKillRequirement(10, GameConstants.Region.johto, 36),
], [new TemporaryBattleRequirement('Sudowoodo'), new ObtainedPokemonRequirement(pokemonMap.Sudowoodo)], {
    isTrainerBattle: false,
    returnTown: 'Goldenrod City',
    hideTrainer: true,
    visibleRequirement: new RouteKillRequirement(10, GameConstants.Region.johto, 36),
});
TemporaryBattleList['Suicune 1'] = new TemporaryBattle('Suicune 1', [new GymPokemon('Suicune', 1044000, 40)], '<i>Suicune fled.</i>', [
    new QuestLineStartedRequirement('Eusine\'s Chase'),
    new RouteKillRequirement(10, GameConstants.Region.johto, 41),
], undefined, {
    displayName: 'Suicune',
    returnTown: 'Cianwood City',
    imageName: '../pokemon/245',
    hideTrainer: true,
});
TemporaryBattleList.Eusine = new TemporaryBattle('Eusine', [
    new GymPokemon('Drowzee', 348000, 25),
    new GymPokemon('Haunter', 348000, 25),
    new GymPokemon('Electrode', 359000, 27),
], 'I hate to admit it, but you win. You\'re amazing! I\'m starting to understand why Suicune was keeping an eye on you. I\'m going to keep searching for Suicune. I have a feeling we\'ll see each other again. See you around!', [new QuestLineStepCompletedRequirement('Eusine\'s Chase', 1)], undefined, {
    displayName: 'Eusine',
    returnTown: 'Cianwood City',
});
TemporaryBattleList['Suicune 2'] = new TemporaryBattle('Suicune 2', [new GymPokemon('Suicune', 1115500, 40)], '<i>Suicune fled.</i>', [
    new QuestLineStepCompletedRequirement('Eusine\'s Chase', 2),
    new RouteKillRequirement(10, GameConstants.Region.johto, 42),
], undefined, {
    displayName: 'Suicune',
    returnTown: 'Mahogany Town',
    imageName: '../pokemon/245',
    hideTrainer: true,
});
TemporaryBattleList['Suicune 3'] = new TemporaryBattle('Suicune 3', [new GymPokemon('Suicune', 3269100, 40)], '<i>Suicune fled.</i>', [
    new QuestLineStepCompletedRequirement('Eusine\'s Chase', 4),
    new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion),
], undefined, {
    displayName: 'Suicune',
    returnTown: 'Vermilion City',
    imageName: '../pokemon/245',
    hideTrainer: true,
});
TemporaryBattleList['Suicune 4'] = new TemporaryBattle('Suicune 4', [new GymPokemon('Suicune', 3359100, 40)], '<i>Suicune fled.</i>', [
    new QuestLineStepCompletedRequirement('Eusine\'s Chase', 6),
    new RouteKillRequirement(10, GameConstants.Region.kanto, 14),
], undefined, {
    displayName: 'Suicune',
    returnTown: 'Fuchsia City',
    imageName: '../pokemon/245',
    hideTrainer: true,
});
TemporaryBattleList['Suicune 5'] = new TemporaryBattle('Suicune 5', [new GymPokemon('Suicune', 3449100, 40)], '<i>Suicune didn\'t flee.</i>', [new QuestLineStepCompletedRequirement('Eusine\'s Chase', 8)], undefined, {
    displayName: 'Suicune',
    returnTown: 'Cerulean City',
    imageName: '../pokemon/245',
    hideTrainer: true,
});
TemporaryBattleList['Suicune 6'] = new TemporaryBattle('Suicune 6', [new GymPokemon('Suicune', 3449100, 40)], '', [new QuestLineStepCompletedRequirement('Eusine\'s Chase', 10)], [new QuestLineStepCompletedRequirement('Eusine\'s Chase', 11)], {
    displayName: 'Suicune',
    returnTown: 'Cerulean City',
    imageName: '../pokemon/245',
    hideTrainer: true,
    isTrainerBattle: false,
});
TemporaryBattleList['Kimono Girls'] = new TemporaryBattle('Kimono Girls', [
    new GymPokemon('Umbreon', 660000, 42),
    new GymPokemon('Espeon', 660000, 43),
    new GymPokemon('Flareon', 660000, 46),
    new GymPokemon('Jolteon', 660000, 40),
    new GymPokemon('Vaporeon', 660000, 40),
], 'You have beautifully proven that the bond between people can be extended to the bond between people and Pokémon. We all appreciate that you have lived up to our expectations. This Clear Bell will signal to Ho-Oh that you are worthy of its attentions.', [new QuestLineStepCompletedRequirement('Rainbow Guardian', 0)], undefined, {
    imageName: '../trainers/Kimono Girl',
});
TemporaryBattleList['Spiky-eared Pichu'] = new TemporaryBattle('Spiky-eared Pichu', [new GymPokemon('Spiky-eared Pichu', 3178500, 20)], '<b><i>You caught the Spiky-eared Pichu!</i></b>', [new QuestLineStepCompletedRequirement('Unfinished Business', 6)], undefined, {
    displayName: 'Strange Pichu',
    hideTrainer: true,
    imageName: '../pokemon/172.1',
});
TemporaryBattleList['Rocket Boss Giovanni'] = new TemporaryBattle('Rocket Boss Giovanni', [
    new GymPokemon('Nidoking', 861275, 42),
    new GymPokemon('Murkrow', 861275, 43),
    new GymPokemon('Nidoqueen', 861275, 46),
    new GymPokemon('Kangaskhan', 875275, 40),
], 'What in the world are you? How this is possible...? How can a kid like you manage to destroy my dream once again? The precious dream of Team Rocket has become little more than an illusion...', [new QuestLineStepCompletedRequirement('Unfinished Business', 9)]);
// Hoenn Temporary Battles
TemporaryBattleList['Sevii Rocket Grunt 1'] = new TemporaryBattle('Sevii Rocket Grunt 1', [
    new GymPokemon('Cubone', 3861120, 37),
    new GymPokemon('Marowak', 4182880, 37),
], 'Huh, what? Why\'d you have to win?', [new QuestLineStepCompletedRequirement('Celio\'s Errand', 1)], undefined, {
    displayName: 'Team Rocket Grunt',
    imageName: '../trainers/Team Rocket Grunt (female)',
});
TemporaryBattleList['Sevii Rocket Grunt 2'] = new TemporaryBattle('Sevii Rocket Grunt 2', [
    new GymPokemon('Rattata', 1850120, 35),
    new GymPokemon('Raticate', 2011000, 35),
    new GymPokemon('Sandshrew', 1930560, 35),
    new GymPokemon('Sandslash', 2091440, 35),
], 'Develop amnesia conveniently and forget everything you heard!', [new QuestLineStepCompletedRequirement('Celio\'s Errand', 1)], undefined, {
    displayName: 'Team Rocket Grunt',
    imageName: '../trainers/Team Rocket Grunt (male)',
});
TemporaryBattleList['Sevii Rocket Grunt 3'] = new TemporaryBattle('Sevii Rocket Grunt 3', [
    new GymPokemon('Houndour', 4309500, 49),
    new GymPokemon('Houndour', 4309500, 49),
], 'Oh, but... Too much!', [new QuestLineStepCompletedRequirement('Celio\'s Errand', 8)], undefined, {
    displayName: 'Team Rocket Grunt',
    imageName: '../trainers/Team Rocket Grunt (female)',
});
TemporaryBattleList['Sevii Rocket Grunt 4'] = new TemporaryBattle('Sevii Rocket Grunt 4', [
    new GymPokemon('Machop', 2844270, 48),
    new GymPokemon('Machop', 2844270, 48),
    new GymPokemon('Machoke', 2930460, 48),
], 'What do you think you\'re doing?!', [new QuestLineStepCompletedRequirement('Celio\'s Errand', 8)], undefined, {
    displayName: 'Team Rocket Grunt',
    imageName: '../trainers/Team Rocket Grunt (male)',
});
TemporaryBattleList['Sevii Rocket Grunt 5'] = new TemporaryBattle('Sevii Rocket Grunt 5', [
    new GymPokemon('Hypno', 4309500, 49),
    new GymPokemon('Hypno', 4309500, 49),
], 'Don\'t...you...dare...laugh...', [new QuestLineStepCompletedRequirement('Celio\'s Errand', 8)], undefined, {
    displayName: 'Team Rocket Grunt',
    imageName: '../trainers/Team Rocket Grunt (male)',
});
TemporaryBattleList['Sevii Rocket Ariana'] = new TemporaryBattle('Sevii Rocket Ariana', [
    new GymPokemon('Muk', 2910600, 52),
    new GymPokemon('Arbok', 2910600, 53),
    new GymPokemon('Vileplume', 2998800, 54),
], 'You\'re doing things according to your beliefs and morals. I understand now...', [new QuestLineStepCompletedRequirement('Celio\'s Errand', 9)], undefined, {
    displayName: 'Team Rocket Executive Ariana',
    imageName: '../trainers/Rocket Executive (ariana)',
});
TemporaryBattleList['Sevii Rocket Archer'] = new TemporaryBattle('Sevii Rocket Archer', [
    new GymPokemon('Golbat', 3045900, 53),
    new GymPokemon('Weezing', 3045900, 54),
    new GymPokemon('Houndoom', 3138200, 55),
], 'Urgh... You were too strong... ... Th-that\'s Giovanni\'s Badge! So it\'s true? Team Rocket really has disbanded? ...We will abandon this warehouse. But don\'t think this is over. I won\'t let this be the end. I will find Giovanni. And I will resurrect Team Rocket! I will... Until then, farewell!', [new QuestLineStepCompletedRequirement('Celio\'s Errand', 10)], undefined, {
    displayName: 'Team Rocket Executive Archer',
    imageName: '../trainers/Rocket Executive (archer)',
});
TemporaryBattleList['Scientist Gideon'] = new TemporaryBattle('Scientist Gideon', [
    new GymPokemon('Voltorb', 1623360, 46),
    new GymPokemon('Electrode', 1724820, 46),
    new GymPokemon('Magnemite', 1623360, 46),
    new GymPokemon('Magneton', 1724820, 46),
    new GymPokemon('Porygon', 1877010, 46),
], 'If I can\'t sell the Sapphire, it\'s worthless! Go ahead, take it!', [new QuestLineStepCompletedRequirement('Celio\'s Errand', 11)]);
TemporaryBattleList['Pinkan Jessie & James'] = new TemporaryBattle('Pinkan Jessie & James', [
    new GymPokemon('Lickitung', 2000000, 40),
    new GymPokemon('Pinkan Weezing', 3000000, 50),
    new GymPokemon('Pinkan Arbok', 3000000, 50),
    new GymPokemon('Meowth', 2000, 5),
], 'We\'re blasting off again!!!!', [new QuestLineStepCompletedRequirement('Team Rocket\'s Pinkan Theme Park', 4)], undefined, {
    displayName: 'Jessie & James',
});
TemporaryBattleList['Pinkan Officer Jenny'] = new TemporaryBattle('Pinkan Officer Jenny', [
    new GymPokemon('Growlithe', 2000000, 40),
    new GymPokemon('Arcanine', 3500000, 55),
    new GymPokemon('Pinkan Nidoking', 4000000, 70),
], 'So you\'re not with them? Okay... Just don\'t help those criminals in the future, got it? Looks like some new Pinkan Pokémon have made their way to the island, if you bring us some Pinkan Berries we\'ll trade you for them.', [new QuestLineStepCompletedRequirement('Team Rocket\'s Pinkan Theme Park', 5)], undefined, {
    displayName: 'Officer Jenny',
});
// Sinnoh Temporary Battles
TemporaryBattleList['Galactic Boss Cyrus'] = new TemporaryBattle('Galactic Boss Cyrus', [
    new GymPokemon('Sneasel', 3255000, 34),
    new GymPokemon('Golbat', 3460000, 34),
    new GymPokemon('Murkrow', 3665000, 36),
], 'Impressive. Your prowess is notable.', [new QuestLineStepCompletedRequirement('A New World', 2)], undefined, { imageName: '../trainers/Galactic Boss (cyrus)' });
// Unova Temporary Battles
TemporaryBattleList['Team Plasma Grunt 1'] = new TemporaryBattle('Team Plasma Grunt 1', [new GymPokemon('Patrat', 5492150, 14)], 'Plasmaaaa! I lost! This is awful!', [new GymBadgeRequirement(BadgeEnums.Toxic)], undefined, {
    displayName: 'Team Plasma Grunt',
    imageName: '../trainers/Team Plasma Grunt (male)',
});
TemporaryBattleList['Team Plasma Grunt 2'] = new TemporaryBattle('Team Plasma Grunt 2', [new GymPokemon('Trubbish', 35896600, 27)], 'Don\'t let it go to your head... But you put up a good fight, kid!', [
    new GymBadgeRequirement(BadgeEnums.Bolt),
    new TemporaryBattleRequirement('Team Plasma Grunt 1'),
    new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 3),
], undefined, {
    displayName: 'Team Plasma Grunt',
    imageName: '../trainers/Team Plasma Grunt (male)',
});
TemporaryBattleList['Team Plasma Grunt 3'] = new TemporaryBattle('Team Plasma Grunt 3', [new GymPokemon('Watchog', 35896600, 27)], 'What\'s the big idea? This Pokémon I stole is useless!', [
    new GymBadgeRequirement(BadgeEnums.Bolt),
    new TemporaryBattleRequirement('Team Plasma Grunt 1'),
    new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 3),
], undefined, {
    displayName: 'Team Plasma Grunt',
    imageName: '../trainers/Team Plasma Grunt (female)',
});
TemporaryBattleList['Team Plasma Grunt 4'] = new TemporaryBattle('Team Plasma Grunt 4', [new GymPokemon('Koffing', 39496600, 30)], 'You! So you\'re a Trainer who fights while believing in your Pokémon, are you?', [new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 5)], undefined, {
    displayName: 'Team Plasma Grunt',
    imageName: '../trainers/Team Plasma Grunt (male)',
});
TemporaryBattleList['Team Plasma Grunt 5'] = new TemporaryBattle('Team Plasma Grunt 5', [new GymPokemon('Trubbish', 39496600, 30)], 'Plasmaaaa! Plasmaaaa!!', [new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 5)], undefined, {
    displayName: 'Team Plasma Grunt',
    imageName: '../trainers/Team Plasma Grunt (male)',
});
TemporaryBattleList['Team Plasma Grunts 1'] = new TemporaryBattle('Team Plasma Grunts 1', [
    new GymPokemon('Golbat', 9774150, 29),
    new GymPokemon('Liepard', 9974150, 29),
    new GymPokemon('Grimer', 9774150, 29),
    new GymPokemon('Krokorok', 9974150, 29),
], 'The Gym Leader is tough, but you... Are you even human?! I tried to use the same combination as you, and yet...', [new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 5)], undefined, {
    displayName: 'Team Plasma Grunts',
    imageName: 'Team Plasma Grunts (male)',
});
TemporaryBattleList['Team Plasma Grunts 2'] = new TemporaryBattle('Team Plasma Grunts 2', [
    new GymPokemon('Koffing', 9774150, 29),
    new GymPokemon('Watchog', 9974150, 29),
    new GymPokemon('Grimer', 9774150, 29),
    new GymPokemon('Raticate', 9974150, 29),
], 'No! At this rate, I... I won\'t be able to protect the Plasma Frigate! P-P-P-Plasmaaaa!', [new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 5)], undefined, {
    displayName: 'Team Plasma Grunts',
    imageName: 'Team Plasma Grunts (male)',
});
TemporaryBattleList['Team Plasma Grunt 6'] = new TemporaryBattle('Team Plasma Grunt 6', [
    new GymPokemon('Golbat', 22848300, 39),
    new GymPokemon('Garbodor', 24848300, 39),
], 'What a blunder to have made in front of Zinzolin...', [
    new TemporaryBattleRequirement('Team Plasma Grunt 4'),
    new TemporaryBattleRequirement('Team Plasma Grunt 5'),
    new TemporaryBattleRequirement('Team Plasma Grunts 1'),
    new TemporaryBattleRequirement('Team Plasma Grunts 2'),
    new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 8),
], undefined, {
    displayName: 'Team Plasma Grunt',
    imageName: '../trainers/Team Plasma Grunt (male)',
});
TemporaryBattleList['Zinzolin 1'] = new TemporaryBattle('Zinzolin 1', [
    new GymPokemon('Cryogonal', 23848300, 42),
    new GymPokemon('Sneasel', 25848300, 44),
], 'You can\'t stop us! We will use the DNA Splicers to awaken the true power of the legendary Dragon-type Pokémon! We will steal the Splicers from the Opelucid City gym leader!', [new TemporaryBattleRequirement('Team Plasma Grunt 6')], undefined, {
    displayName: 'Zinzolin',
    imageName: '../trainers/Team Plasma (zinzolin)',
});
TemporaryBattleList['Team Plasma Grunt 7'] = new TemporaryBattle('Team Plasma Grunt 7', [
    new GymPokemon('Watchog', 26298300, 44),
    new GymPokemon('Muk', 28298300, 44),
], 'You little... You knocked out my stupid pawns!', [new TemporaryBattleRequirement('Zinzolin 1')], undefined, {
    displayName: 'Team Plasma Grunt',
    imageName: '../trainers/Team Plasma Grunt (male)',
});
TemporaryBattleList['Team Plasma Grunt 8'] = new TemporaryBattle('Team Plasma Grunt 8', [
    new GymPokemon('Golbat', 26298300, 44),
    new GymPokemon('Garbodor', 28298300, 44),
], 'Argh! Lame! Stupid! Fool! Plasmaaaa!', [new TemporaryBattleRequirement('Zinzolin 1')], undefined, {
    displayName: 'Team Plasma Grunt',
    imageName: '../trainers/Team Plasma Grunt (female)',
});
TemporaryBattleList['Team Plasma Grunt 9'] = new TemporaryBattle('Team Plasma Grunt 9', [
    new GymPokemon('Seviper', 26298300, 44),
    new GymPokemon('Weezing', 28298300, 44),
], 'Even if I lose, I will not give up on justice for Team Plasma! That\'s all!', [new TemporaryBattleRequirement('Zinzolin 1')], undefined, {
    displayName: 'Team Plasma Grunt',
    imageName: '../trainers/Team Plasma Grunt (male)',
});
TemporaryBattleList['Zinzolin 2'] = new TemporaryBattle('Zinzolin 2', [
    new GymPokemon('Cryogonal', 17632200, 46),
    new GymPokemon('Cryogonal', 17632200, 46),
    new GymPokemon('Weavile', 20632200, 48),
], 'Have you gotten even stronger than you were in Lucanosa Town? How, in such a brief amount of time...', [
    new TemporaryBattleRequirement('Team Plasma Grunt 7'),
    new TemporaryBattleRequirement('Team Plasma Grunt 8'),
    new TemporaryBattleRequirement('Team Plasma Grunt 9'),
], undefined, {
    displayName: 'Zinzolin',
    imageName: '../trainers/Team Plasma (zinzolin)',
});
TemporaryBattleList['Plasma Shadow 1'] = new TemporaryBattle('Plasma Shadow 1', [
    new GymPokemon('Pawniard', 18065533, 46),
    new GymPokemon('Pawniard', 18065533, 46),
    new GymPokemon('Absol', 21065533, 48),
], 'I hate to admit it, but... You\'re a good trainer. Awww. How unlucky. I don\'t happen to be the one holding the DNA Splicers. I was just buying time for the others to escape. Cheerio, bye-bye, whatever.', [new TemporaryBattleRequirement('Zinzolin 2')], undefined, {
    displayName: 'Plasma Shadow',
    imageName: 'Plasma Shadow',
});
TemporaryBattleList.Colress = new TemporaryBattle('Colress', [
    new GymPokemon('Magneton', 13557307, 50),
    new GymPokemon('Metang', 13557307, 50),
    new GymPokemon('Beheeyem', 13557307, 50),
    new GymPokemon('Magnezone', 13657307, 50),
    new GymPokemon('Klinklang', 13957307, 52),
], 'So this is what it means to draw forth the power hidden in your Pokémon! To me, whether Team Plasma wins or whether you win will decide how the relationship between people and Pokémon should be! You\'d better hurry, they have already captured the legendary Dragon-type Pokémon! Good luck in your battle!', [
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Giant Chasm')),
    new TemporaryBattleRequirement('Plasma Shadow 1'),
    new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 17),
], undefined, { imageName: '../trainers/Team Plasma (colress)' });
TemporaryBattleList['Plasma Shadow 2'] = new TemporaryBattle('Plasma Shadow 2', [
    new GymPokemon('Pawniard', 25025488, 49),
    new GymPokemon('Pawniard', 25025488, 49),
    new GymPokemon('Absol', 28025488, 51),
], 'It doesn\'t bother us a bit if the stolen Pokémon cry or beg.', [new TemporaryBattleRequirement('Colress')], undefined, {
    displayName: 'Plasma Shadow',
    imageName: 'Plasma Shadow',
});
TemporaryBattleList['Plasma Shadow 3'] = new TemporaryBattle('Plasma Shadow 3', [
    new GymPokemon('Pawniard', 25025488, 49),
    new GymPokemon('Pawniard', 25025488, 49),
    new GymPokemon('Banette', 28025488, 51),
], 'It doesn\'t bother us a bit if we have to use another Pokémon after one is defeated.', [new TemporaryBattleRequirement('Colress')], undefined, {
    displayName: 'Plasma Shadow',
    imageName: 'Plasma Shadow',
});
TemporaryBattleList['Plasma Shadow 4'] = new TemporaryBattle('Plasma Shadow 4', [
    new GymPokemon('Pawniard', 25025488, 49),
    new GymPokemon('Pawniard', 25025488, 49),
    new GymPokemon('Accelgor', 28025488, 51),
], 'It doesn\'t bother us a bit if Pokémon win or lose.', [new TemporaryBattleRequirement('Colress')], undefined, {
    displayName: 'Plasma Shadow',
    imageName: 'Plasma Shadow',
});
TemporaryBattleList['Ghetsis 1'] = new TemporaryBattle('Ghetsis 1', [
    new GymPokemon('Kyurem (Black)', 43933198, 50),
    new GymPokemon('Kyurem (White)', 43933198, 50),
], 'I can\'t believe it! The Black and White Kyurem I went to all the trouble of preparing! How irritating! Now I have to go recapture Kyurem, don\'t I? But first, I\'ll take down this disgusting Trainer with my own hand! This time I WILL succeed! No matter what they try, no one will be able to stop me!', [
    new TemporaryBattleRequirement('Plasma Shadow 2'),
    new TemporaryBattleRequirement('Plasma Shadow 3'),
    new TemporaryBattleRequirement('Plasma Shadow 4'),
    new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 20),
], undefined, {
    displayName: 'Ghetsis',
    imageName: 'Ghetsis',
});
TemporaryBattleList['Ghetsis 2'] = new TemporaryBattle('Ghetsis 2', [
    new GymPokemon('Cofagrigus', 16176055, 50),
    new GymPokemon('Seismitoad', 16176055, 50),
    new GymPokemon('Eelektross', 16176055, 50),
    new GymPokemon('Drapion', 16176055, 50),
    new GymPokemon('Toxicroak', 16276055, 50),
    new GymPokemon('Hydreigon', 16676055, 52),
], 'My plans for complete and total world domination foiled yet again? No! It mustn\'t be! I couldn\'t have been defeated by some random Trainer from who knows where!', [new TemporaryBattleRequirement('Ghetsis 1')], undefined, {
    displayName: 'Ghetsis',
    imageName: 'Ghetsis',
});
// Kalos Temporary Battles
TemporaryBattleList['Aipom Alley'] = new TemporaryBattle('Aipom Alley', [
    new GymPokemon('Aipom', 31200000, 66),
    new GymPokemon('Aipom', 31200000, 66),
    new GymPokemon('Aipom', 31200000, 66),
    new GymPokemon('Aipom', 31200000, 66),
    new GymPokemon('Aipom', 31200000, 66),
], '<i>The Aipoms run off, dropping a small glass vial.</i>', [new QuestLineStepCompletedRequirement('Detective Pikachu', 0)], undefined, {
    hideTrainer: true,
});
TemporaryBattleList['Mime Interview'] = new TemporaryBattle('Mime Interview', [new GymPokemon('Mr. Mime', 160225334, 100)], '<i>Mr. Mime relents and agrees to tell you what he knows.</i>', [new QuestLineStepCompletedRequirement('Detective Pikachu', 3)], undefined, {
    hideTrainer: true,
});
TemporaryBattleList['Underground Fighting Ring'] = new TemporaryBattle('Underground Fighting Ring', [
    new GymPokemon('Charizard', 83224411, 70),
    new GymPokemon('Magikarp', 10, 70),
    new GymPokemon('Gyarados', 85658821, 70),
], 'OK, OK! I get my R from a guy at Clifford Industries, in Goldenrod City.', [new QuestLineStepCompletedRequirement('Detective Pikachu', 5)], undefined, { imageName: '../trainers/Veteran (male)' });
TemporaryBattleList['Lab Ambush'] = new TemporaryBattle('Lab Ambush', [
    new GymPokemon('Greninja', 58333333, 70),
    new GymPokemon('Greninja', 58333333, 70),
    new GymPokemon('Greninja', 58333333, 70),
], '<i>As the dust clears from the battle, you see that Detective Pikachu has been wounded!</i>', [new QuestLineStepCompletedRequirement('Detective Pikachu', 9)], undefined, {
    hideTrainer: true,
});
TemporaryBattleList.Imposter = new TemporaryBattle('Imposter', [new GymPokemon('Ditto', 186753099, 100)], '<i>The Ditto loses its human form and collapses to the floor.</i>', [new QuestLineStepCompletedRequirement('Detective Pikachu', 12)], undefined, {
    hideTrainer: true,
    imageName: '../trainers/Office Worker (male)',
});
TemporaryBattleList['Possessed Mewtwo'] = new TemporaryBattle('Possessed Mewtwo', [new GymPokemon('Mewtwo', 214456599, 100)], '<i>Howard\'s headset sparks and breaks. Mewtwo calms down, apparently free from Howard\'s influence. Mewtwo gives you a brief nod and flies off.</i>', [new QuestLineStepCompletedRequirement('Detective Pikachu', 14)], undefined, {
    hideTrainer: true,
});
TemporaryBattleList.Riot = new TemporaryBattle('Riot', [
    new GymPokemon('Ninjask', 160554441, 70),
    new GymPokemon('Ninjask', 160554441, 70),
    new GymPokemon('Greninja', 165551573, 70),
], 'Curse you! Diancie has escaped!', [new QuestLineStepCompletedRequirement('Princess Diancie', 0)]);
TemporaryBattleList.Merilyn = new TemporaryBattle('Merilyn', [
    new GymPokemon('Yanma', 243684567, 80),
    new GymPokemon('Delphox', 249682234, 80),
], 'You ruined my shopping spree!', [new QuestLineStepCompletedRequirement('Princess Diancie', 1)]);
TemporaryBattleList['Millis and Argus Steel'] = new TemporaryBattle('Millis and Argus Steel', [
    new GymPokemon('Honedge', 126325325, 70),
    new GymPokemon('Doublade', 129983175, 70),
    new GymPokemon('Aegislash (Blade)', 130012468, 70),
    new GymPokemon('Chesnaught', 131462975, 70),
], 'Our plans are ruined! Retreat!', [new QuestLineStepCompletedRequirement('Princess Diancie', 3)]);
TemporaryBattleList.AZ = new TemporaryBattle('AZ', [
    new GymPokemon('Torkoal', 247996000, 60),
    new GymPokemon('Golurk', 247996000, 60),
    new GymPokemon('Sigilyph', 247996000, 60),
], 'Thank you very much for battling with me. Now I finally feel free…', [new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion)], undefined, {
    firstTimeRewardFunction: () => {
        App.game.party.gainPokemonById(670.05);
    },
});
TemporaryBattleList['Ash Ketchum Kanto'] = new TemporaryBattle('Ash Ketchum Kanto', [
    new GymPokemon('Pikachu (Partner Cap)', 123998000, 58),
    new GymPokemon('Pidgeot', 123998000, 56),
    new GymPokemon('Bulbasaur', 123998000, 56),
    new GymPokemon('Charizard', 123998000, 60),
    new GymPokemon('Squirtle', 123998000, 62),
    new GymPokemon('Muk', 123998000, 62),
], 'That was a fun battle!', [new QuestLineStartedRequirement('The New Kid')], undefined, {
    displayName: 'Ash Ketchum',
    returnTown: 'Pallet Town',
    imageName: 'Ash Ketchum',
});
TemporaryBattleList['Ash Ketchum Johto'] = new TemporaryBattle('Ash Ketchum Johto', [
    new GymPokemon('Pikachu (Partner Cap)', 123998000, 58),
    new GymPokemon('Heracross', 123998000, 56),
    new GymPokemon('Noctowl', 123998000, 56),
    new GymPokemon('Bayleef', 123998000, 60),
    new GymPokemon('Cyndaquil', 123998000, 62),
    new GymPokemon('Totodile', 123998000, 62),
], 'Don\'t I know you from somewhere?', [new QuestLineStepCompletedRequirement('The New Kid', 0), new RouteKillRequirement(10, GameConstants.Region.johto, 48)], undefined, {
    displayName: 'Ash Ketchum',
    returnTown: 'Cianwood City',
    imageName: 'Ash Ketchum',
});
TemporaryBattleList['Ash Ketchum Hoenn'] = new TemporaryBattle('Ash Ketchum Hoenn', [
    new GymPokemon('Pikachu (Partner Cap)', 123998000, 58),
    new GymPokemon('Swellow', 123998000, 56),
    new GymPokemon('Grovyle', 123998000, 56),
    new GymPokemon('Torkoal', 123998000, 62),
    new GymPokemon('Corphish', 123998000, 60),
    new GymPokemon('Glalie', 123998000, 62),
], 'That was a nice rematch. You sure are a strong Pokémon trainer! I\'ll beat you next time!', [new QuestLineStepCompletedRequirement('The New Kid', 1)], undefined, {
    displayName: 'Ash Ketchum',
    returnTown: 'Lilycove City',
    imageName: 'Ash Ketchum',
});
TemporaryBattleList['Ash Ketchum Sinnoh'] = new TemporaryBattle('Ash Ketchum Sinnoh', [
    new GymPokemon('Pikachu (Partner Cap)', 123998000, 58),
    new GymPokemon('Staraptor', 123998000, 56),
    new GymPokemon('Torterra', 123998000, 56),
    new GymPokemon('Infernape', 123998000, 60),
    new GymPokemon('Buizel', 123998000, 62),
    new GymPokemon('Gible', 123998000, 62),
], 'Wow, these battles are intense. It\'s getting hard to keep up with you... I think I need a break.', [new QuestLineStepCompletedRequirement('The New Kid', 2), new RouteKillRequirement(10, GameConstants.Region.sinnoh, 226)], undefined, {
    displayName: 'Ash Ketchum',
    returnTown: 'Survival Area',
    imageName: 'Ash Ketchum',
});
TemporaryBattleList['Ash Ketchum Unova'] = new TemporaryBattle('Ash Ketchum Unova', [
    new GymPokemon('Pikachu (Partner Cap)', 123998000, 58),
    new GymPokemon('Unfezant', 123998000, 56),
    new GymPokemon('Snivy', 123998000, 62),
    new GymPokemon('Pignite', 123998000, 60),
    new GymPokemon('Oshawott', 123998000, 56),
    new GymPokemon('Krookodile', 123998000, 62),
], 'Hey, what gives? I was just trying to relax here!', [new QuestLineStepCompletedRequirement('The New Kid', 3)], undefined, {
    displayName: 'Ash Ketchum',
    returnTown: 'Mistralton City',
    imageName: 'Ash Ketchum',
});
TemporaryBattleList['Ash Ketchum Kalos'] = new TemporaryBattle('Ash Ketchum Kalos', [
    new GymPokemon('Pikachu (Partner Cap)', 123998000, 58),
    new GymPokemon('Talonflame', 123998000, 56),
    new GymPokemon('Hawlucha', 123998000, 56),
    new GymPokemon('Goodra', 123998000, 60),
    new GymPokemon('Noivern', 123998000, 62),
    new GymPokemon('Ash-Greninja', 123998000, 62),
], 'I forgive you for chasing me around. I\'m going to take some time off with a long vacation on a tropical island! Will you take care of my Greninja for me? He has a special Bond while in Battle with his trainer.', [new QuestLineStepCompletedRequirement('The New Kid', 4)], undefined, {
    displayName: 'Ash Ketchum',
    returnTown: 'Kiloude City',
    imageName: 'Ash Ketchum',
});
TemporaryBattleList['Ash Ketchum Pinkan'] = new TemporaryBattle('Ash Ketchum Pinkan', [
    new GymPokemon('Pinkan Pikachu', 123998000, 58),
    new GymPokemon('Snorlax', 123998000, 56),
    new GymPokemon('Lapras', 123998000, 56),
    new GymPokemon('Kingler', 123998000, 60),
    new GymPokemon('Tauros', 123998000, 62),
    new GymPokemon('Charizard', 123998000, 62),
], 'Hey, you found me on my vacation! Just make sure your Pikachu does not eat the berries here.', [new QuestLineCompletedRequirement('The New Kid'), new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pinkan Mountain'))], undefined, {
    displayName: 'Ash Ketchum',
    returnTown: 'Pinkan Mountain',
    imageName: 'Ash Ketchum',
    firstTimeRewardFunction: () => {
        App.game.party.gainPokemonById(25.13);
    },
});
//Alola Temporary Battles
TemporaryBattleList['Ultra Wormhole'] = new TemporaryBattle('Ultra Wormhole', [new GymPokemon('???', 264590972, 27)], '<i>The creature escaped back into the ultra wormhole.</i>', [new GymBadgeRequirement(BadgeEnums.RockiumZ)], undefined, {
    hideTrainer: true,
    imageName: 'Wormhole',
});
TemporaryBattleList['Ultra Megalopolis'] = new TemporaryBattle('Ultra Megalopolis', [new GymPokemon('Necrozma (Ultra)', 282601920, 60)], '<i>Necrozma fled.</i>', [new GymBadgeRequirement(BadgeEnums.DarkiniumZ)], undefined, {
    firstTimeRewardFunction: () => {
        App.game.quests.getQuestLine('Mina\'s Trial').beginQuest();
    },
    hideTrainer: true,
    imageName: 'Wormhole',
});
TemporaryBattleList['Captain Mina'] = new TemporaryBattle('Captain Mina', [
    new GymPokemon('Mawile', 90200640, 51),
    new GymPokemon('Granbull', 90200640, 51),
    new GymPokemon('Ribombee', 102200640, 51),
], 'Woah! I\'m shocked at your strength!', [new TemporaryBattleRequirement('Ultra Megalopolis')], undefined, { imageName: '../gymLeaders/Mina' });
TemporaryBattleList['Captain Ilima'] = new TemporaryBattle('Captain Ilima', [
    new GymPokemon('Gumshoos', 90200640, 51),
    new GymPokemon('Smeargle', 90200640, 51),
    new GymPokemon('Komala', 102200640, 51),
], 'Yes! You have emerged victorious!', [
    new TemporaryBattleRequirement('Captain Mina'),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Hau\'oli Cemetery')),
], undefined, { imageName: '../gymLeaders/Ilima' });
TemporaryBattleList['Captain Mallow'] = new TemporaryBattle('Captain Mallow', [
    new GymPokemon('Trevenant', 90200640, 51),
    new GymPokemon('Shiinotic', 90200640, 51),
    new GymPokemon('Tsareena', 102200640, 51),
], 'Sure enough, when it comes to you and Pokémon, the quality of the ingredients shines forth!', [new TemporaryBattleRequirement('Captain Ilima')], undefined, { imageName: '../gymLeaders/Mallow' });
TemporaryBattleList['Captain Lana'] = new TemporaryBattle('Captain Lana', [
    new GymPokemon('Lanturn', 90200640, 51),
    new GymPokemon('Cloyster', 90200640, 51),
    new GymPokemon('Araquanid', 102200640, 51),
], 'Well! Once again, you certainly reeled me in.', [new TemporaryBattleRequirement('Captain Mallow')], undefined, { imageName: '../gymLeaders/Lana' });
TemporaryBattleList['Captain Kiawe'] = new TemporaryBattle('Captain Kiawe', [
    new GymPokemon('Arcanine', 90200640, 51),
    new GymPokemon('Talonflame', 90200640, 51),
    new GymPokemon('Alolan Marowak', 102200640, 51),
], 'Not enough dancing!', [new TemporaryBattleRequirement('Captain Lana')], undefined, { imageName: '../gymLeaders/Kiawe' });
TemporaryBattleList['Captain Sophocles'] = new TemporaryBattle('Captain Sophocles', [
    new GymPokemon('Togedemaru', 90200640, 51),
    new GymPokemon('Magnezone', 90200640, 51),
    new GymPokemon('Alolan Golem', 102200640, 51),
], 'I couldn\'t get it done. Don\'t worry about it, my precious Pokémon...', [new TemporaryBattleRequirement('Captain Kiawe')], undefined, { imageName: '../gymLeaders/Sophocles' });
TemporaryBattleList['Kahuna Nanu'] = new TemporaryBattle('Kahuna Nanu', [
    new GymPokemon('Sableye', 90200640, 51),
    new GymPokemon('Absol', 90200640, 51),
    new GymPokemon('Alolan Persian', 102200640, 51),
], '...', [new TemporaryBattleRequirement('Captain Sophocles')], undefined, { imageName: '../gymLeaders/Nanu' });
TemporaryBattleList.Anabel = new TemporaryBattle('Anabel', [
    new GymPokemon('Alakazam', 229464883, 61),
    new GymPokemon('Weavile', 229464883, 61),
    new GymPokemon('Mismagius', 229464883, 61),
    new GymPokemon('Salamence', 229464883, 61),
    new GymPokemon('Snorlax', 234464883, 61),
], 'Oh you\'re good! You might just have a shot, here are some Beast Balls. Go hunt down those strange Ultra Beasts! If you need more Beast Balls, you can buy them here.', [new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 0)]);
TemporaryBattleList['Captain Mina UB'] = new TemporaryBattle('Captain Mina UB', [
    new GymPokemon('Klefki', 239464883, 61),
    new GymPokemon('Granbull', 239464883, 61),
    new GymPokemon('Shiinotic', 239464883, 61),
    new GymPokemon('Wigglytuff', 239464883, 61),
    new GymPokemon('Ribombee', 244464883, 61),
], 'Your strength is still shocking!', [new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 7)], undefined, {
    displayName: 'Captain Mina',
    imageName: '../gymLeaders/Mina',
});
TemporaryBattleList['Kahuna Nanu UB'] = new TemporaryBattle('Kahuna Nanu UB', [
    new GymPokemon('Sableye', 249464883, 63),
    new GymPokemon('Krookodile', 249464883, 63),
    new GymPokemon('Honchkrow', 249464883, 63),
    new GymPokemon('Absol', 249464883, 63),
    new GymPokemon('Alolan Persian', 254464883, 63),
], 'I had to be sure. Sure that you\'re ready for what\'s coming...', [new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 13)], undefined, {
    displayName: 'Kahuna Nanu',
    imageName: '../gymLeaders/Nanu',
});
TemporaryBattleList['Ash Ketchum Alola'] = new TemporaryBattle('Ash Ketchum Alola', [
    new GymPokemon('Pikachu (Partner Cap)', 182908638, 58),
    new GymPokemon('Rowlet', 182908638, 56),
    new GymPokemon('Incineroar', 182908638, 56),
    new GymPokemon('Lycanroc (Dusk)', 182908638, 60),
    new GymPokemon('Naganadel', 182908638, 62),
    new GymPokemon('Melmetal', 182908638, 62),
], 'Thanks for battling with me again! I\'ve reignited my passion to battle after a nice, long break! I have no idea where I keep getting all these hats, but I have too many. Here, take this one for your Pikachu. It can help you grow together as partners!', [new QuestLineCompletedRequirement('The New Kid'), new RouteKillRequirement(10, GameConstants.Region.alola, 30)], undefined, {
    displayName: 'Ash Ketchum',
    returnTown: 'Seafolk Village',
    imageName: 'Ash Ketchum',
    firstTimeRewardFunction: () => {
        App.game.party.gainPokemonById(25.07);
    },
});
//Galar Temporary Battles
//TODO: Have Hop's starter depend on the players Galar starter
TemporaryBattleList.Hop1 = new TemporaryBattle('Hop1', [
    new GymPokemon('Wooloo', 96928085, 3),
    new GymPokemon('Sobble', 105005426, 5),
], 'Well, that was a shock! Guess I know now why Lee thought he should give you a Pokémon, too...', [new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion)], undefined, {
    displayName: 'Pokémon Trainer Hop',
    returnTown: 'Postwick',
    imageName: '../gymLeaders/Hop',
});
TemporaryBattleList.Mirages = new TemporaryBattle('Mirages', [
    new GymPokemon('Zacian (Battle Hero)', 114428989, 70),
    new GymPokemon('Zamazenta (Battle Hero)', 114428989, 70),
], '<i>The Pokémon fled.</i>', [new TemporaryBattleRequirement('Hop1')], undefined, {
    hideTrainer: true,
});
TemporaryBattleList.Hop2 = new TemporaryBattle('Hop2', [
    new GymPokemon('Wooloo', 88822988, 6),
    new GymPokemon('Rookidee', 88822988, 5),
    new GymPokemon('Sobble', 91598706, 8),
], 'And I even got my Pokéball throw perfect too!', [new RouteKillRequirement(10, GameConstants.Region.galar, 2)], undefined, {
    displayName: 'Pokémon Trainer Hop',
    returnTown: 'Professor Magnolia\'s House',
    imageName: '../gymLeaders/Hop',
});
TemporaryBattleList.Hop3 = new TemporaryBattle('Hop3', [
    new GymPokemon('Wooloo', 102249719, 11),
    new GymPokemon('Rookidee', 102249719, 12),
    new GymPokemon('Sobble', 105348195, 14),
], 'Was that really good training? Looks like I\'d better keep my guard up!', [new RouteKillRequirement(10, GameConstants.Region.galar, 6)], undefined, {
    displayName: 'Pokémon Trainer Hop',
    returnTown: 'Motostoke',
    imageName: '../gymLeaders/Hop',
});
TemporaryBattleList.Bede1 = new TemporaryBattle('Bede1', [
    new GymPokemon('Solosis', 110628515, 13),
    new GymPokemon('Gothita', 110628515, 15),
    new GymPokemon('Hatenna', 113980895, 16),
], 'I see... Well, that\'s fine. I wasn\'t really trying all that hard anyway.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Galar Mine'))], undefined, {
    displayName: 'Pokémon Trainer Bede',
    imageName: 'Bede',
});
TemporaryBattleList.Hop4 = new TemporaryBattle('Hop4', [
    new GymPokemon('Wooloo', 145167441, 18),
    new GymPokemon('Corvisquire', 145167441, 19),
    new GymPokemon('Drizzile', 149566454, 21),
], 'We both got ourselves the same Grass Badge, so how come you\'re so much stronger?', [new RouteKillRequirement(10, GameConstants.Region.galar, 14)], undefined, {
    displayName: 'Pokémon Trainer Hop',
    returnTown: 'Turffield',
    imageName: '../gymLeaders/Hop',
});
TemporaryBattleList.Bede2 = new TemporaryBattle('Bede2', [
    new GymPokemon('Solosis', 135596164, 21),
    new GymPokemon('Gothita', 135596164, 22),
    new GymPokemon('Galarian Ponyta', 135596164, 22),
    new GymPokemon('Hatenna', 139970233, 23),
], 'You showed at least a little effort, so I decided I should let you win!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Galar Mine No. 2'))], undefined, {
    displayName: 'Pokémon Trainer Bede',
    imageName: 'Bede',
});
TemporaryBattleList.Marnie1 = new TemporaryBattle('Marnie1', [
    new GymPokemon('Croagunk', 183113060, 24),
    new GymPokemon('Scraggy', 183113060, 24),
    new GymPokemon('Morpeko', 188661940, 26),
], 'You beat me... Guess you must not be so bad after all, huh?', [new RouteKillRequirement(10, GameConstants.Region.galar, 15)], undefined, {
    displayName: 'Pokémon Trainer Marnie',
    imageName: '../gymLeaders/Marnie',
});
TemporaryBattleList.Hop5 = new TemporaryBattle('Hop5', [
    new GymPokemon('Cramorant', 184350136, 28),
    new GymPokemon('Toxel', 184350136, 29),
    new GymPokemon('Silicobra', 184350136, 30),
    new GymPokemon('Drizzile', 190296915, 33),
], 'My strategy goes right to pot when I\'ve got all these bad thoughts running through my head...', [new RouteKillRequirement(10, GameConstants.Region.galar, 23)], undefined, {
    displayName: 'Pokémon Trainer Hop',
    returnTown: 'Stow-on-Side',
    imageName: '../gymLeaders/Hop',
});
TemporaryBattleList.Bede3 = new TemporaryBattle('Bede3', [
    new GymPokemon('Duosion', 197836220, 32),
    new GymPokemon('Gothorita', 197836220, 32),
    new GymPokemon('Galarian Ponyta', 197836220, 33),
    new GymPokemon('Hattrem', 204218033, 35),
], 'This has to be some kind of mistake. I demand a do-over!', [new QuestLineStepCompletedRequirement('The Darkest Day', 0)], undefined, {
    displayName: 'Pokémon Trainer Bede',
    returnTown: 'Stow-on-Side',
    imageName: 'Bede',
});
TemporaryBattleList.Hop6 = new TemporaryBattle('Hop6', [
    new GymPokemon('Trevenant', 164138786, 34),
    new GymPokemon('Heatmor', 164138786, 34),
    new GymPokemon('Snorlax', 164138786, 35),
    new GymPokemon('Boltund', 164138786, 35),
    new GymPokemon('Inteleon', 169087694, 37),
], 'This is rubbish... My team can\'t perform if I can\'t get my own head straight as their Trainer...', [new GymBadgeRequirement(BadgeEnums.Galar_Fairy)], undefined, {
    displayName: 'Pokémon Trainer Hop',
    returnTown: 'Hammerlocke',
    imageName: '../gymLeaders/Hop',
});
TemporaryBattleList.Hop7 = new TemporaryBattle('Hop7', [
    new GymPokemon('Dubwool', 169633690, 40),
    new GymPokemon('Corviknight', 169633690, 40),
    new GymPokemon('Pincurchin', 169633690, 39),
    new GymPokemon('Snorlax', 169633690, 39),
    new GymPokemon('Inteleon', 174748273, 41),
], 'I still can\'t even beat you, my true rival... But I think I\'m starting to see the light!', [
    new MultiRequirement([
        new GymBadgeRequirement(BadgeEnums.Galar_Rock),
        new GymBadgeRequirement(BadgeEnums.Galar_Ice),
    ]),
], undefined, {
    displayName: 'Pokémon Trainer Hop',
    returnTown: 'Circhester',
    imageName: '../gymLeaders/Hop',
});
TemporaryBattleList.Marnie2 = new TemporaryBattle('Marnie2', [
    new GymPokemon('Liepard', 214035920, 42),
    new GymPokemon('Toxicroak', 214035920, 43),
    new GymPokemon('Scrafty', 214035920, 43),
    new GymPokemon('Morpeko', 220940304, 44),
], 'What\'s with that?! My Pokémon didn\'t get a chance to really do their thing at all. Ugh!', [new RouteKillRequirement(10, GameConstants.Region.galar, 30)], undefined, {
    displayName: 'Pokémon Trainer Marnie',
    returnTown: 'Circhester',
    imageName: '../gymLeaders/Marnie',
});
TemporaryBattleList.Eternatus = new TemporaryBattle('Eternatus', [new GymPokemon('Eternatus', 1454990842, 60)], '<i>You defeated Eternatus, but it looks like it\'s not over yet!</i>', [new QuestLineStepCompletedRequirement('The Darkest Day', 16)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/890',
});
TemporaryBattleList['The Darkest Day'] = new TemporaryBattle('The Darkest Day', [new GymPokemon('Eternamax Eternatus', 1567895148, 60)], '<b><i>You caught Eternatus!</i></b>', [new TemporaryBattleRequirement('Eternatus')], undefined, {
    firstTimeRewardFunction: () => {
        App.game.party.gainPokemonById(890);
    },
    hideTrainer: true,
    imageName: '../pokemon/890',
});
TemporaryBattleList.Hop8 = new TemporaryBattle('Hop8', [
    new GymPokemon('Dubwool', 372064692, 59),
    new GymPokemon('Pincurchin', 372064692, 59),
    new GymPokemon('Cramorant', 372064692, 58),
    new GymPokemon('Snorlax', 372064692, 58),
    new GymPokemon('Corviknight', 372064692, 58),
    new GymPokemon('Inteleon', 375642238, 60),
], 'I didn\'t expect there to be such a gap between you and me, mate...', [new QuestLineStepCompletedRequirement('Sword and Shield', 0)], undefined, {
    displayName: 'Pokémon Trainer Hop',
    imageName: '../gymLeaders/Hop',
});
TemporaryBattleList.Sordward1 = new TemporaryBattle('Sordward1', [
    new GymPokemon('Sirfetch\'d', 443615594, 60),
    new GymPokemon('Golisopod', 443615594, 60),
    new GymPokemon('Doublade', 443615594, 60),
    new GymPokemon('Bisharp', 457925774, 60),
], 'Oh... How can this be? My...my Pokémon...', [new QuestLineStepCompletedRequirement('Sword and Shield', 2)], undefined, {
    displayName: 'Pokémon Trainer Sordward',
    imageName: 'Sordward',
});
TemporaryBattleList.Shielbert1 = new TemporaryBattle('Shielbert1', [
    new GymPokemon('Sirfetch\'d', 443615594, 60),
    new GymPokemon('Bronzong', 443615594, 60),
    new GymPokemon('Falinks', 443615594, 60),
    new GymPokemon('Klinklang', 457925774, 60),
], 'Oh... How can this be? My...my Pokémon...', [new QuestLineStepCompletedRequirement('Sword and Shield', 2)], undefined, {
    displayName: 'Pokémon Trainer Shielbert',
    imageName: 'Shielbert',
});
TemporaryBattleList['Rampaging Tsareena'] = new TemporaryBattle('Rampaging Tsareena', [new GymPokemon('Tsareena', 1757548771, 60)], '<i>The Rampaging Tsareena fainted.</i>', [new QuestLineStepCompletedRequirement('Sword and Shield', 3)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/763',
});
TemporaryBattleList['Rampaging Gyarados'] = new TemporaryBattle('Rampaging Gyarados', [new GymPokemon('Gyarados', 1757548771, 60)], '<i>The Rampaging Gyarados fainted.</i>', [new TemporaryBattleRequirement('Rampaging Tsareena')], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/130',
});
TemporaryBattleList['Rampaging Torkoal'] = new TemporaryBattle('Rampaging Torkoal', [new GymPokemon('Torkoal', 1757548771, 60)], '<i>The Rampaging Torkoal fainted.</i>', [new TemporaryBattleRequirement('Rampaging Gyarados')], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/324',
});
TemporaryBattleList['Sordward & Shielbert'] = new TemporaryBattle('Sordward & Shielbert', [
    new GymPokemon('Golisopod', 298548951, 62),
    new GymPokemon('Bronzong', 298548951, 62),
    new GymPokemon('Doublade', 298548951, 62),
    new GymPokemon('Falinks', 298548951, 62),
    new GymPokemon('Bisharp', 310734622, 62),
    new GymPokemon('Klinklang', 310734622, 62),
], 'Quite the vexing predicament indeed, surely this must be some kind of mistake...', [new QuestLineStepCompletedRequirement('Sword and Shield', 7)]);
TemporaryBattleList['Rampaging Conkeldurr'] = new TemporaryBattle('Rampaging Conkeldurr', [new GymPokemon('Conkeldurr', 1917325934, 60)], '<i>The Rampaging Conkeldurr fainted.</i>', [new TemporaryBattleRequirement('Sordward & Shielbert')], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/534',
});
TemporaryBattleList['Rampaging Dusknoir'] = new TemporaryBattle('Rampaging Dusknoir', [new GymPokemon('Dusknoir', 1917325934, 60)], '<i>The Rampaging Dusknoir fainted.</i>', [new TemporaryBattleRequirement('Sordward & Shielbert')], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/477',
});
TemporaryBattleList['Gym Leader Bede'] = new TemporaryBattle('Gym Leader Bede', [
    new GymPokemon('Mawile', 594371034, 61),
    new GymPokemon('Gardevoir', 594371034, 61),
    new GymPokemon('Galarian Rapidash', 594371034, 62),
    new GymPokemon('Hatterene', 613544294, 63),
], 'Thank you for the battle. I can now accept you as the Champion. It\'s painful to admit, but I\'ve come to realise a few of my weaknesses. But I\'ll keep getting stronger. I\'ll reach the pinnacle of what Fairy types can do.', [
    new TemporaryBattleRequirement('Rampaging Conkeldurr'),
    new TemporaryBattleRequirement('Rampaging Dusknoir'),
], undefined, { imageName: '../gymLeaders/Bede' });
TemporaryBattleList['Rampaging Gigalith'] = new TemporaryBattle('Rampaging Gigalith', [new GymPokemon('Gigalith', 1917325934, 60)], '<i>The Rampaging Gigalith fainted.</i>', [new TemporaryBattleRequirement('Gym Leader Bede')], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/526',
});
TemporaryBattleList['Rampaging Froslass'] = new TemporaryBattle('Rampaging Froslass', [new GymPokemon('Froslass', 1917325934, 60)], '<i>The Rampaging Froslass fainted.</i>', [new TemporaryBattleRequirement('Gym Leader Bede')], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/478',
});
TemporaryBattleList['Gym Leader Marnie'] = new TemporaryBattle('Gym Leader Marnie', [
    new GymPokemon('Liepard', 476934822, 59),
    new GymPokemon('Toxicroak', 476934822, 59),
    new GymPokemon('Scrafty', 476934822, 59),
    new GymPokemon('Morpeko', 476934822, 60),
    new GymPokemon('Grimmsnarl', 491314766, 60),
], 'Yeah I lost, but I\'m gonna learn from your battle style and everythin\'!', [
    new TemporaryBattleRequirement('Rampaging Gigalith'),
    new TemporaryBattleRequirement('Rampaging Froslass'),
]);
TemporaryBattleList['Rampaging Haxorus'] = new TemporaryBattle('Rampaging Haxorus', [new GymPokemon('Haxorus', 2077103093, 60)], '<i>The Rampaging Haxorus fainted.</i>', [new TemporaryBattleRequirement('Gym Leader Marnie')], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/612',
});
TemporaryBattleList.Sordward2 = new TemporaryBattle('Sordward2', [
    new GymPokemon('Sirfetch\'d', 554746301, 64),
    new GymPokemon('Golisopod', 554746301, 64),
    new GymPokemon('Doublade', 554746301, 64),
    new GymPokemon('Bisharp', 572641343, 64),
], 'Oho... My noble Pokémon...', [new QuestLineStepCompletedRequirement('Sword and Shield', 14)], undefined, {
    displayName: 'Pokémon Trainer Sordward',
    imageName: 'Sordward',
});
TemporaryBattleList.Shielbert2 = new TemporaryBattle('Shielbert2', [
    new GymPokemon('Sirfetch\'d', 554746301, 64),
    new GymPokemon('Bronzong', 554746301, 64),
    new GymPokemon('Falinks', 554746301, 64),
    new GymPokemon('Klinklang', 572641343, 64),
], 'Oho... My noble Pokémon...', [new QuestLineStepCompletedRequirement('Sword and Shield', 14)], undefined, {
    displayName: 'Pokémon Trainer Shielbert',
    imageName: 'Shielbert',
});
TemporaryBattleList['Rampaging Zacian'] = new TemporaryBattle('Rampaging Zacian', [new GymPokemon('Zacian (Crowned Sword)', 2357932001, 70)], '<i>Zacian fainted.</i>', [new QuestLineStepCompletedRequirement('Sword and Shield', 16)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/888.1',
});
TemporaryBattleList['Rampaging Zamazenta'] = new TemporaryBattle('Rampaging Zamazenta', [new GymPokemon('Zamazenta (Crowned Shield)', 2357932001, 70)], '<i>Zamazenta fainted.</i>', [new QuestLineStepCompletedRequirement('Sword and Shield', 16)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/889.1',
});
TemporaryBattleList.Klara1 = new TemporaryBattle('Klara1', [
    new GymPokemon('Venipede', 799982445, 58),
    new GymPokemon('Galarian Slowpoke', 816143704, 60),
], 'Oh, my next Pokémon\'s gonna make short work-- Huh? That was my last one?', [new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)], undefined, {
    displayName: 'Pokémon Trainer Klara',
    returnTown: 'Armor Station',
    imageName: '../gymLeaders/Klara',
});
TemporaryBattleList.Avery1 = new TemporaryBattle('Avery1', [
    new GymPokemon('Abra', 799982445, 58),
    new GymPokemon('Galarian Slowpoke', 816143704, 60),
], 'Such strength! I\'m in Psyshock!', [new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)], undefined, {
    displayName: 'Pokémon Trainer Avery',
    returnTown: 'Armor Station',
    imageName: '../gymLeaders/Avery',
});
TemporaryBattleList.Mustard = new TemporaryBattle('Mustard', [
    new GymPokemon('Mienfoo', 839981565, 60),
    new GymPokemon('Shinx', 856950891, 60),
], 'That was everything I hoped for and more!', [new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 0)], undefined, {
    displayName: 'Dojo Master Mustard',
});
TemporaryBattleList.Klara2 = new TemporaryBattle('Klara2', [
    new GymPokemon('Galarian Slowpoke', 564237041, 62),
    new GymPokemon('Koffing', 564237041, 62),
    new GymPokemon('Whirlipede', 581335135, 63),
], 'Just what have you got that I don\'t?', [
    new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 6),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Warm-Up Tunnel')),
], undefined, {
    displayName: 'Pokémon Trainer Klara',
    imageName: '../gymLeaders/Klara',
});
TemporaryBattleList.Avery2 = new TemporaryBattle('Avery2', [
    new GymPokemon('Galarian Slowpoke', 564237041, 62),
    new GymPokemon('Woobat', 564237041, 62),
    new GymPokemon('Kadabra', 581335135, 63),
], 'What a Psystrike to my poor pride...', [
    new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 6),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Warm-Up Tunnel')),
], undefined, {
    displayName: 'Pokémon Trainer Avery',
    imageName: '../gymLeaders/Avery',
});
TemporaryBattleList.Klara3 = new TemporaryBattle('Klara3', [
    new GymPokemon('Skorupi', 452051518, 65),
    new GymPokemon('Galarian Weezing', 452051518, 66),
    new GymPokemon('Whirlipede', 452051518, 66),
    new GymPokemon('Galarian Slowbro', 470316225, 67),
], 'But I didn\'t hold back! I gave it everything I\'ve got...', [new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 9)], undefined, {
    displayName: 'Pokémon Trainer Klara',
    returnTown: 'Master Dojo',
    imageName: '../gymLeaders/Klara',
});
TemporaryBattleList.Avery3 = new TemporaryBattle('Avery3', [
    new GymPokemon('Galarian Ponyta', 452051518, 65),
    new GymPokemon('Swoobat', 452051518, 66),
    new GymPokemon('Kadabra', 452051518, 66),
    new GymPokemon('Galarian Slowbro', 470316225, 67),
], 'Oh, I should just Imprison myself for this!', [new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 9)], undefined, {
    displayName: 'Pokémon Trainer Avery',
    returnTown: 'Master Dojo',
    imageName: '../gymLeaders/Avery',
});
TemporaryBattleList.Kubfu = new TemporaryBattle('Kubfu', [new GymPokemon('Kubfu', 1886555626, 50)], undefined, [new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 11)], [new ObtainedPokemonRequirement(pokemonMap.Kubfu)], {
    isTrainerBattle: false,
    hideTrainer: true,
    imageName: '../pokemon/891',
});
TemporaryBattleList['Zarude Tribe 1'] = new TemporaryBattle('Zarude Tribe 1', [
    new GymPokemon('Zarude', 379667456, 79),
    new GymPokemon('Zarude', 379667456, 80),
    new GymPokemon('Zarude', 379667456, 81),
    new GymPokemon('Zarude', 379667456, 81),
    new GymPokemon('Zarude', 379667456, 81),
], 'Za! Za! Zarude!', [new QuestLineStepCompletedRequirement('Secrets of the Jungle', 3)], undefined, {
    displayName: 'Zarude Tribe',
    imageName: 'Zarude Tribe',
    hideTrainer: true,
});
TemporaryBattleList['Zarude Tribe 2'] = new TemporaryBattle('Zarude Tribe 2', [
    new GymPokemon('Zarude', 327054363, 82),
    new GymPokemon('Zarude', 327054363, 82),
    new GymPokemon('Zarude', 327054363, 83),
    new GymPokemon('Zarude', 327054363, 83),
    new GymPokemon('Zarude', 327054363, 84),
    new GymPokemon('Zarude', 327054363, 85),
], 'Za! Za! Zarude!', [new QuestLineStepCompletedRequirement('Secrets of the Jungle', 5)], undefined, {
    displayName: 'Zarude Tribe',
    imageName: 'Zarude Tribe',
    hideTrainer: true,
});
TemporaryBattleList['Zarude Tribe 3'] = new TemporaryBattle('Zarude Tribe 3', [
    new GymPokemon('Zarude', 327054363, 85),
    new GymPokemon('Zarude', 327054363, 85),
    new GymPokemon('Zarude', 327054363, 86),
    new GymPokemon('Zarude', 327054363, 86),
    new GymPokemon('Zarude', 327054363, 87),
    new GymPokemon('Zarude', 327054363, 88),
], 'Za! Za! Zarude!', [new QuestLineStepCompletedRequirement('Secrets of the Jungle', 5)], undefined, {
    displayName: 'Zarude Tribe',
    imageName: 'Zarude Tribe',
    hideTrainer: true,
});
TemporaryBattleList['Ash Ketchum Galar'] = new TemporaryBattle('Ash Ketchum Galar', [
    new GymPokemon('Pikachu (Partner Cap)', 348526193, 58),
    new GymPokemon('Sirfetch\'d', 342447247, 56),
    new GymPokemon('Dragonite', 342447247, 56),
    new GymPokemon('Dracovish', 342447247, 60),
    new GymPokemon('Gigantamax Gengar', 358657768, 62),
    new GymPokemon('Mega Lucario', 368789343, 62),
], '...I really thought I could beat you this time. Still, it was a really fun battle! Okay, let\'s go to Glimwood Tangle! I\'ll beat you there!', [new QuestLineStepCompletedRequirement('Secrets of the Jungle', 8)], undefined, {
    displayName: 'Ash Ketchum',
    returnTown: 'Master Dojo',
    imageName: 'Ash Ketchum',
});
TemporaryBattleList['Zarude (Dada)'] = new TemporaryBattle('Zarude (Dada)', [new GymPokemon('Zarude (Dada)', 2090303973, 90)], 'Zaru Zaruza. Zarude!', [new QuestLineStepCompletedRequirement('Secrets of the Jungle', 10)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/893.1',
});
TemporaryBattleList['Flowering Celebi'] = new TemporaryBattle('Flowering Celebi', [new GymPokemon('Flowering Celebi', 2132963238, 100)], 'Cel Cel! Celebi!', [new QuestLineStepCompletedRequirement('Secrets of the Jungle', 12)], [new ObtainedPokemonRequirement(pokemonMap['Flowering Celebi'])], {
    isTrainerBattle: false,
    hideTrainer: true,
    imageName: '../pokemon/251.2',
});
TemporaryBattleList.Peony = new TemporaryBattle('Peony', [
    new GymPokemon('Copperajah', 869380472, 70),
    new GymPokemon('Aggron', 877467733, 70),
], 'Gahahaaa! Look at me, takin\' a thrashin\' from a youngster like you!', [new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)], undefined, {
    displayName: 'Pokémon Trainer Peony',
});
TemporaryBattleList.Calyrex = new TemporaryBattle('Calyrex', [new GymPokemon('Calyrex', 1886555626, 80)], 'Cracrown crow. Roooooowwwn rown crown.', [new QuestLineStepCompletedRequirement('The Crown of Galar', 0)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/898',
});
TemporaryBattleList.Glastrier = new TemporaryBattle('Glastrier', [new GymPokemon('Glastrier', 2031393560, 75)], '<i>The Pokémon ran away!</i>', [new QuestLineStepCompletedRequirement('The Crown of Galar', 4)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/896',
});
TemporaryBattleList.Spectrier = new TemporaryBattle('Spectrier', [new GymPokemon('Spectrier', 2031393560, 75)], '<i>The Pokémon ran away!</i>', [new QuestLineStepCompletedRequirement('The Crown of Galar', 4)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/897',
});
TemporaryBattleList['Dyna Tree Birds'] = new TemporaryBattle('Dyna Tree Birds', [
    new GymPokemon('Galarian Articuno', 710987746, 70),
    new GymPokemon('Galarian Zapdos', 710987746, 70),
    new GymPokemon('Galarian Moltres', 710987746, 70),
], '<i>The legendary birds fled in different directions.</i>', [new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 1)], undefined, {
    hideTrainer: true,
    returnTown: 'Dyna Tree Hill',
});
TemporaryBattleList['Galarian Articuno 1'] = new TemporaryBattle('Galarian Articuno 1', [new GymPokemon('Galarian Articuno', 2031393560, 100)], '<i>Galarian Articuno fled to elsewhere in the Crown Tundra.</i>', [
    new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 3),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Roaring-Sea Caves')),
], undefined, {
    hideTrainer: true,
    displayName: 'Galarian Articuno',
    returnTown: 'Roaring-Sea Caves',
    imageName: '../pokemon/144.1',
    visibleRequirement: new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 3),
});
TemporaryBattleList['Galarian Articuno 2'] = new TemporaryBattle('Galarian Articuno 2', [new GymPokemon('Galarian Articuno', 2031393560, 100)], '<i>Galarian Articuno fled to elsewhere in the Crown Tundra.</i>', [
    new TemporaryBattleRequirement('Galarian Articuno 1'),
    new RouteKillRequirement(10, GameConstants.Region.galar, 51),
], undefined, {
    hideTrainer: true,
    displayName: 'Galarian Articuno',
    returnTown: 'Roaring-Sea Caves',
    imageName: '../pokemon/144.1',
    visibleRequirement: new TemporaryBattleRequirement('Galarian Articuno 1'),
});
TemporaryBattleList['Galarian Articuno 3'] = new TemporaryBattle('Galarian Articuno 3', [new GymPokemon('Galarian Articuno', 2031393560, 100)], '<i>Galarian Articuno fled to elsewhere in the Crown Tundra.</i>', [
    new TemporaryBattleRequirement('Galarian Articuno 2'),
    new RouteKillRequirement(10, GameConstants.Region.galar, 55),
], undefined, {
    hideTrainer: true,
    displayName: 'Galarian Articuno',
    returnTown: 'Tunnel to the Top',
    imageName: '../pokemon/144.1',
    visibleRequirement: new TemporaryBattleRequirement('Galarian Articuno 2'),
});
TemporaryBattleList['Galarian Zapdos 1'] = new TemporaryBattle('Galarian Zapdos 1', [new GymPokemon('Galarian Zapdos', 2031393560, 100)], '<i>Galarian Zapdos fled to elsewhere in the Wild Area.</i>', [new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 3)], undefined, {
    hideTrainer: true,
    displayName: 'Galarian Zapdos',
    returnTown: 'Motostoke',
    imageName: '../pokemon/145.1',
});
TemporaryBattleList['Galarian Zapdos 2'] = new TemporaryBattle('Galarian Zapdos 2', [new GymPokemon('Galarian Zapdos', 2031393560, 100)], '<i>Galarian Zapdos fled to elsewhere in the Wild Area.</i>', [
    new TemporaryBattleRequirement('Galarian Zapdos 1'),
    new RouteKillRequirement(10, GameConstants.Region.galar, 19),
], undefined, {
    hideTrainer: true,
    displayName: 'Galarian Zapdos',
    returnTown: 'Dusty Bowl',
    imageName: '../pokemon/145.1',
    visibleRequirement: new TemporaryBattleRequirement('Galarian Zapdos 1'),
});
TemporaryBattleList['Galarian Zapdos 3'] = new TemporaryBattle('Galarian Zapdos 3', [new GymPokemon('Galarian Zapdos', 2031393560, 100)], '<i>Galarian Zapdos fled to elsewhere in the Wild Area.</i>', [
    new TemporaryBattleRequirement('Galarian Zapdos 2'),
    new RouteKillRequirement(10, GameConstants.Region.galar, 7),
], undefined, {
    hideTrainer: true,
    displayName: 'Galarian Zapdos',
    returnTown: 'Motostoke',
    imageName: '../pokemon/145.1',
    visibleRequirement: new TemporaryBattleRequirement('Galarian Zapdos 2'),
});
TemporaryBattleList['Galarian Moltres 1'] = new TemporaryBattle('Galarian Moltres 1', [new GymPokemon('Galarian Moltres', 2031393560, 100)], '<i>Galarian Moltres fled to elsewhere in the Isle of Armor.</i>', [
    new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 3),
    new RouteKillRequirement(10, GameConstants.Region.galar, 37),
], undefined, {
    hideTrainer: true,
    displayName: 'Galarian Moltres',
    returnTown: 'Courageous Cavern',
    imageName: '../pokemon/146.1',
    visibleRequirement: new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 3),
});
TemporaryBattleList['Galarian Moltres 2'] = new TemporaryBattle('Galarian Moltres 2', [new GymPokemon('Galarian Moltres', 2031393560, 100)], '<i>Galarian Moltres fled to elsewhere in the Isle of Armor.</i>', [
    new TemporaryBattleRequirement('Galarian Moltres 1'),
    new RouteKillRequirement(10, GameConstants.Region.galar, 41),
], undefined, {
    hideTrainer: true,
    displayName: 'Galarian Moltres',
    returnTown: 'Master Dojo',
    imageName: '../pokemon/146.1',
    visibleRequirement: new TemporaryBattleRequirement('Galarian Moltres 1'),
});
TemporaryBattleList['Galarian Moltres 3'] = new TemporaryBattle('Galarian Moltres 3', [new GymPokemon('Galarian Moltres', 2031393560, 100)], '<i>Galarian Moltres fled to elsewhere in the Isle of Armor.</i>', [
    new TemporaryBattleRequirement('Galarian Moltres 2'),
    new RouteKillRequirement(10, GameConstants.Region.galar, 34),
], undefined, {
    hideTrainer: true,
    displayName: 'Galarian Moltres',
    returnTown: 'Master Dojo',
    imageName: '../pokemon/146.1',
    visibleRequirement: new TemporaryBattleRequirement('Galarian Moltres 2'),
});
TemporaryBattleList.Regigigas = new TemporaryBattle('Regigigas', [new GymPokemon('Regigigas', 2031393560, 100)], '<i>The ancient giant was defeated!</i>', [new QuestLineStepCompletedRequirement('The Ancient Golems', 6)], [new QuestLineStepCompletedRequirement('The Ancient Golems', 7)], {
    hideTrainer: true,
    isTrainerBattle: false,
    imageName: '../pokemon/486',
});
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/enums/Badges.d.ts" />
class TemporaryBattleRunner {
    static startBattle(battle) {
        var _a;
        this.running(false);
        this.battleObservable(battle);
        App.game.gameState = GameConstants.GameState.idle;
        DungeonRunner.timeBonus(FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.Time_Flute));
        this.timeLeft(GameConstants.TEMP_BATTLE_TIME * this.timeBonus());
        this.timeLeftPercentage(100);
        player.route(0);
        Battle.route = 0;
        Battle.catching(!((_a = battle.optionalArgs.isTrainerBattle) !== null && _a !== void 0 ? _a : true));
        TemporaryBattleBattle.battle = battle;
        TemporaryBattleBattle.totalPokemons(battle.pokemons.length);
        TemporaryBattleBattle.index(0);
        TemporaryBattleBattle.generateNewEnemy();
        App.game.gameState = GameConstants.GameState.temporaryBattle;
        this.running(true);
        this.resetGif();
        setTimeout(() => {
            this.hideGif();
        }, GameConstants.GYM_COUNTDOWN);
    }
    static hideGif() {
        $('#temporaryBattleGoContainer').hide();
    }
    static resetGif() {
        if (!Settings.getSetting('showGymGoAnimation').value) {
            return;
        }
        $('#temporaryBattleGoContainer').show();
        setTimeout(() => {
            $('#temporaryBattleGo').attr('src', 'assets/gifs/go.gif');
        }, 0);
    }
    static tick() {
        if (!this.running()) {
            return;
        }
        if (this.timeLeft() < 0) {
            this.battleLost();
        }
        this.timeLeft(this.timeLeft() - GameConstants.TEMP_BATTLE_TICK);
        this.timeLeftPercentage(Math.floor(this.timeLeft() / (GameConstants.TEMP_BATTLE_TIME * FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.Time_Flute)) * 100));
        const currentFluteBonus = FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.Time_Flute);
        if (currentFluteBonus != this.timeBonus()) {
            if (currentFluteBonus > this.timeBonus()) {
                if (this.timeBonus() === 1) {
                    this.timeBonus(currentFluteBonus);
                    this.timeLeft(this.timeLeft() * this.timeBonus());
                }
                else {
                    this.timeLeft(this.timeLeft() / this.timeBonus());
                    this.timeBonus(currentFluteBonus);
                    this.timeLeft(this.timeLeft() * this.timeBonus());
                }
            }
            else {
                this.timeLeft(this.timeLeft() / this.timeBonus());
                this.timeBonus(currentFluteBonus);
            }
        }
    }
    static battleLost() {
        if (this.running()) {
            this.running(false);
            Notifier.notify({
                message: `It appears you are not strong enough to defeat ${TemporaryBattleBattle.battle.getDisplayName()}.`,
                type: NotificationConstants.NotificationOption.danger,
            });
            player.town(TemporaryBattleBattle.battle.getTown());
            App.game.gameState = GameConstants.GameState.town;
        }
    }
    static battleWon(battle) {
        var _a, _b, _c, _d;
        if (this.running()) {
            this.running(false);
            if (App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex(battle.name)]() == 0) {
                (_b = (_a = battle.optionalArgs).firstTimeRewardFunction) === null || _b === void 0 ? void 0 : _b.call(_a);
                if (battle.defeatMessage) {
                    $('#temporaryBattleWonModal').modal('show');
                }
            }
            (_d = (_c = battle.optionalArgs).rewardFunction) === null || _d === void 0 ? void 0 : _d.call(_c);
            GameHelper.incrementObservable(App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex(battle.name)]);
            player.town(battle.getTown());
            App.game.gameState = GameConstants.GameState.town;
        }
    }
}
TemporaryBattleRunner.timeLeft = ko.observable(GameConstants.TEMP_BATTLE_TIME);
TemporaryBattleRunner.timeLeftPercentage = ko.observable(100);
TemporaryBattleRunner.timeBonus = ko.observable(1);
TemporaryBattleRunner.battleObservable = ko.observable();
TemporaryBattleRunner.running = ko.observable(false);
TemporaryBattleRunner.timeLeftSeconds = ko.pureComputed(() => {
    return (Math.ceil(TemporaryBattleRunner.timeLeft() / 100) / 10).toFixed(1);
});
class BattleCafe extends TownContent {
    constructor() {
        super([new ObtainedPokemonRequirement(pokemonMap.Milcery)]);
    }
    cssClass() {
        return 'btn btn-info';
    }
    isVisible() {
        return true;
    }
    onclick() {
        $('#battleCafeModal').modal('show');
    }
    text() {
        return 'Battle Café';
    }
}
class BattleCafeSaveObject {
    constructor() {
        this.saveKey = 'BattleCafe';
    }
    toJSON() {
        return {
            spinsLeft: BattleCafeController.spinsLeft(),
        };
    }
    fromJSON(json) {
        var _a;
        if (!json) {
            return;
        }
        BattleCafeController.spinsLeft((_a = json.spinsLeft) !== null && _a !== void 0 ? _a : BattleCafeController.defaultSpins);
    }
}
class BattleCafeController {
    static spin(clockwise) {
        if (!BattleCafeController.canSpin()) {
            return;
        }
        BattleCafeController.clockwise(clockwise);
        BattleCafeController.isSpinning(true);
        const spinTime = +$('#battleCafeDuration').val();
        const sweet = BattleCafeController.selectedSweet();
        setTimeout(() => {
            BattleCafeController.isSpinning(false);
            BattleCafeController.unlockAlcremie(clockwise, spinTime, sweet);
            BattleCafeController.spinsLeft(BattleCafeController.spinsLeft() - 1);
            BattleCafeController.getPrice(sweet).forEach(b => GameHelper.incrementObservable(App.game.farming.berryList[b.berry], b.amount * -1));
        }, spinTime * 1000);
    }
    static unlockAlcremie(clockwise, spinTime, sweet) {
        let spin;
        const curHour = (new Date()).getHours();
        if (spinTime == 3600) {
            (new PokemonItem('Milcery (Cheesy)', 0)).gain(1);
            return;
        }
        if (curHour == 19 && !clockwise && spinTime > 10) {
            spin = GameConstants.AlcremieSpins.at7Above10;
        }
        else if (curHour >= 5 && curHour < 19) { // Is day
            if (clockwise && spinTime < 5) {
                spin = GameConstants.AlcremieSpins.dayClockwiseBelow5;
            }
            else if (clockwise && spinTime >= 5) {
                spin = GameConstants.AlcremieSpins.dayClockwiseAbove5;
            }
            else if (!clockwise && spinTime < 5) {
                spin = GameConstants.AlcremieSpins.dayCounterclockwiseBelow5;
            }
            else if (!clockwise && spinTime >= 5) {
                spin = GameConstants.AlcremieSpins.dayCounterclockwiseAbove5;
            }
        }
        else { // Is night
            if (clockwise && spinTime < 5) {
                spin = GameConstants.AlcremieSpins.nightClockwiseBelow5;
            }
            else if (clockwise && spinTime >= 5) {
                spin = GameConstants.AlcremieSpins.nightClockwiseAbove5;
            }
            else if (!clockwise && spinTime < 5) {
                spin = GameConstants.AlcremieSpins.nightCounterclockwiseBelow5;
            }
            else if (!clockwise && spinTime >= 5) {
                spin = GameConstants.AlcremieSpins.nightCounterclockwiseAbove5;
            }
        }
        BattleCafeController.evolutions[sweet][spin].gain(1);
    }
    static canSpin() {
        if (BattleCafeController.selectedSweet() == undefined) {
            Notifier.notify({
                message: 'No sweet selected.',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        if (BattleCafeController.isSpinning()) {
            Notifier.notify({
                message: 'Already spinning.',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        if (BattleCafeController.spinsLeft() < 1) {
            Notifier.notify({
                message: 'No spins left today.',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        if (+$('#battleCafeDuration').val() > 20 && +$('#battleCafeDuration').val() != 3600) {
            Notifier.notify({
                message: 'Can\'t spin for more than 20 seconds',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        if (+$('#battleCafeDuration').val() < 1) {
            Notifier.notify({
                message: 'It only counts as spinning, if you spin for some time...',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        if (!BattleCafeController.canBuySweet(BattleCafeController.selectedSweet())()) {
            Notifier.notify({
                message: 'Not enough berries for this sweet.',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        return true;
    }
    static canBuySweet(sweet) {
        return ko.pureComputed(() => {
            return BattleCafeController.getPrice(sweet).every(b => {
                if (App.game.farming.berryList[b.berry]() < b.amount) {
                    return false;
                }
                return true;
            });
        });
    }
    static getCaughtStatus(sweet) {
        return ko.pureComputed(() => {
            return Math.min(...Object.values(BattleCafeController.evolutions[sweet]).map((pokemon) => pokemon.getCaughtStatus()));
        });
    }
    static getPrice(sweet) {
        switch (sweet) {
            // should be easy to do, without touching the farm
            case GameConstants.AlcremieSweet['Strawberry Sweet']:
                return [
                    { berry: BerryType.Cheri, amount: 500 },
                    { berry: BerryType.Leppa, amount: 500 },
                    { berry: BerryType.Razz, amount: 50 },
                ];
            // max gen 2
            case GameConstants.AlcremieSweet['Clover Sweet']:
                return [
                    { berry: BerryType.Wepear, amount: 1000 },
                    { berry: BerryType.Aguav, amount: 2000 },
                    { berry: BerryType.Lum, amount: 10 },
                ];
            // max gen 3
            case GameConstants.AlcremieSweet['Star Sweet']:
                return [
                    { berry: BerryType.Pinap, amount: 2000 },
                    { berry: BerryType.Grepa, amount: 100 },
                    { berry: BerryType.Nomel, amount: 50 },
                ];
            // max gen 4
            case GameConstants.AlcremieSweet['Berry Sweet']:
                return [
                    { berry: BerryType.Yache, amount: 75 },
                    { berry: BerryType.Coba, amount: 150 },
                    { berry: BerryType.Passho, amount: 1000 },
                ];
            // max gen 4
            case GameConstants.AlcremieSweet['Ribbon Sweet']:
                return [
                    { berry: BerryType.Bluk, amount: 3000 },
                    { berry: BerryType.Pamtre, amount: 50 },
                    { berry: BerryType.Payapa, amount: 100 },
                ];
            // max gen 5
            case GameConstants.AlcremieSweet['Flower Sweet']:
                return [
                    { berry: BerryType.Figy, amount: 15000 },
                    { berry: BerryType.Iapapa, amount: 20000 },
                    { berry: BerryType.Liechi, amount: 3 },
                ];
            // max gen 5
            case GameConstants.AlcremieSweet['Love Sweet']:
                return [
                    { berry: BerryType.Roseli, amount: 700 },
                    { berry: BerryType.Haban, amount: 200 },
                    { berry: BerryType.Lansat, amount: 5 },
                ];
        }
    }
}
BattleCafeController.defaultSpins = 3;
BattleCafeController.selectedSweet = ko.observable(undefined);
BattleCafeController.spinsLeft = ko.observable(BattleCafeController.defaultSpins);
BattleCafeController.isSpinning = ko.observable(false);
BattleCafeController.clockwise = ko.observable(false);
BattleCafeController.evolutions = {
    [GameConstants.AlcremieSweet['Strawberry Sweet']]: {
        [GameConstants.AlcremieSpins.dayClockwiseBelow5]: new PokemonItem('Alcremie (Strawberry Vanilla)', 0),
        [GameConstants.AlcremieSpins.dayCounterclockwiseBelow5]: new PokemonItem('Alcremie (Strawberry Ruby Cream)', 0),
        [GameConstants.AlcremieSpins.nightClockwiseBelow5]: new PokemonItem('Alcremie (Strawberry Matcha)', 0),
        [GameConstants.AlcremieSpins.nightCounterclockwiseAbove5]: new PokemonItem('Alcremie (Strawberry Mint)', 0),
        [GameConstants.AlcremieSpins.nightClockwiseAbove5]: new PokemonItem('Alcremie (Strawberry Lemon)', 0),
        [GameConstants.AlcremieSpins.nightCounterclockwiseBelow5]: new PokemonItem('Alcremie (Strawberry Salted)', 0),
        [GameConstants.AlcremieSpins.dayCounterclockwiseAbove5]: new PokemonItem('Alcremie (Strawberry Ruby Swirl)', 0),
        [GameConstants.AlcremieSpins.dayClockwiseAbove5]: new PokemonItem('Alcremie (Strawberry Caramel)', 0),
        [GameConstants.AlcremieSpins.at7Above10]: new PokemonItem('Alcremie (Strawberry Rainbow)', 0),
    },
    [GameConstants.AlcremieSweet['Love Sweet']]: {
        [GameConstants.AlcremieSpins.dayClockwiseBelow5]: new PokemonItem('Alcremie (Love Vanilla)', 0),
        [GameConstants.AlcremieSpins.dayCounterclockwiseBelow5]: new PokemonItem('Alcremie (Love Ruby Cream)', 0),
        [GameConstants.AlcremieSpins.nightClockwiseBelow5]: new PokemonItem('Alcremie (Love Matcha)', 0),
        [GameConstants.AlcremieSpins.nightCounterclockwiseAbove5]: new PokemonItem('Alcremie (Love Mint)', 0),
        [GameConstants.AlcremieSpins.nightClockwiseAbove5]: new PokemonItem('Alcremie (Love Lemon)', 0),
        [GameConstants.AlcremieSpins.nightCounterclockwiseBelow5]: new PokemonItem('Alcremie (Love Salted)', 0),
        [GameConstants.AlcremieSpins.dayCounterclockwiseAbove5]: new PokemonItem('Alcremie (Love Ruby Swirl)', 0),
        [GameConstants.AlcremieSpins.dayClockwiseAbove5]: new PokemonItem('Alcremie (Love Caramel)', 0),
        [GameConstants.AlcremieSpins.at7Above10]: new PokemonItem('Alcremie (Love Rainbow)', 0),
    },
    [GameConstants.AlcremieSweet['Berry Sweet']]: {
        [GameConstants.AlcremieSpins.dayClockwiseBelow5]: new PokemonItem('Alcremie (Berry Vanilla)', 0),
        [GameConstants.AlcremieSpins.dayCounterclockwiseBelow5]: new PokemonItem('Alcremie (Berry Ruby Cream)', 0),
        [GameConstants.AlcremieSpins.nightClockwiseBelow5]: new PokemonItem('Alcremie (Berry Matcha)', 0),
        [GameConstants.AlcremieSpins.nightCounterclockwiseAbove5]: new PokemonItem('Alcremie (Berry Mint)', 0),
        [GameConstants.AlcremieSpins.nightClockwiseAbove5]: new PokemonItem('Alcremie (Berry Lemon)', 0),
        [GameConstants.AlcremieSpins.nightCounterclockwiseBelow5]: new PokemonItem('Alcremie (Berry Salted)', 0),
        [GameConstants.AlcremieSpins.dayCounterclockwiseAbove5]: new PokemonItem('Alcremie (Berry Ruby Swirl)', 0),
        [GameConstants.AlcremieSpins.dayClockwiseAbove5]: new PokemonItem('Alcremie (Berry Caramel)', 0),
        [GameConstants.AlcremieSpins.at7Above10]: new PokemonItem('Alcremie (Berry Rainbow)', 0),
    },
    [GameConstants.AlcremieSweet['Clover Sweet']]: {
        [GameConstants.AlcremieSpins.dayClockwiseBelow5]: new PokemonItem('Alcremie (Clover Vanilla)', 0),
        [GameConstants.AlcremieSpins.dayCounterclockwiseBelow5]: new PokemonItem('Alcremie (Clover Ruby Cream)', 0),
        [GameConstants.AlcremieSpins.nightClockwiseBelow5]: new PokemonItem('Alcremie (Clover Matcha)', 0),
        [GameConstants.AlcremieSpins.nightCounterclockwiseAbove5]: new PokemonItem('Alcremie (Clover Mint)', 0),
        [GameConstants.AlcremieSpins.nightClockwiseAbove5]: new PokemonItem('Alcremie (Clover Lemon)', 0),
        [GameConstants.AlcremieSpins.nightCounterclockwiseBelow5]: new PokemonItem('Alcremie (Clover Salted)', 0),
        [GameConstants.AlcremieSpins.dayCounterclockwiseAbove5]: new PokemonItem('Alcremie (Clover Ruby Swirl)', 0),
        [GameConstants.AlcremieSpins.dayClockwiseAbove5]: new PokemonItem('Alcremie (Clover Caramel)', 0),
        [GameConstants.AlcremieSpins.at7Above10]: new PokemonItem('Alcremie (Clover Rainbow)', 0),
    },
    [GameConstants.AlcremieSweet['Flower Sweet']]: {
        [GameConstants.AlcremieSpins.dayClockwiseBelow5]: new PokemonItem('Alcremie (Flower Vanilla)', 0),
        [GameConstants.AlcremieSpins.dayCounterclockwiseBelow5]: new PokemonItem('Alcremie (Flower Ruby Cream)', 0),
        [GameConstants.AlcremieSpins.nightClockwiseBelow5]: new PokemonItem('Alcremie (Flower Matcha)', 0),
        [GameConstants.AlcremieSpins.nightCounterclockwiseAbove5]: new PokemonItem('Alcremie (Flower Mint)', 0),
        [GameConstants.AlcremieSpins.nightClockwiseAbove5]: new PokemonItem('Alcremie (Flower Lemon)', 0),
        [GameConstants.AlcremieSpins.nightCounterclockwiseBelow5]: new PokemonItem('Alcremie (Flower Salted)', 0),
        [GameConstants.AlcremieSpins.dayCounterclockwiseAbove5]: new PokemonItem('Alcremie (Flower Ruby Swirl)', 0),
        [GameConstants.AlcremieSpins.dayClockwiseAbove5]: new PokemonItem('Alcremie (Flower Caramel)', 0),
        [GameConstants.AlcremieSpins.at7Above10]: new PokemonItem('Alcremie (Flower Rainbow)', 0),
    },
    [GameConstants.AlcremieSweet['Star Sweet']]: {
        [GameConstants.AlcremieSpins.dayClockwiseBelow5]: new PokemonItem('Alcremie (Star Vanilla)', 0),
        [GameConstants.AlcremieSpins.dayCounterclockwiseBelow5]: new PokemonItem('Alcremie (Star Ruby Cream)', 0),
        [GameConstants.AlcremieSpins.nightClockwiseBelow5]: new PokemonItem('Alcremie (Star Matcha)', 0),
        [GameConstants.AlcremieSpins.nightCounterclockwiseAbove5]: new PokemonItem('Alcremie (Star Mint)', 0),
        [GameConstants.AlcremieSpins.nightClockwiseAbove5]: new PokemonItem('Alcremie (Star Lemon)', 0),
        [GameConstants.AlcremieSpins.nightCounterclockwiseBelow5]: new PokemonItem('Alcremie (Star Salted)', 0),
        [GameConstants.AlcremieSpins.dayCounterclockwiseAbove5]: new PokemonItem('Alcremie (Star Ruby Swirl)', 0),
        [GameConstants.AlcremieSpins.dayClockwiseAbove5]: new PokemonItem('Alcremie (Star Caramel)', 0),
        [GameConstants.AlcremieSpins.at7Above10]: new PokemonItem('Alcremie (Star Rainbow)', 0),
    },
    [GameConstants.AlcremieSweet['Ribbon Sweet']]: {
        [GameConstants.AlcremieSpins.dayClockwiseBelow5]: new PokemonItem('Alcremie (Ribbon Vanilla)', 0),
        [GameConstants.AlcremieSpins.dayCounterclockwiseBelow5]: new PokemonItem('Alcremie (Ribbon Ruby Cream)', 0),
        [GameConstants.AlcremieSpins.nightClockwiseBelow5]: new PokemonItem('Alcremie (Ribbon Matcha)', 0),
        [GameConstants.AlcremieSpins.nightCounterclockwiseAbove5]: new PokemonItem('Alcremie (Ribbon Mint)', 0),
        [GameConstants.AlcremieSpins.nightClockwiseAbove5]: new PokemonItem('Alcremie (Ribbon Lemon)', 0),
        [GameConstants.AlcremieSpins.nightCounterclockwiseBelow5]: new PokemonItem('Alcremie (Ribbon Salted)', 0),
        [GameConstants.AlcremieSpins.dayCounterclockwiseAbove5]: new PokemonItem('Alcremie (Ribbon Ruby Swirl)', 0),
        [GameConstants.AlcremieSpins.dayClockwiseAbove5]: new PokemonItem('Alcremie (Ribbon Caramel)', 0),
        [GameConstants.AlcremieSpins.at7Above10]: new PokemonItem('Alcremie (Ribbon Rainbow)', 0),
    },
};
class NPC {
    constructor(name, dialog, options = {}) {
        this.name = name;
        this.dialog = dialog;
        this.options = options;
        this.talkedTo = ko.observable(false); // Used for custom quests
    }
    get dialogHTML() {
        return this.dialog.map(line => `<p>${line}</p>`).join('\n');
    }
    isVisible() {
        var _a, _b;
        return (_b = (_a = this.options.requirement) === null || _a === void 0 ? void 0 : _a.isCompleted()) !== null && _b !== void 0 ? _b : true;
    }
    openDialog() {
        $('#npc-modal .npc-name').text(this.name);
        $('#npc-modal .npc-dialog').html(this.dialogHTML);
        if (this.options.image) {
            $('#npc-modal .npc-image').attr('src', this.options.image);
            $('#npc-modal .npc-image').show();
        }
        else {
            $('#npc-modal .npc-image').hide();
        }
        $('#npc-modal').modal();
        this.talkedTo(true);
        return;
    }
}
///<reference path="./NPC.ts"/>
class KantoBerryMasterNPC extends NPC {
    constructor(name, dialog) {
        super(name, dialog);
        this.name = name;
        this.dialog = dialog;
    }
    get dialogHTML() {
        // Before the player has unlocked the farm
        if (!App.game.farming.canAccess()) {
            return super.dialogHTML;
        }
        // After the farm is unlocked
        return `<p>${KantoBerryMasterNPC.generateMessage(new Date())}</p>`;
    }
    static generateMessage(date) {
        if (App.game.farming.unlockedBerries.every(berry => berry())) {
            return 'The disciple has surpassed the master. I have nothing more to teach you.';
        }
        const possibleMutations = App.game.farming.mutations.filter((mut) => mut.unlocked && mut.showHint && !App.game.farming.unlockedBerries[mut.mutatedBerry]());
        if (possibleMutations.length === 0) {
            return 'It seems as though you have hit a roadblock in your Berry progress. Focus on other areas before returning.';
        }
        SeededRand.seedWithDate(date);
        possibleMutations.forEach(b => SeededRand.boolean());
        const mutationToShow = SeededRand.fromArray(possibleMutations);
        mutationToShow.hintSeen = true;
        if (mutationToShow instanceof EnigmaMutation) {
            if (App.game.discord.ID()) {
                mutationToShow.hintsSeen[mutationToShow.hintIndex](true);
            }
            return mutationToShow.partialHint;
        }
        return mutationToShow.hint;
    }
}
class ProfNPC extends NPC {
    constructor(name, region, pokedexCompleteText, nextRegionUnlockedText, image = undefined, requirement) {
        super(name, undefined, { image: image, requirement: requirement });
        this.name = name;
        this.region = region;
        this.pokedexCompleteText = pokedexCompleteText;
        this.nextRegionUnlockedText = nextRegionUnlockedText;
    }
    get dialogHTML() {
        var _a, _b;
        const requiresCompleteDex = App.game.challenges.list.requireCompletePokedex.active();
        const nextRegionUnlocked = (_b = (_a = TownList[GameConstants.StartingTowns[this.region + 1]]) === null || _a === void 0 ? void 0 : _a.isUnlocked()) !== null && _b !== void 0 ? _b : false;
        const completeDexAchievement = AchievementHandler.findByName(`${GameConstants.camelCaseToString(GameConstants.Region[this.region])} Master`);
        if (!nextRegionUnlocked) {
            return `<p>Hello, new Champion, you've come a long way!</p>
                    <p>Come see me once you've beat the Elite Four!</p>`;
        }
        let html = '';
        if (completeDexAchievement.isCompleted()) {
            html += `<p>${this.pokedexCompleteText}</p>`;
        }
        else {
            if (requiresCompleteDex) {
                html += '<p>To progress to the next region, you need to catch all Pokémon native to this region.</p>';
            }
            html += `<p>You still have ${completeDexAchievement.property.requiredValue - completeDexAchievement.getProgress()} left to catch in this region! You're almost there!</p>`;
        }
        if (nextRegionUnlocked && (completeDexAchievement.isCompleted() || !requiresCompleteDex)) {
            html += `<p>${this.nextRegionUnlockedText}</p>`;
        }
        return html;
    }
}
class RoamerNPC extends NPC {
    constructor(name, dialog, region, subRegionRoamerGroup, image = undefined, requirement) {
        super(name, dialog, { image: image, requirement: requirement });
        this.name = name;
        this.dialog = dialog;
        this.region = region;
        this.subRegionRoamerGroup = subRegionRoamerGroup;
    }
    get dialogHTML() {
        var _a;
        const route = RoamingPokemonList.getIncreasedChanceRouteBySubRegionGroup(this.region, this.subRegionRoamerGroup);
        const roamers = RoamingPokemonList.getSubRegionalGroupRoamers(this.region, this.subRegionRoamerGroup);
        // If no roaming Pokemon yet
        if (!roamers.length) {
            return `There hasn't been any reports of roaming Pokémon around ${GameConstants.camelCaseToString(GameConstants.Region[this.region])} lately.`;
        }
        const roamersHTML = roamers.map(r => `<img class="npc-roamer-image" src="assets/images/pokemon/${r.pokemon.id}.png" />`).join('');
        return super.dialogHTML.replace(/{ROUTE_NAME}/g, (_a = route()) === null || _a === void 0 ? void 0 : _a.routeName) + roamersHTML;
    }
}
///<reference path="../../declarations/enums/Badges.d.ts"/>
///<reference path="NPC.ts"/>
///<reference path="KantoBerryMasterNPC.ts"/>
///<reference path="ProfNPC.ts"/>
///<reference path="RoamerNPC.ts"/>
///<reference path="TownContent.ts"/>
class Town {
    constructor(name, region, content = [], 
    // Optional arguments are in a named object, so that we don't need
    // to pass undefined to get to the one we want
    optional = {}) {
        var _a;
        this.name = name;
        this.region = region;
        this.requirements = optional.requirements || [];
        this.npcs = optional.npcs;
        this.startingTown = GameConstants.StartingTowns.includes(this.name);
        this.content = content;
        this.subRegion = (_a = optional.subRegion) !== null && _a !== void 0 ? _a : 0;
        if (GymList[name]) {
            const gym = GymList[name];
            this.content.unshift(gym);
        }
        if (GameConstants.DockTowns.includes(name)) {
            this.content.push(new DockTownContent());
        }
        if (GameConstants.StartingTowns.includes(name)) {
            this.content.push(new NextRegionTownContent());
        }
        content.forEach((c) => {
            c.addParent(this);
        });
    }
    isUnlocked() {
        return this.requirements.every(requirement => requirement.isCompleted());
    }
}
class DungeonTown extends Town {
    constructor(name, region, requirements = [], content = [], optional = {}) {
        optional.requirements = requirements;
        super(name, region, content, optional);
        this.dungeon = dungeonList[name];
    }
}
/* eslint-disable array-bracket-newline */
///<reference path="../../declarations/requirements/RouteKillRequirement.d.ts"/>
///<reference path="../../declarations/requirements/GymBadgeRequirement.d.ts"/>
///<reference path="../../declarations/requirements/OneFromManyRequirement.d.ts"/>
///<reference path="../Quests/BulletinBoard.ts"/>
///<reference path="BattleCafe.ts"/>
///<reference path="../../declarations/requirements/MultiRequirement.d.ts"/>
const TownList = {};
const pokeMartShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.Lucky_egg,
    ItemList.Token_collector,
    ItemList.Dowsing_machine,
    ItemList.Lucky_incense,
    ItemList.SmallRestore,
    ItemList.MediumRestore,
    ItemList.LargeRestore,
], 'Explorers Poké Mart');
const DepartmentStoreShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.Lucky_egg,
    ItemList.Dowsing_machine,
    ItemList.Token_collector,
    ItemList.Lucky_incense,
    ItemList.SmallRestore,
    ItemList.MediumRestore,
    ItemList.LargeRestore,
], 'Department Store');
const pokeLeagueShop = () => new Shop([
    new PokeballItem(GameConstants.Pokeball.Masterball, 10000000, GameConstants.Currency.money, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.money]}` }, 'Master Ball'),
    new PokeballItem(GameConstants.Pokeball.Masterball, 75000, GameConstants.Currency.dungeonToken, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.dungeonToken]}` }, 'Master Ball'),
    new PokeballItem(GameConstants.Pokeball.Masterball, 3000, GameConstants.Currency.questPoint, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.questPoint]}` }, 'Master Ball'),
    new PokeballItem(GameConstants.Pokeball.Masterball, 3000, GameConstants.Currency.farmPoint, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.farmPoint]}` }, 'Master Ball'),
    new PokeballItem(GameConstants.Pokeball.Masterball, 50, GameConstants.Currency.diamond, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.diamond]}` }, 'Master Ball'),
    //ItemList['RareCandy'],
    ItemList.Protein,
]);
//Kanto Shops
const ViridianCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.Dungeon_ticket,
]);
const PewterCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Token_collector,
    ItemList.Lucky_egg,
    ItemList.Mystery_egg,
]);
const Route3Shop = new Shop([
    ItemList.Magikarp,
], 'Shady Deal');
const CeruleanCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.xAttack,
    ItemList.Water_egg,
    ItemList.Water_stone,
]);
const VermilionCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Lucky_egg,
    ItemList.Electric_egg,
    ItemList.Thunder_stone,
]);
const LavenderTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Dowsing_machine,
    ItemList.Lucky_incense,
    ItemList.Grass_egg,
]);
const CeladonCityShop = new Shop([
    ItemList.Eevee,
    ItemList.Porygon,
    ItemList.Jynx,
    ItemList['Mr. Mime'],
    ItemList.Lickitung,
], 'Game Corner Shop');
const CeladonDepartmentStoreShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.Lucky_egg,
    ItemList.Dowsing_machine,
    ItemList.Token_collector,
    ItemList.Lucky_incense,
], 'Department Store');
const SaffronCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.xClick,
    ItemList.Fighting_egg,
    ItemList.Leaf_stone,
    ItemList.Moon_stone,
]);
const FuchsiaCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Lucky_egg,
    ItemList.Dragon_egg,
    ItemList.Linking_cord,
]);
const CinnabarIslandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Token_collector,
    ItemList.SmallRestore,
    ItemList.Fire_egg,
    ItemList.Fire_stone,
    ItemList.Explorer_kit,
    ItemList.Explosive_Charge,
    ItemList.Treasure_Scanner,
    ItemList.HatcheryHelperKris,
]);
const OneIslandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xAttack,
    ItemList.Lucky_incense,
]);
const TwoIslandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xClick,
    ItemList.Dowsing_machine,
]);
const ThreeIslandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Token_collector,
]);
const FourIslandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xAttack,
    ItemList.Soothe_bell,
]);
const FiveIslandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xClick,
    ItemList.Dragon_scale,
]);
const SixIslandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Lucky_egg,
    ItemList.Prism_scale,
]);
const SevenIslandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Token_collector,
]);
const MikanIslandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Metal_coat,
]);
const NavelIslandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Kings_rock,
]);
const TrovitaIslandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Deepsea_tooth,
    ItemList.Deepsea_scale,
]);
const KumquatIslandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Upgrade,
]);
const ValenciaPokémonCenterShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Dowsing_machine,
    ItemList.Sun_stone,
]);
const PinkanPokémonReserveShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Lucky_incense,
]);
const TanobyRuinsShop = new Shop([
    ItemList['Pinkan Dodrio'],
], 'Trade with Prof. Ivy');
const PinkanBerryMaster = new BerryMasterShop(GameConstants.BerryTraderLocations['Pinkan Pokémon Reserve'], [
    ItemList.Freeze_Mulch,
    ItemList.Berry_Shovel,
    ItemList.Mulch_Shovel,
], 'Officer Jenny\'s Pinkan Trade Shop', [new QuestLineCompletedRequirement('Team Rocket\'s Pinkan Theme Park')]);
// Kanto NPCs
const PalletProfOak = new ProfNPC('Prof. Oak', GameConstants.Region.kanto, 'Congratulations on completing your Kanto Pokédex!', 'Your journey isn\'t over yet, a whole world awaits you! Onwards to Johto!', 'assets/images/npcs/Professor Oak.png', 
// Prevent Prof. Oak clones during Celebi questline
new OneFromManyRequirement([new QuestLineStartedRequirement('Unfinished Business', GameConstants.AchievementOption.less), new QuestLineCompletedRequirement('Unfinished Business'), new QuestLineStepCompletedRequirement('Unfinished Business', 2)]));
const PalletMom1 = new NPC('Mom', [
    'So you\'re really leaving on your very own Pokémon journey. I\'m so proud of you. Let me give you some words of wisdom for your travels.',
    'Traveling on your own can be scary. But remember that there are nice people everywhere you go. So strike up a conversation! You will probably learn something useful.',
], {
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Tutorial Quests', 2), new QuestLineStepCompletedRequirement('Tutorial Quests', 3, GameConstants.AchievementOption.less)]),
});
const PalletMom2 = new NPC('Mom', [
    'Remember that there are nice people everywhere you go. So strike up a conversation! You will probably learn something useful.',
], {
    requirement: new QuestLineStepCompletedRequirement('Tutorial Quests', 3),
});
const PalletCelebiProfOak1 = new NPC('Prof. Oak', [
    'Good of you to come see me. I need you to pick up something for me. A special kind of Poké Ball, found by Professor Ivy. She lives on one of the Sevii Islands, east of Three Island.',
    'I don\'t know who else to trust with this. It\'s very important and very valuable.',
    'Feel free to take your time, but please don\'t get distracted for the duration of an entire filler anime season.',
], {
    image: 'assets/images/npcs/Professor Oak.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Unfinished Business'), new QuestLineStepCompletedRequirement('Unfinished Business', 1, GameConstants.AchievementOption.less)]),
});
const PalletCelebiProfOak2 = new NPC('Prof. Oak', [
    'Ah, the fabled GS Ball. Let me have a look.',
    'Hm. I just can\'t figure this out. There\'s clearly something inside, but I just can\'t get the darned thing to open.',
    'I know just the man for the job! Kurt, a Poké Ball expert. He lives in Azalea Town, in Johto. Please deliver the GS Ball to him.',
], {
    image: 'assets/images/npcs/Professor Oak.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 1), new QuestLineStepCompletedRequirement('Unfinished Business', 2, GameConstants.AchievementOption.less)]),
});
const ViridianCityOldMan1 = new NPC('Old Man', [
    'Leave me alone. I need my coffee.',
], {
    requirement: new QuestLineStepCompletedRequirement('Tutorial Quests', 4, GameConstants.AchievementOption.less),
});
const ViridianCityOldMan2 = new NPC('Old Man', [
    'Ahh, I\'ve had my coffee now and I feel great!',
    'You can use the Poké Ball Selector to select which type of Poké Ball to use on specific Pokémon based on caught status. The options, from left to right, are "Caught", "Caught Shiny", "New", "New Shiny".',
    'For example, if you click on the empty ball below the word "Caught" and assign a Poké Ball, you will then start throwing Poké Balls at Pokémon you\'ve already caught before. This can be very useful if you need Dungeon Tokens.',
    'Here, let me show you how it works.',
    'I\'ll always be here to explain it again if you forget.',
], {
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Tutorial Quests', 4), new QuestLineStepCompletedRequirement('Tutorial Quests', 5, GameConstants.AchievementOption.less)]),
});
const ViridianCityOldMan3 = new NPC('Old Man', [
    'You can use the Poké Ball Selector to select which type of Poké Ball to use on specific Pokémon based on caught status. The options, from left to right, are "Caught", "Caught Shiny", "New", "New Shiny".',
    'For example, if you click on the empty ball below the word Caught and assign a Poké Ball, you will then start throwing Poké Balls at Pokémon you\'ve already caught before. This can be very useful if you need Dungeon Tokens.',
    'I\'ll always be here to explain it again if you forget.',
], {
    requirement: new QuestLineStepCompletedRequirement('Tutorial Quests', 5),
});
const PewterBattleItemRival = new NPC('Battle Item Master', [
    'Hey kid, you look new! Let me offer some advice: Battle Items like X Attack can be acquired along Routes, inside Dungeons and in Shops!',
    'Use them to help you out whenever you feel like time is against you!',
]);
const PewterScientist = new NPC('Gem Scientist', [
    'I see you are carrying a Gem Case. Here at the museum we study space, fossils and gems!',
    'When you defeat a Pokémon you gain a gem of that Pokémon\'s type. If the Pokémon has two types you gain one for each! Defeating very strong Pokémon, such as those owned by gym leaders, gets you five!',
    'You can click Gems in the Start Menu to boost your damage using these gems. For example, using rock gems you can boost the super effective damage of your rock type Pokémon! Those flying types had better watch out for your might!',
    'You can even use this to eliminate immunities! By using electric gems to boost your electric type immune damage, your electric Pokémon can suddenly do damage against ground types!',
], {
    image: 'assets/images/trainers/Scientist (female).png',
    requirement: new GymBadgeRequirement(BadgeEnums.Earth),
});
const Route3ShadySalesman = new NPC('Shady Salesman', [
    'Have I got a deal just for you!',
    'I\'ll let you have a super secret Pokémon. For the right price!',
], { image: 'assets/images/trainers/Burglar.png' });
const CeruleanKantoBerryMaster = new KantoBerryMasterNPC('Berry Master', [
    'Bah! You younglings have no appreciation of the art of Berry farming!',
    'Come back when you are ready to learn!',
]);
const CeruleanSuperNerd = new NPC('Super Nerd Jovan', [
    'In my spare time I like to play this kickass browser game. It takes ages to get all the best stuff.',
    'Then one day, all my progress was gone. I don\'t know exactly what happened. Something updated, some cookies got cleaned up, I don\'t know. I had to start all over from the beginning.',
    'That day I learned that I should frequently download a save.',
], { image: 'assets/images/trainers/Super Nerd.png' });
const CeruleanEusine = new NPC('Eusine', [
    'Puff, puff... I am...no match for you. ...As I predicted.',
    '..................',
    'Go ahead. Since I met you in Ecruteak City, I\'ve sort of known that Suicune would choose you.',
    'Take a look at it! Suicune is still there waiting for you! It has been waiting for a worthy Trainer to whom it can entrust itself!',
], {
    image: 'assets/images/temporaryBattle/Eusine.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Eusine\'s Chase', 9), new QuestLineCompletedRequirement('Eusine\'s Chase', GameConstants.AchievementOption.less)]),
});
const VermilionFanClubChairman = new NPC('Fan Club Chairman', [
    'You won’t find a Pokémon as wonderful as my favorite Rapidash in those Typed Eggs in the shops, but they might hatch rare Pokémon you can’t find anywhere else!',
], { image: 'assets/images/npcs/Gentleman (Gen 4).png' });
const VermilionShardApprentice = new NPC('Shard Apprentice', [
    'Are you looking for some Shards? You can find them in many Dungeons! Except in Viridan Forest and Mt. Moon. I\'ve never found any Shards there for some reason.',
    'I happen to know that there are some Yellow and Blue Shards in Diglett\'s Cave. Just look inside the chests!',
    'Shards can have lots of different colors. Different Dungeons will have different colors, so keep an eye out! Most of them can\'t even be found in Kanto!',
]);
const VermilionEusine = new NPC('Eusine', [
    'That was so close! I thought I could corner it by ambushing it here... But running on the water... is beyond me. Still, I am starting to see a pattern. Suicune prefers water! That means...',
    'Sorry, I\'ve got to go!',
], {
    image: 'assets/images/temporaryBattle/Eusine.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Eusine\'s Chase', 5), new QuestLineStepCompletedRequirement('Eusine\'s Chase', 7, GameConstants.AchievementOption.less)]),
});
const LavenderMrFuji = new NPC('Mr. Fuji', [
    'Welcome. In our Volunteer House here we take in all kinds of Pokémon to care for them.',
    'Did you know that sparkling Pokémon are more often found in Dungeons, on Farms, from Eggs, and even from Shops, the Safari Zone, and Evolutions from Items?',
], { image: 'assets/images/npcs/Mr. Fuji.png' });
const LavenderChanneler = new NPC('Channeler Karina', [
    'I know a lot of useful stuff. Like the odds of finding a shiny Pokémon or how to increase Click Attack.',
    'No, I didn\'t learn this from talking to ghosts, don\'t be silly. There\'s a FAQ button in the Start Menu. It\'s very useful.',
], { image: 'assets/images/trainers/Channeler.png' });
const BigSpender = new NPC('Big Spender', [
    'I love shopping! When I come in, the cashiers know I want tons of items.',
    'You can use the Shop Amount Button settings to make it easy for big purchases, too!',
], { image: 'assets/images/trainers/Beauty.png' });
const EggHuntErika = new NPC('Erika', [
    'And here comes another one. Let me guess, you\'re gonna ask me about the Togepi too?',
    'Listen here you. Just because I\'m the Grass type gym leader doesn\'t mean I know everything that goes on in the forest! I live in one of the biggest cities in the region! With tall buildings! And gambling! And crime! I like it here! I don\'t care about the forest!',
    '...',
    'All right, fine. It just so happens that I have heard about <span style="font-style: italic">something</span> going on in Viridian Forest. But I don\'t know what, and I don\'t care! You can go figure it out! I\'m staying here! Viridian Forest doesn\'t even have any Grass types. It\'s all Bugs over there.',
], {
    image: 'assets/images/gymLeaders/Erika.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Togepi Egg Hunt'), new QuestLineCompletedRequirement('Togepi Egg Hunt', GameConstants.AchievementOption.less)]),
});
const SaffronBattleItemRival = new NPC('Battle Item Master', [
    'Do I know you? Wait... Have you met my worthless rival? Ha! Let me guess, he gave you some unwanted advice?',
    'I bet he forget to tell you that although all Battle Items only last for 30 seconds, they can stack and last for days! Now scram!',
]);
const SaffronBreeder = new NPC('Breeder', [
    'You can leave your level 100 Pokémon with us up at the Hatchery. Breeding them will reset their level, but they will be stronger! They gain 25% of their base attack!',
    'And the best part is you can keep doing it over and over and over again! The sky is the limit! Reach for the stars!',
    'With Protein your Pokémon will become even stronger when you breed them. I hear they sell it at the Indigo Plateau.',
], {
    image: 'assets/images/trainers/Pokémon Breeder (female).png',
    requirement: new GymBadgeRequirement(BadgeEnums.Earth),
});
const FuchsiaKantoRoamerNPC = new RoamerNPC('Youngster Wendy', [
    'There\'s been some recent sightings of roaming Pokémon on {ROUTE_NAME}!',
], GameConstants.Region.kanto, RoamingPokemonList.findGroup(GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto));
const FuchsiaEusine = new NPC('Eusine', [
    'You! Not again! I\'ll be there first next time! Having followed it here, I\'m starting to understand what Suicune is after.',
    'To be honest, I would like to keep this information to myself. But I want to be an honest Trainer in front of Suicune! That\'s why I am sharing a clue with you.',
    'It seems that... Suicune prefers a hilly place near water... Somewhere north. I don\'t know exactly where, yet. It will be just you and me! Who\'ll find it first? I challenge you!',
], {
    image: 'assets/images/temporaryBattle/Eusine.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Eusine\'s Chase', 7), new QuestLineStepCompletedRequirement('Eusine\'s Chase', 9, GameConstants.AchievementOption.less)]),
});
const CinnabarIslandResearcher = new NPC('Researcher', [
    'They were trying to clone an ancient Pokémon in the mansion... I wonder if they succeeded.',
    'Apparently the ancient Pokémon escaped, and can be found roaming around Kanto!',
], { image: 'assets/images/trainers/Scientist (male).png' });
const OneIslandCelio1 = new NPC('Celio', [
    'Ah, yes. Welcome! Welcome! Almost didn\'t see you there. I\'m just so busy trying to get this darned thing to work. Once it\'s complete we can finally have a direct communications network between the Sevii Islands and Kanto!',
    'I don\'t even have time to go and pick up an important package. A meteorite, found by the owner of the game corner on Two Island. It contains important materials for my machine.',
    'You seem like the adventuring type. Tell you what. How about Bill stays here with me to work on this machine, and you go fetch my Meteorite for me.',
], {
    image: 'assets/images/npcs/Celio.png',
    requirement: new QuestLineStepCompletedRequirement('Bill\'s Errand', 1, GameConstants.AchievementOption.less),
});
const OneIslandCelio2 = new NPC('Celio', [
    'Back already? That didn\'t take very long.',
    'What? It did take long? You went on a whole rescue mission? Seems like I lost track of time while working on my machine with Bill. It\'s been a lot of fun.',
    'I\'m glad to hear Lostelle is all right. You can hand the meteorite to me. Bill, thank you for your assistance, I\'ll take it from here. I can see that your friend is eager to get back to Kanto and challenge the Pokémon League.',
    'Thank you both very much.',
], {
    image: 'assets/images/npcs/Celio.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Bill\'s Errand', 5), new QuestLineCompletedRequirement('Bill\'s Errand', GameConstants.AchievementOption.less)]),
});
const OneIslandCelio3 = new NPC('Celio', [
    'You\'ve been a great help. Thanks again. Maybe we\'ll meet again some day...',
], {
    image: 'assets/images/npcs/Celio.png',
    requirement: new MultiRequirement([new QuestLineCompletedRequirement('Bill\'s Errand'), new QuestLineStartedRequirement('Celio\'s Errand', GameConstants.AchievementOption.less)]),
});
const OneIslandCelio4 = new NPC('Celio', [
    'How have things been for you? Oh, is that right? You\'ve caught more Pokémon. Do you know what? Maybe I can be useful to you. I\'m modifying the Network Machine right now. I\'m changing it so it can handle trades over long distances. When I get finished, you\'ll be trading for exotic Pokémon from Trainers far away.',
    'But, there is a slight catch. For the link to work, the Machine needs a special gemstone. It\'s supposed to be on One Island, but I haven\'t found one yet. Who knows where it could be.',
], {
    image: 'assets/images/npcs/Celio.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Celio\'s Errand'), new QuestLineStepCompletedRequirement('Celio\'s Errand', 1, GameConstants.AchievementOption.less)]),
});
const OneIslandCelio5 = new NPC('Celio', [
    'Oh! Th-that\'s... Thank you! You\'re simply amazing. ... ... ... ... Um... May I ask one more giant favor of you?',
    'While I was studying gemstones, I discovered something important. There is another gem that forms a pair with this Ruby. That other gemstone is supposed to be in the Sevii Islands. Please, I need you to go find the other gem.',
    'Here, take my ferry pass. It will let you get to all of the Sevii Islands. Please, I can\'t do it without your help.',
], {
    image: 'assets/images/npcs/Celio.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Celio\'s Errand', 4), new QuestLineStepCompletedRequirement('Celio\'s Errand', 6, GameConstants.AchievementOption.less)]),
});
const OneIslandCelio6 = new NPC('Celio', [
    'So this is the gem that forms a pair with the Ruby... You\'ve gone through a lot to get this, didn\'t you? You don\'t have to tell me. I know it wasn\'t easy. Thank you so much! Now it\'s my turn to work for you! Please give me a little time.',
    'Okay, this is good... I did it! I linked up with Lanette! I did it! I\'ve managed to link up with Trainers in the Hoenn region! Finally, the Network Machine is fully operational! I owe it all to you! Thanks to you, my dream came true...',
], {
    image: 'assets/images/npcs/Celio.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Celio\'s Errand', 12), new QuestLineCompletedRequirement('Celio\'s Errand', GameConstants.AchievementOption.less)]),
});
const OneIslandCelio7 = new NPC('Celio', [
    'I... I\'m not crying. That\'s enough about me! You\'re going to keep looking for exotic Pokémon, right? I wish you the best of luck!',
], {
    image: 'assets/images/npcs/Celio.png',
    requirement: new QuestLineCompletedRequirement('Celio\'s Errand'),
});
const OneIslandYoungster = new NPC('Youngster', [
    'Isn\'t it strange how Mol<b><i>tres</i></b> lives on <b><i>One</i></b> Island?',
], {
    image: 'assets/images/trainers/Youngster.png',
    requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Ember Summit')),
});
const TwoIslandGameCornerOwner1 = new NPC('Game Corner Owner', [
    'Hello stranger. I\'m afraid the Game Corner is currently closed.',
    'What? The meteorite for Celio? Yes, I can give that to you. But I need you to do something for me first.',
    'My daughter Lostelle is missing. She likes to pick berries in the Berry Forest on Three Island. She does it all the time. But this time she hasn\'t come back. Please go find her.',
], {
    requirement: new QuestLineStepCompletedRequirement('Bill\'s Errand', 4, GameConstants.AchievementOption.less),
});
const TwoIslandGameCornerOwner2 = new NPC('Game Corner Owner', [
    'My sweet Lostelle! I\'m so glad you\'re all right.',
    'Thank you very much kind stranger. Please take the Meteorite.',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Bill\'s Errand', 4), new QuestLineCompletedRequirement('Bill\'s Errand', GameConstants.AchievementOption.less)]) });
const ThreeIslandBiker1 = new NPC('Biker', [
    'You know what sucks? The other islands are off limits for some arbitrary reason. There is no explanation. Just can\'t go there.',
    'Alright, you want the real truth? Some weird old dude told me this: "The other islands are locked behind part of a "Quest Line" You have to progress to unlock it."',
    'I don\'t know what half those words mean. All I know is I can\'t go back to Kanto with the rest of the gang. This sucks.',
], {
    image: 'assets/images/temporaryBattle/Biker Goon.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Bill\'s Errand', 3), new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion, GameConstants.AchievementOption.less)]),
});
const ThreeIslandBiker2 = new NPC('Biker', [
    'You know what sucks? The other islands are off limits for some arbitrary reason. There is no explanation. Just can\'t go there.',
    'Alright, you want the real truth? Some weird old dude told me this: "The other islands are locked behind part of a Questline. You can unlock it at a Bulletin Board."',
    'I don\'t know what half those words mean. All I know is I can\'t go back to Kanto with the rest of the gang. This sucks.',
], {
    image: 'assets/images/temporaryBattle/Biker Goon.png',
    requirement: new MultiRequirement([new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion), new QuestLineStepCompletedRequirement('Celio\'s Errand', 5, GameConstants.AchievementOption.less)]),
});
const ThreeIslandBiker3 = new NPC('Biker', [
    'You know what sucks? The other islands are off limits for some arbitrary reason. There is no explanation. Just can\'t go there.',
    'Wait, you got to them? Good for you. Not that it matters to me, I\'m still stuck here. This sucks.',
], {
    image: 'assets/images/temporaryBattle/Biker Goon.png',
    requirement: new QuestLineStepCompletedRequirement('Celio\'s Errand', 5),
});
const CelebiProfIvy = new NPC('Prof. Ivy', [
    'Welcome to Valencia Island! Well, this tiny beach on Valencia Island. I don\'t know why I decided to have this lab built below this giant cliff... Can\'t even get to the rest of the island from here.',
    'This is the GS Ball. I found it here recently. Professor Oak seemed very interested. Please deliver it to him at your earliest convenience.',
    'But first, wanna get involved in our regional Pokémon League? No? Maybe another time then.',
], {
    image: 'assets/images/npcs/Professor Ivy.png',
    requirement: new QuestLineStepCompletedRequirement('Unfinished Business', 2, GameConstants.AchievementOption.less),
});
const SeviiRocketGrunts = new NPC('Team Rocket Grunts', [
    'Whew, punched through at last. Let\'s go treasure hunting! Any treasure we find, we haul back to the Warehouse, understood?',
    '...Oh, what are the passwords? At the Rocket Warehouse, I mean.',
    'What, you forgot the password? There\'re actually two. The first one\'s "Goldeen need log". And the second one is...',
    'Hey! This snoop\'s been listening in!',
], {
    image: 'assets/images/npcs/Team Rocket Grunts.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Celio\'s Errand', 0), new QuestLineStepCompletedRequirement('Celio\'s Errand', 2, GameConstants.AchievementOption.less)]),
});
const SeviiRuby = new NPC('Ruby', [
    '<img src="assets/images/npcs/textbody/ruby.png">',
    '<i>You found a Ruby!</i>',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Celio\'s Errand', 3), new QuestLineStepCompletedRequirement('Celio\'s Errand', 4, GameConstants.AchievementOption.less)]) });
const SeviiLorelei = new NPC('Lorelei', [
    'Thank you. But this is awful... I was born and raised here on these islands. I had no idea that those horrible criminals were loose here…',
], {
    image: 'assets/images/gymLeaders/Lorelei.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Celio\'s Errand', 6), new QuestLineStepCompletedRequirement('Celio\'s Errand', 8, GameConstants.AchievementOption.less)]),
});
const SeviiGideon1 = new NPC('Gideon', [
    'I can\'t figure out how I\'m supposed to get inside. Let me tell you, I found this place. Don\'t look so envious, will you?',
], {
    image: 'assets/images/temporaryBattle/Scientist Gideon.png',
    requirement: new QuestLineStepCompletedRequirement('Celio\'s Errand', 7, GameConstants.AchievementOption.less),
});
const SeviiGideon2 = new NPC('Gideon', [
    'Fufu... Fufufufu... I guessed right. I was right in tailing you! I knew there was a Sapphire here, so it belongs to me! I\'ll sell it to Team Rocket for serious money.',
    '...D-don\'t glare at me like that! If you want it back, why don\'t you go get it after I sell it? I\'ll even tell you one of the passwords to Team Rocket\'s Warehouse. The Warehouse password I know is "Yes, nah, Chansey." I\'m done. Don\'t think badly of me!',
], {
    image: 'assets/images/temporaryBattle/Scientist Gideon.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Celio\'s Errand', 7), new QuestLineStepCompletedRequirement('Celio\'s Errand', 9, GameConstants.AchievementOption.less)]),
});
const SixIslandSeviiRoamerNPC = new RoamerNPC('Bug Catcher John', [
    'Apparently some kid released one of his Pokémon around here. That Pokémon, it\'s partner, and for whatever reason, the Legendary Beasts from Johto have been seen roaming on {ROUTE_NAME}.',
], GameConstants.Region.kanto, RoamingPokemonList.findGroup(GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii4567), 'assets/images/trainers/Bug Catcher.png', new GymBadgeRequirement(BadgeEnums.Elite_OrangeChampion));
const AlteringCaveRuinManiac1 = new NPC('Ruin Maniac', [
    'Hello. You want to know what I\'m doing in this pointless dead end cave?',
    'Well, I\m trying to dig to a secluded island north of here. I\'ve heard there are some unusual Pokémon there.',
    'Want to help me? No? Ah, you\'re busy dealing with a group of Team Rocket? Well, I wish you luck with that',
    'Once I finish it you\'ll have a way to get to get to that island too, so make sure to come back later!',
], {
    image: 'assets/images/npcs/Ruin Maniac.png',
    requirement: new QuestLineCompletedRequirement('Celio\'s Errand', GameConstants.AchievementOption.less),
});
const AlteringCaveRuinManiac2 = new NPC('Ruin Maniac', [
    'Wow, that was some back breaking work... But I have done it!',
    'I\'ve dug a tunnel to Pinkan Island! Though, I think I\'ll need to rest for a while first... You go on ahead.',
], {
    image: 'assets/images/npcs/Ruin Maniac.png',
    requirement: new QuestLineCompletedRequirement('Celio\'s Errand'),
});
const ValenciaProfIvy = new NPC('Prof. Ivy', [
    'Hello again! I see you too found a way around the giant cliff.',
    'On this island, pokémon have changed over the years. I am here to study them.',
    'Oh, you have already encountered them? And you are busy with the Orange League?',
    'Well, good luck to you, then.',
], { image: 'assets/images/npcs/Professor Ivy.png' });
const TanobyProfIvy = new NPC('Prof. Ivy', [
    'Hello again! I see you too found your way to these ancient ruins!',
    'A peculiar Pokémon known as Unown lives here. There are 28 different forms of Unown, but only one shows up at a time, but the form that appears changes every time the clock strikes midnight.',
    'There are 2 other ruins like this, one in Johto, and one in Sinnoh. I have heard that in each ruins, there are forms that only appear there. For example, the forms that resemble a question mark and an exclamation point have only been seen here.',
    'Speaking of peculiar Pokémon, I found this unusual variant of Dodrio on an island in this area. Hmm. If you want, you could buy it from me. I am needing some research funds.',
], { image: 'assets/images/npcs/Professor Ivy.png' });
const PinkanOfficerJenny1 = new NPC('Officer Jenny', [
    'Have you seen the Pinkan Berries? That is what makes all the Pokémon on this island turn pink.',
    'Hang on, this island is strictly off limits! Pinkan is a protected Pokémon reserve. How did you get here?',
    'Well I suppose you did deal with that Team Rocket branch on Five Island, so I guess I\'ll let you stay, as thanks.',
    'I\'m afraid I can\'t allow you into Pinkan Mountain though. The Pokémon there are extremely territorial.',
    'If you want to prove you can deal with such dangerous Pokémon safely, I suggest defeating the Orange League.',
], {
    image: 'assets/images/npcs/Officer Jenny.png',
    requirement: new GymBadgeRequirement(BadgeEnums.Elite_OrangeChampion, GameConstants.AchievementOption.less),
});
const PinkanOfficerJenny2 = new NPC('Officer Jenny', [
    'Have you seen the Pinkan Berries? That is what makes all the Pokémon on this island turn pink.',
    'Hang on, this island is strictly off limits! Pinkan is a protected Pokémon reserve. How did you get here?',
    'Well I suppose you did deal with that Team Rocket branch on Five Island, so I guess I\'ll let you stay, as thanks.',
    'And since you\'ve conquered the Orange League, I suppose it should be safe to let you into Pinkan Mountain. Just be careful.',
], {
    image: 'assets/images/npcs/Officer Jenny.png',
    requirement: new MultiRequirement([new GymBadgeRequirement(BadgeEnums.Elite_OrangeChampion), new QuestLineStepCompletedRequirement('Team Rocket\'s Pinkan Theme Park', 0, GameConstants.AchievementOption.less)]),
});
const PinkanOfficerJenny3 = new NPC('Officer Jenny', [
    'Oh it\'s you again! Got some Pinkan Berries to trade?',
    'So long as you\'re not helping those Rocket clowns, we\'ll let you trade for some of those rare Pinkan Pokémon that have only just come to the island.',
], {
    image: 'assets/images/npcs/Officer Jenny.png',
    requirement: new QuestLineCompletedRequirement('Team Rocket\'s Pinkan Theme Park'),
});
const ThemeparkTeamRocket1 = new NPC('Jessie and James', [
    'Oh hello there trainer! What do you mean we\'re not supposed to be here? We toootally got permission from Officer Jenny!',
    'Isn\'t your whole "thing" being helpful? We want to build a theme park to help fund the Pinkan Reserve, but this meddlesome twerp named Ash keeps getting in the way. He\'s even electrocuted us with his damn Pikachu!',
    'We need a bunch of Pinkan Berries to help feed the Pokémon at our theme park, but the twerp keeps zapping us when we try to go collect them.',
    'Would you mind farming some Pinkan Berries to help us grow our supply? We don\'t know how to, but we\'ve heard the Berry Master in Kanto could be helpful?',
], {
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Team Rocket\'s Pinkan Theme Park'), new QuestLineStepCompletedRequirement('Team Rocket\'s Pinkan Theme Park', 1, GameConstants.AchievementOption.less)]),
    image: 'assets/images/temporaryBattle/Pinkan Jessie & James.png',
});
const ThemeparkTeamRocket2 = new NPC('Jessie & James', [
    'Whoa! An actual Pinkan Berry! Now our evil plo- plan! Definitely not evil, our very helpful and good plan!...Ahem. Our plan can now proceed.',
    'Now we can get us some Pinkan\'s for the theme park! Would you mind defeating 500 Pinkan Pokémon in the forest and out in the plains? We\'ll do the catching, you just need to beat \'em',
], {
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Team Rocket\'s Pinkan Theme Park', 1), new QuestLineStepCompletedRequirement('Team Rocket\'s Pinkan Theme Park', 2, GameConstants.AchievementOption.less)]),
    image: 'assets/images/temporaryBattle/Pinkan Jessie & James.png',
});
const ThemeparkTeamRocket3 = new NPC('Jessie & James', [
    'Nice! Well, it would be nice. Now we have all these berries and Pinkan Pokémon, but nowhere to put \'em all!',
    'We need a bunch of Pixie Plates, and we need some Fairy Gems to help...uh...pay off the contractor?',
], {
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Team Rocket\'s Pinkan Theme Park', 2), new QuestLineStepCompletedRequirement('Team Rocket\'s Pinkan Theme Park', 3, GameConstants.AchievementOption.less)]),
    image: 'assets/images/temporaryBattle/Pinkan Jessie & James.png',
});
const ThemeparkTeamRocket4 = new NPC('Jessie and James', [
    'Hahahaha! Now our plan can really start! Prepare for trouble, and make it double, because you just built us a profit machine!',
    'We\'re going to make these Pinkan Pokémon perform silly routines and make us a ton of money, no days off for these suckers!',
    'What\'s that? You\'re gonna stop us!? Heh, yeah right! Bring it on twerp!',
], {
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Team Rocket\'s Pinkan Theme Park', 3), new QuestLineStepCompletedRequirement('Team Rocket\'s Pinkan Theme Park', 5, GameConstants.AchievementOption.less)]),
    image: 'assets/images/temporaryBattle/Pinkan Jessie & James.png',
});
const Informant1 = new NPC('Informant', [
    '<i>In a shady warehouse, you find the informant. He is a Mr. Mime, and he doesn\'t seem willing to divulge the information you need.</i>',
], {
    image: 'assets/images/temporaryBattle/Mime Interview.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Detective Pikachu', 2), new QuestLineStepCompletedRequirement('Detective Pikachu', 4, GameConstants.AchievementOption.less)]),
});
const Informant2 = new NPC('Informant', [
    '<i>The Mr. Mime signals to you that this is an illicit drug called R. It is frequently used in the underground fighting rings near the Battle Frontier.</i>',
], {
    image: 'assets/images/temporaryBattle/Mime Interview.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Detective Pikachu', 4), new QuestLineStepCompletedRequirement('Detective Pikachu', 6, GameConstants.AchievementOption.less)]),
});
const Mewtwo1 = new NPC('Mewtwo', [
    'You were wise to seek me out. Howard Clifford has been deceiving you. He is the one making the R drug, and....',
    '<i>A sphere of energy envelops Mewtwo, and he is dragged away by some sort of helicopter. The helicopter has a logo on it: Clifford Industries!</i>',
], {
    image: 'assets/images/temporaryBattle/Possessed Mewtwo.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Detective Pikachu', 10), new QuestLineStepCompletedRequirement('Detective Pikachu', 12, GameConstants.AchievementOption.less)]),
});
const Mewtwo2 = new NPC('Mewtwo', [
    'Thank you for your help. I have little to offer you in return, but perhaps this will help.',
    'I found Detective Pikachu\'s partner some days ago injured on the side of the road, and have nursed him back to health. I hope this reunion will suffice.',
], {
    image: 'assets/images/temporaryBattle/Possessed Mewtwo.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Detective Pikachu', 15), new QuestLineStepCompletedRequirement('Detective Pikachu', 17, GameConstants.AchievementOption.less)]),
});
const DetectiveRaichu = new NPC('Detective Raichu', [
    'Thanks for your help, kid! I\'ll stick along with you until our next mystery comes along.',
], {
    image: 'assets/images/pokemon/26.02.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Detective Pikachu', 16), new QuestLineStepCompletedRequirement('Detective Pikachu', 17, GameConstants.AchievementOption.less)]),
});
//Kanto Towns
TownList['Pallet Town'] = new Town('Pallet Town', GameConstants.Region.kanto, [new BulletinBoard(GameConstants.BulletinBoards.Kanto)], {
    npcs: [PalletProfOak, PalletCelebiProfOak1, PalletCelebiProfOak2, PalletMom1, PalletMom2],
});
TownList['Viridian City'] = new Town('Viridian City', GameConstants.Region.kanto, [ViridianCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 1)],
    npcs: [ViridianCityOldMan1, ViridianCityOldMan2, ViridianCityOldMan3],
});
TownList['Pewter City'] = new Town('Pewter City', GameConstants.Region.kanto, [PewterCityShop], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.kanto, 2),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Viridian Forest')),
    ],
    npcs: [PewterBattleItemRival, PewterScientist],
});
TownList['Route 3 Pokémon Center'] = new Town('Route 3 Pokémon Center', GameConstants.Region.kanto, [Route3Shop], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.kanto, 3),
    ],
    npcs: [Route3ShadySalesman],
});
TownList['Cerulean City'] = new Town('Cerulean City', GameConstants.Region.kanto, [CeruleanCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Cerulean City']), new MoveToDungeon(dungeonList['Cerulean Cave'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 4)],
    npcs: [CeruleanKantoBerryMaster, CeruleanSuperNerd, Mewtwo1, Mewtwo2, DetectiveRaichu, CeruleanEusine],
});
TownList['Vermilion City'] = new Town('Vermilion City', GameConstants.Region.kanto, [VermilionCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Vermilion City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 6)],
    npcs: [VermilionFanClubChairman, VermilionShardApprentice, VermilionEusine],
});
TownList['Lavender Town'] = new Town('Lavender Town', GameConstants.Region.kanto, [LavenderTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Lavender Town']), new MoveToDungeon(dungeonList['Pokémon Tower'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 10)],
    npcs: [LavenderMrFuji, LavenderChanneler],
});
TownList['Celadon City'] = new Town('Celadon City', GameConstants.Region.kanto, [CeladonDepartmentStoreShop, CeladonCityShop, new MoveToDungeon(dungeonList['Rocket Game Corner'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 7)],
    npcs: [BigSpender, EggHuntErika],
});
TownList['Saffron City'] = new Town('Saffron City', GameConstants.Region.kanto, [SaffronCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Saffron City']), new MoveToDungeon(dungeonList['Silph Co.']), TemporaryBattleList['Fighting Dojo'], TemporaryBattleList['Mime Interview']], {
    requirements: [new OneFromManyRequirement([
            new GymBadgeRequirement(BadgeEnums.Rainbow),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rocket Game Corner')),
        ])],
    npcs: [SaffronBattleItemRival, SaffronBreeder, Informant1, Informant2],
});
TownList['Fuchsia City'] = new Town('Fuchsia City', GameConstants.Region.kanto, [FuchsiaCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Fuchsia City'])], {
    requirements: [new OneFromManyRequirement([
            new RouteKillRequirement(10, GameConstants.Region.kanto, 18),
            new RouteKillRequirement(10, GameConstants.Region.kanto, 15),
        ])],
    npcs: [FuchsiaKantoRoamerNPC, FuchsiaEusine],
});
TownList['Cinnabar Island'] = new Town('Cinnabar Island', GameConstants.Region.kanto, [CinnabarIslandShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Cinnabar Island']), new MoveToDungeon(dungeonList['Pokémon Mansion'])], {
    requirements: [new OneFromManyRequirement([
            new RouteKillRequirement(10, GameConstants.Region.kanto, 20),
            new RouteKillRequirement(10, GameConstants.Region.kanto, 21),
        ])],
    npcs: [CinnabarIslandResearcher],
});
TownList['Indigo Plateau Kanto'] = new Town('Indigo Plateau Kanto', GameConstants.Region.kanto, [GymList['Elite Lorelei'], GymList['Elite Bruno'], GymList['Elite Agatha'], GymList['Elite Lance'], GymList['Champion Blue'], pokeLeagueShop()], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.kanto, 23),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road')),
    ],
});
TownList['One Island'] = new Town('One Island', GameConstants.Region.kanto, [OneIslandShop, new DockTownContent()], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Volcano)],
    npcs: [OneIslandCelio1, OneIslandCelio2, OneIslandCelio3, OneIslandCelio4, OneIslandCelio5, OneIslandCelio6, OneIslandCelio7, OneIslandYoungster],
});
TownList['Mt. Ember'] = new Town('Mt. Ember', GameConstants.Region.kanto, [new MoveToDungeon(dungeonList['Mt. Ember Summit']), new MoveToDungeon(dungeonList['Ruby Path'], new MaxRegionRequirement(GameConstants.Region.hoenn)), TemporaryBattleList['Sevii Rocket Grunt 1'], TemporaryBattleList['Sevii Rocket Grunt 2']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 27)],
    npcs: [SeviiRocketGrunts],
});
TownList['Two Island'] = new Town('Two Island', GameConstants.Region.kanto, [TwoIslandShop], {
    requirements: [new QuestLineStepCompletedRequirement('Bill\'s Errand', 0)],
    npcs: [TwoIslandGameCornerOwner1, TwoIslandGameCornerOwner2],
});
TownList['Three Island'] = new Town('Three Island', GameConstants.Region.kanto, [ThreeIslandShop, TemporaryBattleList['Biker Goon 1'], TemporaryBattleList['Biker Goon 2'], TemporaryBattleList['Biker Goon 3'], TemporaryBattleList['Cue Ball Paxton']], {
    requirements: [new QuestLineStepCompletedRequirement('Bill\'s Errand', 1)],
    npcs: [ThreeIslandBiker1, ThreeIslandBiker2, ThreeIslandBiker3],
});
TownList['Professor Ivy\'s Lab'] = new Town('Professor Ivy\'s Lab', GameConstants.Region.kanto, [], {
    requirements: [new QuestLineStepCompletedRequirement('Unfinished Business', 0)],
    npcs: [CelebiProfIvy],
});
TownList['Four Island'] = new Town('Four Island', GameConstants.Region.kanto, [FourIslandShop, new MoveToDungeon(dungeonList['Icefall Cave'])], {
    requirements: [new QuestLineStepCompletedRequirement('Celio\'s Errand', 5)],
});
TownList['Five Island'] = new Town('Five Island', GameConstants.Region.kanto, [FiveIslandShop, new DockTownContent()], {
    requirements: [new QuestLineStepCompletedRequirement('Celio\'s Errand', 5)],
});
TownList['Rocket Warehouse'] = new Town('Rocket Warehouse', GameConstants.Region.kanto, [TemporaryBattleList['Sevii Rocket Grunt 3'], TemporaryBattleList['Sevii Rocket Grunt 4'], TemporaryBattleList['Sevii Rocket Grunt 5'], TemporaryBattleList['Sevii Rocket Ariana'], TemporaryBattleList['Sevii Rocket Archer'], TemporaryBattleList['Scientist Gideon']], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.kanto, 30),
        new QuestLineStepCompletedRequirement('Celio\'s Errand', 8),
    ],
});
TownList['Six Island'] = new Town('Six Island', GameConstants.Region.kanto, [SixIslandShop], {
    requirements: [new QuestLineStepCompletedRequirement('Celio\'s Errand', 5)],
    npcs: [SixIslandSeviiRoamerNPC],
});
TownList['Dotted Hole'] = new Town('Dotted Hole', GameConstants.Region.kanto, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 37)],
    npcs: [SeviiGideon1, SeviiGideon2],
});
TownList['Seven Island'] = new Town('Seven Island', GameConstants.Region.kanto, [SevenIslandShop], {
    requirements: [new QuestLineStepCompletedRequirement('Celio\'s Errand', 5)],
});
TownList['Mikan Island'] = new Town('Mikan Island', GameConstants.Region.kanto, [MikanIslandShop], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Tanoby Ruins'))],
});
TownList['Navel Island'] = new Town('Navel Island', GameConstants.Region.kanto, [NavelIslandShop], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Lost Cave'))],
});
TownList['Trovita Island'] = new Town('Trovita Island', GameConstants.Region.kanto, [TrovitaIslandShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 41)],
});
TownList['Kumquat Island'] = new Town('Kumquat Island', GameConstants.Region.kanto, [KumquatIslandShop], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Icefall Cave'))],
});
TownList['Pummelo Island'] = new Town('Pummelo Island', GameConstants.Region.kanto, [GymList['Supreme Gym Leader Drake'], pokeLeagueShop(), new BulletinBoard(GameConstants.BulletinBoards.Sevii4567)], {
    requirements: [
        new GymBadgeRequirement(BadgeEnums['Coral-Eye']),
        new GymBadgeRequirement(BadgeEnums.Sea_Ruby),
        new GymBadgeRequirement(BadgeEnums.Spike_Shell),
        new GymBadgeRequirement(BadgeEnums.Jade_Star),
    ],
});
TownList['Valencia Pokémon Center'] = new Town('Valencia Pokémon Center', GameConstants.Region.kanto, [ValenciaPokémonCenterShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 40)],
    npcs: [ValenciaProfIvy],
});
TownList['Pinkan Pokémon Reserve'] = new Town('Pinkan Pokémon Reserve', GameConstants.Region.kanto, [PinkanPokémonReserveShop, PinkanBerryMaster, TemporaryBattleList['Pinkan Jessie & James'], TemporaryBattleList['Pinkan Officer Jenny']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 42)],
    npcs: [PinkanOfficerJenny1, PinkanOfficerJenny2, PinkanOfficerJenny3, ThemeparkTeamRocket1, ThemeparkTeamRocket2, ThemeparkTeamRocket3, ThemeparkTeamRocket4],
});
//Kanto Dungeons
TownList['Viridian Forest'] = new DungeonTown('Viridian Forest', GameConstants.Region.kanto, [new RouteKillRequirement(10, GameConstants.Region.kanto, 2)]);
TownList['Mt. Moon'] = new DungeonTown('Mt. Moon', GameConstants.Region.kanto, [new RouteKillRequirement(10, GameConstants.Region.kanto, 3)]);
TownList['Diglett\'s Cave'] = new DungeonTown('Diglett\'s Cave', GameConstants.Region.kanto, [new RouteKillRequirement(10, GameConstants.Region.kanto, 6)]);
TownList['Rock Tunnel'] = new DungeonTown('Rock Tunnel', GameConstants.Region.kanto, [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 9),
    new GymBadgeRequirement(BadgeEnums.Cascade),
]);
TownList['Rocket Game Corner'] = new DungeonTown('Rocket Game Corner', GameConstants.Region.kanto, [new RouteKillRequirement(10, GameConstants.Region.kanto, 7)]);
TownList['Pokémon Tower'] = new DungeonTown('Pokémon Tower', GameConstants.Region.kanto, [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 7),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rocket Game Corner')),
]);
TownList['Silph Co.'] = new DungeonTown('Silph Co.', GameConstants.Region.kanto, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pokémon Tower'))]);
TownList['Power Plant'] = new DungeonTown('Power Plant', GameConstants.Region.kanto, [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 9),
    new GymBadgeRequirement(BadgeEnums.Soul),
]);
TownList['Seafoam Islands'] = new DungeonTown('Seafoam Islands', GameConstants.Region.kanto, [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 19),
    new GymBadgeRequirement(BadgeEnums.Rainbow),
]);
TownList['Pokémon Mansion'] = new DungeonTown('Pokémon Mansion', GameConstants.Region.kanto, [new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.kanto, 20),
        new RouteKillRequirement(10, GameConstants.Region.kanto, 21),
    ])]);
TownList['Mt. Ember Summit'] = new DungeonTown('Mt. Ember Summit', GameConstants.Region.kanto, [new RouteKillRequirement(10, GameConstants.Region.kanto, 27)], [], {
    subRegion: GameConstants.KantoSubRegions.Sevii123,
});
TownList['Berry Forest'] = new DungeonTown('Berry Forest', GameConstants.Region.kanto, [new RouteKillRequirement(10, GameConstants.Region.kanto, 29)], [], {
    subRegion: GameConstants.KantoSubRegions.Sevii123,
});
TownList['Victory Road'] = new DungeonTown('Victory Road', GameConstants.Region.kanto, [new RouteKillRequirement(10, GameConstants.Region.kanto, 23)]);
TownList['Cerulean Cave'] = new DungeonTown('Cerulean Cave', GameConstants.Region.kanto, [new GymBadgeRequirement(BadgeEnums.Elite_KantoChampion)]);
TownList['Ruby Path'] = new DungeonTown('Ruby Path', GameConstants.Region.kanto, [new QuestLineStepCompletedRequirement('Celio\'s Errand', 2)], [], {
    npcs: [SeviiRuby],
    subRegion: GameConstants.KantoSubRegions.Sevii4567,
});
TownList['Icefall Cave'] = new DungeonTown('Icefall Cave', GameConstants.Region.kanto, [new QuestLineStepCompletedRequirement('Celio\'s Errand', 5)], [], {
    npcs: [SeviiLorelei],
    subRegion: GameConstants.KantoSubRegions.Sevii4567,
});
TownList['Sunburst Island'] = new DungeonTown('Sunburst Island', GameConstants.Region.kanto, [new RouteKillRequirement(10, GameConstants.Region.kanto, 31)], [], {
    subRegion: GameConstants.KantoSubRegions.Sevii4567,
});
TownList['Lost Cave'] = new DungeonTown('Lost Cave', GameConstants.Region.kanto, [new RouteKillRequirement(10, GameConstants.Region.kanto, 33)], [], {
    subRegion: GameConstants.KantoSubRegions.Sevii4567,
});
TownList['Pattern Bush'] = new DungeonTown('Pattern Bush', GameConstants.Region.kanto, [new RouteKillRequirement(10, GameConstants.Region.kanto, 34)], [], {
    subRegion: GameConstants.KantoSubRegions.Sevii4567,
});
TownList['Altering Cave'] = new DungeonTown('Altering Cave', GameConstants.Region.kanto, [new RouteKillRequirement(10, GameConstants.Region.kanto, 36)], [], {
    npcs: [AlteringCaveRuinManiac1, AlteringCaveRuinManiac2],
    subRegion: GameConstants.KantoSubRegions.Sevii4567,
});
TownList['Tanoby Ruins'] = new DungeonTown('Tanoby Ruins', GameConstants.Region.kanto, [new RouteKillRequirement(10, GameConstants.Region.kanto, 39)], [TanobyRuinsShop], {
    npcs: [TanobyProfIvy],
    subRegion: GameConstants.KantoSubRegions.Sevii4567,
});
TownList['Pinkan Mountain'] = new DungeonTown('Pinkan Mountain', GameConstants.Region.kanto, [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 42),
    new GymBadgeRequirement(BadgeEnums.Elite_OrangeChampion),
], [], {
    subRegion: GameConstants.KantoSubRegions.Sevii4567,
});
//Johto Shops
const CherrygroveCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.SmallRestore,
]);
const VioletCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Token_collector,
    ItemList.Lucky_egg,
    ItemList.MediumRestore,
    ItemList.Mystery_egg,
    ItemList.Wonder_Chest,
    ItemList.Togepi,
]);
const AzaleaTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.xAttack,
    ItemList.Grass_egg,
    ItemList.Leaf_stone,
    ItemList.Kings_rock,
]);
const GoldenrodDepartmentStoreShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.Lucky_egg,
    ItemList.Dowsing_machine,
    ItemList.Token_collector,
    ItemList.Lucky_incense,
    ItemList.SmallRestore,
    ItemList.MediumRestore,
], 'Department Store');
const EcruteakCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Lucky_egg,
    ItemList.Fire_egg,
    ItemList.Fire_stone,
    ItemList.Soothe_bell,
]);
const OlivineCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Dowsing_machine,
    ItemList.Lucky_incense,
    ItemList.Water_egg,
    ItemList.Electric_egg,
    ItemList.Water_stone,
    ItemList.Thunder_stone,
    ItemList.Metal_coat,
    ItemList.HatcheryHelperCarey,
]);
const CianwoodCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.xClick,
    ItemList.Fighting_egg,
    ItemList.Moon_stone,
    ItemList.Sun_stone,
]);
const MahoganyTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Lucky_egg,
    ItemList.Linking_cord,
    ItemList.Upgrade,
    ItemList.HatcheryHelperDakota,
]);
const BlackthornCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Token_collector,
    ItemList.LargeRestore,
    ItemList.Dragon_egg,
    ItemList.Dragon_scale,
]);
const JohtoBerryMaster = new BerryMasterShop(GameConstants.BerryTraderLocations['Goldenrod City'], [
    ItemList.Boost_Mulch,
    ItemList.Rich_Mulch,
    ItemList.Surprise_Mulch,
    ItemList.Amaze_Mulch,
    ItemList.Freeze_Mulch,
    ItemList.Berry_Shovel,
    ItemList.Mulch_Shovel,
    ItemList.Squirtbottle,
    ItemList.FarmHandBailey,
    ItemList.ChopleBerry,
    ItemList.KebiaBerry,
    ItemList.ShucaBerry,
    ItemList.ChartiBerry,
]);
// Johto NPCs
const CherrygroveMrPokemon = new NPC('Mr. Pokémon', [
    'Welcome to Johto! This is where the first ever Pokémon egg was found long ago.',
    'Astounding breakthroughs have been made since then. We can now store Pokémon eggs for longer and queue them up for breeding.',
    'This new technology only allows up to four stored eggs for now, though.',
], { image: 'assets/images/npcs/Mr. Pokémon.png' });
const VioletEarlDervish = new NPC('Earl Dervish', [
    'Earl, I am! Teach you, I will! To be a better trainer!',
    'Some Pokémon babies, only from Day Care they come! Hatch! Hatch! Hatch!',
]);
const VioletPrimo = new NPC('Primo', [
    'You’re a trainer, right? It’s me, the Poké Dude! I’m the guy on Teachy TV!',
    'Your Item Bag has a bunch of nifty features! Take stuff in the Held Items pocket, for instance. You can use a Held Item to empower your Pokémon or acquire unique effects. How do you use it? Well, here’s how it works.',
    'Once you have obtained a Held Item, visit your Item Bag. They are most often found in Dungeons, but some, like the Wonder Chest, are for sale!',
    'From there, go into your Held Items pocket and once an item is selected, you can use it by choosing from the list of available Pokémon to hold it.',
    'Choose who you select carefully! Only one of a particular item can be held at a time and once you remove a Held Item from your Pokémon, the item will break!',
    'All righty, be seeing you!',
]);
const AzaleaElder = new NPC('Elder Li', [
    'You want to know about Celebi? It hasn\'t been seen in a long time.',
    'I remember, back in the day, it was the Guardian of Ilex Forest. It was a playful Pokémon. It loved playing with children.',
    'It was especially close to a kid named Samuel Oak. When he suddenly moved to Kanto, Celebi was quite sad. He never even said goodbye! I wonder what became of that boy. Maybe he knows more of where Celebi is right now. They certainly have Unfinished Business.',
    'Celebi got over it very quick, playful as it is. There are always other kids to play with. Then, some time later, a strange figure went into the forest with a golden Poké Ball. The Guardian hasn\'t been seen since.',
], { image: 'assets/images/npcs/Elder Li.png' });
const AzaleaHiker = new NPC('Hiker Daniel', [
    'The PokéManiacs in Union Cave are restless. They have been ranting and raving about a weekly visitor.',
    'According to them, a strange Pokémon\'s cries can be heard from a lake deep inside the cave.',
    'I\'ve never heard it myself. Apparently it only happens on Fridays.',
], {
    image: 'assets/images/trainers/Hiker.png',
    requirement: new GymBadgeRequirement(BadgeEnums.Fog),
});
const AzaleaCelebiKurt1 = new NPC('Kurt', [
    'Those poor Slowpoke! I\'m not doing anything until those disgusting Rockets are gone!',
], {
    image: 'assets/images/npcs/Kurt.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 2), new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Slowpoke Well'), GameConstants.AchievementOption.less)]),
});
const AzaleaCelebiKurt2 = new NPC('Kurt', [
    'Thank you for your help at the Slowpoke Well! You have something for me?',
    'So this is it then? The GS Ball. I can see why old Oak wants me to have a crack at it.',
    'I will need some time to figure this out. Please come back later.',
], {
    image: 'assets/images/npcs/Kurt.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 2), new QuestLineStepCompletedRequirement('Unfinished Business', 3, GameConstants.AchievementOption.less), new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Slowpoke Well'))]),
});
const AzaleaCelebiKurt3 = new NPC('Kurt', [
    'Getting closer to the solution...',
    'I think I know what\'s in there... Better give Oak a call.',
    'What? Oh, I\'m just talking to myself. I\'m not done yet. Please come back later.',
], {
    image: 'assets/images/npcs/Kurt.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 3), new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion, GameConstants.AchievementOption.less)]),
});
const AzaleaCelebiKurt4 = new NPC('Kurt', [
    'Welcome back Champ! I have good news and bad news.',
    'Bad news first. I didn\'t manage to open the ball. It\'s just stuck. No way to get in there. Better give up on it. This story ends here.',
    'Naah! Just kidding! Imagine though, how disappointing that would be. What an anticlimax!',
    'Good news first then, I managed to open the ball! And there was a Celebi inside! Bad news, the Celebi immediately left. It just flew away.',
    'Old Oak apparently had an encounter with this Celebi back when he was still young Oak. And he\'s here! He might know where the Celebi went, you should have a chat with him.',
], {
    image: 'assets/images/npcs/Kurt.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 3), new QuestLineStepCompletedRequirement('Unfinished Business', 5, GameConstants.AchievementOption.less), new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion)]),
});
const AzaleaCelebiOak1 = new NPC('Prof. Oak', [
    'I knew it! I knew that Celebi was in there! Well, I didn\'t actually know. I had a feeling.',
    'That Celebi is an old friend of mine. Back in the day it liked to hang out at the old shrine in Ilex Forest. You should go check it out and try to catch Celebi.',
    'I can\'t think of a better trainer for this Celebi.',
], {
    image: 'assets/images/npcs/Professor Oak.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 4), new QuestLineStepCompletedRequirement('Unfinished Business', 6, GameConstants.AchievementOption.less)]),
});
const AzaleaCelebiOak2 = new NPC('Prof. Oak', [
    'Celebi wasn\'t there? Strange, usually it loves to play with young people at the shrine.',
    'Wait. That Pichu! It used to play with us at that shrine way back when! It looks like it hasn\'t aged a day!',
    'It sounds like you encountered a Time Distortion. Celebi is sensitive to time, it must be distressed. I have heared rumors of something similar going on at Tohjo Falls. Maybe if you clear up that Time Distortion, Celebi will want to come out to play?',
], {
    image: 'assets/images/npcs/Professor Oak.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 7), new QuestLineStepCompletedRequirement('Unfinished Business', 9, GameConstants.AchievementOption.less)]),
});
const AzaleaCelebiOak3 = new NPC('Prof. Oak', [
    'So Giovanni was there at the Falls while you were dealing with that mess at the Radio Tower? If only we had known, we could have had him arrested right then and there.',
    'The Time Distortion seems to have cleared up. Celebi should be happy now. You should go check out the Shrine again.',
], {
    image: 'assets/images/npcs/Professor Oak.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 10), new QuestLineStepCompletedRequirement('Unfinished Business', 12, GameConstants.AchievementOption.less)]),
});
const AzaleaCelebiOak4 = new NPC('Prof. Oak', [
    'What\'s that? Celebi went back into the forest? Well, follow it!',
    'If it wants to play I\'m sure a great trainer such as yourself can figure out a way that you can be friends and play all the time!',
], {
    image: 'assets/images/npcs/Professor Oak.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 12), new QuestLineStepCompletedRequirement('Unfinished Business', 13, GameConstants.AchievementOption.less)]),
});
const AzaleaCelebiOak5 = new NPC('Prof. Oak', [
    'I\'m glad Celebi has been released from that wretched prison and has found a home with a great young trainer like yourself. I\'m going back to Kanto.',
    '...',
    'Goodbye Celebi.',
], {
    image: 'assets/images/npcs/Professor Oak.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 13), new QuestLineCompletedRequirement('Unfinished Business', GameConstants.AchievementOption.less)]),
});
const IlexForestShrine1 = new NPC('Investigate the Shrine', [
    '<i>Something strange is going on here. The air seems to curve around itself. You feel like you\'re here, but also not here at the same time.</i>',
    '<i>No sign of Celebi, but you do see a strange looking Pichu approaching.</i>',
], {
    image: 'assets/images/npcs/other/Ilex Forest.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 5), new QuestLineStepCompletedRequirement('Unfinished Business', 7, GameConstants.AchievementOption.less)]),
});
const IlexForestShrine2 = new NPC('Investigate the Shrine', [
    '<i>Everything is normal.</i>',
    '<i>Celebi is here! It seems to want to play with you, but every time you approach it backs off. It\'s luring you deeper into the forest!</i>',
    '<i>What would the professor do?</i>',
], {
    image: 'assets/images/npcs/other/Ilex Forest.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 11), new QuestLineStepCompletedRequirement('Unfinished Business', 13, GameConstants.AchievementOption.less)]),
});
const EcruteakBill = new NPC('Bill', [
    'I traveled here all the way from Goldenrod to buy a Soothe Bell for my Eevee.',
    'When I use a Soothe Bell on Eevee it can evolve into Espeon or Umbreon. It depends on the time. Espeon during the day, Umbreon at night.',
    'I only brought enough QP for one Soothe Bell. It\'s so hard to choose...',
], { image: 'assets/images/npcs/Bill.png' });
const EcruteakEusine = new NPC('Eusine', [
    'Legends say that when the Brass Tower burned down and became the Burned Tower, three unnamed Pokémon perished in the flames...',
    'Ho-Oh came down from the Tin Tower and revived those Pokémon. They became the Legendary Beasts. Some say these Beasts still inhabit the basement of the Burned Tower.',
    'Could you please clear Burned Tower for me and see if this is true?',
], {
    image: 'assets/images/temporaryBattle/Eusine.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('The Legendary Beasts'), new QuestLineStepCompletedRequirement('The Legendary Beasts', 1, GameConstants.AchievementOption.less)]),
});
const EcruteakPokéfan = new NPC('Pokéfan Derek', [
    'I saw it! Did you see it?! I saw you go in there! I don\'t know what you did in the Burned Tower, but three great Beasts came running out of there!',
    'It was a great sight to behold. They all went in different directions. I think they are just roaming the region now. My friend Trevor in Blackthorn City can tell you more.',
    'Eusine was here a second ago. He seemed very excited, but then he suddenly left. I don\'t know where he went, but he seemed to be particularly interested in the blue one.',
], {
    image: 'assets/images/trainers/PokéManiac.png',
    requirement: new QuestLineStepCompletedRequirement('The Legendary Beasts', 1),
});
const Zuki = new NPC('Kimono Girl Zuki', [
    'Professor Elm tells me you are a master trainer. Please, show me your skills by training your Pokémon.',
], {
    image: 'assets/images/trainers/Kimono Girl.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Whirl Guardian'), new QuestLineStepCompletedRequirement('Whirl Guardian', 1, GameConstants.AchievementOption.less)]),
});
const Naoko = new NPC('Kimono Girl Naoko', [
    'I seem to have lost my way in the forest. Can you show me the way out?',
], {
    image: 'assets/images/trainers/Kimono Girl.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Whirl Guardian', 1), new QuestLineStepCompletedRequirement('Whirl Guardian', 3, GameConstants.AchievementOption.less)]),
});
const Miki = new NPC('Kimono Girl Miki', [
    'My sisters Zuki and Naoko tell me you have helped them, and I thank you. Please help find my other two sisters, Sayo and Kuni. Please accept this as a token of my gratitude.',
], {
    image: 'assets/images/trainers/Kimono Girl.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Whirl Guardian', 3), new QuestLineStepCompletedRequirement('Whirl Guardian', 5, GameConstants.AchievementOption.less)]),
});
const Sayo = new NPC('Kimono Girl Sayo', [
    'Excuse me! I\'m stuck out here on the ice, can you give me a quick push?',
], {
    image: 'assets/images/trainers/Kimono Girl.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Whirl Guardian', 4), new QuestLineStepCompletedRequirement('Whirl Guardian', 6, GameConstants.AchievementOption.less)]),
});
const Kuni = new NPC('Kimono Girl Kuni', [
    'I\'m supposed to meet my sisters, but the streets here just aren\'t safe! Can you protect me from Team Rocket?',
], {
    image: 'assets/images/trainers/Kimono Girl.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Whirl Guardian', 6), new QuestLineStepCompletedRequirement('Whirl Guardian', 8, GameConstants.AchievementOption.less)]),
});
const KimonoGirlsWhirl = new NPC('Kimono Girls', [
    'With the power of the Tidal Bell, we call to Lugia! Guardian of the Whirl Islands!',
], {
    image: 'assets/images/trainers/Kimono Girl.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Whirl Guardian', 8), new QuestLineStepCompletedRequirement('Whirl Guardian', 10, GameConstants.AchievementOption.less)]),
});
const KimonoGirlsEcruteak = new NPC('Kimono Girls', [
    'We have been watching you, and see that you have tamed the three Pokémon revived by Ho-Oh in the Burned Tower. Show us your power and we shall give you the Clear Bell, which will call Ho-Oh to the Tin Tower.',
], {
    image: 'assets/images/trainers/Kimono Girl.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Rainbow Guardian'), new QuestLineStepCompletedRequirement('Rainbow Guardian', 1, GameConstants.AchievementOption.less)]),
});
const OlivineSSAquaCaptain = new NPC('S.S. Aqua Captain', [
    'Aye! At this here dock you can travel to far away regions! But only ones you’ve travelled to before; I’ve heard the Professor has his own vessel to take ye’ to new lands!',
], { image: 'assets/images/npcs/Sailor.png' });
const CianwoodPhotographyAide = new NPC('Photography Aide', [
    'Cameron the Photographer isn’t here right now; he’s off taking photos of Pokémon on Berry Farms. Did you know that some Berries can even attract rare Pokémon?',
]);
const CianwoodEusine = new NPC('Eusine', [
    'Yo, wasn\'t that Suicune just now? I only caught a quick glimpse, but I thought I saw Suicune running on the waves.',
    'Suicune is beautiful and grand. And it races through towns and roads at simply awesome speeds. It\'s wonderful... I want to see Suicune up close....',
    'I\'ve decided. I\'ll battle you as a trainer to earn Suicune\'s respect! Come on! Let\'s battle now!',
], {
    image: 'assets/images/temporaryBattle/Eusine.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Eusine\'s Chase', 0), new QuestLineStepCompletedRequirement('Eusine\'s Chase', 2, GameConstants.AchievementOption.less)]),
});
const MahoganySouvenirShopAttendant = new NPC('Souvenir Shop Attendant', [
    'We’ve got stuff here nobody else has got! But keep any Dowsing Machines you have away from the merchandise… especially the RageCandyBars.',
    'Keep ‘em outside where they belong! I’ve heard those machines can attract Pokémon with Held Items more often, and even more so in Dungeons!',
]);
const MahoganyEusine = new NPC('Eusine', [
    'Suicune... How brave it is! How refreshing it is! How beautiful it is! And how quickly it moves! It seems to be heading east.',
    'You seem to be around where Suicune would appear. Well, that\'s OK. My desire to search for Suicune is far beyond yours... My grandpa was...quite into myths. I\'ve heard so many stories about Suicune from him.',
    'Suicune... I won\'t stop following you until I\'ve found out what you\'re after... You hear me!',
], {
    image: 'assets/images/temporaryBattle/Eusine.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Eusine\'s Chase', 3), new QuestLineStepCompletedRequirement('Eusine\'s Chase', 5, GameConstants.AchievementOption.less)]),
});
const BlackthornJohtoRoamerNPC = new RoamerNPC('Pokéfan Trevor', [
    'On the news, they are getting more reports of roaming Pokémon appearing on {ROUTE_NAME}!',
], GameConstants.Region.johto, RoamingPokemonList.findGroup(GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto), 'assets/images/trainers/Pokéfan (male).png');
const TohjoFallsCelebiTimeDistortion = new NPC('Investigate the Time Distortion', [
    '<i>You are experiencing that same feeling again. Like you\'re not really here.</i>',
    '<i>A man sits in the back of the cave. He is listening to a portable radio.</i>',
    '<img src="assets/images/temporaryBattle/Rocket Boss Giovanni.png">',
    '...I don\'t know why you have come here. Anyway, I have to warn you that this is not a place for kids like you.',
    'You have a certain look... You\'re the kid who stood in front of me in Viridian City! I\'m on my way to Goldenrod City to answer the call and join my team. Are you going to get in my way?',
], {
    image: 'assets/images/npcs/other/Tohjo Falls.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 8), new QuestLineStepCompletedRequirement('Unfinished Business', 10, GameConstants.AchievementOption.less), new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Tohjo Falls'))]),
});
const ProfElm = new ProfNPC('Prof. Elm', GameConstants.Region.johto, 'Oh, another regional Pokédex completed so soon?', 'Amazing! Next stop is Hoenn, enjoy the sunshine while you\'re there!', 'assets/images/npcs/Professor Elm.png');
const searchForClues = new NPC('Search For Clues', [
    '<i>You look around the city in search of clues, and are set upon by a gang of angry Aipoms!</i>',
], {
    image: 'assets/images/temporaryBattle/Aipom Alley.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Detective Pikachu'), new QuestLineStepCompletedRequirement('Detective Pikachu', 1, GameConstants.AchievementOption.less)]),
});
const HowardClifford1 = new NPC('Howard Clifford', [
    'I am Howard Clifford, CEO of Clifford Industries. I hear you have been investigating both my company, and a mysterious drug called R.',
    'I have reason to believe that a high ranking official in the company is manufacturing this drug, but have been unable to get to the bottom of it myself.',
    'There is a journalist in Hearthome City who may be able to help us both. Please make contact with her and report anything you find back to me.',
], {
    image: 'assets/images/npcs/Howard Clifford.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Detective Pikachu', 6), new QuestLineStepCompletedRequirement('Detective Pikachu', 8, GameConstants.AchievementOption.less)]),
});
const HowardClifford2 = new NPC('Howard Clifford', [
    'You are too late to stop me! The R drug puts Pokémon in a frenzied state, and allows us to control them with the right equipment! You led me straight to Mewtwo, and now I will take control of the most powerful Pokémon in the world!',
    '<i>Howard puts on a headset and pushes a button. The energy sphere containing Mewtwo comes into view, and it has a crazed look in its eyes. Howard pushes a botton on his headset and slumps back in his chair.</i>',
    '<i>Mewtwo makes eye contact with you, and you hear Howard\'s voice in your mind, laughing maniacally. An armed man comes into the room, and warns you not to move.</i>',
], {
    image: 'assets/images/npcs/Howard Clifford.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Detective Pikachu', 11), new QuestLineStepCompletedRequirement('Detective Pikachu', 13, GameConstants.AchievementOption.less)]),
});
const HowardClifford3 = new NPC('Howard Clifford', [
    'UNLIMITED POWER! YOU\'LL NEVER STOP ME!',
], {
    image: 'assets/images/npcs/Howard Clifford.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Detective Pikachu', 13), new QuestLineStepCompletedRequirement('Detective Pikachu', 15, GameConstants.AchievementOption.less)]),
});
//Johto Towns
TownList['New Bark Town'] = new Town('New Bark Town', GameConstants.Region.johto, [new BulletinBoard(GameConstants.BulletinBoards.Johto)], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_KantoChampion)],
    npcs: [ProfElm],
});
TownList['Cherrygrove City'] = new Town('Cherrygrove City', GameConstants.Region.johto, [CherrygroveCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 29)],
    npcs: [CherrygroveMrPokemon],
});
TownList['Violet City'] = new Town('Violet City', GameConstants.Region.johto, [VioletCityShop, new MoveToDungeon(dungeonList['Sprout Tower'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 31)],
    npcs: [VioletPrimo, VioletEarlDervish, Zuki],
});
TownList['Azalea Town'] = new Town('Azalea Town', GameConstants.Region.johto, [AzaleaTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Azalea Town']), new MoveToDungeon(dungeonList['Slowpoke Well'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 33)],
    npcs: [AzaleaElder, AzaleaHiker, AzaleaCelebiKurt1, AzaleaCelebiKurt2, AzaleaCelebiKurt3, AzaleaCelebiKurt4, AzaleaCelebiOak1, AzaleaCelebiOak2, AzaleaCelebiOak3, AzaleaCelebiOak4, AzaleaCelebiOak5],
});
TownList['Goldenrod City'] = new Town('Goldenrod City', GameConstants.Region.johto, [GoldenrodDepartmentStoreShop, JohtoBerryMaster, new MoveToDungeon(dungeonList['Radio Tower']), TemporaryBattleList['Aipom Alley'], TemporaryBattleList.Imposter, TemporaryBattleList['Possessed Mewtwo']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 34)],
    npcs: [searchForClues, HowardClifford1, HowardClifford2, HowardClifford3, Kuni],
});
TownList['Ecruteak City'] = new Town('Ecruteak City', GameConstants.Region.johto, [EcruteakCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Ecruteak City']), new MoveToDungeon(dungeonList['Burned Tower']), new MoveToDungeon(dungeonList['Tin Tower']), TemporaryBattleList['Kimono Girls']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 37)],
    npcs: [EcruteakBill, EcruteakEusine, EcruteakPokéfan, Miki, KimonoGirlsEcruteak],
});
TownList['Olivine City'] = new Town('Olivine City', GameConstants.Region.johto, [OlivineCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Olivine City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 39)],
    npcs: [OlivineSSAquaCaptain],
});
TownList['Cianwood City'] = new Town('Cianwood City', GameConstants.Region.johto, [CianwoodCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Cianwood City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 41)],
    npcs: [CianwoodPhotographyAide, CianwoodEusine],
});
TownList['Mahogany Town'] = new Town('Mahogany Town', GameConstants.Region.johto, [MahoganyTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Mahogany Town']), new MoveToDungeon(dungeonList['Team Rocket\'s Hideout'])], {
    requirements: [new OneFromManyRequirement([
            new RouteKillRequirement(10, GameConstants.Region.johto, 42),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Mortar')),
        ])],
    npcs: [MahoganySouvenirShopAttendant, MahoganyEusine],
});
TownList['Blackthorn City'] = new Town('Blackthorn City', GameConstants.Region.johto, [BlackthornCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Blackthorn City'])], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Ice Path'))],
    npcs: [BlackthornJohtoRoamerNPC],
});
TownList['Indigo Plateau Johto'] = new Town('Indigo Plateau Johto', GameConstants.Region.johto, [GymList['Elite Will'], GymList['Elite Koga'], GymList['Elite Bruno2'], GymList['Elite Karen'], GymList['Champion Lance'], pokeLeagueShop()], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.johto, 26),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Johto')),
    ],
});
//Johto Dungeons
TownList['Sprout Tower'] = new DungeonTown('Sprout Tower', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 31)]);
TownList['Ruins of Alph'] = new DungeonTown('Ruins of Alph', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 32)]);
TownList['Union Cave'] = new DungeonTown('Union Cave', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 32)]);
TownList['Slowpoke Well'] = new DungeonTown('Slowpoke Well', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 33)]);
TownList['Ilex Forest'] = new DungeonTown('Ilex Forest', GameConstants.Region.johto, [new GymBadgeRequirement(BadgeEnums.Hive)], [TemporaryBattleList['Spiky-eared Pichu']], {
    npcs: [IlexForestShrine1, IlexForestShrine2, Naoko],
});
TownList['Burned Tower'] = new DungeonTown('Burned Tower', GameConstants.Region.johto, [new QuestLineStepCompletedRequirement('The Legendary Beasts', 0)]);
TownList['Tin Tower'] = new DungeonTown('Tin Tower', GameConstants.Region.johto, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Radio Tower'))]);
TownList['Whirl Islands'] = new DungeonTown('Whirl Islands', GameConstants.Region.johto, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Radio Tower'))], [], {
    npcs: [KimonoGirlsWhirl],
});
TownList['Mt. Mortar'] = new DungeonTown('Mt. Mortar', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 37)]);
TownList['Team Rocket\'s Hideout'] = new DungeonTown('Team Rocket\'s Hideout', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 43)]);
TownList['Radio Tower'] = new DungeonTown('Radio Tower', GameConstants.Region.johto, [
    new GymBadgeRequirement(BadgeEnums.Mineral),
    new GymBadgeRequirement(BadgeEnums.Glacier),
]);
TownList['Ice Path'] = new DungeonTown('Ice Path', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 44)], [], {
    npcs: [Sayo],
});
TownList['Dark Cave'] = new DungeonTown('Dark Cave', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 45)]);
TownList['Tohjo Falls'] = new DungeonTown('Tohjo Falls', GameConstants.Region.johto, [new GymBadgeRequirement(BadgeEnums.Rising)], [TemporaryBattleList['Rocket Boss Giovanni']], {
    npcs: [TohjoFallsCelebiTimeDistortion],
});
TownList['Victory Road Johto'] = new DungeonTown('Victory Road Johto', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 26)]);
TownList['Mt. Silver'] = new DungeonTown('Mt. Silver', GameConstants.Region.johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 28)]);
//Hoenn Shops
const OldaleTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.SmallRestore,
]);
const PetalburgCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Token_collector,
    ItemList.Lucky_egg,
    ItemList.Kings_rock,
]);
const RustboroCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.xAttack,
    ItemList.Mystery_egg,
]);
const DewfordTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Lucky_egg,
    ItemList.Fighting_egg,
]);
const SlateportCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Dowsing_machine,
    ItemList.Lucky_incense,
    ItemList.MediumRestore,
    ItemList.Water_egg,
    ItemList.Linking_cord,
]);
const MauvilleCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.xClick,
    ItemList.Electric_egg,
    ItemList.Thunder_stone,
    ItemList.Metal_coat,
    ItemList.HatcheryHelperJasmine,
]);
const VerdanturfTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Lucky_egg,
    ItemList.Grass_egg,
    ItemList.Soothe_bell,
]);
const FallarborTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Token_collector,
    ItemList.Moon_stone,
    ItemList.Sun_stone,
]);
const LavaridgeTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.xAttack,
    ItemList.Lucky_incense,
    ItemList.Fire_egg,
    ItemList.Fire_stone,
]);
const FortreeCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xClick,
    ItemList.Dowsing_machine,
    ItemList.LargeRestore,
    ItemList.Leaf_stone,
]);
const MossdeepCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Token_collector,
    ItemList.Upgrade,
    ItemList.Prism_scale,
    ItemList.Beldum,
]);
const SootopolisCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Lucky_egg,
    ItemList.Lucky_incense,
    ItemList.Water_stone,
]);
const PacifidlogTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Token_collector,
    ItemList.Dowsing_machine,
    ItemList.Deepsea_tooth,
    ItemList.Deepsea_scale,
]);
const EverGrandeCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.Dragon_egg,
    ItemList.Dragon_scale,
]);
// TODO: finalize items and prices
const BattleFrontierShop = new Shop([
    new PokeballItem(GameConstants.Pokeball.Ultraball, 1, GameConstants.Currency.battlePoint, undefined, 'Ultra Ball'),
    new PokeballItem(GameConstants.Pokeball.Masterball, 500, GameConstants.Currency.battlePoint, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.battlePoint]}` }, 'Master Ball'),
    new EnergyRestore(GameConstants.EnergyRestoreSize.SmallRestore, 10, GameConstants.Currency.battlePoint, 'Small Restore'),
    new EnergyRestore(GameConstants.EnergyRestoreSize.MediumRestore, 20, GameConstants.Currency.battlePoint, 'Medium Restore'),
    new EnergyRestore(GameConstants.EnergyRestoreSize.LargeRestore, 40, GameConstants.Currency.battlePoint, 'Large Restore'),
    ItemList.FarmHandJamie,
    ItemList.HatcheryHelperNoel,
    ItemList.Muscle_Band,
]);
//Hoenn Berry Master
const HoennBerryMaster = new BerryMasterShop(GameConstants.BerryTraderLocations['Mauville City'], [
    ItemList.Boost_Mulch,
    ItemList.Rich_Mulch,
    ItemList.Surprise_Mulch,
    ItemList.Amaze_Mulch,
    ItemList.Freeze_Mulch,
    ItemList.Berry_Shovel,
    ItemList.Mulch_Shovel,
    ItemList.Sprinklotad,
    ItemList.FarmHandKerry,
    ItemList.HatcheryHelperCameron,
]);
//Hoenn Flute Master
const HoennFluteMaster = new GemMasterShop();
//Hoenn NPCs
const LittlerootAide = new NPC('Professor Birch\'s Aide', [
    'We have received word from Mr. Pokémon in Johto! He has made another breakthrough.',
    'You can now store an additional four eggs in the queue! His research has really gained speed.',
    'He wants you to know that he will have an additional eight slots ready by the time you reach Sinnoh.',
]);
const OldaleTrackingScientist = new NPC('Tracking Scientist', [
    'Hey trainer, look at these footprints! Huh, I’ve never seen footprints like these before… They look like they came from two different Pokémon, and I saw two blurs, one red and one blue, quickly fly away just as I exited the Pokémon Center.',
    'They were flying really fast, I bet Pokémon that fast will only challenge trainers who have proven they are as strong as Champion Wallace...',
]);
const SlateportHoennRoamerNPC = new RoamerNPC('Reporter Gabby', [
    'Our sources indicate that roaming Pokémon are gathering on {ROUTE_NAME}!',
], GameConstants.Region.hoenn, RoamingPokemonList.findGroup(GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn), 'assets/images/npcs/Reporter.png');
const FallarborProfessorCozmo = new NPC('Prof. Cozmo', [
    'Oh! Welcome, welcome. Do you by any chance have any Meteorites? No? Ah well, I’m studying the Pokémon Deoxys and I’ve heard that a Meteorite can cause it to change forms!',
    'I’ve also heard that the Battle Frontier may have some secrets relevant to Deoxys and its forms… but I’m not strong enough to find out...',
]);
const LavaridgeSootCollector = new NPC('Soot Collector', [
    'Blegh! I\'ve taken three soaks in the hot springs and I can still taste the soot!',
    'The Flute Trader in Fallarbor Town has been paying me to go collect soot to make Flutes, but I\'m sick of it.',
    'People say they have truly mystical powers, but that they require Gems of different types to use. Also, using more Flutes at the same time costs more Gems to use.',
]);
const FortreeWeatherman = new NPC('Weatherman', [
    'Castform is a very finicky pokemon.',
    'It changes forms when the weather is drastically different.',
    'If you want to collect them all, wait for the weather to change.',
]);
const FortreeRanger = new NPC('Pokémon Ranger Catherine', [
    'Have you seen this? It\'s horrific. Absolutely despicable.',
    'Disposable Dowsing Machines! Who even came up with this?! People leave these everywhere. It\'s absolutely terrible for the environment. Some poor innocent Pokémon could choke on it!',
    'Please recycle your used Dowsing Machines.',
], { image: 'assets/images/npcs/Pokemon Ranger (female).png' });
const MossdeepAstronomer = new NPC('Astronomer', [
    'Hey did you know about the Millennium Comet? We can see it in the sky right now, and it only comes around once every thousand years!',
    'There’s a legend that a mythical Wish Pokémon awakens when it passes over us. If you’re as strong as the Champion, maybe you’ll find it roaming around Hoenn granting wishes!',
]);
const PacifidlogDiver = new NPC('Diver', [
    'Yo! Find any cool stuff in chests lately?',
    'I\'ve heard that if you beat a Dungeon a lot then the stuff you find in chests gets even more awesome.',
]);
const SootopolisWallace = new NPC('Gym Leader Wallace', [
    'The creators of the lands and ocean slumber within the Cave of Origin.',
    'However, they will only awaken when in the presence of a truly great trainer.',
    'You will have to overcome the Pokémon League before you have any chance of encountering them.',
], { image: 'assets/images/gymLeaders/Wallace.png' });
const ProfBirch = new ProfNPC('Prof. Birch', GameConstants.Region.hoenn, 'That\'s another regional Pokédex completed! Fantastic.', 'I really appreciate being able to see your outstanding progress, thank you! Sinnoh is next up.', 'assets/images/npcs/Professor Birch.png');
const SCEntrance = new NPC('Strange Markings', [
    '<i>These strange markings seem to spell something out. The nearby Braille Enthusiast may know more.</i>',
], { image: 'assets/images/npcs/other/Regi Entrance.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Three Golems', 0), new QuestLineStepCompletedRequirement('The Three Golems', 1, GameConstants.AchievementOption.less)]),
});
const MazeHintLeft = new NPC('Room Engraving', [
    '<i>These strange markings seem to spell something out. The nearby Braille Enthusiast may know more.</i>',
], { image: 'assets/images/npcs/other/LeftBraille.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Three Golems', 1), new QuestLineStepCompletedRequirement('The Three Golems', 3, GameConstants.AchievementOption.less)]),
});
const SCMazeLeft = new NPC('Go Left', [
    '<i>You turn left and proceed to the next room.</i>',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Three Golems', 1), new QuestLineStepCompletedRequirement('The Three Golems', 3, GameConstants.AchievementOption.less)]),
});
const SCMazeLeftWrong = new NPC('Go Left', [
    '<i>You turn left, but it is a dead end.</i>',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Three Golems', 3), new QuestLineStepCompletedRequirement('The Three Golems', 6, GameConstants.AchievementOption.less)]),
});
const MazeHintRight = new NPC('Room Engraving', [
    '<i>These strange markings seem to spell something out. The nearby Braille Enthusiast may know more.</i>',
], { image: 'assets/images/npcs/other/RightBraille.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Three Golems', 5), new QuestLineStepCompletedRequirement('The Three Golems', 6, GameConstants.AchievementOption.less)]),
});
const SCMazeRight = new NPC('Go Right', [
    '<i>You turn right and proceed to the next room.</i>',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Three Golems', 5), new QuestLineStepCompletedRequirement('The Three Golems', 6, GameConstants.AchievementOption.less)]),
});
const SCMazeRightWrong = new NPC('Go Right', [
    '<i>You turn right, but it is a dead end.</i>',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Three Golems', 1), new QuestLineStepCompletedRequirement('The Three Golems', 5, GameConstants.AchievementOption.less)]),
});
const MazeHintStraight = new NPC('Room Engraving', [
    '<i>These strange markings seem to spell something out. The nearby Braille Enthusiast may know more.</i>',
], { image: 'assets/images/npcs/other/StraightBraille.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Three Golems', 3), new QuestLineStepCompletedRequirement('The Three Golems', 5, GameConstants.AchievementOption.less)]),
});
const SCMazeStraight = new NPC('Go Straight', [
    '<i>You go straight and proceed to the next room.</i>',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Three Golems', 3), new QuestLineStepCompletedRequirement('The Three Golems', 5, GameConstants.AchievementOption.less)]),
});
const SCMazeStraightWrong = new NPC('Go Straight', [
    '<i>You go straight, but it is a dead end.</i>',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Three Golems', 1), new QuestLineStepCompletedRequirement('The Three Golems', 3, GameConstants.AchievementOption.less)]),
});
const SCHints = new NPC('Hidden Message', [
    '<i>These strange markings seem to spell something out. The nearby Braille Enthusiast may know more.</i>',
], { image: 'assets/images/npcs/other/Regi Hints.png',
    requirement: new QuestLineStepCompletedRequirement('The Three Golems', 6),
});
const BrailleEnthusiast1 = new NPC('Braille Enthusiast', [
    'The markings at the entrance to the Sealed Chamber seem to say that some sort of secret is inside. Try to find more braille messages, and I can decode them for you!',
], { image: 'assets/images/npcs/Ruin Maniac.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Three Golems', 0), new QuestLineStepCompletedRequirement('The Three Golems', 1, GameConstants.AchievementOption.less)]),
});
const BrailleEnthusiast2 = new NPC('Braille Enthusiast', [
    'There are a few carvings inside this maze. The carving with five dots on the top row says "LEFT".',
    'The carving with nine dots on the top row says "STRAIGHT".',
    'The carving with six dots on the top row says "RIGHT".',
    'If you get totally lost, just wander around. You will find the right path eventually.',
], { image: 'assets/images/npcs/Ruin Maniac.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Three Golems', 1), new QuestLineStepCompletedRequirement('The Three Golems', 6, GameConstants.AchievementOption.less)]),
});
const BrailleEnthusiast3 = new NPC('Braille Enthusiast', [
    'The first carving says DESERT. There is a desert near Route 111, right?',
    'The second carving says ISLAND. There are a lot of islands on Route 105.',
    'The third carving says ANCIENT. I remember seeing some ancient ruins on Route 120.',
], { image: 'assets/images/npcs/Ruin Maniac.png',
    requirement: new QuestLineStepCompletedRequirement('The Three Golems', 6),
});
//Hoenn Towns
TownList['Littleroot Town'] = new Town('Littleroot Town', GameConstants.Region.hoenn, [new BulletinBoard(GameConstants.BulletinBoards.Hoenn)], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion)],
    npcs: [ProfBirch, LittlerootAide],
});
TownList['Oldale Town'] = new Town('Oldale Town', GameConstants.Region.hoenn, [OldaleTownShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 101)],
    npcs: [OldaleTrackingScientist],
});
TownList['Petalburg City'] = new Town('Petalburg City', GameConstants.Region.hoenn, [PetalburgCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Petalburg City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 102)],
});
TownList['Rustboro City'] = new Town('Rustboro City', GameConstants.Region.hoenn, [RustboroCityShop], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Petalburg Woods'))],
});
TownList['Dewford Town'] = new Town('Dewford Town', GameConstants.Region.hoenn, [DewfordTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Dewford Town'])], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rusturf Tunnel'))],
});
TownList['Slateport City'] = new Town('Slateport City', GameConstants.Region.hoenn, [SlateportCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Slateport City'])], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Granite Cave'))],
    npcs: [SlateportHoennRoamerNPC],
});
TownList['Mauville City'] = new Town('Mauville City', GameConstants.Region.hoenn, [MauvilleCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Mauville City']), HoennBerryMaster], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 110)],
});
TownList['Verdanturf Town'] = new Town('Verdanturf Town', GameConstants.Region.hoenn, [VerdanturfTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Verdanturf Town'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 117)],
});
TownList['Mt. Chimney'] = new Town('Mt. Chimney', GameConstants.Region.hoenn, [new MoveToDungeon(dungeonList['Fiery Path']), new MoveToDungeon(dungeonList['Mt. Chimney Crater']), new MoveToDungeon(dungeonList['Jagged Pass']), new MoveToDungeon(dungeonList['Magma Hideout'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 112)],
});
TownList['Fallarbor Town'] = new Town('Fallarbor Town', GameConstants.Region.hoenn, [FallarborTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Fallarbor Town']), HoennFluteMaster], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 113)],
    npcs: [FallarborProfessorCozmo],
});
TownList['Lavaridge Town'] = new Town('Lavaridge Town', GameConstants.Region.hoenn, [LavaridgeTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Lavaridge Town'])], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Jagged Pass'))],
});
TownList['Fortree City'] = new Town('Fortree City', GameConstants.Region.hoenn, [FortreeCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Fortree City'])], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Weather Institute'))],
    npcs: [FortreeWeatherman, FortreeRanger],
});
TownList['Lilycove City'] = new Town('Lilycove City', GameConstants.Region.hoenn, [DepartmentStoreShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 121)],
});
TownList['Mossdeep City'] = new Town('Mossdeep City', GameConstants.Region.hoenn, [MossdeepCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Mossdeep City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 125)],
    npcs: [MossdeepAstronomer],
});
TownList['Pacifidlog Town'] = new Town('Pacifidlog Town', GameConstants.Region.hoenn, [PacifidlogTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Pacifidlog Town']), TemporaryBattleList['Underground Fighting Ring']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 131)],
    npcs: [PacifidlogDiver],
});
TownList['Sootopolis City'] = new Town('Sootopolis City', GameConstants.Region.hoenn, [SootopolisCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Sootopolis City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 126), new GymBadgeRequirement(BadgeEnums.Mind)],
    npcs: [SootopolisWallace],
});
TownList['Ever Grande City'] = new Town('Ever Grande City', GameConstants.Region.hoenn, [EverGrandeCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Ever Grande City'])], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Rain)],
});
TownList['Battle Frontier'] = new Town('Battle Frontier', GameConstants.Region.hoenn, [BattleFrontierShop, new BattleFrontierTownContent()], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)],
});
TownList['Pokémon League Hoenn'] = new Town('Pokémon League Hoenn', GameConstants.Region.hoenn, [GymList['Elite Sidney'], GymList['Elite Phoebe'], GymList['Elite Glacia'], GymList['Elite Drake'], GymList['Champion Wallace'], pokeLeagueShop()], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 128),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Hoenn')),
    ],
});
//Hoenn Dungeons
TownList['Petalburg Woods'] = new DungeonTown('Petalburg Woods', GameConstants.Region.hoenn, [new RouteKillRequirement(10, GameConstants.Region.hoenn, 104)]);
TownList['Rusturf Tunnel'] = new DungeonTown('Rusturf Tunnel', GameConstants.Region.hoenn, [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 116),
    new GymBadgeRequirement(BadgeEnums.Stone),
]);
TownList['Granite Cave'] = new DungeonTown('Granite Cave', GameConstants.Region.hoenn, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rusturf Tunnel'))]);
TownList['Fiery Path'] = new DungeonTown('Fiery Path', GameConstants.Region.hoenn, [new RouteKillRequirement(10, GameConstants.Region.hoenn, 112)]);
TownList['Meteor Falls'] = new DungeonTown('Meteor Falls', GameConstants.Region.hoenn, [new RouteKillRequirement(10, GameConstants.Region.hoenn, 114)]);
TownList['Mt. Chimney Crater'] = new DungeonTown('Mt. Chimney Crater', GameConstants.Region.hoenn, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Meteor Falls'))]);
TownList['Jagged Pass'] = new DungeonTown('Jagged Pass', GameConstants.Region.hoenn, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Chimney Crater'))]);
TownList['New Mauville'] = new DungeonTown('New Mauville', GameConstants.Region.hoenn, [new GymBadgeRequirement(BadgeEnums.Balance)]);
TownList['Weather Institute'] = new DungeonTown('Weather Institute', GameConstants.Region.hoenn, [new RouteKillRequirement(10, GameConstants.Region.hoenn, 119)]);
TownList['Mt. Pyre'] = new DungeonTown('Mt. Pyre', GameConstants.Region.hoenn, [new RouteKillRequirement(10, GameConstants.Region.hoenn, 122)]);
TownList['Magma Hideout'] = new DungeonTown('Magma Hideout', GameConstants.Region.hoenn, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Pyre'))]);
TownList['Aqua Hideout'] = new DungeonTown('Aqua Hideout', GameConstants.Region.hoenn, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Magma Hideout'))]);
TownList['Shoal Cave'] = new DungeonTown('Shoal Cave', GameConstants.Region.hoenn, [new RouteKillRequirement(10, GameConstants.Region.hoenn, 125)]);
TownList['Cave of Origin'] = new DungeonTown('Cave of Origin', GameConstants.Region.hoenn, [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 126),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Seafloor Cavern')),
]);
TownList['Seafloor Cavern'] = new DungeonTown('Seafloor Cavern', GameConstants.Region.hoenn, [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 128),
    new GymBadgeRequirement(BadgeEnums.Mind),
]);
TownList['Sky Pillar'] = new DungeonTown('Sky Pillar', GameConstants.Region.hoenn, [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 131),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Cave of Origin')),
]);
TownList['Victory Road Hoenn'] = new DungeonTown('Victory Road Hoenn', GameConstants.Region.hoenn, [new GymBadgeRequirement(BadgeEnums.Rain)]);
TownList['Sealed Chamber'] = new DungeonTown('Sealed Chamber', GameConstants.Region.hoenn, [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 134),
    new GymBadgeRequirement(BadgeEnums.Mind)
], [], {
    npcs: [SCEntrance, MazeHintLeft, MazeHintRight, MazeHintStraight, SCMazeLeft, SCMazeLeftWrong, SCMazeRight, SCMazeRightWrong, SCMazeStraight, SCMazeStraightWrong, SCHints, BrailleEnthusiast1, BrailleEnthusiast2, BrailleEnthusiast3],
});
//Sinnoh Shops
const SandgemTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.SmallRestore,
]);
const JubilifeCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Token_collector,
    ItemList.Lucky_egg,
    ItemList.Mystery_egg,
]);
const OreburghCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.xAttack,
    ItemList.Moon_stone,
    ItemList.Sun_stone,
]);
const FloaromaTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Lucky_egg,
    ItemList.Linking_cord,
    ItemList.Kings_rock,
]);
const EternaCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Dowsing_machine,
    ItemList.Lucky_incense,
    ItemList.Grass_egg,
    ItemList.Leaf_stone,
]);
const HearthomeCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.xClick,
    ItemList.MediumRestore,
    ItemList.Fire_egg,
    ItemList.Fire_stone,
    ItemList.Soothe_bell,
]);
const SolaceonTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Lucky_egg,
    ItemList.Shiny_stone,
    ItemList.Dusk_stone,
    ItemList.Dawn_stone,
    ItemList.Spiritomb,
]);
const PastoriaShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Token_collector,
    ItemList.LargeRestore,
    ItemList.Water_egg,
    ItemList.Water_stone,
    ItemList.Prism_scale,
    ItemList.Skorupi,
]);
const CelesticTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xAttack,
    ItemList.Lucky_incense,
    ItemList.Dragon_egg,
    ItemList.Dragon_scale,
]);
const CanalaveCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xClick,
    ItemList.Dowsing_machine,
    ItemList.Fighting_egg,
    ItemList.Metal_coat,
]);
const PalParkShop = new Shop([
    ItemList.Razor_claw,
    ItemList.Razor_fang,
    ItemList.Combee,
    ItemList['Burmy (Plant)'],
    ItemList.Cherubi,
]);
const SnowpointCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Token_collector,
    ItemList.Upgrade,
]);
const SunyshoreCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Lucky_egg,
    ItemList.Lucky_incense,
    ItemList.Electric_egg,
    ItemList.Thunder_stone,
    ItemList.Deepsea_tooth,
    ItemList.Deepsea_scale,
]);
const FightAreaShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Macho_Brace,
]);
const SurvivalAreaShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Electirizer,
    ItemList.Magmarizer,
]);
const ResortAreaShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Protector,
    ItemList.Dubious_disc,
    ItemList.Reaper_cloth,
]);
//Sinnoh Berry Master
const SinnohBerryMaster = new BerryMasterShop(GameConstants.BerryTraderLocations['Hearthome City'], [
    ItemList.Boost_Mulch,
    ItemList.Rich_Mulch,
    ItemList.Surprise_Mulch,
    ItemList.Amaze_Mulch,
    ItemList.Freeze_Mulch,
    ItemList.Berry_Shovel,
    ItemList.Mulch_Shovel,
    ItemList.FarmHandRiley,
]);
//Sinnoh NPCs
const TwinleafContestChampion = new NPC('Contest Champion', [
    'Welcome to Sinnoh! There are many legends and myths here. For example, it is said that trainers that conquer the Lake nearby, Lake Verity, will meet a mythical Pokémon known for Emotion roaming around the region. It sure would have been awesome to partner with that Pokémon in one of my routines!',
], { image: 'assets/images/npcs/Contest Champion (Johanna).png' });
const SandgemBeachcomber = new NPC('Beachcomber', [
    'Hmmm… Oh! Sorry, I didn’t see you there! Sometimes the strangest things wash up on this beach, so I just got caught up in the search.',
    'Just last week a weird blue egg with a red center showed up. I went to go pick it up, but then it hatched! I was so surprised that the little blue Pokémon just hopped right back into the ocean. Who knows, maybe you’ll find it roaming around the region!',
]);
const FloaromaFlowerGirl = new NPC('Flower Girl', [
    'Something amazing just happened!',
    'My friend was taking their Eevee on a walk through Eterna Forest, and it suddenly evolved!',
    'Can you believe that?',
], { image: 'assets/images/npcs/Aroma Lady.png' });
const EternaLassCaroline = new NPC('Lass Caroline', [
    'Oh, you came from the Forest! That Old Chateau is so creepy, isn’t it? I’ve heard that trainers that catch the weird ghost in the TV have found ghosts in other appliances. Even lawnmowers!',
], { image: 'assets/images/trainers/Lass.png' });
const OreburghConstructionWorker = new NPC('Construction Worker', [
    'I was doing some exploring in Mt. Coronet last week, and my Nosepass gained a lot of levels.',
    'I had a big suprise when he reached level 20 though!',
], { image: 'assets/images/trainers/Worker (male).png' });
const HearthomeContestFan = new NPC('Contest Fan', [
    'My favourite contestant had a big reveal for us this week!',
    'Their prized Magneton had evolved into a Magnezone!',
    'I\'m so happy for them, all of that training in Mt. Coronet must have paid off!',
]);
const CelesticGrandma = new NPC('Cynthia\'s Grandmother', [
    'Hello young one, have you come here to learn of Sinnoh’s mysteries?',
    'Did you know that in Johto they don’t see Pokémon like Mamoswine? It’s strange too, because you don’t even need a stone to evolve Piloswine… maybe they should try the Day Care?',
]);
const PalParkWarden = new NPC('Pal Park Warden', [
    'Hey, welcome to the Pal Park! Have you been to my Dad’s Safari Zone in Kanto? We don’t have as many Pokémon here, but I’ve heard that a flower Pokémon found here can bloom when it’s sunny outside!',
]);
const PalParkBurglar = new NPC('Burglar', [
    'A lot of scary stuff can happen at night. For example, I only see people using Razor Claw and Razor Fang at night.',
    'I wonder why that is? Maybe it doesn\'t work during the day?',
], { image: 'assets/images/trainers/Burglar.png' });
const CanalaveRiley = new NPC('Riley', [
    'My partner Lucario evolved from a Riolu during daytime when I used a Soothe Bell.',
], { image: 'assets/images/npcs/Riley.png' });
const CanalaveYoungBoy = new NPC('Young Boy', [
    'Oh, hello! Say, have you ever heard of Cresselia? Once when I was really little I had a really bad dream I couldn’t wake up from, but then a kind trainer went to an island near here and got help from Cresselia to cure me!',
    'Maybe if you can prove yourself by conquering that island, you could find Cresselia roaming around the region...',
]);
const SnowpointYoungGirl = new NPC('Young Girl', [
    'Someone told me that training an Eevee in Lake Acuity will make it evolve.',
    'They must be lying, how can that be true?!',
]);
const SunyshoreRibbonerJulia = new NPC('Ribboner Julia', [
    'Oh! I don’t get visitors often. My husband is a sailor who visits far away lands… he always tells me these fantastic things.',
    'One time he came back and his Wailmer looked funny. We took it to the Pokécenter and they said it had caught some weird virus called Pokérus!',
    'They said that it is a virus that can spread in the Pokémon Day Care. They said that Pokémon can only spread or catch the virus if they aren’t ready to hatch yet, and that they need to share a type with one another.',
    'If you have a Pokémon with Pokérus, try catching more of that type of Pokémon. When he got back from his next trip, oddly enough Wailmer seemed stronger than ever!',
], { image: 'assets/images/trainers/Beauty.png' });
const FightAreaAceTrainer = new NPC('Ace Trainer Quinn', [
    'Something amazing happened on top of Mt. Coronet. We could see it all the way from here. I\'m sure everyone in the entire region saw it.',
    'What? You were there? What happened? What was that purple thing?',
    'The Distortion World? Hold on, I think I\'ve read about that in an old book in the Canalave City library. But according to that book the only entrance to the Distortion World is hidden deep within Sendoff Spring. This is quite the discovery my friend.',
], { image: 'assets/images/trainers/Ace Trainer (male).png' });
const SurvivalAreaSinnohRoamerNPC = new RoamerNPC('Hiker Kevin', [
    'I spotted a bunch of roaming Pokémon on {ROUTE_NAME}!',
], GameConstants.Region.sinnoh, RoamingPokemonList.findGroup(GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh), 'assets/images/trainers/Hiker.png');
const ProfRowan = new ProfNPC('Prof. Rowan', GameConstants.Region.sinnoh, 'Congratulations, you\'re more than half-way completed on the national Pokédex!', 'Next stop is Unova! I\'ve always wanted to visit Castelia City, personally...', 'assets/images/npcs/Professor Rowan.png');
const LucyStevens1 = new NPC('Lucy Stevens', [
    'Who sent you to talk to me? Howard Clifford himself? That\'s a little suspicious, but you seem trustworthy enough.',
    'I\'ve been doing some research on this R compound, and have reason to believe it is being manufactured or used in research at the P2 Lab in Unova.',
    'We should investigate!',
], {
    image: 'assets/images/npcs/Lucy Stevens.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Detective Pikachu', 7), new QuestLineStepCompletedRequirement('Detective Pikachu', 9, GameConstants.AchievementOption.less)]),
});
//Sinnoh Towns
TownList['Twinleaf Town'] = new Town('Twinleaf Town', GameConstants.Region.sinnoh, [], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)],
    npcs: [TwinleafContestChampion],
});
TownList['Sandgem Town'] = new Town('Sandgem Town', GameConstants.Region.sinnoh, [SandgemTownShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 201)],
    npcs: [ProfRowan, SandgemBeachcomber],
});
TownList['Jubilife City'] = new Town('Jubilife City', GameConstants.Region.sinnoh, [JubilifeCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 202)],
});
TownList['Oreburgh City'] = new Town('Oreburgh City', GameConstants.Region.sinnoh, [OreburghCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Oreburgh City'])], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Oreburgh Gate'))],
    npcs: [OreburghConstructionWorker],
});
TownList['Floaroma Town'] = new Town('Floaroma Town', GameConstants.Region.sinnoh, [FloaromaTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Floaroma Town'])], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.sinnoh, 204),
        new GymBadgeRequirement(BadgeEnums.Coal),
    ],
    npcs: [FloaromaFlowerGirl],
});
TownList['Eterna City'] = new Town('Eterna City', GameConstants.Region.sinnoh, [EternaCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Eterna City']), new MoveToDungeon(dungeonList['Team Galactic Eterna Building'])], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Eterna Forest'))],
    npcs: [EternaLassCaroline],
});
TownList['Mt. Coronet'] = new Town('Mt. Coronet', GameConstants.Region.sinnoh, [new MoveToDungeon(dungeonList['Mt. Coronet South']), new MoveToDungeon(dungeonList['Mt. Coronet North']), new MoveToDungeon(dungeonList['Spear Pillar']), new MoveToDungeon(dungeonList['Hall of Origin'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 207)],
});
TownList['Hearthome City'] = new Town('Hearthome City', GameConstants.Region.sinnoh, [HearthomeCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Hearthome City']), SinnohBerryMaster], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 208)],
    npcs: [HearthomeContestFan, LucyStevens1],
});
TownList['Solaceon Town'] = new Town('Solaceon Town', GameConstants.Region.sinnoh, [SolaceonTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Solaceon Town'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 209)],
});
TownList['Veilstone City'] = new Town('Veilstone City', GameConstants.Region.sinnoh, [DepartmentStoreShop, new MoveToDungeon(dungeonList['Team Galactic HQ'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 215)],
    npcs: [],
});
TownList['Pastoria City'] = new Town('Pastoria City', GameConstants.Region.sinnoh, [PastoriaShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Pastoria City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 213)],
});
TownList['Celestic Town'] = new Town('Celestic Town', GameConstants.Region.sinnoh, [CelesticTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Celestic Town']), TemporaryBattleList['Galactic Boss Cyrus']], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Fen)],
    npcs: [CelesticGrandma],
});
TownList['Pal Park'] = new Town('Pal Park', GameConstants.Region.sinnoh, [PalParkShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Pal Park'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 221)],
    npcs: [PalParkWarden, PalParkBurglar],
});
TownList['Canalave City'] = new Town('Canalave City', GameConstants.Region.sinnoh, [CanalaveCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Canalave City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 218)],
    npcs: [CanalaveRiley, CanalaveYoungBoy],
});
TownList['Snowpoint City'] = new Town('Snowpoint City', GameConstants.Region.sinnoh, [SnowpointCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Snowpoint City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 217)],
    npcs: [SnowpointYoungGirl],
});
TownList['Sunyshore City'] = new Town('Sunyshore City', GameConstants.Region.sinnoh, [SunyshoreCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Sunyshore City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 222)],
    npcs: [SunyshoreRibbonerJulia],
});
TownList['Pokémon League Sinnoh'] = new Town('Pokémon League Sinnoh', GameConstants.Region.sinnoh, [], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Sinnoh'))],
});
TownList['Fight Area'] = new Town('Fight Area', GameConstants.Region.sinnoh, [FightAreaShop], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)],
    npcs: [FightAreaAceTrainer],
});
TownList['Survival Area'] = new Town('Survival Area', GameConstants.Region.sinnoh, [SurvivalAreaShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Survival Area'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 225)],
    npcs: [SurvivalAreaSinnohRoamerNPC],
});
TownList['Resort Area'] = new Town('Resort Area', GameConstants.Region.sinnoh, [ResortAreaShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Resort Area'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 229)],
});
TownList['Pokémon League Sinnoh'] = new Town('Pokémon League Sinnoh', GameConstants.Region.sinnoh, [GymList['Elite Aaron'], GymList['Elite Bertha'], GymList['Elite Flint'], GymList['Elite Lucian'], GymList['Champion Cynthia'], pokeLeagueShop()], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.sinnoh, 223),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Sinnoh')),
    ],
});
//Sinnoh Dungeons
TownList['Oreburgh Gate'] = new DungeonTown('Oreburgh Gate', GameConstants.Region.sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 203)]);
TownList['Valley Windworks'] = new DungeonTown('Valley Windworks', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 204),
    new GymBadgeRequirement(BadgeEnums.Coal),
]);
TownList['Eterna Forest'] = new DungeonTown('Eterna Forest', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 205),
    new GymBadgeRequirement(BadgeEnums.Coal),
]);
TownList['Old Chateau'] = new DungeonTown('Old Chateau', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 205),
    new GymBadgeRequirement(BadgeEnums.Forest),
]);
TownList['Team Galactic Eterna Building'] = new DungeonTown('Team Galactic Eterna Building', GameConstants.Region.sinnoh, [new GymBadgeRequirement(BadgeEnums.Forest)]);
TownList['Wayward Cave'] = new DungeonTown('Wayward Cave', GameConstants.Region.sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 206)]);
TownList['Mt. Coronet South'] = new DungeonTown('Mt. Coronet South', GameConstants.Region.sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 207)]);
TownList['Solaceon Ruins'] = new DungeonTown('Solaceon Ruins', GameConstants.Region.sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 209)]);
TownList['Iron Island'] = new DungeonTown('Iron Island', GameConstants.Region.sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 218)]);
TownList['Lake Valor'] = new DungeonTown('Lake Valor', GameConstants.Region.sinnoh, [new GymBadgeRequirement(BadgeEnums.Mine)]);
TownList['Lake Verity'] = new DungeonTown('Lake Verity', GameConstants.Region.sinnoh, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Lake Valor'))]);
TownList['Mt. Coronet North'] = new DungeonTown('Mt. Coronet North', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 211),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Lake Verity')),
]);
TownList['Lake Acuity'] = new DungeonTown('Lake Acuity', GameConstants.Region.sinnoh, [new GymBadgeRequirement(BadgeEnums.Icicle)]);
TownList['Team Galactic HQ'] = new DungeonTown('Team Galactic HQ', GameConstants.Region.sinnoh, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Lake Acuity'))]);
TownList['Spear Pillar'] = new DungeonTown('Spear Pillar', GameConstants.Region.sinnoh, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Galactic HQ'))]);
TownList['Distortion World'] = new DungeonTown('Distortion World', GameConstants.Region.sinnoh, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Spear Pillar'))]);
TownList['Victory Road Sinnoh'] = new DungeonTown('Victory Road Sinnoh', GameConstants.Region.sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 223)]);
TownList['Sendoff Spring'] = new DungeonTown('Sendoff Spring', GameConstants.Region.sinnoh, [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)]);
TownList['Hall of Origin'] = new DungeonTown('Hall of Origin', GameConstants.Region.sinnoh, [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)]);
TownList['Fullmoon Island'] = new DungeonTown('Fullmoon Island', GameConstants.Region.sinnoh, [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)]);
TownList['Newmoon Island'] = new DungeonTown('Newmoon Island', GameConstants.Region.sinnoh, [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)]);
TownList['Flower Paradise'] = new DungeonTown('Flower Paradise', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 224),
    new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion),
]);
TownList['Stark Mountain'] = new DungeonTown('Stark Mountain', GameConstants.Region.sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 227)]);
TownList['Snowpoint Temple'] = new DungeonTown('Snowpoint Temple', GameConstants.Region.sinnoh, [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)]);
//Unova Shops
const FloccesyTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.SmallRestore,
    ItemList.Mystery_egg,
]);
const VirbankCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Token_collector,
    ItemList.Lucky_egg,
    ItemList.MediumRestore,
]);
const CasteliaCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.xAttack,
    ItemList.Water_egg,
    ItemList.Linking_cord,
    ItemList.Kings_rock,
]);
const NimbasaCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Lucky_egg,
    ItemList.Grass_egg,
    ItemList.Electric_egg,
    ItemList.Metal_coat,
]);
const DriftveilCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Dowsing_machine,
    ItemList.Lucky_incense,
    ItemList.Razor_claw,
    ItemList.Razor_fang,
    ItemList.Zorua,
]);
const MistraltonCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xClick,
    ItemList.LargeRestore,
    ItemList.Thunder_stone,
    ItemList.Upgrade,
]);
const LentimasTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Lucky_egg,
    ItemList.Fire_egg,
]);
const UndellaTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Token_collector,
    ItemList.Deepsea_tooth,
    ItemList.Deepsea_scale,
]);
const LacunosaTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xAttack,
    ItemList.Lucky_incense,
    ItemList.Fighting_egg,
]);
const OpelucidCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xClick,
    ItemList.Dowsing_machine,
    ItemList.Dragon_egg,
    ItemList.Dragon_scale,
]);
const HumilauCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Token_collector,
    ItemList.Prism_scale,
]);
const IcirrusCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Protector,
    ItemList.Dubious_disc,
    ItemList.Reaper_cloth,
]);
const BlackAndWhiteParkShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Moon_stone,
    ItemList.Sun_stone,
]);
const NacreneCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Soothe_bell,
]);
const StriatonCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Leaf_stone,
    ItemList.Fire_stone,
    ItemList.Water_stone,
]);
const AccumulaTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Shiny_stone,
    ItemList.Dusk_stone,
    ItemList.Dawn_stone,
]);
const NuvemaTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Electirizer,
    ItemList.Magmarizer,
]);
const AnvilleTownShop = new Shop([
    ItemList['Meloetta (Pirouette)'],
]);
//Unova Gem Master
const UnovaFluteMaster = new GemMasterShop();
//Unova NPCs
const ExcitedChild = new NPC('Excited Child', [
    'Did you hear? Did you see? It was on TV!',
    'I was just watching my favorite show, The National Gymquirer. It was a live segment! Some hot shot trainer from Kanto defeated Drayden! It was amazing! That trainer is so cool! Drayden is like unbeatable.',
    'Then my programme got interrupted by an emergency broadcast. A report on the first confirmed sightings of Tornadus and Thundurus in over twenty-five years! I\'ve read so much about them, they are my favorites.',
    'Last time they were spotted they just roamed around, causing all kinds of mischief. According to my books anyway. I\'m sure that amazing trainer from the TV will want to catch these mighty forces of nature.',
], { image: 'assets/images/trainers/School Kid (female).png' });
const CasteliaMusician = new NPC('Musician', [
    'Sup. Ya like jazz? No? Well then you should check out me and my band at the Sonata Cafe where we never play Jazz.',
    'Sometimes a cool singing Pokémon shows up and joins in on our set. I’ve heard that trainers as strong as the Champion have found it roaming around the region looking for Pokémon battles… but even I wouldn’t challenge it to a Music battle.',
], { image: 'assets/images/npcs/Musician.png' });
const PlasmaGrunt1 = new NPC('Team Plasma Grunt', [
    'Why hello there. Nothing strange going on here. Please move along.',
    'Oh that business in the sewers? Yes, we should not have gone in there. Very unfortunate situation. A complete misunderstanding. We were just curious about what was down there.',
    'Bye now.',
], { image: 'assets/images/trainers/Team Plasma Grunt (male).png' });
const RelicCastleRuinmaniac = new NPC('Ruin Maniac', [
    'I\'ve heard tell of a secret room in this ruin. A room that supposedly contains a very rare Pokémon.',
    'Apparently this secret room is only accessible via a secret entrance in Relic Passage. Relic Passage runs from Driftveil City all the way under the river to Relic Castle. It\'s very impressive. Once I\'m done investigating this part of the ruin I\'m definitely going to check it out!',
], { image: 'assets/images/trainers/Ruin Maniac.png' });
const NimbasaExplorer = new NPC('Explorer', [
    'Whew! The desert is rough out there, glad you\'ve made it all the way to Nimbasa.',
    'Sometimes I find some weird stuff out in the sand, sometimes even Pokémon hiding in Chests. Like this one time in Relic Castle, I found a Pokémon that looks like a statue that I\'ve never seen before!',
], { image: 'assets/images/trainers/Backpacker (male).png' });
const PlasmaGrunt2 = new NPC('Team Plasma Grunt', [
    'I told you. There\'s nothing suspicious going on here. We aren\'t stealing any Pokémon.',
    'If you won\'t leave, we\'ll have to remove you.',
], {
    image: 'assets/images/trainers/Team Plasma Grunt (male).png',
    requirement: new OneFromManyRequirement([new TemporaryBattleRequirement('Team Plasma Grunt 4', 1, GameConstants.AchievementOption.less), new TemporaryBattleRequirement('Team Plasma Grunt 5', 1, GameConstants.AchievementOption.less), new TemporaryBattleRequirement('Team Plasma Grunts 1', 1, GameConstants.AchievementOption.less), new TemporaryBattleRequirement('Team Plasma Grunts 2', 1, GameConstants.AchievementOption.less)]),
});
const DriftveilZinzolin = new NPC('Zinzolin', [
    'YOU!',
    'Once again we will use the legendary Dragon-type Pokémon and we will rule the Unova region!',
    'Curious Trainers, we shall not let you run around as you please!',
    'Shadow Triad! Get them out of here!',
], {
    image: 'assets/images/trainers/Team Plasma (zinzolin).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 6), new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 7, GameConstants.AchievementOption.less)]),
});
const PlasmaGrunt3 = new NPC('Team Plasma Grunt', [
    'Remember when I told you that there was nothing suspicious about this frigate? I was lying, of course.',
    'But truth be told, I didn\'t know that this thing could fly. I was not prepared for this.',
    'I\'m gonna be sick...',
], { image: 'assets/images/trainers/Team Plasma Grunt (male).png' });
const GiantChasmColress = new NPC('Colress', [
    'Welcome! I was asked by an acquaintance to help with his research. What I desire is to bring out the entirety in Pokémon potential! If I can accomplish that, I don\'t care what it takes!',
    'If it means the strength must be brought out by the interactions between Pokémon and Trainers, then so be it! If it means you have to use a merciless approach, like Team Plasma\'s, and force out all of the Pokémon\'s power, then so be it! And yes, if the entire world is destroyed as a result, then so be it...',
    'That aside! The reason I have been traveling all over Unova and battling many Pokémon Trainers is because I was testing the viability of this approach to bringing out the full strength of Pokémon. In that respect, you\'ve done an amazing job.',
    'Well now! Tell me if you have the answer I desire or not! If you\'re ready, come at me!',
], {
    image: 'assets/images/trainers/Team Plasma (colress).png',
    requirement: new MultiRequirement([new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Giant Chasm')), new TemporaryBattleRequirement('Plasma Shadow 1'), new TemporaryBattleRequirement('Colress', 1, GameConstants.AchievementOption.less)]),
});
const GiantChasmShadowTriad = new NPC('Shadow Triad', [
    'Listen well! We swore to be loyal to Lord Ghetsis since he saved us! The only thing we want is the world Lord Ghetsis desires! Even if we lose, Lord Ghetsis simply has to win...',
    'The only thing you can do is watch Lord Ghetsis use Kyurem to freeze Unova solid. That\'s all...',
], {
    image: 'assets/images/npcs/Shadow Triad.png',
    requirement: new MultiRequirement([new TemporaryBattleRequirement('Colress'), new TemporaryBattleRequirement('Ghetsis 1', 1, GameConstants.AchievementOption.less)]),
});
const IcirrusFanClubChairman = new NPC('Fan Club Chairman', [
    'Legends say Kyurem is missing a part of itself. It is waiting for a hero to fill in the missing parts of its body with Truth or Ideals.',
    'The legendary dragons of Dragonspiral Tower are said to embody these very concepts. They sometimes leave a piece of their DNA behind after a battle.',
    'If you have DNA splicers, perhaps you can make Kyurem whole again.',
    'I\'ve never seen it, but supposedly it works just like any other evolution item.',
], { image: 'assets/images/trainers/Gentleman.png' });
const P2LaboratoryColress = new NPC('Colress', [
    'So you defeated Ghetsis. Interesting. You must be a very strong trainer.',
    'A rare Pokémon is hiding somewhere inside this abandoned laboratory. You can catch it if you want. I have no interest in it.',
    'However, I do have an interest in you! I want to taste your power. Defeat me, and I\'ll let you search for the rare Pokémon.',
    'I\'ll be waiting for you inside.',
], {
    image: 'assets/images/trainers/Team Plasma (colress).png',
    requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory'), GameConstants.AchievementOption.less),
});
const UnovaRoamerNPC = new RoamerNPC('Professor Juniper\'s Aide', [
    'Our research indicates a higher concentration of roaming Pokémon on {ROUTE_NAME}!',
], GameConstants.Region.unova, RoamingPokemonList.findGroup(GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova));
const ProfJuniper = new ProfNPC('Prof. Juniper', GameConstants.Region.unova, 'Let me see your progress...Ah, fantastic, as usual!', 'Allow me some time to arrange tickets for your next destination.');
//Unova Towns
TownList['Aspertia City'] = new Town('Aspertia City', GameConstants.Region.unova, [], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)],
    npcs: [],
});
TownList['Floccesy Town'] = new Town('Floccesy Town', GameConstants.Region.unova, [FloccesyTownShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 19)],
});
TownList['Virbank City'] = new Town('Virbank City', GameConstants.Region.unova, [VirbankCityShop, TemporaryBattleList['Team Plasma Grunt 1']], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Basic)],
});
TownList['Castelia City'] = new Town('Castelia City', GameConstants.Region.unova, [CasteliaCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Castelia City']), new MoveToDungeon(dungeonList['Castelia Sewers'])], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Toxic)],
    npcs: [CasteliaMusician],
});
TownList['A Perfectly Ordinary Frigate'] = new Town('A Perfectly Ordinary Frigate', GameConstants.Region.unova, [], {
    requirements: [
        new GymBadgeRequirement(BadgeEnums.Insect),
        new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 1),
        new TemporaryBattleRequirement('Team Plasma Grunt 1'),
    ],
    npcs: [PlasmaGrunt1],
});
TownList['Nimbasa City'] = new Town('Nimbasa City', GameConstants.Region.unova, [NimbasaCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Nimbasa City']), TemporaryBattleList['Team Plasma Grunt 2'], TemporaryBattleList['Team Plasma Grunt 3']], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.unova, 4),
        new GymBadgeRequirement(BadgeEnums.Insect),
        new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 2),
    ],
    npcs: [NimbasaExplorer],
});
TownList['Driftveil City'] = new Town('Driftveil City', GameConstants.Region.unova, [DriftveilCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Driftveil City'])], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.unova, 5),
        new TemporaryBattleRequirement('Team Plasma Grunt 2'),
        new TemporaryBattleRequirement('Team Plasma Grunt 3'),
        new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 4),
    ],
});
TownList['A Totally Unsuspicious Frigate'] = new Town('A Totally Unsuspicious Frigate', GameConstants.Region.unova, [TemporaryBattleList['Team Plasma Grunt 4'], TemporaryBattleList['Team Plasma Grunt 5'], TemporaryBattleList['Team Plasma Grunts 1'], TemporaryBattleList['Team Plasma Grunts 2']], {
    requirements: [
        new GymBadgeRequirement(BadgeEnums.Quake),
        new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 4),
    ],
    npcs: [PlasmaGrunt2, DriftveilZinzolin],
});
TownList['Mistralton City'] = new Town('Mistralton City', GameConstants.Region.unova, [MistraltonCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Mistralton City'])], {
    requirements: [
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Chargestone Cave')),
        new GymBadgeRequirement(BadgeEnums.Quake),
        new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 7),
    ],
});
TownList['Lentimas Town'] = new Town('Lentimas Town', GameConstants.Region.unova, [LentimasTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Lentimas Town'])], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Jet)],
});
TownList['Undella Town'] = new Town('Undella Town', GameConstants.Region.unova, [UndellaTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Undella Town']), UnovaFluteMaster], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Reversal Mountain'))],
});
TownList['Lacunosa Town'] = new Town('Lacunosa Town', GameConstants.Region.unova, [LacunosaTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Lacunosa Town']), TemporaryBattleList['Team Plasma Grunt 6'], TemporaryBattleList['Zinzolin 1']], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.unova, 13),
        new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 8),
    ],
});
TownList['Opelucid City'] = new Town('Opelucid City', GameConstants.Region.unova, [OpelucidCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Opelucid City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 11)],
});
TownList['Team Plasma Assault'] = new Town('Team Plasma Assault', GameConstants.Region.unova, [TemporaryBattleList['Team Plasma Grunt 7'], TemporaryBattleList['Team Plasma Grunt 8'], TemporaryBattleList['Team Plasma Grunt 9'], TemporaryBattleList['Zinzolin 2'], TemporaryBattleList['Plasma Shadow 1']], {
    requirements: [
        new GymBadgeRequirement(BadgeEnums.Legend),
        new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 11),
    ],
    npcs: [PlasmaGrunt3],
});
TownList['Shopping Mall Nine'] = new Town('Shopping Mall Nine', GameConstants.Region.unova, [DepartmentStoreShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 9)],
});
TownList['Humilau City'] = new Town('Humilau City', GameConstants.Region.unova, [HumilauCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Humilau City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 21)],
    npcs: [ExcitedChild],
});
TownList['Icirrus City'] = new Town('Icirrus City', GameConstants.Region.unova, [IcirrusCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Icirrus City'])], {
    requirements: [new OneFromManyRequirement([
            new RouteKillRequirement(10, GameConstants.Region.unova, 8),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Twist Mountain')),
        ])],
    npcs: [IcirrusFanClubChairman],
});
TownList['Black and White Park'] = new Town('Black and White Park', GameConstants.Region.unova, [BlackAndWhiteParkShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Black and White Park'])], {
    requirements: [new OneFromManyRequirement([
            new MultiRequirement([
                new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion),
                new RouteKillRequirement(10, GameConstants.Region.unova, 14),
            ]),
            new RouteKillRequirement(10, GameConstants.Region.unova, 15),
        ])],
});
TownList['Nacrene City'] = new Town('Nacrene City', GameConstants.Region.unova, [NacreneCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Nacrene City'])], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pinwheel Forest'))],
});
TownList['Striaton City'] = new Town('Striaton City', GameConstants.Region.unova, [StriatonCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Striaton City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 3)],
});
TownList['Accumula Town'] = new Town('Accumula Town', GameConstants.Region.unova, [AccumulaTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Accumula Town'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 2)],
});
TownList['Nuvema Town'] = new Town('Nuvema Town', GameConstants.Region.unova, [NuvemaTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Nuvema Town']), TemporaryBattleList['Lab Ambush']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 1)],
    npcs: [ProfJuniper, UnovaRoamerNPC],
});
TownList['Anville Town'] = new Town('Anville Town', GameConstants.Region.unova, [AnvilleTownShop], {
    requirements: [
        new ObtainedPokemonRequirement(pokemonMap['Meloetta (Aria)']),
        new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion),
    ],
});
TownList['Pokémon League Unova'] = new Town('Pokémon League Unova', GameConstants.Region.unova, [GymList['Elite Shauntal'], GymList['Elite Marshal'], GymList['Elite Grimsley'], GymList['Elite Caitlin'], GymList['Champion Iris'], pokeLeagueShop()], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.unova, 23),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Unova')),
    ],
});
//Unova Dungeons
TownList['Pledge Grove'] = new DungeonTown('Pledge Grove', GameConstants.Region.unova, [
    new ObtainedPokemonRequirement(pokemonMap.Keldeo),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Moor of Icirrus')),
]);
TownList['Floccesy Ranch'] = new DungeonTown('Floccesy Ranch', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 20)]);
TownList['Liberty Garden'] = new DungeonTown('Liberty Garden', GameConstants.Region.unova, 
//Victini dungeon, maybe unlock later
[new TemporaryBattleRequirement('Team Plasma Grunt 1')]);
TownList['Castelia Sewers'] = new DungeonTown('Castelia Sewers', GameConstants.Region.unova, [
    new TemporaryBattleRequirement('Team Plasma Grunt 1'),
    new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 0),
]);
TownList['Relic Passage'] = new DungeonTown('Relic Passage', GameConstants.Region.unova, [new GymBadgeRequirement(BadgeEnums.Quake)]);
TownList['Relic Castle'] = new DungeonTown('Relic Castle', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 25)], [], {
    npcs: [RelicCastleRuinmaniac],
});
TownList['Lostlorn Forest'] = new DungeonTown('Lostlorn Forest', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 16)]);
TownList['Chargestone Cave'] = new DungeonTown('Chargestone Cave', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 6)]);
TownList['Mistralton Cave'] = new DungeonTown('Mistralton Cave', GameConstants.Region.unova, [
    new GymBadgeRequirement(BadgeEnums.Quake),
    new RouteKillRequirement(10, GameConstants.Region.unova, 6),
]);
TownList['Celestial Tower'] = new DungeonTown('Celestial Tower', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 7)]);
TownList['Reversal Mountain'] = new DungeonTown('Reversal Mountain', GameConstants.Region.unova, [new GymBadgeRequirement(BadgeEnums.Jet)]);
TownList['Seaside Cave'] = new DungeonTown('Seaside Cave', GameConstants.Region.unova, [
    new RouteKillRequirement(10, GameConstants.Region.unova, 24),
    new TemporaryBattleRequirement('Plasma Shadow 1'),
    new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 14),
]);
TownList['Plasma Frigate'] = new DungeonTown('Plasma Frigate', GameConstants.Region.unova, [
    new RouteKillRequirement(10, GameConstants.Region.unova, 22),
    new GymBadgeRequirement(BadgeEnums.Wave),
    new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 14),
]);
TownList['Giant Chasm'] = new DungeonTown('Giant Chasm', GameConstants.Region.unova, [
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Plasma Frigate')),
    new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 15),
], [TemporaryBattleList.Colress, TemporaryBattleList['Plasma Shadow 2'], TemporaryBattleList['Plasma Shadow 3'], TemporaryBattleList['Plasma Shadow 4'], TemporaryBattleList['Ghetsis 1'], TemporaryBattleList['Ghetsis 2']], {
    npcs: [GiantChasmColress, GiantChasmShadowTriad],
});
TownList['Cave of Being'] = new DungeonTown('Cave of Being', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 23)]);
TownList['Abundant Shrine'] = new DungeonTown('Abundant Shrine', GameConstants.Region.unova, [
    new RouteKillRequirement(10, GameConstants.Region.unova, 23),
    new RouteKillRequirement(10, GameConstants.Region.unova, 14),
    new ObtainedPokemonRequirement(pokemonMap.Tornadus),
    new ObtainedPokemonRequirement(pokemonMap.Thundurus),
]);
TownList['Victory Road Unova'] = new DungeonTown('Victory Road Unova', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 23)]);
TownList['Twist Mountain'] = new DungeonTown('Twist Mountain', GameConstants.Region.unova, [new OneFromManyRequirement([
        new MultiRequirement([
            new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion),
            new RouteKillRequirement(10, GameConstants.Region.unova, 7),
        ]),
        new RouteKillRequirement(10, GameConstants.Region.unova, 8),
    ])]);
TownList['Dragonspiral Tower'] = new DungeonTown('Dragonspiral Tower', GameConstants.Region.unova, [new OneFromManyRequirement([
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Twist Mountain')),
        new RouteKillRequirement(10, GameConstants.Region.unova, 8),
    ])]);
TownList['Moor of Icirrus'] = new DungeonTown('Moor of Icirrus', GameConstants.Region.unova, [
    new RouteKillRequirement(10, GameConstants.Region.unova, 8),
    new ObtainedPokemonRequirement(pokemonMap.Cobalion),
    new ObtainedPokemonRequirement(pokemonMap.Terrakion),
    new ObtainedPokemonRequirement(pokemonMap.Virizion),
]);
TownList['Pinwheel Forest'] = new DungeonTown('Pinwheel Forest', GameConstants.Region.unova, [new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion)]);
TownList.Dreamyard = new DungeonTown('Dreamyard', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 3)]);
TownList['P2 Laboratory'] = new DungeonTown('P2 Laboratory', GameConstants.Region.unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 17)], [], {
    npcs: [P2LaboratoryColress],
});
//Kalos Shops
const AquacordeTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.SmallRestore,
]);
const SantaluneCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Token_collector,
    ItemList.Lucky_egg,
    ItemList.Mystery_egg,
]);
const FriseurFurfrouShop = new Shop([
    ItemList['Furfrou (Debutante)'],
    ItemList['Furfrou (Diamond)'],
    ItemList['Furfrou (Matron)'],
    ItemList['Furfrou (Dandy)'],
    ItemList['Furfrou (Kabuki)'],
    ItemList['Furfrou (Pharaoh)'],
], 'Friseur Furfrou');
const CamphrierTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.xAttack,
    ItemList.MediumRestore,
    ItemList.Electric_egg,
    ItemList.Thunder_stone,
]);
const AmbretteTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Lucky_egg,
    ItemList.Water_egg,
    ItemList.Water_stone,
]);
const CyllageCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Dowsing_machine,
    ItemList.Lucky_incense,
    ItemList.Upgrade,
    ItemList.Prism_scale,
]);
const GeosengeTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.xClick,
    ItemList.Fire_egg,
    ItemList.Fire_stone,
    ItemList.Kings_rock,
]);
const ShalourCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Lucky_egg,
    ItemList.Fighting_egg,
    ItemList.Linking_cord,
    ItemList.Metal_coat,
]);
const CoumarineCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Token_collector,
    ItemList.LargeRestore,
    ItemList.Grass_egg,
    ItemList.Leaf_stone,
    ItemList.Electirizer,
    ItemList.Magmarizer,
]);
const LaverreCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xAttack,
    ItemList.Lucky_incense,
    ItemList.Deepsea_tooth,
    ItemList.Deepsea_scale,
    ItemList.Sachet,
    ItemList.Whipped_dream,
]);
const DendemilleTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xClick,
    ItemList.Dowsing_machine,
    ItemList.Shiny_stone,
    ItemList.Dusk_stone,
    ItemList.Dawn_stone,
]);
const AnistarCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Moon_stone,
    ItemList.Sun_stone,
    ItemList.Razor_claw,
    ItemList.Razor_fang,
]);
const CouriwayTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Dragon_egg,
    ItemList.Dragon_scale,
]);
const SnowbelleCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Protector,
    ItemList.Dubious_disc,
    ItemList.Reaper_cloth,
]);
//Kalos NPCs
const LumioseEngineer = new NPC('Engineer', [
    'I\'m glad to be back in the city after so long at the Power Plant; it\'s so dusty out there!.',
    'Rumor has it that if you conquer the Kalos Power Plant enough times that a strong Pokémon will challenge you made of Fire and Water. But I bet you’d have to be the Champion before it finds you worthy… I certainly have never seen it!',
]);
const CamphrierFlabébéEnthusiast = new NPC('Flabébé Enthusiast', [
    'Ah, isn\'t Flabébé such an eye-catching Pokémon? All these different lovely colors…',
    'If you\'re searching for the yellow and blue kinds, look no further than the Farm!',
    'They simply can\'t resist berries that match their colors - just plant a few and they\'ll soon come wandering in.',
]);
const CoumarineBirdwatcher = new NPC('Birdwatcher', [
    'I\'ve heard there is a cave you can find if you go out on the ocean a little ways.',
    'Apparently defeating a strong creature there unleashes some energy.',
    'There are rumors that the energy calls some legendary birds to roam Kalos!',
]);
const LaverreFurisodeGirlKatherine = new NPC('Furisode Girl Katherine', [
    'Don\'t you find Goomy to be an interesting Pokémon? I certainly think so, even though it isn\'t a problem for my Pokémon~',
    'I\'ve heard its evolutionary line loves damp conditions, and apparently if you train a Sliggoo during rainy or foggy weather something marvelous happens!',
]);
const AnistarKalosRoamerNPC = new RoamerNPC('Hex Maniac Melanie', [
    'The spirits tell me roaming Pokémon have been spotted on {ROUTE_NAME}!',
], GameConstants.Region.kalos, RoamingPokemonList.findGroup(GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos), 'assets/images/trainers/Hex Maniac.png');
const KiloudeConfusedHiker = new NPC('Confused Hiker', [
    'Whoa! What the- Where am I? How did I get here? Last thing I can remember I was in Reflection Cave when this little Pokémon with hoops threw something at me… Oh you’ve beaten the Pokémon League? Maybe you can find it roaming around the region so you can tame that little prankster. Now how am I gonna get home…',
], { image: 'assets/images/trainers/Hiker.png' });
const ProfSycamore = new ProfNPC('Prof. Sycamore', GameConstants.Region.kalos, 'You\'re encountering Pokémon at a really good clip, aren\'t you? Congratulations! You completed the Pokédex!', 'Onward to Alola, shall we?');
const MysteryFan = new NPC('Mystery Fan', [
    'I\'ve heard a Pokémon detective is sniffing around here for mysteries! He might be interested in an enigmatic berry, too.',
]);
const Spelunker = new NPC('Spelunker', [
    'I\'ve heard that a hidden realm lies beneath this cave, ruled by a Pokémon Princess. She might come out for a powerful and helpful trainer.',
    'That would be big news, sure to be reported on local bulletin boards!',
]);
const ExamineAegislash = new NPC('Examine Your Doublade', [
    '<i>Your Doublade evolves and shifts into an aggressive stance, revealing its Blade Forme.</i>',
], {
    image: 'assets/images/pokemon/681.1.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Princess Diancie', 4), new QuestLineStepCompletedRequirement('Princess Diancie', 5, GameConstants.AchievementOption.less)]),
});
const ThanksDiancie = new NPC('Princess Diancie', [
    'Thank you for your help saving the Diamond Domain. I will be waiting for you in Reflection Cave.',
], {
    image: 'assets/images/pokemon/719.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Princess Diancie', 6), new QuestLineStepCompletedRequirement('Princess Diancie', 8, GameConstants.AchievementOption.less)]),
});
//Kalos Towns
TownList['Vaniville Town'] = new Town('Vaniville Town', GameConstants.Region.kalos, [new BulletinBoard(GameConstants.BulletinBoards.Kalos)], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion)],
    npcs: [],
});
TownList['Aquacorde Town'] = new Town('Aquacorde Town', GameConstants.Region.kalos, [AquacordeTownShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 1)],
});
TownList['Santalune City'] = new Town('Santalune City', GameConstants.Region.kalos, [SantaluneCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 3)],
    npcs: [MysteryFan],
});
TownList['Lumiose City'] = new Town('Lumiose City', GameConstants.Region.kalos, [DepartmentStoreShop, FriseurFurfrouShop, TemporaryBattleList.AZ, TemporaryBattleList.Merilyn], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 4)],
    npcs: [ProfSycamore, LumioseEngineer],
});
TownList['Camphrier Town'] = new Town('Camphrier Town', GameConstants.Region.kalos, [CamphrierTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Camphrier Town'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 5)],
    npcs: [CamphrierFlabébéEnthusiast],
});
TownList['Parfum Palace'] = new Town('Parfum Palace', GameConstants.Region.kalos, [new ShardTraderShop(GameConstants.ShardTraderLocations['Parfum Palace'], 'Furfrou Shard Trader'), new GemMasterShop('Furfrou Gem Trader')], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 6)],
});
TownList['Ambrette Town'] = new Town('Ambrette Town', GameConstants.Region.kalos, [AmbretteTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Ambrette Town'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 8)],
});
TownList['Cyllage City'] = new Town('Cyllage City', GameConstants.Region.kalos, [CyllageCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Cyllage City'])], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Glittering Cave'))],
});
TownList['Geosenge Town'] = new Town('Geosenge Town', GameConstants.Region.kalos, [GeosengeTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Geosenge Town']), new MoveToDungeon(dungeonList['Team Flare Secret HQ'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 10)],
});
TownList['Shalour City'] = new Town('Shalour City', GameConstants.Region.kalos, [ShalourCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Shalour City']), TemporaryBattleList.Riot, TemporaryBattleList['Millis and Argus Steel']], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Reflection Cave'))],
    npcs: [ExamineAegislash, ThanksDiancie],
});
TownList['Coumarine City'] = new Town('Coumarine City', GameConstants.Region.kalos, [CoumarineCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Coumarine City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 12)],
    npcs: [CoumarineBirdwatcher],
});
TownList['Laverre City'] = new Town('Laverre City', GameConstants.Region.kalos, [LaverreCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Laverre City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 14)],
    npcs: [LaverreFurisodeGirlKatherine],
});
TownList['Dendemille Town'] = new Town('Dendemille Town', GameConstants.Region.kalos, [DendemilleTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Dendemille Town'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 15)],
});
TownList['Anistar City'] = new Town('Anistar City', GameConstants.Region.kalos, [AnistarCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Anistar City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 17)],
    npcs: [AnistarKalosRoamerNPC],
});
TownList['Couriway Town'] = new Town('Couriway Town', GameConstants.Region.kalos, [CouriwayTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Couriway Town'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 18)],
});
TownList['Snowbelle City'] = new Town('Snowbelle City', GameConstants.Region.kalos, [SnowbelleCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Snowbelle City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 19)],
});
TownList['Kiloude City'] = new Town('Kiloude City', GameConstants.Region.kalos, [], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion)],
    npcs: [KiloudeConfusedHiker],
});
TownList['Pokémon League Kalos'] = new Town('Pokémon League Kalos', GameConstants.Region.kalos, [GymList['Elite Malva'], GymList['Elite Siebold'], GymList['Elite Wikstrom'], GymList['Elite Drasna'], GymList['Champion Diantha'], pokeLeagueShop()], {
    requirements: [
        new OneFromManyRequirement([
            new RouteKillRequirement(10, GameConstants.Region.kalos, 21),
            new RouteKillRequirement(10, GameConstants.Region.kalos, 22),
        ]),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Kalos')),
    ],
});
//Kalos Dungeons
TownList['Santalune Forest'] = new DungeonTown('Santalune Forest', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 2)]);
TownList['Connecting Cave'] = new DungeonTown('Connecting Cave', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 7)]);
TownList['Glittering Cave'] = new DungeonTown('Glittering Cave', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 9)]);
TownList['Reflection Cave'] = new DungeonTown('Reflection Cave', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 11)], [], {
    npcs: [Spelunker],
});
//Tower of Mastery?
TownList['Sea Spirit\'s Den'] = new DungeonTown('Sea Spirit\'s Den', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 23)]);
TownList['Poké Ball Factory'] = new DungeonTown('Poké Ball Factory', GameConstants.Region.kalos, [new GymBadgeRequirement(BadgeEnums.Fairy)]);
TownList['Kalos Power Plant'] = new DungeonTown('Kalos Power Plant', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 13), new GymBadgeRequirement(BadgeEnums.Plant)]);
TownList['Lost Hotel'] = new DungeonTown('Lost Hotel', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 15)]);
TownList['Frost Cavern'] = new DungeonTown('Frost Cavern', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 15)]);
TownList['Team Flare Secret HQ'] = new DungeonTown('Team Flare Secret HQ', GameConstants.Region.kalos, [new GymBadgeRequirement(BadgeEnums.Psychic)]);
TownList['Terminus Cave'] = new DungeonTown('Terminus Cave', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 18)]);
TownList['Pokémon Village'] = new DungeonTown('Pokémon Village', GameConstants.Region.kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 20)]);
TownList['Victory Road Kalos'] = new DungeonTown('Victory Road Kalos', GameConstants.Region.kalos, [
    new GymBadgeRequirement(BadgeEnums.Iceberg),
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.kalos, 21),
        new RouteKillRequirement(10, GameConstants.Region.kalos, 22),
    ]),
]);
//Unknown Cave?
//Alola Shops
const IkiTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.SmallRestore,
]);
const HauoliCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Token_collector,
    ItemList.Lucky_egg,
    ItemList.Mystery_egg,
    ItemList.Shiny_stone,
    ItemList.Dusk_stone,
    ItemList.Dawn_stone,
]);
const HeaheaCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.xAttack,
    ItemList.MediumRestore,
    ItemList.Water_stone,
    ItemList.Kings_rock,
    ItemList.Metal_coat,
]);
const PaniolaTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Lucky_egg,
    ItemList.Grass_egg,
    ItemList.Fire_egg,
    ItemList.Water_egg,
]);
const RoadsideMotelShop = new Shop([
    ItemList.Beastball,
], 'Looker’s Exchange', [new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 1),
]);
const KonikoniCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Dowsing_machine,
    ItemList.Lucky_incense,
    ItemList.Fire_stone,
    ItemList.Linking_cord,
    ItemList.Soothe_bell,
]);
const AetherParadiseShop = new Shop([
    ItemList.Upgrade,
    ItemList['Type: Null'],
]);
const MalieCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xClick,
    ItemList.LargeRestore,
    ItemList.Thunder_stone,
    ItemList.Electric_egg,
    ItemList.Electirizer,
    ItemList.Magmarizer,
]);
const TapuVillageShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Lucky_egg,
    ItemList.Razor_claw,
    ItemList.Razor_fang,
    ItemList.Ice_stone,
]);
const SeafolkVillageShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Token_collector,
    ItemList.Fighting_egg,
    ItemList.Deepsea_tooth,
    ItemList.Deepsea_scale,
    ItemList.Prism_scale,
    ItemList.Sachet,
    ItemList.Whipped_dream,
]);
const ExeggutorIslandShop = new Shop([
    ItemList.Dragon_egg,
    ItemList.Leaf_stone,
    ItemList.Dragon_scale,
    ItemList.Protector,
    ItemList.Dubious_disc,
    ItemList.Reaper_cloth,
]);
const AltaroftheSunneandMooneShop = new Shop([
    ItemList.Moon_stone,
    ItemList.Sun_stone,
    ItemList.Poipole,
]);
//Alola NPCs
const IkiOutskirtsMom = new NPC('Scratch Cat Girl', [
    'I love cats very much, but dogs aren\'t so bad either.',
    'Out of all the doglike Pokémon, I think Rockruff is definitely the most adorable. And it even has three evolutions! One during the day, one at night and one in between, from 5 to 6 o\'clock.',
    'What\'s that? AM or PM?',
    'Yes.',
], { image: 'assets/images/npcs/Scratch Cat Girl.png' });
const KukuisLabProfessor = new NPC('Professor Kukui', [
    'Are you looking for some rare Pokémon? Maybe I can help with that. Ask away!',
    'Meltan? What\'s a Meltan? Nope, don\'t know about that one.',
    'You seem very sure about this. Look, if you\'re so certain that this thing you are talking about is real, I\'m sure it will show up sooner or later. If you\'re patient...',
    'You got me all excited. We\'ll WAIT FOR this new rare Pokémon together. Hold on, let me just UPDATE my calendar. Just to be sure I\'m free to investigate this new Pokémon that only you know about when it shows up. I wouldn\'t miss this for the world.',
], { image: 'assets/images/npcs/Professor Kukui.png' });
const IkiKahuna = new NPC('Kahuna Hala', [
    'Welcome to Alola!',
    'Here we don\'t have gyms. We have the Island Challenge. On each of our four islands you will complete one or more trials.',
    'After completing all of an island\'s trials, you will battle that island\'s Kahuna in a Grand trial.',
    'This island only has one trial: Captain Ilima\'s trial in Verdant Cavern, below the Melemele Woods. Come back here after clearing that challenge for your Grand trial battle.',
], { image: 'assets/images/gymLeaders/Hala.png' });
const HeaheaCafeOwner = new NPC('Café Owner', [
    'Akala Island has three trials.',
    'Captain Lana\'s trial in Brooklet Hill, Captain Kiawe\'s trial in Wela Volcano Park and Captain Mallow\'s trial in Lush Jungle.',
    'For what it\'s worth, I say don\'t go to any of those places. Too wet, too hot and too... jungly. Why not stay here? Have a coffee! Enjoy the city!',
    'Or go to Konikoni City down south. You might even meet our Kahuna there!',
], { image: 'assets/images/npcs/Owner.png' });
const PaniolaTownActor = new NPC('Actor Meredith', [
    'I love Oricorio. I can tell you all about it!',
    'Each of the four islands in Alola has its own meadow, and each meadow has its own form of Oricorio. Each island, except for Akala Island. So you\'d think there\'s only three forms of Oricorio, right?',
    'Wrong! There is a fourth! Did you know you can find all of the Oricorio forms on the farm? One of them doesn\'t appear anywhere else!',
    'Each Oricorio form is attracted to the berry color that matches its own style. Red for Baile style, yellow for Pom-Pom style, pink for Pa\'u style and purple for Sensu style.',
    'You want to know which one can only be found on the farm? I\'m sure you can figure that out yourself. Simple process of elimination, really.',
], { image: 'assets/images/trainers/Actor.png' });
const RoyalAvenueSpectator = new NPC('Spectator', [
    'I think battles in the Battle Royal Dome are more like games of chance. But Battle Royals are nothing compared to trying to evolve an Alolan Raichu with a Thunderstone.',
    'Evolving Pikachu or Exeggcute in Alola can result in a new form! Sometimes.',
]);
const KonikoniKahuna = new NPC('Kahuna Olivia', [
    'What do you mean Grand trials are just like gym battles? It\'s a totally different thing!',
    'Come fight me in our very special and unique brand new Pokémon League and see if you still think our Island Challenge is nothing special!',
], { image: 'assets/images/gymLeaders/Olivia.png' });
const MalieKahuna = new NPC('Kahuna Nanu', [
    'A trial-goer, huh? Figures.',
    'Just go clear Captain Sophocles\' trial at the Hokulani Observatory and Captain Acerola\'s Trial at the Thrifty Megamart. And take care of those Team Skull punks in Po Town while you\'re at it.',
    'Then come back here so we can get this Grand trial over with.',
], { image: 'assets/images/gymLeaders/Nanu.png' });
const TapuWorker = new NPC('Worker Ovid', [
    'Yesterday was my first day working on Mount Lanakila. I was up there maintaining the paths to the new Pokémon League.',
    'My trusty Crabrawler was with me. He was smashing some rocks that were blocking the path, having a grand ol\' time like usual, when suddenly we were attacked by a wild Pokémon!',
    'After the battle, Crabrawler evolved! I didn\'t even know he could do that. He\'s so different now. But I still love him. He\'s my best friend, and he\'s even better at rock smashing now!',
], { image: 'assets/images/trainers/Worker (male).png' });
const SeafolkCaptain = new NPC('Captain Mina', [
    'My trial is in this town. Right there, inside my very own houseboat. However, I want you to clear the trial in Vast Poni Canyon first. It has no Captain, so you\'ll be all on your own. Be careful.',
    'If you can clear my trial you\'ll find our Kahuna on Exeggutor Island.',
], { image: 'assets/images/gymLeaders/Mina.png' });
const LanakilaColress = new NPC('Colress', [
    'It\'s been a while. You must be a formidable Trainer indeed if you are able to get Necrozma as one of your allies.',
    'Good! And this is from me! The Ultra Recon Squad asked me to develop a device that would be able to control Necrozma. But I improved it to my own liking! And now it is a device that makes it possible to draw out even more power from Necrozma!',
    '<img src="assets/images/npcs/textbody/N-Solarizer.png">',
    'Yes, in short, it makes it possible for Necrozma to fuse with the light of the Legendary Pokémon Solgaleo! This is the Colress Machine No. 1198, officially dubbed the N-Solarizer!',
    '<img src="assets/images/npcs/textbody/N-Lunarizer.png">',
    'In addition, this is the Colress Machine No. 1199, officially dubbed the N-Lunarizer! It makes it possible for Necrozma to fuse with the light of the Legendary Pokémon, Lunala!',
    'If you wish to make use of them, you will require light from Solgaleo and Lunala respectively. I believe that they may drop the crystallised form of this light if you defeat them in battle!',
    'I believe that a Trainer like you will be able to use both Alola\'s Legendary Pokémon and the fearsome power of Necrozma properly! I happen to know quite a bit about Pokémon fusion myself... But that is a different tale. Good luck in your battles!',
], {
    image: 'assets/images/trainers/Team Plasma (colress).png',
    requirement: new ObtainedPokemonRequirement(pokemonMap.Necrozma),
});
const AetherParadiseAlolaRoamerNPC = new RoamerNPC('Assistant Branch Chief Wicke', [
    'Some very rare Pokémon have been sighted on {ROUTE_NAME}. I hope we can learn more about them.',
], GameConstants.Region.alola, RoamingPokemonList.findGroup(GameConstants.Region.alola, GameConstants.AlolaSubRegions.AkalaIsland), 'assets/images/npcs/Assistant Branch Chief Wicke.png');
const ProfKukui = new ProfNPC('Prof. Kukui', GameConstants.Region.alola, 'This is truly an astounding feat! Congratulations on completing the Pokédex!', 'With that, you can stamp your ticket to the noble Galar region!', 'assets/images/npcs/Professor Kukui.png');
const RoadsideMotelLooker1 = new NPC('Looker', [
    'I\'m very grateful that you accepted my invitation. My name is Looker. This here is my boss, Chief Anabel, head of the UB Taskforce.',
    'Ever since the incident at Aether Paradise, where you encountered UB-01 Symbiont, also known as Nihilego, we have heard reports of other Symbiont appearing in Alola. And other types of UBs too.',
    'They came here from a different world. Dropped rudely into our world against their will. We know nothing about them. They could be dangerous. They are almost certainly extremely wary and combative.',
    'We must find a way to calm their nerves. To make them feel at home in our world. Or we must destroy them. Either way, we must understand them. We must catch them.',
    'That is where you come in. The Champion of Alola. We do not have the battle power, but hopefully you do. Please allow Anabel to test your battle ability to ensure that you can handle this job.',
], {
    image: 'assets/images/npcs/Looker.png',
    requirement: new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 1, GameConstants.AchievementOption.less),
});
const RoadsideMotelAnabel1 = new NPC('Anabel', [
    'The testing is complete. I see no problem at all with your skills. Rather I would have to praise you for them. Welcome to the team!',
    'There is no more time to waste. UB-01 Symbiont, Nihilego, has been spotted on Akala Island! I will protect the nearby population centers, you must go and confront the Beast!',
    'Looker will stay here to coordinate reinforcements if needed. You can ask him about the special Beast Balls you will be using on this mission. I have given you a couple of them, but they are expensive so you will have to pitch in if you need more.',
], {
    image: 'assets/images/temporaryBattle/Anabel.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 1, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 4, GameConstants.AchievementOption.less)]),
});
const RoadsideMotelLooker2 = new NPC('Looker', [
    'Catching lots of Ultra Beasts? Oh you want to know more about Beast Balls!',
    'Beast Balls can only be used to catch Ultra Beasts. You can\'t even try use them against normal Pokémon, and any other Poké Ball type won\'t work against Ultra Beasts.',
    'If you\'re looking to most effectively hunt the Ultra Beasts down, try putting Beast Balls in your "Already Caught" selector. Beast Balls will never be thrown at Pokémon that aren\'t Ultra Beasts.',
], {
    image: 'assets/images/npcs/Looker.png',
    requirement: new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 2),
});
const RoadsideMotelAnabel2 = new NPC('Anabel', [
    'Congratulations on a job well done. I\'ve had contact with our colleagues at HQ. They have agreed to let you keep the UBs you catch.',
    'I\'m sure the UBs will truly flourish in the company of a competent trainer like yourself. It\'ll be much better for them than being locked up in some stuffy lab. Just be sure to let us know how they are doing.',
    'Now, enough chit-chat. UB-02 Absorption and UB-02 Beauty, Buzzwole and Pheromosa, have been sighted on Melemele Island. You know what to do!',
], {
    image: 'assets/images/temporaryBattle/Anabel.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 4, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 6, GameConstants.AchievementOption.less)]),
});
const RoadsideMotelAnabel3 = new NPC('Anabel', [
    'Congratulations once again. Looker told me he wants to take us to a great restaurant to celebrate. I don\'t know how he knows any restaurants around here, we\'ve only just arrived.',
    'It doesn\'t matter though. There is no rest for us. Captain Mina is here with news, but she insist on battling you before she\'ll tell us anything.',
], {
    image: 'assets/images/temporaryBattle/Anabel.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 6, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 8, GameConstants.AchievementOption.less)]),
});
const RoadsideMotelMina = new NPC('Captain Mina', [
    'Still in tip top shape I see. Good. That means you\'re strong enough to take out this monster I heard about on Akala Island.',
    'According to your little list here its... uhm... this one! UB-03 Lighting. Xurkitree. These are some strange names you guys come up with.',
    'Good luck out there!',
], {
    image: 'assets/images/gymLeaders/Mina.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 8, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 10, GameConstants.AchievementOption.less)]),
});
const RoadsideMotelNanu1 = new NPC('Kahuna Nanu', [
    '...',
    'I let myself in. Hope you don\'t mind.',
    'I\'m here to tell you about sightings of monsters on Ula\'ula Island. I missed some big Kahuna meeting we were all supposed to go to, so I got stuck as the messenger.',
    'It\'s not like I\'ve seen them or anything. Your friend Looker knew them from the description though. UB-04 Blade and UB-04 Blaster he called them. Kartana and Celesteela.',
    '...',
], {
    image: 'assets/images/gymLeaders/Nanu.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 10, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 12, GameConstants.AchievementOption.less)]),
});
const RoadsideMotelNanu2 = new NPC('Kahuna Nanu', [
    '...',
    'Good job on rounding up those creatures kid.',
    'Now, how about one more battle? I insist.',
], {
    image: 'assets/images/gymLeaders/Nanu.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 12, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 14, GameConstants.AchievementOption.less)]),
});
const RoadsideMotelAnabel4 = new NPC('Anabel', [
    'This is tiring work, but I have a feeling that we\'re almost done.',
    'Looker\'s informants told us about monster sightings on Poni Island. It seems UB Assembly and UB Burst, Stakataka and Blacephalon, have taken up residence.',
    'Please be careful.',
], {
    image: 'assets/images/temporaryBattle/Anabel.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 14, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 16, GameConstants.AchievementOption.less)]),
});
const RoadsideMotelAnabel5 = new NPC('Anabel', [
    'And so here we are. At the end. And back at the beginning.',
    'Our final target is UB-05 Glutton. Guzzlord. It is very dangerous. You must not underestimate this beast.',
    'Ten years ago, a very similar incident occured. Looker and his team were assigned to fight Guzzlord. Nanu was there too. They lost. Looker lost a colleague that day.',
    'After the battle they found something. A strange young girl, alone in the wilderness of Poni Island. They found me. It seems I came from another world as well. Not their world though. These creatures are strange to me too.',
    'I have made myself at home here. I hope Glutton can do the same. Please catch this Guzzlord. End this once and for all.',
], {
    image: 'assets/images/temporaryBattle/Anabel.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 16, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 18, GameConstants.AchievementOption.less)]),
});
const BattleTreeRed = new NPC('Red', [
    '...',
], { image: 'assets/images/npcs/Red-masters.png' });
const BattleTreeBlue = new NPC('Blue', [
    'Hello there champ! Fancy seeing you here.',
    'We just planted this sapling here. Maybe it will grow into something great some day.',
], { image: 'assets/images/npcs/Blue-masters.png' });
//Alola Towns
TownList['Iki Town Outskirts'] = new Town('Iki Town Outskirts', GameConstants.Region.alola, [], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion)],
    npcs: [IkiOutskirtsMom],
});
TownList['Iki Town'] = new Town('Iki Town', GameConstants.Region.alola, [IkiTownShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 1)],
    npcs: [IkiKahuna],
});
TownList['Professor Kukui\'s Lab'] = new Town('Professor Kukui\'s Lab', GameConstants.Region.alola, [new BulletinBoard(GameConstants.BulletinBoards.Alola)], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 18)],
    npcs: [KukuisLabProfessor /*ProfKukui*/],
});
TownList['Hau\'oli City'] = new Town('Hau\'oli City', GameConstants.Region.alola, [HauoliCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Hau\'oli City'])], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Trainers\' School'))],
});
TownList['Melemele Woods'] = new Town('Melemele Woods', GameConstants.Region.alola, [new MoveToDungeon(dungeonList['Verdant Cavern']), new MoveToDungeon(dungeonList['Melemele Meadow']), new MoveToDungeon(dungeonList['Ruins of Conflict'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 2)],
});
TownList['Roadside Motel'] = new Town('Roadside Motel', GameConstants.Region.alola, [TemporaryBattleList.Anabel, TemporaryBattleList['Captain Mina UB'], TemporaryBattleList['Kahuna Nanu UB'], RoadsideMotelShop], {
    requirements: [new QuestLineStartedRequirement('Ultra Beast Hunt')],
    npcs: [RoadsideMotelLooker1, RoadsideMotelAnabel1, RoadsideMotelLooker2, RoadsideMotelAnabel2, RoadsideMotelAnabel3, RoadsideMotelMina, RoadsideMotelNanu1, RoadsideMotelNanu2, RoadsideMotelAnabel4, RoadsideMotelAnabel5],
});
TownList['Heahea City'] = new Town('Heahea City', GameConstants.Region.alola, [HeaheaCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Heahea City']), new DockTownContent()], {
    requirements: [new GymBadgeRequirement(BadgeEnums.FightiniumZ)],
    npcs: [HeaheaCafeOwner],
});
TownList['Paniola Town'] = new Town('Paniola Town', GameConstants.Region.alola, [PaniolaTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Paniola Town'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 4)],
    npcs: [PaniolaTownActor],
});
TownList['Royal Avenue'] = new Town('Royal Avenue', GameConstants.Region.alola, [DepartmentStoreShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 6)],
    npcs: [RoyalAvenueSpectator],
});
TownList['Konikoni City'] = new Town('Konikoni City', GameConstants.Region.alola, [KonikoniCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Konikoni City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 9)],
    npcs: [KonikoniKahuna],
});
TownList['Aether Paradise'] = new Town('Aether Paradise', GameConstants.Region.alola, [TemporaryBattleList['Ultra Wormhole'], AetherParadiseShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Aether Paradise']), new MoveToDungeon(dungeonList['Aether Foundation'])], {
    requirements: [new GymBadgeRequirement(BadgeEnums.RockiumZ)],
    npcs: [AetherParadiseAlolaRoamerNPC],
});
TownList['Malie City'] = new Town('Malie City', GameConstants.Region.alola, [MalieCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Malie City']), new MoveToDungeon(dungeonList['Malie Garden']), new DockTownContent()], {
    requirements: [new TemporaryBattleRequirement('Ultra Wormhole')],
    npcs: [MalieKahuna],
});
TownList['Tapu Village'] = new Town('Tapu Village', GameConstants.Region.alola, [TapuVillageShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Tapu Village']), TemporaryBattleList['Kahuna Nanu']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 13)],
    npcs: [TapuWorker],
});
TownList['Seafolk Village'] = new Town('Seafolk Village', GameConstants.Region.alola, [SeafolkVillageShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Seafolk Village']), new MoveToDungeon(dungeonList['Mina\'s Houseboat']), new DockTownContent(), TemporaryBattleList['Captain Mina']], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Aether Foundation'))],
    npcs: [SeafolkCaptain],
});
TownList['Exeggutor Island'] = new Town('Exeggutor Island', GameConstants.Region.alola, [ExeggutorIslandShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Exeggutor Island']), new MoveToDungeon(dungeonList['Exeggutor Island Hill'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 25)],
});
TownList['Altar of the Sunne and Moone'] = new Town('Altar of the Sunne and Moone', GameConstants.Region.alola, [TemporaryBattleList['Ultra Megalopolis'], AltaroftheSunneandMooneShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Altar of the Sunne and Moone'])], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Vast Poni Canyon'))],
});
TownList['Pokémon League Alola'] = new Town('Pokémon League Alola', GameConstants.Region.alola, [GymList['Elite Molayne'], GymList['Elite Olivia'], GymList['Elite Acerola'], GymList['Elite Kahili'], GymList['Champion Hau'], pokeLeagueShop()], {
    requirements: [
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mount Lanakila')),
    ],
});
TownList['A Tree Maybe'] = new Town('A Tree Maybe', GameConstants.Region.alola, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 30)],
    npcs: [BattleTreeRed, BattleTreeBlue],
});
//Alola Dungeons
TownList['Trainers\' School'] = new DungeonTown('Trainers\' School', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 18)]);
TownList['Hau\'oli Cemetery'] = new DungeonTown('Hau\'oli Cemetery', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 2)], [TemporaryBattleList['Captain Ilima']]);
TownList['Verdant Cavern'] = new DungeonTown('Verdant Cavern', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 2)]);
TownList['Melemele Meadow'] = new DungeonTown('Melemele Meadow', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 3)]);
TownList['Seaward Cave'] = new DungeonTown('Seaward Cave', GameConstants.Region.alola, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Melemele Meadow'))]);
TownList['Ten Carat Hill'] = new DungeonTown('Ten Carat Hill', GameConstants.Region.alola, [new GymBadgeRequirement(BadgeEnums.FightiniumZ)]);
TownList['Pikachu Valley'] = new DungeonTown('Pikachu Valley', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 4)]);
TownList['Paniola Ranch'] = new DungeonTown('Paniola Ranch', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 4)]);
TownList['Brooklet Hill'] = new DungeonTown('Brooklet Hill', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 5)]);
TownList['Wela Volcano Park'] = new DungeonTown('Wela Volcano Park', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 7)], [TemporaryBattleList['Captain Kiawe']]);
TownList['Lush Jungle'] = new DungeonTown('Lush Jungle', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 8)], [TemporaryBattleList['Captain Mallow'], TemporaryBattleList['Captain Lana']]);
TownList['Diglett\'s Tunnel'] = new DungeonTown('Diglett\'s Tunnel', GameConstants.Region.alola, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Lush Jungle'))]);
TownList['Memorial Hill'] = new DungeonTown('Memorial Hill', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 9)]);
TownList['Malie Garden'] = new DungeonTown('Malie Garden', GameConstants.Region.alola, [new TemporaryBattleRequirement('Ultra Wormhole')] //Replace with Ather Paradise 1 if implemented
);
TownList['Hokulani Observatory'] = new DungeonTown('Hokulani Observatory', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 22)], [TemporaryBattleList['Captain Sophocles']]);
TownList['Thrifty Megamart'] = new DungeonTown('Thrifty Megamart', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 14)]);
TownList['Ula\'ula Meadow'] = new DungeonTown('Ula\'ula Meadow', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 16)]);
TownList['Po Town'] = new DungeonTown('Po Town', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 17)]);
TownList['Aether Foundation'] = new DungeonTown('Aether Foundation', GameConstants.Region.alola, [new GymBadgeRequirement(BadgeEnums.DarkiniumZ)]);
TownList['Exeggutor Island Hill'] = new DungeonTown('Exeggutor Island Hill', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 25)]);
TownList['Vast Poni Canyon'] = new DungeonTown('Vast Poni Canyon', GameConstants.Region.alola, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Exeggutor Island Hill'))]);
TownList['Mina\'s Houseboat'] = new DungeonTown('Mina\'s Houseboat', GameConstants.Region.alola, [new TemporaryBattleRequirement('Kahuna Nanu')]);
TownList['Mount Lanakila'] = new DungeonTown('Mount Lanakila', GameConstants.Region.alola, [new GymBadgeRequirement(BadgeEnums.GroundiumZ)], [], {
    npcs: [LanakilaColress],
});
TownList['Lake of the Sunne and Moone'] = new DungeonTown('Lake of the Sunne and Moone', GameConstants.Region.alola, [new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion)]);
TownList['Ruins of Conflict'] = new DungeonTown('Ruins of Conflict', GameConstants.Region.alola, [new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion)]);
TownList['Ruins of Life'] = new DungeonTown('Ruins of Life', GameConstants.Region.alola, [
    new RouteKillRequirement(10, GameConstants.Region.alola, 21),
    new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion),
]);
TownList['Ruins of Abundance'] = new DungeonTown('Ruins of Abundance', GameConstants.Region.alola, [
    new RouteKillRequirement(10, GameConstants.Region.alola, 23),
    new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion),
]);
TownList['Ruins of Hope'] = new DungeonTown('Ruins of Hope', GameConstants.Region.alola, [
    new RouteKillRequirement(10, GameConstants.Region.alola, 26),
    new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion),
]);
TownList['Poni Meadow'] = new DungeonTown('Poni Meadow', GameConstants.Region.alola, [new RouteKillRequirement(10, GameConstants.Region.alola, 28)]);
TownList['Resolution Cave'] = new DungeonTown('Resolution Cave', GameConstants.Region.alola, [
    new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 17),
]);
//Galar Shops
const PostwickShop = new Shop([
    ItemList.Pokeball,
]);
const WedgehurstShop = new Shop([
    ItemList.Pokeball,
    ItemList.Mystery_egg,
]);
const TurffieldShop = new Shop([
    ItemList.Pokeball,
    ItemList.Grass_egg,
    ItemList.Sweet_apple,
    ItemList.Tart_apple,
    ItemList.Leaf_stone,
    ItemList.Sun_stone,
]);
const HulburyShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Water_egg,
    ItemList.Water_stone,
    ItemList.Kings_rock,
    ItemList.Prism_scale,
    ItemList.Deepsea_tooth,
    ItemList.Deepsea_scale,
]);
const MotostokeShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Fire_egg,
    ItemList.Fire_stone,
    ItemList.Linking_cord,
    ItemList.Magmarizer,
]);
const HammerlockeShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Dragon_egg,
    ItemList.Metal_coat,
    ItemList.Upgrade,
    ItemList.Dragon_scale,
]);
const StowonSideShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Fighting_egg,
    ItemList.Soothe_bell,
    ItemList.Dawn_stone,
    ItemList.Dubious_disc,
    ItemList.Reaper_cloth,
]);
const GlimwoodTangleShop = new Shop([
    ItemList['Zarude (Dada)'],
], 'Zarude Village', [new QuestLineCompletedRequirement('Secrets of the Jungle')]);
const BallonleaShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Cracked_pot,
    ItemList.Moon_stone,
    ItemList.Shiny_stone,
    ItemList.Sachet,
    ItemList.Whipped_dream,
]);
const CirchesterShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Razor_claw,
    ItemList.Razor_fang,
    ItemList.Protector,
    ItemList.Ice_stone,
]);
const SpikemuthShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Electric_egg,
    ItemList.Thunder_stone,
    ItemList.Dusk_stone,
    ItemList.Electirizer,
]);
const WyndonShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.SmallRestore,
    ItemList.MediumRestore,
    ItemList.LargeRestore,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.Lucky_egg,
    ItemList.Token_collector,
    ItemList.Dowsing_machine,
    ItemList.Lucky_incense,
]);
const MasterDojoShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Galarica_cuff,
    ItemList.Galarica_wreath,
]);
const FreezingtonShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
]);
//Galar NPCs
const PostwickMum = new NPC('Mum', [
    'Don’t go too far into the Slumbering Weald.',
    'I’ve heard there are some very strong Pokémon in there.',
    'Only those who beat the champion are strong enough to face them!',
]);
const WedgehurstRailStaff = new NPC('Rail Staff', [
    'There are some areas around Galar that you can only reach after beating the Champion.',
    'One is an island paradise, the other a freezing wasteland.',
    'I’m sure if you go to these places you’ll find many unique and powerful Pokémon!',
], { image: 'assets/images/trainers/Rail Staff.png' });
const AssistantHenry = new NPC('Assistant Henry', [
    'There are many Pokémon in Galar that I heard look completely different in other regions of the world! They can also evolve in unique ways!',
    'I know that reckless one, Linoone, will only evolve during the night time here. But, I also think I’ve seen its evolution wandering across the lake if you have a way to cross.',
]);
const BattleCafeMaster = new NPC('Battle Café Master', [
    'Milcery can evolve when you spin around with it, while treating it to a Sweet.',
    'For example, you can whip up a Vanilla Alcremie, by spinning clockwise for less than 5 seconds, during the day. Piece of cake! There’s a unique form for each Sweet under this circumstance, so bake it till you make it!',
    'There are more tiers to Alcremie than I can count. Mix up the direction, duration, time of day, and the given Sweet to disover all the flavours there are to find.',
    'I will suggest that you only do 3 spins a day if you don’t want to end up sick!',
    'Stop by the Battle Café, we sell all the Sweets you’ll need!',
], { image: 'assets/images/npcs/BattleCafeMaster.png' });
const MotostokeArtist = new NPC('Artist Duncan', [
    'My Kantonian Farfetch’d would never evolve no matter how many fresh Leeks I gave it.',
    'Lo and behold, here in Galar the Farfetch’d wield thick, tough leeks for battle!',
    'Once my Galarian Farfetch’d was holding a Leek.. Blimey, I was surprised how quickly he transformed into a noble ally! With the Leek growing into a mighty stalk for battle!',
], { image: 'assets/images/npcs/Artist (Gen 8).png' });
const TurffieldCook = new NPC('Cook Stuart', [
    'I love Sweet and Tart Apples! Oh, this is Applin! He isn’t a snack, but helps me make all sorts of dishes!',
    'Applin absolutely loves Sweet and Tart treats.',
    'But, I could never give Applin a Sweet or Tart Apple, that just seems so... wrong...',
    'I can’t be missing out on much anyways, what could be more perfect than my Applin!',
], { image: 'assets/images/trainers/Cook.png' });
const Meteorologist = new NPC('Meteorologist', [
    'The Pokémon in the Wild Area are very finicky, and many of them only appear in certain weathers.',
    'I\'ve also heard that the Pokémon in the Isle of Armor to the East, and the Crown Tundra to the South, are also like this.',
    'There are even some Pokémon, namely Cramorant and Eiscue, that only appear in certain forms depending on weather.',
]);
const HammerlockeHiker = new NPC('Hiker Donald', [
    'Have you spotted a blue bird walking around with an Arrokuda in its throat? It’s quite a daft Pokémon, but it sure is hungry! I guess if it trains near water it tries to swallow Arrokudas, but they always get stuck in its throat.',
    'My mate told me a story of a Pikachu getting lodged in the gluttonous bird’s gullet while it was gorging in a thunderstorm! But that sounds ridiculous! How would it not be bothered by the big rat in its throat? It would drive me mad.',
], { image: 'assets/images/npcs/Hiker (Gen 8).png' });
const AncientMural1 = new NPC('Ancient Mural', [
    '<i>It’s Stow-on-Side’s famous mural.</i>',
    '<i>It’s said to be a very deep work of art...</i>',
], {
    image: 'assets/images/npcs/other/Ancient Mural.png',
    requirement: new QuestLineStepCompletedRequirement('The Darkest Day', 1, GameConstants.AchievementOption.less),
});
const AncientMural2 = new NPC('Ancient Mural Ruins', [
    '<i>It’s the statues that were hidden behind Stow-on-Side’s famous mural.</i>',
    '<i>They depict two heroes and two Pokémon.</i>',
], {
    image: 'assets/images/npcs/other/Ancient Mural Ruins.png',
    requirement: new QuestLineStepCompletedRequirement('The Darkest Day', 1),
});
const StowonSideSonia = new NPC('Sonia', [
    'Not a brilliant turn of events, but the ruins were brought into the light for us to see...',
    'What does this tell us about Galar’s legends? More than any hero, there’s those things that appear to be Pokémon that stand out!',
    'Not just that, but those Pokémon appear to be holding a sword and shield as if they were using them!',
    'More than any statue of a hero or old tapestry, these ruins made in truly ancient times must show us the real truth.',
    'Seems like at some point in history the sword and shield were combined with the two actual Pokémon and treated as the same thing...',
    'Two young heroes... The sword and shield were actually Pokémon... But why would the truth of these ruins be hidden when their stories were depicted in artwork?',
], {
    image: 'assets/images/npcs/Sonia.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Darkest Day', 1), new QuestLineStepCompletedRequirement('The Darkest Day', 3, GameConstants.AchievementOption.less)]),
});
const Archaeologist = new NPC('Archaeologist', [
    'I\'ve been studying the Galarian form of Yamask.',
    'It seems they do not evolve into Galarian Cofagrigus, but a completely different Pokémon instead.',
    'For some mysterious reason, they only evolve when trained in a specific area of the wild area known as the Dusty Bowl.',
], { image: 'assets/images/trainers/Ruin Maniac.png' });
const HerosBath = new NPC('Hero’s Bath', [
    '<i>The ancient Hero’s Bath.</i>',
    '<i>They say this is where the two heroes came to soothe their wounds after the battle to bring down that evil presence, long ago.</i>',
], { image: 'assets/images/npcs/other/HerosBath.png' });
const CirchesterHop = new NPC('Hop', [
    'Based on the statues the sword and shield must have actually been two Pokémon, right?',
    'You remember the Pokémon we met in the Slumbering Weald?',
    'Do you think...it could’ve been one of them? I mean the sword or the shield Pokémon?',
    'Perhaps when their duty was completed, they went into some kind of sleep?',
], {
    image: 'assets/images/gymLeaders/Hop.png',
    requirement: new MultiRequirement([new TemporaryBattleRequirement('Hop7'), new QuestLineStepCompletedRequirement('The Darkest Day', 6, GameConstants.AchievementOption.less)]),
});
const CirchesterSonia = new NPC('Sonia', [
    'Hmm... Who exactly were the heroes that bathed here?',
    'Nowadays only Pokémon really use the Hero’s Bath...',
    'I think I’ll have to look more into the history of the Slumbering Weald.',
], {
    image: 'assets/images/npcs/Sonia.png',
    requirement: new MultiRequirement([new TemporaryBattleRequirement('Hop7'), new QuestLineStepCompletedRequirement('The Darkest Day', 6, GameConstants.AchievementOption.less)]),
});
const CirchesterGuitarist = new NPC('Guitarist Justin', [
    'I caught this Snom on Steamdrift Way and we’ve become really good mates.',
    'I thought that friendship was all Snom needed to evolve, but I kept trying to give it a Soothe Bell during the day and nothing happened!',
    'I’m too busy playing gigs to scamper around with Snom in the evening!',
], { image: 'assets/images/npcs/Guitarist (male).png' });
const TeamYellGrunts = new NPC('Team Yell Grunts', [
    'Our Marnie’s Morpeko is so cute, don’tcha think?',
    'When it’s hungry, though, it gets so angry it changes forms.',
    'If you want to catch it in that form, you would probably be best trying to attract it with a berry that electric Pokémon like.',
], { image: 'assets/images/trainers/Team Yell Grunts.png' });
const RoseBroadcast = new NPC('Broadcast of Chairman Rose', [
    'Hello there, Leon! Just letting you know...',
    'I think it\'s time I brought about the Darkest Day. For the sake of Galar\'s future, of course!',
    'But I\'m in a bit of a pickle. The energy released by the Darkest Day is too much for us to contain.',
    'I\'m sorry it\'s come to this. But it\'s you who forced my hand, Leon. You refused to listen!',
], {
    image: 'assets/images/trainers/Macro Cosmos (rose).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Darkest Day', 10), new QuestLineStepCompletedRequirement('The Darkest Day', 12, GameConstants.AchievementOption.less)]),
});
const WyndonHop = new NPC('Hop', [
    'That video stream... That was from Hammerlocke Stadium, right? What in the world did the chairman do...?',
    'I want to help my brother! I\'ve got to! But I can\'t even manage to beat you, so what sort of help could I ever be...?',
    'Hold the phone... The chairman was talking about the Darkest Day. That\'s the thing where the sky went all dark once, ages and ages ago, right? What does he mean, he\'s bringing that about? And where did we even hear that name...?',
    'Ah! That statue of the hero in Motostoke! Sonia said something back then, didn\'t she... Though it turned out to be wrong, since there were actually two heroes and all that.',
    'Still! Those two managed to bring an end to the Darkest Day with the sword and shield Pokémon! Sonia thought the Pokémon might still be sleeping somewhere though, right?',
    'That\'s it! I\'m sure it\'s got to be the Slumbering Weald! Those illusions you tried to fight off that day—they must\'ve been the Pokémon that are supposed to be sleeping there!',
    'Let\'s go back to the Slumbering Weald! If we\'re lucky, we\'ll find something that can help!',
], {
    image: 'assets/images/gymLeaders/Hop.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Darkest Day', 11), new QuestLineStepCompletedRequirement('The Darkest Day', 13, GameConstants.AchievementOption.less)]),
});
const SlumberingHop1 = new NPC('Hop', [
    'Would you take a look at that! Now that\'s something you don\'t see every day... This place definitely feels like the stuff of legend. See that! The sword and the shield! The legends really were true!',
    'That settles it! We\'re taking the sword and shield. Though...wow, would you look at the state of these things? They seems like they might fall to pieces if you so much as look at \'em funny.',
    'I don\'t know if these rusty old things will really be able to stop the Darkest Day, but... Well, I guess it can\'t hurt to have them along! Let\'s hope they bring us some good luck!',
    'Maybe the Pokémon themselves really are still asleep somewhere. So it seems we\'re on our own if we want to go help Lee. This is all the help we\'ve got!',
], {
    image: 'assets/images/gymLeaders/Hop.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Darkest Day', 13), new QuestLineStepCompletedRequirement('The Darkest Day', 15, GameConstants.AchievementOption.less)]),
});
const EnergyPlantRose = new NPC('Chairman Rose', [
    'Most impressive! I wouldn\'t expect any less from a challenger endorsed by the strongest Champion ever to grace our beloved Galar region!',
    'I really do wish I could have seen the Championship Match between you two. And I\'m terribly sorry to have ruined the whole Gym Challenge and everything!',
    'It\'s too bad, but it can\'t be helped... In order to solve the energy issue as soon as possible, we awakened Eternatus. But we couldn\'t control it. The Champion came to aid me, even at the cost of abandoning the match. Indeed, just like a knight in shining armor coming to rescue a princess from a dragon!',
    'I do tend to ramble on, I know. I love to make speeches. But I think I can stop talking now. I think the Champion should have captured Eternatus by now. If you\'re curious, you can take the lift up.',
    'And I trust you\'ll be going too, right, Hop? I certainly hope losing to me didn\'t discourage you too much. Go on now, both of you! Go see how our Champion is doing!',
], {
    image: 'assets/images/trainers/Macro Cosmos (rose).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Darkest Day', 15), new QuestLineStepCompletedRequirement('The Darkest Day', 17, GameConstants.AchievementOption.less)]),
});
const Leon = new NPC('Leon', [
    'My matches are always sold out, but this... I\'ve never seen a crowd this wild!',
    'Everyone knows what you did for us this week... They know you\'re the one who caught Eternatus and saved the future of the Galar region.',
    'A real hero, who battled alongside the Legendary Pokémon, Zacian and Zamazenta... I couldn\'t have dreamed of a better challenger to help increase my winning streak!',
    'Oh... And you\'ve even added Eternatus to your party. The greatest challenger along with the most powerful Pokémon—is that it? Now you\'re really getting me excited!',
    'Now that I\'ve seen just what kind of strength you possess as the greatest of challengers...crushing you into the dirt will show everyone just how strong their Champion truly is!',
    'Come on, now! Let\'s make this a final match that\'ll go down in Galar\'s history! No! A match that\'ll change Galar forever!',
    'We\'re gonna have an absolutely champion time!',
], {
    image: 'assets/images/gymLeaders/Leon.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Darkest Day', 18), new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion, GameConstants.AchievementOption.less)]),
});
const SlumberingHop2 = new NPC('Hop', [
    'Huh? What\'re you doing here in the woods? Nobody ever comes in here, since this is the forest where Zacian and Zamazenta rested. It\'s the best place to do a bit of thinking, since it\'s so quiet and all.',
    'Oh, but I hadn\'t had the chance to tell you! Congrats on your victory! Honestly... I never thought you\'d manage to beat my brother. The greatest Champion Galar ever had! He was undefeatable till you came around! It\'s actually still pretty hard to believe...',
    'Really... You\'re amazing. So amazing, maybe, that I don\'t even realize just how amazing you really are!',
    'So, do you think... Would you be up for one more battle?',
], {
    image: 'assets/images/gymLeaders/Hop.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Sword and Shield'), new QuestLineStepCompletedRequirement('Sword and Shield', 1, GameConstants.AchievementOption.less)]),
});
const SordwardShielbert1 = new NPC('Sordward & Shielbert', [
    'Well, well, well... I thought I heard someone making some noise over this way!',
    'I am Sordward!',
    'I am Shielbert!',
    'We are the new kings of Galar! We\'re descendents of the first kings!',
    'More than that, we\'re celebrities!',
    'Well, well, well! Could these things here be the fabled sword and shield?',
    'Well, well, well! They certainly are dirty! They must be fake! I fear to touch them with my bare hands.',
    'Oh, you want us to return them? Then perhaps we should settle this with a battle?',
], {
    image: 'assets/images/temporaryBattle/Sordward & Shielbert.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Sword and Shield', 1), new QuestLineStepCompletedRequirement('Sword and Shield', 3, GameConstants.AchievementOption.less)]),
});
const SordwardShielbert2 = new NPC('Sordward & Shielbert', [
    'We know all the Wishing Stars that Chairman Rose had gathered are here. We celebrities have an advanced level of insight into such things!',
    'You noncelebrities are not suited to having such valuable things. Hand them over to us.',
    'You wish to keep them from us? No matter. This time we\'ve brought much stronger Pokémon to thoroughly trounce you with!',
], {
    image: 'assets/images/temporaryBattle/Sordward & Shielbert.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Sword and Shield', 6), new QuestLineStepCompletedRequirement('Sword and Shield', 8, GameConstants.AchievementOption.less)]),
});
const SordwardShielbert3 = new NPC('Sordward & Shielbert', [
    'Well, well, well? It seems you have rescued the stadiums from their perils. As expected of the Champion.',
    'You want to know why we have been forcing those Pokémon to rampage? We did it in order to expose the true nature of Zacian and Zamazenta!',
    'We have always been revered as the resplendent descendents of the real hero...',
    'It\'s all because you ruffians had to go and save Galar from Eternatus!',
    'You said that the real heroes were Pokémon! You just carelessly changed history!',
    'What does that mean we are? You dare say that our esteemed ancestors were liars?',
    'It\'s obvious that the old history was better! It was right!',
    'To suddenly start creating heroes left and right... It\'s complete rubbish!',
    'Ahem... If you want to take the lift up, you\'ll have to defeat us! This time we will show you the opulent Pokémon we have raised explicity for this battle!',
], {
    image: 'assets/images/temporaryBattle/Sordward & Shielbert.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Sword and Shield', 13), new QuestLineStepCompletedRequirement('Sword and Shield', 15, GameConstants.AchievementOption.less)]),
});
const SordwardShielbert4 = new NPC('Sordward & Shielbert', [
    'Fwahaheho! We did it! Zacian and Zamazenta came, following after the Rusted Sword and Shield!',
    'Yes! Expose your true, barbaric, brutish nature...and reveal to us exactly who the false kings are!',
    'W-wait! D-don\'t attack us! Go into town, and sow as much destruction as you can!',
], {
    image: 'assets/images/temporaryBattle/Sordward & Shielbert.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Sword and Shield', 15), new QuestLineStepCompletedRequirement('Sword and Shield', 17, GameConstants.AchievementOption.less)]),
});
const Piers = new NPC('Piers', [
    'As expected of the Champion... You took complete control of the situation.',
    'Plus it looks like those Pokémon are waiting for you, now they\'re calmed down an\' all.',
], {
    image: 'assets/images/gymLeaders/Piers.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Sword and Shield', 17), new QuestLineStepCompletedRequirement('Sword and Shield', 19, GameConstants.AchievementOption.less)]),
});
const EnergyPlantHop = new NPC('Hop', [
    'Huh? Oh, hi. I forgot to say, congrats on catching Zacian and Zamazenta!',
    'Y\'know, we gave Zacian and Zamazenta got the Rusted Sword and the Rusted Shield back, right?',
    'But when you caught them, neither were using them. But they must still have them, right?',
    'So.... Maybe if you keep defeating them, they\'ll occasionally drop them?',
], {
    image: 'assets/images/gymLeaders/Hop.png',
    requirement: new MultiRequirement([new QuestLineCompletedRequirement('Sword and Shield')]),
});
const SouthGalarRoamerNPC = new RoamerNPC('Professor Sonia', [
    'I’ve heard there’s been sightings of a never-before-seen, super strong Pokémon on {ROUTE_NAME}! You should go check it out!',
], GameConstants.Region.galar, RoamingPokemonList.findGroup(GameConstants.Region.galar, GameConstants.GalarSubRegions.SouthGalar), 'assets/images/npcs/Professor Sonia.png');
//Isle of Armor NPCs
const IsleofArmorRoamerNPC = new RoamerNPC('Master Dojo Student', [
    'One of the other students said they saw a rare Pokémon on {ROUTE_NAME}. Might be worth having a look.',
], GameConstants.Region.galar, RoamingPokemonList.findGroup(GameConstants.Region.galar, GameConstants.GalarSubRegions.IsleofArmor), 'assets/images/trainers/Master Dojo.png');
const Mustard1 = new NPC('Mustard', [
    '... ... ... Why hello there! My name is Mustard! I\'m rather good at Pokémon battles, you know! I\'m pleased as cheese that you could join us!',
    'Yaaay! This is my favorite part! I wanna see just how good you are! So, why not have a battle with little old me? Just say the word when you\'re ready!',
], {
    image: 'assets/images/temporaryBattle/Mustard.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('The Dojo\'s Armor'), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 1, GameConstants.AchievementOption.less)]),
});
const Mustard2 = new NPC('Mustard', [
    'Bah ha ha! I lost! You\'re pretty strong, aren\'t you? The way you battle really shows me how much you care about your Pokémon! Even if you\'ve come because of a misunderstanding, as long as you have a will to learn... then you\'re welcome at the Master Dojo! I think we can all help each other become stronger! I\'m happy you\'ve come to join us!',
    'Now then! The dojo\'s at max capacity! It\'s time to really start our training! You\'ll all be facing three trials. And there\'s more! The person who completes the three trials will receive the secret armor of this dojo!',
    'For the first trial, my students... You\'ve all gotta defeat 6 of those fast Galarian Slowpoke, trained with care by little old me! But that\'s not all... You need to catch them, too!',
], {
    image: 'assets/images/temporaryBattle/Mustard.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 1), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 3, GameConstants.AchievementOption.less)]),
});
const Mustard3 = new NPC('Mustard', [
    'Well mustered! You cleared the first trial like it was nothing! Why, I think this is the first time since Leon that someone was able to handle all six fast Slowpoke on their own! The rest of you tried very hard, too! You were able to catch up to the Slowpoke, but I guess you couldn\'t defeat them.',
    'Tell you what. Anyone who was able to catch up to a Slowpoke at least once gets a pass! Our new student here really outdid themselves, so it\'s only fair everyone else gets another chance. Try to make a comeback, everybody!',
    'And for your second trial we have mushroom picking! I\'m tasking you with finding three Max Mushrooms! They are red with a spiral pattern. I\'m pretty sure they grow in dark, humid places! And with that, your next trial begins! I\'m countin\' on ya!',
], {
    image: 'assets/images/temporaryBattle/Mustard.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 3), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 4, GameConstants.AchievementOption.less)]),
});
const Mustard4 = new NPC('Mustard', [
    'Hey! My bad, my bad! It just dawned on me that you\'re brand-new to the Isle of Armor! I bet you have no idea where to even begin looking for Max Mushrooms! C\'mon--let\'s go for a walk, and I\'ll show you some mushroom hot spots.',
    'Dum dum dee dee... La la de daaa... Now, usually the Forest of Focus is chock-full of Max Mushrooms. But the thing is, a swarm of Greedent came through and ate every last one here! So I\'m thinking maybe you\'ll have more luck finding Max Mushrooms if you go check Warm-Up Tunnel.',
    'It\'s out on the other side of the forest! Just watch where you\'re going in the forest, \'K? It\'s easy to get lost! Anyhoo... Good luck with the hunt for Max Mushrooms! Catch you back at the dojo!',
], {
    image: 'assets/images/temporaryBattle/Mustard.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 4), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 7, GameConstants.AchievementOption.less)]),
});
const Klara1 = new NPC('Klara', [
    'Hold up a sec! *wheeze*... *wheeze*... Hellooo, what\'s this?! Three Max Mushrooms in one spot? Here I thought I\'d need to go find them one by one! I saw those mushrooms first! I swear! I\'ve been at the dojo longer and all. Sooo... It\'s only fair you let me have \'em. Riiight?',
    'Waaait... What\'s this, now? Are you givin\' me attitude? Pityin\' me, are you?! Gosh, you\'re such a pain in the neck... You just show up outta nowhere, and just happen to be young and talented... If you\'re looking to get in my way, well, I think some vile poisons will take care of that!',
], {
    image: 'assets/images/gymLeaders/Klara.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 5), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 7, GameConstants.AchievementOption.less)]),
});
const Avery1 = new NPC('Avery', [
    'Wait just one moment! *pant*... *pant*... Hah! Just as I expected! Multiple Max Mushrooms growing in a bunch! My psychic powers picked up on these Max Mushrooms eons before you found them. I believe I should be the first one to get those Max Mushrooms. First come, first served, and all!',
    'What\'s this? Are you trying to show you\'re stronger than me? How distasteful! I find your presence most disturbing! You show up at the dojo unannounced and go on to show such talent, even though you\'re still so young... You dare get in my way? I warned you about my psychic powers, and now you\'ll experience them firsthand!',
], {
    image: 'assets/images/gymLeaders/Avery.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 5), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 7, GameConstants.AchievementOption.less)]),
});
const Mustard5 = new NPC('Mustard', [
    'Hey there! Welcome back! Looks like you nailed the trial! Congrats on finding the Max Mushrooms! Trial number two was no problem for you!',
    'All my other students ended up getting lost in the forest... Turns out finding Max Mushrooms was the least of their problems! It\'s a shame, but I guess everyone other than you will fail the trial...',
    'Oh! Klara and Avery! You two look out of breath... But you have some Max Mushrooms, so it looks like you both pass the second trial as well!',
    'Right! Well, I\'ve decided that you three... will now take the Master Dojo\'s...final...last...ultimate...third trial!',
    'You three are the only ones who successfully finished the second trial! You\'ve pushed each other to greater heights and helped each other grow. So I\'d say it\'s time to finally see who is stronger... in a Pokémon battle!',
    'Yep! The rules are simple. Whoever wins will complete the trial! The winner will be granted the secret armor of the Master Dojo!',
], {
    image: 'assets/images/temporaryBattle/Mustard.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 7), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 10, GameConstants.AchievementOption.less)]),
});
const Klara2 = new NPC('Klara', [
    'You are here.',
    'When I beat you, I\'ll get the secret armor... and then I\'ll become a Poison-type Gym Leader! I\'ve got to win, no matter what.. I\'m gonna go all out and totally beat you. You ready?',
    'I\'m not holding a single thing back anymore. Time to settle this-fair and square! Oh, and maybe watch your step... Looks like some Toxic Spikes somehow got on the Battle Court!',
], {
    image: 'assets/images/gymLeaders/Klara.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 8), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 10, GameConstants.AchievementOption.less)]),
});
const Avery2 = new NPC('Avery', [
    'So, you\'ve come at last.',
    'Defeating you will grant me the secret armor...then I will at last have what I need to become a Psychic-type Gym Leader! No matter what it takes, I refuse to accept anything but a complete and utter victory... I\'m coming at you with everything I have.',
    'Heh. Let us have an elegant battle worthy of being called a finale. Prepare to sink into despair...and into the weird battlefield beneath your feet!',
], {
    image: 'assets/images/gymLeaders/Avery.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 8), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 10, GameConstants.AchievementOption.less)]),
});
const Mustard6 = new NPC('Mustard', [
    'The victor has been decided! The one to complete the third trial is you, our newest student! You gave it your best and triumphed, even when faced with an unfair challenge. To you, who has completed all the trials... I grant the secret armor of the Master Dojo!',
    'Now then... Come on out! This Pokémon is in fact the secret armor of the Master Dojo! Say hello to...Kubfu!',
    '<img src="assets/images/pokemon/891.png">',
    'I know... I know... It\'s tiny... But raise it with diligence, and it\'ll become strong enough to see you through any battle, just like a suit of armor. No opponent will be able to get past it!',
    'Now, I give you permission to catch it!',
], {
    image: 'assets/images/temporaryBattle/Mustard.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 10), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 12, GameConstants.AchievementOption.less)]),
});
const Mustard7 = new NPC('Mustard', [
    'Good! Now then... The first thing for you to do is become best friends with Kubfu! You need to build trust! Kubfu hasn\'t really had a chance to explore the world outside the dojo, so... Maybe it\'ll help you become better friends if you train alongside it!',
    'Hmm. Maybe you should train against Dark and Water types. It will be useful for it to know their weaknesses, since they will be its own weaknesses when it evolves.',
], {
    image: 'assets/images/temporaryBattle/Mustard.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 12), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 14, GameConstants.AchievementOption.less)]),
});
const Mustard8 = new NPC('Mustard', [
    'You\'re back! I can see already you look closer to Kubfu, and its training is going well! It isn\'t quite ready yet, however! To switch it up a little, you should now have it help you with catching some Water and Dark type Pokémon!',
], {
    image: 'assets/images/temporaryBattle/Mustard.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 14), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 16, GameConstants.AchievementOption.less)]),
});
const Mustard9 = new NPC('Mustard', [
    'Good, good! You two are just the best of friends now, aren\'t you? Kubfu\'s really become more confident. How wonderful! I daresay I think you\'re both ready.',
    'Now then! If you want Kubfu to become stronger... there are special training grounds just for Kubfu! Prepare yourselves for the...Towers of Two Fists! The blue tower is the Tower of Waters! And the red tower is the Tower of Darkness!',
    'Each tower will help Kubfu learn a different fighting style! I\'m really looking forward to when you two make it to the top of those towers! It\'s going to be so exciting!',
], {
    image: 'assets/images/temporaryBattle/Mustard.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 16), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 18, GameConstants.AchievementOption.less)]),
});
const Mustard10 = new NPC('Mustard', [
    'Behold! Before you stands Urshifu! Sure to be unyielding armor that will shatter any blade turned against it... And it has mastered the styles of darkness and water!',
    'Ha! You\'ve certainly grown, haven\'t you? And to think, not long ago you would\'ve run and hid behind me the moment you got scared! Indeed, no matter how old I get, witnessing someone grow always brings joy to my heart. Urshifu! And you as well! Thank you both, from the bottom of my heart.',
], {
    image: 'assets/images/trainers/Dojo Master.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 18), new QuestLineCompletedRequirement('The Dojo\'s Armor', GameConstants.AchievementOption.less)]),
});
const JungleAsh1 = new NPC('Ash Ketchum', [
    'Hey! I didn\'t expect to see you again here. Fancy a ba-. Actually, no, I\'d like to ask a favour of you; a friend of mine living in Glimwood Tangle called me asking for some help.',
    'I would go myself, but I promised one of the students here a battle and I don\'t want to bail on them. Would you be able to go for me?',
    'Great! My friends name is Koko, tell him I sent you. This battle shouldn\'t take me too long, so come ask for my help if you need it!',
], {
    image: 'assets/images/temporaryBattle/Ash Ketchum.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Secrets of the Jungle'), new QuestLineStepCompletedRequirement('Secrets of the Jungle', 1, GameConstants.AchievementOption.less)]),
});
const JungleKoko1 = new NPC('Koko', [
    'Hmm? Who are you? Oh, so Ash sent you to help me? That\'s great!',
    'So, I\'m part of a tribe of Pokémon called Zarude, I was raised by them despite being a human. One of them has gone missing, I\'ve been told they were seen roaming, completely lost, around the Isle of Armor.',
    'Could you go and catch it and bring it back here? If you need help locating it, I\'m sure one of the students at the dojo they have there could help you',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Secrets of the Jungle', 0), new QuestLineStepCompletedRequirement('Secrets of the Jungle', 2, GameConstants.AchievementOption.less)]) });
const JungleKoko2 = new NPC('Koko', [
    'Great, you found it! Now if you could release it... hmm? It seems to like you. Well, if it wants to stay with you, that\'s it\s choice, so I guess it\'s fine.',
    'Oh, it looks like a group of Zarude from the tribe are here..... They... are angry, they think you caught Zarude against it\'s will. I\'ll try and talk sense into them,',
    'Zaruza! Zaru Zaru! Zarude!.. Nope, they\'re too angry to listen. Looks like you\'ll have to fight them if we want to calm them down. Zarude are strong, but I\'m sure you\'ll be fine if you are anywhere near as strong as Ash.',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Secrets of the Jungle', 2), new QuestLineStepCompletedRequirement('Secrets of the Jungle', 4, GameConstants.AchievementOption.less)]) });
const JungleKoko3 = new NPC('Koko', [
    'Well, they\'re all knocked out. I\'ll try to talk reason into them when they wake up. Thanks for your help, I\'m glad you found Zarude safe.',
    '...oh no. Another two groups of Zarude are coming and, as I\'m sure you can already guess, being surrounded by unconscious Zarude does not make you look good to them.',
    'I\'m really sorry, it seems you\'ll have to fight off these ones as well.',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Secrets of the Jungle', 4), new QuestLineStepCompletedRequirement('Secrets of the Jungle', 6, GameConstants.AchievementOption.less)]) });
const JungleKoko4 = new NPC('Koko', [
    'Okay... It\'s great that you were able to knock them all out without hurting them too much, but I don\'t think I\'ll be able to calm all of them on my own when they wake up.',
    'Would you be able to bring Ash here? I think the 3 of us together should be able to calm the lot of them down. He\'s probably still at the Master Dojo.',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Secrets of the Jungle', 6), new QuestLineStepCompletedRequirement('Secrets of the Jungle', 9, GameConstants.AchievementOption.less)]) });
const JungleAsh2 = new NPC('Ash Ketchum', [
    'You\'re back! How did it go with the Zarude?',
    'Oh, I see, that\'s quite the problem... Still, you said they\'re all out cold for now, right? In that case, we should have time for a battle!',
    'The battlefield out the back of the Dojo is being used out the moment, so let\'s battle out in front of the Dojo.',
    'With this amazing new team of mine, I\'ll finally beat you, my strongest rival!',
], {
    image: 'assets/images/temporaryBattle/Ash Ketchum.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Secrets of the Jungle', 7), new QuestLineStepCompletedRequirement('Secrets of the Jungle', 9, GameConstants.AchievementOption.less)]),
});
const JungleKoko5 = new NPC('Koko', [
    'You brought Ash? Fantastic! And just in time, the Zarude are starting to wake up. Ash, could you have your Pokémon help me explain to them what\'s going on?',
    'Okay! It seems they finally understand. I\'m really sorry for all the trouble they caused for you.',
    'Oh, Dada! Zaruza Zaru? Zaru. This is the Zarude that raised me, Dada. He says he was impressed watching you fight, and wants to fight you as well.',
    'I should tell you, Dada is much stronger than the rest of the Zarude. Have a good fight, both of you!',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Secrets of the Jungle', 9), new QuestLineStepCompletedRequirement('Secrets of the Jungle', 11, GameConstants.AchievementOption.less)]) });
const JungleAsh3 = new NPC('Ash Ketchum', [
    'Amazing, you even beat Dada! It\'s really clear that he is really amazed by your strength!',
    'Hang on, did you guys see something? Oh, over there, it\'s Celebi! It must have come now things are peaceful here. It looks like it wants to play!',
    'Actually, it looks interested in you in particular. Maybe it wants you to try and catch it? You should give it a shot!',
], {
    image: 'assets/images/temporaryBattle/Ash Ketchum.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Secrets of the Jungle', 11), new QuestLineStepCompletedRequirement('Secrets of the Jungle', 13, GameConstants.AchievementOption.less)]),
});
const JungleKoko6 = new NPC('Koko', [
    'Wow, you actually caught Celebi! Well, I\'m not sure why, but it looks like that is what it wanted.',
    'Oh, also, Dada said he would be interested in travelling with you. Although, he also said he needed to deal with the shortage of Quest Points the tribe is dealing with right now.',
    'If you help him with that, I\'m sure he\'ll join you!',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Secrets of the Jungle', 13), new QuestLineCompletedRequirement('Secrets of the Jungle', GameConstants.AchievementOption.less)]) });
const CrownShrineExplorer = new NPC('Explorer', [
    'Whew! This place is quite a trek from Freezington.',
    'I\'ve heard that a rare Pokémon sometimes hides in the chests here. I was told that it is incredibly rare, but can\'t be found anywhere else!',
], { image: 'assets/images/trainers/Backpacker (male).png' });
//Crown Tundra NPCs
const CrownTundraRoamerNPC = new RoamerNPC('Freezington Mayor', [
    'If my eyes didn\'t deceive me, I saw a rare Pokémon at {ROUTE_NAME}. Go and see if you can find it if you\'re interested.',
], GameConstants.Region.galar, RoamingPokemonList.findGroup(GameConstants.Region.galar, GameConstants.GalarSubRegions.CrownTundra));
const CrownPeony1 = new NPC('Peony', [
    'Hey, Chief! I was talking to the locals and they were talking about some ancient king Pokémon! They also mentioned a couple of horsey Pokémon that it was ultra-mega-close to. There\'s a statue of it outside and I\'ve heard this rock I\'ve been using as a pillow is part of it!',
    'Could you go and put it back on for me?',
], {
    image: 'assets/images/temporaryBattle/Peony.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('The Crown of Galar'), new QuestLineStepCompletedRequirement('The Crown of Galar', 1, GameConstants.AchievementOption.less)]),
});
const Calyrex1 = new NPC('Calyrex', [
    'Ah, yes. A sturdy body, just as I expected. I hope this man doesn\'t mind that I make use of it for the time being.',
    'I am Calyrex. I am also known as the King of Bountiful Harvests. I have borrowed this man\'s body in order to thank you in person for restoring my statue...so to speak.',
    'I once reigned over these land as king, but now I have lost all but a fraction of my former strength. Even my loyal steeds have abandoned me.',
    'Would you do me the favour of protecting me from wild Pokémon at the Old Cemetery and Snowslide Slope? I wish to grow a Shaderoot Carrot and an Iceroot Carrot which I believe could draw out my loyal steeds.',
], {
    image: 'assets/images/npcs/Possessed Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Crown of Galar', 1), new QuestLineStepCompletedRequirement('The Crown of Galar', 3, GameConstants.AchievementOption.less)]),
});
const Calyrex2 = new NPC('Calyrex', [
    'Thank you for your help in growing these carrots. It is my belief that they will draw my loyal steeds back to me...',
    'What?! They are here already! But they appear to be unable to tell exactly where the scent of the carrots is coming from!',
    'The people of this place are in danger, you must fight them off!',
], {
    image: 'assets/images/npcs/Possessed Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Crown of Galar', 3), new QuestLineStepCompletedRequirement('The Crown of Galar', 5, GameConstants.AchievementOption.less)]),
});
const Calyrex3 = new NPC('Calyrex', [
    'You have my thanks for protecting the village, human child. Although, unfortunately, this has also caused my loyal steeds to flee.',
    'Hmm...... Perhaps now we know they are in this area, it would be better to search for them?.',
    'I think that would be for the best. Once you capture them, I would appreciate it if you could bring them to the Crown Shrine at the mountain\'s peak.',
], {
    image: 'assets/images/npcs/Possessed Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Crown of Galar', 5), new QuestLineStepCompletedRequirement('The Crown of Galar', 7, GameConstants.AchievementOption.less)]),
});
const Calyrex4 = new NPC('Calyrex', [
    'Finally, my loyal steeds have returned to me. There are truly no words with which to fully express my gratitude to you. But I can try. Take these Reins of Unity.',
    '<img src="assets/images/keyitems/Reins_of_unity.png">',
    'They can be used to combine myself and my steeds. However, it is incomplete. They must have have hair from the manes of my steeds intertwined to work. I expect they will occasionally leave such hair behind upon being defeated.',
    'And to that point... I have a suggestion. If you are able to capture me, it will prove your worth beyond any doubt, and I will lend you my strength on your journey. Once you have readied yourself, come face me!',
], {
    image: 'assets/images/npcs/Possessed Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Crown of Galar', 7), new QuestLineStepCompletedRequirement('The Crown of Galar', 9, GameConstants.AchievementOption.less)]),
});
const Calyrex5 = new NPC('Calyrex', [
    '<i>Human child... I look forward to what adventures we might have together.</i>',
    '<i>May I remind you, if you ever wish to return my steeds and I to our true power, you must gather some hair from the manes of my steeds as they roam the Crown Tundra, and intertwine such hair with the Reins of Unity.</i>',
], {
    image: 'assets/images/pokemon/898.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Crown of Galar', 9)]),
});
const CrownPeony2 = new NPC('Peony', [
    'Wait--you really caught Calyrex from the legends?! Thats\'s ultra-mega-brilliant! Report away!',
    'Th-that noggin\'s MASSIVE! I-is that the King of Bountiful Harvests? The one calling the shots around here? Huh? I could swear I\'ve seen it before... Or then again, maybe not...',
    'A-anyway! It\'s definitely regal of it to have steeds... and that massive head does sort of resemble a crown! It\'s kingly enough, at any rate! Let\'s just call this a successful expedition! Smashin\'!',
], {
    image: 'assets/images/temporaryBattle/Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Crown of Galar', 9), new QuestLineCompletedRequirement('The Crown of Galar', GameConstants.AchievementOption.less)]),
});
const BirdPeony1 = new NPC('Peony', [
    'Hey, Chief! I was talking to the locals and they mentioned they had seen some bird Pokémon that looked like the legendary birds of Kanto at that ultra-mega-massive tree in the middle of Ballimere Lake!',
    'You should go check it out!',
], {
    image: 'assets/images/temporaryBattle/Peony.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('The Birds of the Dyna Tree'), new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 2, GameConstants.AchievementOption.less)]),
});
const BirdPeony2 = new NPC('Peony', [
    'You\'re saying you saw some Pokémon that looked like.... Hang on, Chief! There\'s breaking news on the telly! They\'re sayin\' dodgy bird Pokémon are poppin\' up left and right!',
    'There\'s this fancy graceful one\'s apparently flyin\' about the Crown Tundra!',
    'And there\'s this pointy feathered one runnin\' about in the Wild Area of Southern Galar!',
    'Plus a fiery-lookin\' one out on the Isle of Armor!',
    'You\'re sayin\' you saw them and that\'s what you were tellin\' me about? Ah, sorry \'bout that. Anyway, you should go find \'em.',
    'They look real strong, so you probably can\'t catch \'em right off the bat. I\'d try weakening them first.',
], {
    image: 'assets/images/temporaryBattle/Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 2), new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 4, GameConstants.AchievementOption.less)]),
});
const BirdPeony3 = new NPC('Peony', [
    'Hang on--you really caught up to all three of them dodgy birds? Multiple times each? That\'s pretty impressive!',
    'I think they should all be weakened enough that you can catch \'em now!',
    'I\'d imagine they\'d be in the same areas you chased \'em about in.',
], {
    image: 'assets/images/temporaryBattle/Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 4), new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 6, GameConstants.AchievementOption.less)]),
});
const BirdPeony4 = new NPC('Peony', [
    'Wait--you really caught Articuno, Moltres, and Zapdos from the legends?! Thats\'s ultra-mega-brilliant! Report away!',
    'So that\'s them is it? I can definitely see the resemblance, but they don\'t seem quite the same...',
    'Maybe they\'re regional variants or somethin\'? At an rate, that\'s good enough for me. Let\'s call this expedition a success!',
], {
    image: 'assets/images/temporaryBattle/Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 6), new QuestLineCompletedRequirement('The Birds of the Dyna Tree', GameConstants.AchievementOption.less)]),
});
const GolemPeony1 = new NPC('Peony', [
    'Hey, Chief! I was talking to the locals and they mentioned some weird purple and yellow ruins at Three-Point Pass. You should go check \'em out!',
], {
    image: 'assets/images/temporaryBattle/Peony.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('The Ancient Golems'), new QuestLineStepCompletedRequirement('The Ancient Golems', 1, GameConstants.AchievementOption.less)]),
});
const GolemPeony2 = new NPC('Peony', [
    'So they wouldn\'t open... That\'s annoyin\'. Well, there are also 3 more ruins, 2 at opposite ends of Giants Bed, and one at Snowslide Slope. Maybe you should have a look at those?',
    'How \'bout clearin\' em 10 times each, and see if you find anythin\' to open up the ruins at Three-Point Pass.',
], {
    image: 'assets/images/temporaryBattle/Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Ancient Golems', 1), new QuestLineStepCompletedRequirement('The Ancient Golems', 3, GameConstants.AchievementOption.less)]),
});
const GolemPeony3 = new NPC('Peony', [
    'So that didn/t work? Well, I heard there are some legendary Pokémon in those ruins, called Regirock, Regice, and Registeel. Apparently they\'ll show up to people who have done enough explorin\' in their ruins.',
    'Maybe if you caught them, the other ruins would open? What? You already have? Well, it might be worth doing it again, anyway.',
], {
    image: 'assets/images/temporaryBattle/Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Ancient Golems', 3), new QuestLineStepCompletedRequirement('The Ancient Golems', 5, GameConstants.AchievementOption.less)]),
});
const GolemPeony4 = new NPC('Peony', [
    'Looks like that didn\'t do it. But don\'t lose your hopes yet! I was just told that Regigigas appeared in Giants Bed! Probably somethin\' to do with you catching those other three. Anyway! You should go on and catch it!',
], {
    image: 'assets/images/temporaryBattle/Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Ancient Golems', 5), new QuestLineStepCompletedRequirement('The Ancient Golems', 7, GameConstants.AchievementOption.less)]),
});
const GolemPeony5 = new NPC('Peony', [
    'Wait--so you really caught Regigigas from the legends? Well, that doesn\'t seem to have opened the ruins automatically or anythin\', but I imagine Regigigas can open those doors with sheer strength!',
    'You should go now and see what\'s there!',
], {
    image: 'assets/images/temporaryBattle/Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Ancient Golems', 7), new QuestLineStepCompletedRequirement('The Ancient Golems', 9, GameConstants.AchievementOption.less)]),
});
const GolemPeony6 = new NPC('Peony', [
    'You caught Regieleki and Regidrago from the legends? Well that\'s that then! Smashin\'! I\'ll mark this expedition done!',
], {
    image: 'assets/images/temporaryBattle/Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Ancient Golems', 9), new QuestLineCompletedRequirement('The Ancient Golems', GameConstants.AchievementOption.less)]),
});
const PeonyComplete = new NPC('Peony', [
    'Huh? Well how \'bout that, Chief! Looks like that was the last bit of the grand Peony Adven-tour that I had for you! Whoooooo! Now this is an occasion! What\'s the word? Ultra-mega-epic! Your passion for all this caught me off guard, Chief...',
    'This whole Adven-tour thing was built out of a load of rubbish I scraped together. Even I had my doubts about the whole thing. But you? You went at it with a ton of energy! Thanks for stickin\' around and finishin\' every part of my Adven-tour!',
], {
    image: 'assets/images/temporaryBattle/Peony.png',
    requirement: new MultiRequirement([new QuestLineCompletedRequirement('The Crown of Galar'), new QuestLineCompletedRequirement('The Birds of the Dyna Tree'), new QuestLineCompletedRequirement('The Ancient Golems')]),
});
const ProfMagnolia = new ProfNPC('Prof. Magnolia', GameConstants.Region.galar, 'Ahhh, how incredible. Look how far you have come, dear trainer. Congratulations on another complete Pokédex.', 'I hear word of an exotic region on the horizon, but there has been no word yet when the blimp will be able to reach such faraway lands.', 
//*TODO*: Change second line to this text when Paldea is available: 'Now be on your way, the illustrious Paldea region awaits over the horizons.',
'assets/images/npcs/Professor Magnolia.png');
const MagearnaMysteryGift = new NPC('Mystery Gift', [
    'You have recieved a Mystery Gift for completing the National Shiny Dex!',
], {
    image: 'assets/images/pokemon/801.1.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('A Mystery Gift'), new QuestLineCompletedRequirement('A Mystery Gift', GameConstants.AchievementOption.less)]),
});
//Galar Towns
TownList.Postwick = new Town('Postwick', GameConstants.Region.galar, [new BulletinBoard(GameConstants.BulletinBoards.Galar), PostwickShop], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion)],
    npcs: [PostwickMum, MagearnaMysteryGift],
});
TownList['Slumbering Weald'] = new Town('Slumbering Weald', GameConstants.Region.galar, [TemporaryBattleList.Mirages, new MoveToDungeon(dungeonList['Slumbering Weald Shrine'])], {
    requirements: [new TemporaryBattleRequirement('Hop1')],
});
TownList.Wedgehurst = new Town('Wedgehurst', GameConstants.Region.galar, [TemporaryBattleList['Sordward & Shielbert'], WedgehurstShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 1)],
    npcs: [WedgehurstRailStaff, SouthGalarRoamerNPC, SordwardShielbert2],
});
TownList['Professor Magnolia\'s House'] = new Town('Professor Magnolia\'s House', GameConstants.Region.galar, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 2)],
    npcs: [ProfMagnolia, AssistantHenry],
});
TownList.Motostoke = new Town('Motostoke', GameConstants.Region.galar, [TemporaryBattleList.Marnie1, TemporaryBattleList['Rampaging Torkoal'], MotostokeShop, new ShardTraderShop(GameConstants.ShardTraderLocations.Motostoke), new BattleCafe()], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 6)],
    npcs: [BattleCafeMaster, MotostokeArtist],
});
TownList.Turffield = new Town('Turffield', GameConstants.Region.galar, [TemporaryBattleList['Rampaging Tsareena'], TurffieldShop, new ShardTraderShop(GameConstants.ShardTraderLocations.Turffield)], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 13)],
    npcs: [TurffieldCook],
});
TownList.Hulbury = new Town('Hulbury', GameConstants.Region.galar, [TemporaryBattleList['Rampaging Gyarados'], HulburyShop, new ShardTraderShop(GameConstants.ShardTraderLocations.Hulbury)], {
    requirements: [new TemporaryBattleRequirement('Hop4')],
    npcs: [Meteorologist],
});
TownList['Stow-on-Side'] = new Town('Stow-on-Side', GameConstants.Region.galar, [TemporaryBattleList['Rampaging Conkeldurr'], TemporaryBattleList['Rampaging Dusknoir'], GymList['Stow-on-Side1'], GymList['Stow-on-Side2'], StowonSideShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Stow-on-Side']), new ShardTraderShop(GameConstants.ShardTraderLocations['Route 6'], 'Fossil Master')], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 23)],
    npcs: [AncientMural1, AncientMural2, StowonSideSonia, Archaeologist],
});
TownList.Ballonlea = new Town('Ballonlea', GameConstants.Region.galar, [TemporaryBattleList['Gym Leader Bede'], BallonleaShop, new ShardTraderShop(GameConstants.ShardTraderLocations.Ballonlea)], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Glimwood Tangle'))],
});
TownList.Hammerlocke = new Town('Hammerlocke', GameConstants.Region.galar, [TemporaryBattleList['Rampaging Haxorus'], new MoveToDungeon(dungeonList['Energy Plant']), HammerlockeShop, new ShardTraderShop(GameConstants.ShardTraderLocations.Hammerlocke), new BattleCafe()], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 22)],
    npcs: [HammerlockeHiker],
});
TownList.Circhester = new Town('Circhester', GameConstants.Region.galar, [TemporaryBattleList['Rampaging Gigalith'], TemporaryBattleList['Rampaging Froslass'], GymList.Circhester1, GymList.Circhester2, CirchesterShop, new ShardTraderShop(GameConstants.ShardTraderLocations.Circhester)], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 26)],
    npcs: [HerosBath, CirchesterHop, CirchesterSonia, CirchesterGuitarist],
});
TownList.Spikemuth = new Town('Spikemuth', GameConstants.Region.galar, [TemporaryBattleList['Gym Leader Marnie'], SpikemuthShop, new ShardTraderShop(GameConstants.ShardTraderLocations.Spikemuth)], {
    requirements: [new TemporaryBattleRequirement('Marnie2')],
    npcs: [TeamYellGrunts],
});
TownList.Wyndon = new Town('Wyndon', GameConstants.Region.galar, [WyndonShop, new MoveToDungeon(dungeonList['Rose Tower']), new BattleCafe()], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 32)],
});
TownList['Wyndon Stadium'] = new Town('Wyndon Stadium', GameConstants.Region.galar, [GymList['Elite Trainer Marnie'], GymList['Elite Gym Leader Bede'], GymList['Elite Trainer Hop'], GymList['Champion Leon'], pokeLeagueShop()], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 32)],
    npcs: [RoseBroadcast, WyndonHop, Leon],
});
//Isle of Armor Towns
TownList['Armor Station'] = new Town('Armor Station', GameConstants.Region.galar, [], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)],
});
TownList['Master Dojo'] = new Town('Master Dojo', GameConstants.Region.galar, [new BulletinBoard(GameConstants.BulletinBoards.Armor), TemporaryBattleList.Mustard, TemporaryBattleList.Kubfu, MasterDojoShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Master Dojo'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 33)],
    npcs: [Mustard1, Mustard2, Mustard3, Mustard4, Mustard5, Klara2, Avery2, Mustard6, Mustard7, Mustard8, Mustard9, JungleAsh1, JungleAsh2, IsleofArmorRoamerNPC],
});
TownList['Master Dojo Battle Court'] = new Town('Master Dojo Battle Court', GameConstants.Region.galar, [GymList['Elite Gym Leader Klara'], GymList['Elite Gym Leader Avery'], GymList['Elite Dojo Matron Honey'], GymList['Elite Dojo Master Mustard']], {
    requirements: [new QuestLineCompletedRequirement('The Dojo\'s Armor')],
});
//Crown Tundra Towns
TownList['Crown Tundra Station'] = new Town('Crown Tundra Station', GameConstants.Region.galar, [TemporaryBattleList.Peony], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)],
});
TownList.Freezington = new Town('Freezington', GameConstants.Region.galar, [new BulletinBoard(GameConstants.BulletinBoards.Crown), GymList['Elite Trainer Peony'], TemporaryBattleList.Calyrex, TemporaryBattleList.Glastrier, TemporaryBattleList.Spectrier, FreezingtonShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 46)],
    npcs: [CrownPeony1, Calyrex1, Calyrex2, Calyrex3, CrownPeony2, BirdPeony1, BirdPeony2, BirdPeony3, BirdPeony4, GolemPeony1, GolemPeony2, GolemPeony3, GolemPeony4, GolemPeony5, GolemPeony6, PeonyComplete, CrownTundraRoamerNPC],
});
//Galar Dungeons
TownList['Slumbering Weald Shrine'] = new DungeonTown('Slumbering Weald Shrine', GameConstants.Region.galar, [new QuestLineStepCompletedRequirement('The Darkest Day', 12)], [TemporaryBattleList.Hop8, TemporaryBattleList.Sordward1, TemporaryBattleList.Shielbert1], {
    npcs: [SlumberingHop1, SlumberingHop2, SordwardShielbert1],
});
TownList['Galar Mine'] = new DungeonTown('Galar Mine', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 12)], [TemporaryBattleList.Bede1]);
TownList['Galar Mine No. 2'] = new DungeonTown('Galar Mine No. 2', GameConstants.Region.galar, [new GymBadgeRequirement(BadgeEnums.Galar_Water)], [TemporaryBattleList.Bede2]);
TownList['Glimwood Tangle'] = new DungeonTown('Glimwood Tangle', GameConstants.Region.galar, [new QuestLineStepCompletedRequirement('The Darkest Day', 2)], [TemporaryBattleList['Zarude Tribe 1'], TemporaryBattleList['Zarude Tribe 2'], TemporaryBattleList['Zarude Tribe 3'], TemporaryBattleList['Zarude (Dada)'], TemporaryBattleList['Flowering Celebi'], GlimwoodTangleShop], {
    npcs: [JungleKoko1, JungleKoko2, JungleKoko3, JungleKoko4, JungleKoko5, JungleAsh3, JungleKoko6],
});
TownList['Rose Tower'] = new DungeonTown('Rose Tower', GameConstants.Region.galar, [new GymBadgeRequirement(BadgeEnums.Elite_Hop)]);
TownList['Energy Plant'] = new DungeonTown('Energy Plant', GameConstants.Region.galar, [new QuestLineStepCompletedRequirement('The Darkest Day', 14)], [TemporaryBattleList.Eternatus, TemporaryBattleList.Sordward2, TemporaryBattleList.Shielbert2, TemporaryBattleList['Rampaging Zacian'], TemporaryBattleList['Rampaging Zamazenta'], TemporaryBattleList['The Darkest Day']], {
    npcs: [EnergyPlantRose, SordwardShielbert3, SordwardShielbert4, Piers, EnergyPlantHop],
});
TownList['Dusty Bowl'] = new DungeonTown('Dusty Bowl', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 18)]);
TownList['Courageous Cavern'] = new DungeonTown('Courageous Cavern', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 33)]);
TownList['Brawlers Cave'] = new DungeonTown('Brawlers Cave', GameConstants.Region.galar, [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 34),
        new RouteKillRequirement(10, GameConstants.Region.galar, 40),
    ]),
]);
TownList['Warm-Up Tunnel'] = new DungeonTown('Warm-Up Tunnel', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 38)], [TemporaryBattleList.Klara2, TemporaryBattleList.Avery2], {
    npcs: [Klara1, Avery1],
});
TownList['Tower of Darkness'] = new DungeonTown('Tower of Darkness', GameConstants.Region.galar, [
    new MultiRequirement([
        new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 17),
        new RouteKillRequirement(10, GameConstants.Region.galar, 40),
    ]),
], [], {
    npcs: [Mustard10],
});
TownList['Tower of Waters'] = new DungeonTown('Tower of Waters', GameConstants.Region.galar, [
    new MultiRequirement([
        new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 17),
        new RouteKillRequirement(10, GameConstants.Region.galar, 36),
    ]),
], [], {
    npcs: [Mustard10],
});
TownList['Roaring-Sea Caves'] = new DungeonTown('Roaring-Sea Caves', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 50)]);
TownList['Rock Peak Ruins'] = new DungeonTown('Rock Peak Ruins', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 48)]);
TownList['Iron Ruins'] = new DungeonTown('Iron Ruins', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 48)]);
TownList['Iceberg Ruins'] = new DungeonTown('Iceberg Ruins', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 54)]);
TownList['Split-Decision Ruins'] = new DungeonTown('Split-Decision Ruins', GameConstants.Region.galar, [new QuestLineStepCompletedRequirement('The Ancient Golems', 8)]);
TownList['Lakeside Cave'] = new DungeonTown('Lakeside Cave', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 53)]);
TownList['Dyna Tree Hill'] = new DungeonTown('Dyna Tree Hill', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 53)]);
TownList['Tunnel to the Top'] = new DungeonTown('Tunnel to the Top', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 54)]);
TownList['Crown Shrine'] = new DungeonTown('Crown Shrine', GameConstants.Region.galar, [new RouteKillRequirement(10, GameConstants.Region.galar, 55)], [], {
    npcs: [Calyrex4, Calyrex5, CrownShrineExplorer],
});
// Used to check if next region can be reached, for example for professor NPC
TownList['Final Region Town'] = new Town('Final Region Town', GameConstants.Region.final, [], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)],
});
/// <reference path="../../declarations/GameHelper.d.ts" />
class DamageCalculator {
    static totalDamage() {
        const ignoreRegionMultiplier = DamageCalculator.region() == GameConstants.Region.none;
        return App.game.party.calculatePokemonAttack(DamageCalculator.type1(), DamageCalculator.type2(), ignoreRegionMultiplier, DamageCalculator.region(), DamageCalculator.includeBreeding(), DamageCalculator.baseAttackOnly(), DamageCalculator.weather(), DamageCalculator.ignoreLevel());
    }
    static getDamageByTypes() {
        const typedamage = new Array(GameHelper.enumLength(PokemonType) - 1).fill(0);
        const ignoreRegionMultiplier = this.region() == GameConstants.Region.none;
        for (const pokemon of App.game.party.caughtPokemon) {
            const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
            if (dataPokemon.type1 === PokemonType.None) {
                continue;
            }
            const attack = App.game.party.calculateOnePokemonAttack(pokemon, this.type1(), this.type2(), this.region(), ignoreRegionMultiplier, this.includeBreeding(), this.baseAttackOnly(), this.weather(), this.ignoreLevel());
            typedamage[dataPokemon.type1] += attack / 2;
            const otherType = dataPokemon.type2 !== PokemonType.None ? dataPokemon.type2 : dataPokemon.type1;
            typedamage[otherType] += attack / 2;
        }
        return typedamage;
    }
    static getTypeDetail() {
        return App.game.party.caughtPokemon.filter(pokemon => {
            const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
            return dataPokemon.type1 == DamageCalculator.detailType() || dataPokemon.type2 == DamageCalculator.detailType();
        }).reduce((details, pokemon) => {
            details.push(DamageCalculator.getOneTypeDetail(pokemon));
            return details;
        }, []).sort((a, b) => b.damage - a.damage);
    }
    static getOneTypeDetail(pokemon) {
        const ignoreRegionMultiplier = DamageCalculator.region() == GameConstants.Region.none;
        const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
        return {
            id: dataPokemon.id,
            name: dataPokemon.name,
            type1: dataPokemon.type1,
            type2: dataPokemon.type2,
            damage: App.game.party.calculateOnePokemonAttack(pokemon, DamageCalculator.type1(), DamageCalculator.type2(), DamageCalculator.region(), ignoreRegionMultiplier, DamageCalculator.includeBreeding(), DamageCalculator.baseAttackOnly(), DamageCalculator.weather(), DamageCalculator.ignoreLevel()),
        };
    }
}
DamageCalculator.type1 = ko.observable(PokemonType.None).extend({ numeric: 0 });
DamageCalculator.type2 = ko.observable(PokemonType.None).extend({ numeric: 0 });
DamageCalculator.region = ko.observable(GameConstants.Region.none);
DamageCalculator.weather = ko.observable(WeatherType.Clear);
DamageCalculator.includeBreeding = ko.observable(false);
DamageCalculator.baseAttackOnly = ko.observable(false);
DamageCalculator.ignoreLevel = ko.observable(false);
DamageCalculator.detailType = ko.observable(PokemonType.None).extend({ numeric: 0 });
DamageCalculator.observableTypeDamageArray = ko.pureComputed(DamageCalculator.getDamageByTypes, DamageCalculator);
DamageCalculator.observableTypeDetails = ko.pureComputed(DamageCalculator.getTypeDetail);
DamageCalculator.observableTotalDamage = ko.pureComputed(DamageCalculator.totalDamage);
/// <reference path="../../declarations/GameHelper.d.ts" />
class DailyDeal {
    constructor() {
        this.item1 = DailyDeal.randomItem();
        this.amount1 = DailyDeal.randomAmount();
        this.item2 = DailyDeal.randomItem();
        this.amount2 = DailyDeal.randomAmount();
    }
    static generateDeals(maxDeals, date) {
        SeededRand.seedWithDate(date);
        DailyDeal.list.removeAll();
        const temp = [];
        const maxTries = maxDeals * 10;
        let i = 0;
        while (i < maxTries && temp.length < maxDeals) {
            const deal = new DailyDeal();
            if (deal.isValid(temp)) {
                temp.push(deal);
            }
            i++;
        }
        DailyDeal.list.push(...temp);
    }
    static randomItem() {
        return SeededRand.fromArray(UndergroundItems.list);
    }
    static randomAmount() {
        return SeededRand.intBetween(1, 3);
    }
    isValid(dealList) {
        const item1Name = this.item1.name;
        const item2Name = this.item2.name;
        if (item1Name == item2Name) {
            return false;
        }
        // Left side item cannot be Evolution Item or Shard
        if (this.item1.valueType == UndergroundItemValueType.EvolutionItem
            || this.item1.valueType == UndergroundItemValueType.Shard) {
            return false;
        }
        if (DailyDeal.sameDealExists(item1Name, item2Name, dealList)) {
            return false;
        }
        if (DailyDeal.reverseDealExists(item1Name, item2Name, dealList)) {
            return false;
        }
        return true;
    }
    static sameDealExists(name1, name2, dealList) {
        for (const deal of dealList) {
            if (deal.item1.name == name1 && deal.item2.name == name2) {
                return true;
            }
        }
        return false;
    }
    static reverseDealExists(name1, name2, dealList) {
        for (const deal of dealList) {
            if (deal.item2.name == name1) {
                if (deal.item1.name == name2) {
                    return true;
                }
                else {
                    return DailyDeal.reverseDealExists(deal.item1.name, name2, dealList);
                }
            }
        }
        return false;
    }
    static canUse(i) {
        const deal = DailyDeal.list.peek()[i];
        const amount = player.getUndergroundItemAmount(deal.item1.id);
        return amount >= deal.amount1;
    }
    static use(i, tradeTimes = 1) {
        const deal = DailyDeal.list.peek()[i];
        const item1Index = player.mineInventoryIndex(deal.item1.id);
        if (DailyDeal.canUse(i)) {
            const amt = player.mineInventory()[item1Index].amount();
            const maxTrades = Math.floor(amt / deal.amount1);
            tradeTimes = Math.min(tradeTimes, maxTrades);
            player.mineInventory()[item1Index].amount(amt - (deal.amount1 * tradeTimes));
            Underground.gainMineItem(deal.item2.id, deal.amount2 * tradeTimes);
            GameHelper.incrementObservable(App.game.statistics.undergroundDailyDealTrades, tradeTimes);
            Underground.sortMineItems(Underground.lastPropSort, false);
        }
    }
}
DailyDeal.list = ko.observableArray();
/// <reference path="../../declarations/GameHelper.d.ts" />
class Mine {
    static loadMine() {
        const tmpGrid = [];
        const tmpRewardGrid = [];
        Mine.rewardNumbers = [];
        Mine.itemsBuried(0);
        Mine.surveyResult(null);
        for (let i = 0; i < App.game.underground.getSizeY(); i++) {
            const row = [];
            const rewardRow = [];
            for (let j = 0; j < Underground.sizeX; j++) {
                row.push(ko.observable(Math.min(5, Math.max(1, Math.floor(Rand.float(2) + Rand.float(3)) + 1))));
                rewardRow.push(0);
            }
            tmpGrid.push(row);
            tmpRewardGrid.push(rewardRow);
        }
        Mine.grid = tmpGrid;
        Mine.rewardGrid = tmpRewardGrid;
        // Generate items for new layer
        // Number of underground items must be >= min
        // If max > min, randomly select the number of items for the layer
        // Otherwise, the number of items must be equivalent to min
        let numItems = App.game.underground.getMinItems();
        if (App.game.underground.getMinItems() < App.game.underground.getMaxItems()) {
            numItems = Rand.intBetween(App.game.underground.getMinItems(), App.game.underground.getMaxItems());
        }
        // Add numItems items to the layer
        for (let i = 0; i < numItems; i++) {
            let res = false;
            let x = 0;
            let y = 0;
            const item = UndergroundItems.getRandomItem();
            let attempts = 0;
            // Keep checking random spots until a legal spot is found
            // If too many failed attempts are made, break out as a failsafe
            while (!res && attempts++ < this.maxPlacementAttempts) {
                this.rotateReward(item);
                x = Mine.getRandomCoord(Underground.sizeX, item.space[0].length);
                y = Mine.getRandomCoord(App.game.underground.getSizeY(), item.space.length);
                res = Mine.canAddReward(x, y, item);
            }
            // If item can be added, add it
            // Else, if we haven't hit the minimum number of items yet, try again with a new random item
            // Otherwise, just skip to next item
            if (res) {
                Mine.addReward(x, y, item);
            }
            else if (i < App.game.underground.getMinItems()) {
                i--;
            }
        }
        Mine.loadingNewLayer = false;
        Mine.itemsFound(0);
        Underground.showMine();
        //Check if Explosive_Charge is equipped.
        if (App.game.oakItems.isActive(OakItemType.Explosive_Charge)) {
            const tiles = App.game.oakItems.calculateBonus(OakItemType.Explosive_Charge);
            for (let i = 1; i < tiles; i++) {
                const x = Rand.intBetween(0, App.game.underground.getSizeY() - 1);
                const y = Rand.intBetween(0, Underground.sizeX - 1);
                this.breakTile(x, y, 1);
            }
        }
    }
    static getRandomCoord(max, size) {
        return Rand.floor(max - size);
    }
    static canAddReward(x, y, reward) {
        if (Mine.alreadyHasRewardId(reward.id)) {
            return false;
        }
        if (y + reward.space.length >= App.game.underground.getSizeY() || x + reward.space[0].length >= Underground.sizeX) {
            return false;
        }
        for (let i = 0; i < reward.space.length; i++) {
            for (let j = 0; j < reward.space[i].length; j++) {
                if (reward.space[i][j] !== 0) {
                    if (Mine.rewardGrid[i + y][j + x] !== 0) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
    static alreadyHasRewardId(id) {
        for (const row of Mine.rewardGrid) {
            for (const item of row) {
                if (item.value === id) {
                    return true;
                }
            }
        }
        return false;
    }
    static addReward(x, y, reward) {
        for (let i = 0; i < reward.space.length; i++) {
            for (let j = 0; j < reward.space[i].length; j++) {
                if (reward.space[i][j].value != 0) {
                    Mine.rewardGrid[i + y][j + x] = Object.assign(Object.assign({}, reward.space[i][j]), { revealed: 0 });
                }
            }
        }
        GameHelper.incrementObservable(Mine.itemsBuried);
        Mine.rewardNumbers.push(reward.id);
    }
    static rotateReward(reward) {
        let rotations = Rand.floor(4);
        while (rotations-- > 0) {
            reward.space = reward.space[0].map((val, index) => reward.space.map(row => row[index]).reverse());
        }
        const currentRotation = this.calculateRotation(reward);
        reward.space = reward.space.map(r => r.map(v => {
            v.rotations = currentRotation;
            return v;
        }));
        return reward;
    }
    static calculateRotation(reward) {
        let indexX = 0;
        const indexY = reward.space.findIndex(y => {
            indexX = y.findIndex(x => !x.x && !x.y);
            return indexX >= 0;
        });
        return (indexX ? 1 : 0) + (indexY ? 2 : 0);
    }
    static survey() {
        // Disable survey while loading new layer
        if (this.loadingNewLayer) {
            return;
        }
        if (Mine.surveyResult()) {
            $('#mine-survey-result').tooltip('show');
            return;
        }
        const surveyCost = App.game.underground.getSurvey_Cost();
        if (App.game.underground.energy < surveyCost) {
            return;
        }
        const tiles = App.game.underground.getSurvey_Efficiency();
        for (let i = 0; i < tiles; i++) {
            const x = Rand.intBetween(0, this.getHeight() - 1);
            const y = Rand.intBetween(0, Underground.sizeX - 1);
            this.breakTile(x, y, 5);
        }
        App.game.underground.energy -= surveyCost;
        const rewards = Mine.rewardSummary();
        Mine.updatesurveyResult(rewards);
    }
    static rewardSummary() {
        return Mine.rewardNumbers.reduce((res, id) => {
            const reward = UndergroundItems.list.find(x => x.id == id);
            switch (reward.valueType) {
                case UndergroundItemValueType.Diamond:
                    res.totalValue += reward.value;
                    break;
                case UndergroundItemValueType.Fossil:
                    res.fossils++;
                    break;
                case UndergroundItemValueType.FossilPiece:
                    res.fossilpieces++;
                    break;
                case UndergroundItemValueType.Shard:
                    res.shards++;
                    break;
                case UndergroundItemValueType.EvolutionItem:
                    res.evoItems++;
                    break;
                case UndergroundItemValueType.Gem:
                    res.plates++;
                    break;
                default:
            }
            return res;
        }, { fossils: 0, fossilpieces: 0, plates: 0, evoItems: 0, totalValue: 0, shards: 0 });
    }
    static updatesurveyResult(summary) {
        const text = [];
        if (summary.fossils) {
            text.push(`Fossils: ${summary.fossils}`);
        }
        if (summary.fossilpieces) {
            text.push(`Fossil Pieces: ${summary.fossilpieces}`);
        }
        if (summary.evoItems) {
            text.push(`Evolution Items: ${summary.evoItems}`);
        }
        if (summary.plates) {
            text.push(`Gem Plates: ${summary.plates}`);
        }
        if (summary.shards) {
            text.push(`Shards: ${summary.shards}`);
        }
        if (summary.totalValue) {
            text.push(`Diamond Value: ${summary.totalValue}`);
        }
        Mine.surveyResult(text.join('<br>'));
        $('#mine-survey-result').tooltip('show');
    }
    static click(i, j) {
        if (Mine.toolSelected() == Mine.Tool.Hammer) {
            Mine.hammer(i, j);
        }
        else {
            Mine.chisel(i, j);
        }
    }
    static hammer(x, y) {
        if (App.game.underground.energy >= Underground.HAMMER_ENERGY) {
            if (x < 0 || y < 0) {
                return;
            }
            let hasMined = false;
            for (let i = -1; i < 2; i++) {
                for (let j = -1; j < 2; j++) {
                    if (Mine.grid[Mine.normalizeY(x + i)][Mine.normalizeX(y + j)]() > 0) {
                        hasMined = true;
                    }
                    this.breakTile(x + i, y + j, 1);
                }
            }
            if (hasMined) {
                App.game.underground.energy -= Underground.HAMMER_ENERGY;
            }
        }
    }
    static chisel(x, y) {
        if (Mine.grid[x][y]() > 0) {
            if (App.game.underground.energy >= Underground.CHISEL_ENERGY) {
                this.breakTile(x, y, 2);
                App.game.underground.energy -= Underground.CHISEL_ENERGY;
            }
        }
    }
    static bomb() {
        // Disable bomb while loading new layer
        if (this.loadingNewLayer) {
            return;
        }
        let tiles = App.game.underground.getBombEfficiency();
        if (App.game.underground.energy >= Underground.BOMB_ENERGY) {
            while (tiles-- > 0) {
                const x = Rand.intBetween(0, this.getHeight() - 1);
                const y = Rand.intBetween(0, Underground.sizeX - 1);
                this.breakTile(x, y, 2);
            }
            App.game.underground.energy -= Underground.BOMB_ENERGY;
        }
    }
    static skipLayer(shouldConfirm = true) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.skipsRemaining()) {
                return;
            }
            if (!shouldConfirm || (yield Notifier.confirm({
                title: 'Underground',
                message: 'Skip this mine layer?',
                type: NotificationConstants.NotificationOption.warning,
                confirm: 'Skip',
            }))) {
                setTimeout(Mine.completed, 1500);
                Mine.loadingNewLayer = true;
                GameHelper.incrementObservable(this.skipsRemaining, -1);
            }
        });
    }
    static breakTile(_x, _y, layers = 1) {
        const x = Mine.normalizeY(_x);
        const y = Mine.normalizeX(_y);
        const newlayer = Math.max(0, Mine.grid[x][y]() - layers);
        Mine.grid[x][y](newlayer);
        const reward = Mine.rewardGrid[x][y];
        if (newlayer == 0 && reward != 0 && reward.revealed != 1) {
            reward.revealed = 1;
            const image = UndergroundItems.getById(reward.value).undergroundImage;
            $(`div[data-i=${x}][data-j=${y}]`).html(`<div class="mineReward size-${reward.sizeX}-${reward.sizeY} pos-${reward.x}-${reward.y} rotations-${reward.rotations}" style="background-image: url('${image}');"></div>`);
            Mine.checkItemsRevealed();
        }
    }
    static normalizeX(x) {
        return Math.min(Underground.sizeX - 1, Math.max(0, x));
    }
    static normalizeY(y) {
        return Math.min(this.getHeight() - 1, Math.max(0, y));
    }
    static getHeight() {
        return this.rewardGrid ? this.rewardGrid.length : 0;
    }
    static checkItemsRevealed() {
        for (let i = 0; i < Mine.rewardNumbers.length; i++) {
            if (Mine.checkItemRevealed(Mine.rewardNumbers[i])) {
                let amount = 1;
                const itemName = UndergroundItems.getById(Mine.rewardNumbers[i]).name;
                Notifier.notify({
                    message: `You found ${GameHelper.anOrA(itemName)} ${GameConstants.humanifyString(itemName)}`,
                    type: NotificationConstants.NotificationOption.success,
                    setting: NotificationConstants.NotificationSetting.Underground.underground_item_found,
                });
                if (App.game.oakItems.isActive(OakItemType.Treasure_Scanner)) {
                    const giveDouble = App.game.oakItems.calculateBonus(OakItemType.Treasure_Scanner) / 100;
                    if (Rand.chance(giveDouble)) {
                        amount++;
                        Notifier.notify({
                            message: `You found an extra ${GameConstants.humanifyString(itemName)} in the Mine!`,
                            type: NotificationConstants.NotificationOption.success,
                            title: 'Treasure Scanner',
                            timeout: 4000,
                        });
                        if (Rand.chance(giveDouble)) {
                            amount++;
                            Notifier.notify({
                                message: `Lucky! You found another ${GameConstants.humanifyString(itemName)}!`,
                                type: NotificationConstants.NotificationOption.success,
                                title: 'Treasure Scanner',
                                timeout: 6000,
                            });
                            if (Rand.chance(giveDouble)) {
                                amount++;
                                Notifier.notify({
                                    message: `Jackpot! You found another ${GameConstants.humanifyString(itemName)}!`,
                                    type: NotificationConstants.NotificationOption.success,
                                    title: 'Treasure Scanner',
                                    timeout: 8000,
                                });
                            }
                        }
                    }
                }
                App.game.oakItems.use(OakItemType.Treasure_Scanner);
                Underground.gainMineItem(Mine.rewardNumbers[i], amount);
                GameHelper.incrementObservable(Mine.itemsFound);
                GameHelper.incrementObservable(App.game.statistics.undergroundItemsFound, amount);
                Mine.rewardNumbers.splice(i, 1);
                i--;
                Mine.checkCompleted();
            }
        }
    }
    static checkItemRevealed(id) {
        for (let i = 0; i < Underground.sizeX; i++) {
            for (let j = 0; j < this.getHeight(); j++) {
                if (Mine.rewardGrid[j][i] != 0) {
                    if (Mine.rewardGrid[j][i].value == id) {
                        if (Mine.rewardGrid[j][i].revealed === 0) {
                            return false;
                        }
                    }
                }
            }
        }
        App.game.oakItems.use(OakItemType.Cell_Battery);
        return true;
    }
    static checkCompleted() {
        if (Mine.itemsFound() >= Mine.itemsBuried()) {
            // Don't resolve queued up calls to checkCompleted() until completed() is finished and sets loadingNewLayer to false
            if (Mine.loadingNewLayer == true) {
                return;
            }
            Mine.loadingNewLayer = true;
            setTimeout(Mine.completed, 1500);
            GameHelper.incrementObservable(App.game.statistics.undergroundLayersMined);
            if (this.skipsRemaining() < this.maxSkips) {
                GameHelper.incrementObservable(this.skipsRemaining);
            }
        }
    }
    static completed() {
        Notifier.notify({
            message: 'You dig deeper...',
            type: NotificationConstants.NotificationOption.info,
            setting: NotificationConstants.NotificationSetting.Underground.underground_dig_deeper,
        });
        ko.cleanNode(document.getElementById('mineBody'));
        App.game.oakItems.use(OakItemType.Explosive_Charge);
        Mine.loadMine();
        ko.applyBindings(null, document.getElementById('mineBody'));
    }
    static loadSavedMine(mine) {
        var _a, _b;
        this.grid = mine.grid.map(row => row.map(val => ko.observable(val))),
            this.rewardGrid = mine.rewardGrid;
        this.itemsFound(mine.itemsFound);
        this.itemsBuried(mine.itemsBuried);
        this.rewardNumbers = mine.rewardNumbers;
        this.loadingNewLayer = false;
        this.surveyResult((_a = mine.surveyResult) !== null && _a !== void 0 ? _a : this.surveyResult());
        this.skipsRemaining((_b = mine.skipsRemaining) !== null && _b !== void 0 ? _b : this.maxSkips);
        Underground.showMine();
        // Check if completed in case the mine was saved after completion and before creating a new mine
        // TODO: Remove setTimeout after TypeScript module migration is complete. Needed so that `App.game` is available
        setTimeout(Mine.checkCompleted, 0);
    }
    static save() {
        if (this.grid == null) {
            Mine.loadMine();
        }
        const mineSave = {
            grid: this.grid.map(row => row.map(val => val())),
            rewardGrid: this.rewardGrid,
            itemsFound: this.itemsFound(),
            itemsBuried: this.itemsBuried(),
            rewardNumbers: this.rewardNumbers,
            surveyResult: this.surveyResult(),
            skipsRemaining: this.skipsRemaining(),
        };
        return mineSave;
    }
}
Mine.maxSkips = 5;
Mine.itemsFound = ko.observable(0);
Mine.itemsBuried = ko.observable(0);
Mine.surveyResult = ko.observable(null);
Mine.skipsRemaining = ko.observable(Mine.maxSkips);
// 0 represents the Mine.Tool.Chisel but it's not loaded here yet.
Mine.toolSelected = ko.observable(0);
Mine.loadingNewLayer = true;
// Number of times to try and place an item in a new layer before giving up, just a failsafe
Mine.maxPlacementAttempts = 1000;
(function (Mine) {
    let Tool;
    (function (Tool) {
        Tool[Tool["Chisel"] = 0] = "Chisel";
        Tool[Tool["Hammer"] = 1] = "Hammer";
    })(Tool = Mine.Tool || (Mine.Tool = {}));
})(Mine || (Mine = {}));
class ShardDeal {
    constructor(shardCosts, item, itemAmount) {
        this.shards = shardCosts;
        this.shards.forEach(s => s.shardType = UndergroundItems.getByName(s.shardTypeString));
        this.item = { itemType: item, amount: itemAmount };
        this.questPointCost = this.item.itemType.basePrice / 4 || 1;
    }
    static getDeals(town) {
        return ShardDeal.list[town];
    }
    static canUse(town, i) {
        var _a;
        const deal = (_a = ShardDeal.list[town]) === null || _a === void 0 ? void 0 : _a.peek()[i];
        if (!deal) {
            return false;
        }
        if (ItemList[deal.item.itemType.name].isSoldOut()) {
            return false;
        }
        else if (deal.questPointCost > App.game.wallet.currencies[GameConstants.Currency.questPoint]()) {
            return false;
        }
        else {
            return deal.shards.every((value) => player.getUndergroundItemAmount(value.shardType.id) >= value.amount);
        }
    }
    static use(town, i, tradeTimes = 1) {
        var _a;
        const deal = (_a = ShardDeal.list[town]) === null || _a === void 0 ? void 0 : _a.peek()[i];
        if (ShardDeal.canUse(town, i)) {
            const trades = deal.shards.map(shard => {
                const amt = player.getUndergroundItemAmount(shard.shardType.id);
                const maxShardTrades = Math.floor(amt / shard.amount);
                return maxShardTrades;
            });
            const qp = App.game.wallet.currencies[GameConstants.Currency.questPoint]();
            const maxCurrencyTrades = Math.floor(qp / deal.questPointCost);
            const maxTrades = Math.min(maxCurrencyTrades, trades.reduce((a, b) => Math.min(a, b), tradeTimes));
            deal.shards.forEach((value) => Underground.gainMineItem(value.shardType.id, -value.amount * maxTrades));
            const amount = deal.item.amount * maxTrades;
            const multiple = amount > 1 ? 's' : '';
            deal.item.itemType.gain(deal.item.amount * maxTrades);
            App.game.wallet.loseAmount(new Amount(deal.questPointCost * maxTrades, GameConstants.Currency.questPoint));
            Notifier.notify({
                message: `You traded for ${amount.toLocaleString('en-US')} × <img src="${deal.item.itemType.image}" height="24px"/> ${GameConstants.humanifyString(deal.item.itemType.displayName)}${multiple}.`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Items.item_bought,
            });
        }
    }
    static generateDeals() {
        this.generateKantoDeals();
        this.generateJohtoDeals();
        this.generateHoennDeals();
        this.generateSinnohDeals();
        this.generateUnovaDeals();
        this.generateKalosDeals();
        this.generateAlolaDeals();
        this.generateGalarDeals();
    }
    static generateKantoDeals() {
        ShardDeal.list[GameConstants.ShardTraderLocations['Cerulean City']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Blue Shard', amount: 20 }], ItemList.Water_egg, 1),
            new ShardDeal([{ shardTypeString: 'Blue Shard', amount: 40 }], ItemList.Water_stone, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Vermilion City']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Yellow Shard', amount: 20 }], ItemList.Electric_egg, 1),
            new ShardDeal([{ shardTypeString: 'Yellow Shard', amount: 40 }], ItemList.Thunder_stone, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Lavender Town']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Green Shard', amount: 20 }], ItemList.Grass_egg, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Saffron City']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 10 },
                { shardTypeString: 'Blue Shard', amount: 10 },
            ], ItemList.Fighting_egg, 1),
            new ShardDeal([{ shardTypeString: 'Green Shard', amount: 40 }], ItemList.Leaf_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Blue Shard', amount: 20 },
            ], ItemList.Moon_stone, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Fuchsia City']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 5 },
                { shardTypeString: 'Yellow Shard', amount: 5 },
                { shardTypeString: 'Green Shard', amount: 5 },
                { shardTypeString: 'Blue Shard', amount: 5 },
            ], ItemList.Dragon_egg, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Yellow Shard', amount: 20 },
            ], ItemList.Linking_cord, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Cinnabar Island']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Red Shard', amount: 20 }], ItemList.Fire_egg, 1),
            new ShardDeal([{ shardTypeString: 'Red Shard', amount: 40 }], ItemList.Fire_stone, 1),
        ]);
    }
    static generateJohtoDeals() {
        ShardDeal.list[GameConstants.ShardTraderLocations['Azalea Town']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Green Shard', amount: 20 }], ItemList.Grass_egg, 1),
            new ShardDeal([{ shardTypeString: 'Green Shard', amount: 40 }], ItemList.Leaf_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Kings_rock, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Ecruteak City']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Red Shard', amount: 20 }], ItemList.Fire_egg, 1),
            new ShardDeal([{ shardTypeString: 'Red Shard', amount: 40 }], ItemList.Fire_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Soothe_bell, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Olivine City']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Blue Shard', amount: 20 }], ItemList.Water_egg, 1),
            new ShardDeal([{ shardTypeString: 'Yellow Shard', amount: 20 }], ItemList.Electric_egg, 1),
            new ShardDeal([{ shardTypeString: 'Blue Shard', amount: 40 }], ItemList.Water_stone, 1),
            new ShardDeal([{ shardTypeString: 'Yellow Shard', amount: 40 }], ItemList.Thunder_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Metal_coat, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Cianwood City']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 10 },
                { shardTypeString: 'Blue Shard', amount: 10 },
            ], ItemList.Fighting_egg, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Blue Shard', amount: 20 },
            ], ItemList.Moon_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Sun_stone, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Mahogany Town']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Yellow Shard', amount: 20 },
            ], ItemList.Linking_cord, 1),
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Purple Shard', amount: 30 },
            ], ItemList.Upgrade, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Blackthorn City']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 5 },
                { shardTypeString: 'Yellow Shard', amount: 5 },
                { shardTypeString: 'Green Shard', amount: 5 },
                { shardTypeString: 'Blue Shard', amount: 5 },
            ], ItemList.Dragon_egg, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Purple Shard', amount: 30 },
            ], ItemList.Dragon_scale, 1),
        ]);
    }
    static generateHoennDeals() {
        ShardDeal.list[GameConstants.ShardTraderLocations['Petalburg City']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Kings_rock, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Dewford Town']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 10 },
                { shardTypeString: 'Blue Shard', amount: 10 },
            ], ItemList.Fighting_egg, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Slateport City']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Blue Shard', amount: 20 }], ItemList.Water_egg, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Yellow Shard', amount: 20 },
            ], ItemList.Linking_cord, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Mauville City']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Yellow Shard', amount: 20 }], ItemList.Electric_egg, 1),
            new ShardDeal([{ shardTypeString: 'Yellow Shard', amount: 40 }], ItemList.Thunder_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Metal_coat, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Verdanturf Town']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Green Shard', amount: 20 }], ItemList.Grass_egg, 1),
            new ShardDeal([{ shardTypeString: 'Yellow Shard', amount: 40 }], ItemList.Thunder_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Soothe_bell, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Lavaridge Town']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Red Shard', amount: 20 }], ItemList.Fire_egg, 1),
            new ShardDeal([{ shardTypeString: 'Red Shard', amount: 40 }], ItemList.Fire_stone, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Fallarbor Town']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Blue Shard', amount: 20 },
            ], ItemList.Moon_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Sun_stone, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Fortree City']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Green Shard', amount: 40 }], ItemList.Leaf_stone, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Mossdeep City']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Purple Shard', amount: 30 },
            ], ItemList.Upgrade, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Ochre Shard', amount: 30 },
            ], ItemList.Prism_scale, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Pacifidlog Town']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Ochre Shard', amount: 30 },
            ], ItemList.Deepsea_tooth, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Ochre Shard', amount: 30 },
            ], ItemList.Deepsea_scale, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Sootopolis City']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Blue Shard', amount: 20 }], ItemList.Water_egg, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Ever Grande City']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 5 },
                { shardTypeString: 'Yellow Shard', amount: 5 },
                { shardTypeString: 'Green Shard', amount: 5 },
                { shardTypeString: 'Blue Shard', amount: 5 },
            ], ItemList.Dragon_egg, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Purple Shard', amount: 30 },
            ], ItemList.Dragon_scale, 1),
        ]);
    }
    static generateSinnohDeals() {
        ShardDeal.list[GameConstants.ShardTraderLocations['Oreburgh City']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Blue Shard', amount: 20 },
            ], ItemList.Moon_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Sun_stone, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Floaroma Town']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Yellow Shard', amount: 20 },
            ], ItemList.Linking_cord, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Kings_rock, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Eterna City']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Green Shard', amount: 20 }], ItemList.Grass_egg, 1),
            new ShardDeal([{ shardTypeString: 'Green Shard', amount: 40 }], ItemList.Leaf_stone, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Hearthome City']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Red Shard', amount: 20 }], ItemList.Fire_egg, 1),
            new ShardDeal([{ shardTypeString: 'Red Shard', amount: 40 }], ItemList.Fire_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Soothe_bell, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Solaceon Town']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Crimson Shard', amount: 30 },
            ], ItemList.Shiny_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Crimson Shard', amount: 30 },
            ], ItemList.Dusk_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Crimson Shard', amount: 30 },
            ], ItemList.Dawn_stone, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Pastoria City']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Blue Shard', amount: 20 }], ItemList.Water_egg, 1),
            new ShardDeal([{ shardTypeString: 'Blue Shard', amount: 40 }], ItemList.Water_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Ochre Shard', amount: 30 },
            ], ItemList.Prism_scale, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Celestic Town']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 5 },
                { shardTypeString: 'Yellow Shard', amount: 5 },
                { shardTypeString: 'Green Shard', amount: 5 },
                { shardTypeString: 'Blue Shard', amount: 5 },
            ], ItemList.Dragon_egg, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Purple Shard', amount: 30 },
            ], ItemList.Dragon_scale, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Pal Park']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Lime Shard', amount: 30 },
            ], ItemList.Razor_claw, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Lime Shard', amount: 30 },
            ], ItemList.Razor_fang, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Canalave City']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 10 },
                { shardTypeString: 'Blue Shard', amount: 10 },
            ], ItemList.Fighting_egg, 1),
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Metal_coat, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Snowpoint City']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Purple Shard', amount: 30 },
            ], ItemList.Upgrade, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Sunyshore City']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Yellow Shard', amount: 20 }], ItemList.Electric_egg, 1),
            new ShardDeal([{ shardTypeString: 'Yellow Shard', amount: 40 }], ItemList.Thunder_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Ochre Shard', amount: 30 },
            ], ItemList.Deepsea_tooth, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Ochre Shard', amount: 30 },
            ], ItemList.Deepsea_scale, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Survival Area']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'White Shard', amount: 30 },
            ], ItemList.Electirizer, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'White Shard', amount: 30 },
            ], ItemList.Magmarizer, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Resort Area']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Black Shard', amount: 30 },
            ], ItemList.Protector, 1),
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Black Shard', amount: 30 },
            ], ItemList.Dubious_disc, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Black Shard', amount: 30 },
            ], ItemList.Reaper_cloth, 1),
        ]);
    }
    static generateUnovaDeals() {
        ShardDeal.list[GameConstants.ShardTraderLocations['Castelia City']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Blue Shard', amount: 20 }], ItemList.Water_egg, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Yellow Shard', amount: 20 },
            ], ItemList.Linking_cord, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Kings_rock, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Nimbasa City']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Green Shard', amount: 20 }], ItemList.Grass_egg, 1),
            new ShardDeal([{ shardTypeString: 'Yellow Shard', amount: 20 }], ItemList.Electric_egg, 1),
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Metal_coat, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Driftveil City']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Lime Shard', amount: 30 },
            ], ItemList.Razor_claw, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Lime Shard', amount: 30 },
            ], ItemList.Razor_fang, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Mistralton City']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Yellow Shard', amount: 40 }], ItemList.Thunder_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Purple Shard', amount: 30 },
            ], ItemList.Upgrade, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Lentimas Town']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Red Shard', amount: 20 }], ItemList.Fire_egg, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Undella Town']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Ochre Shard', amount: 30 },
            ], ItemList.Deepsea_tooth, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Ochre Shard', amount: 30 },
            ], ItemList.Deepsea_scale, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Lacunosa Town']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 10 },
                { shardTypeString: 'Blue Shard', amount: 10 },
            ], ItemList.Fighting_egg, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Opelucid City']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 5 },
                { shardTypeString: 'Yellow Shard', amount: 5 },
                { shardTypeString: 'Green Shard', amount: 5 },
                { shardTypeString: 'Blue Shard', amount: 5 },
            ], ItemList.Dragon_egg, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Purple Shard', amount: 30 },
            ], ItemList.Dragon_scale, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Humilau City']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Ochre Shard', amount: 30 },
            ], ItemList.Prism_scale, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Icirrus City']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Black Shard', amount: 30 },
            ], ItemList.Protector, 1),
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Black Shard', amount: 30 },
            ], ItemList.Dubious_disc, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Black Shard', amount: 30 },
            ], ItemList.Reaper_cloth, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Black and White Park']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Blue Shard', amount: 20 },
            ], ItemList.Moon_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Sun_stone, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Nacrene City']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Soothe_bell, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Striaton City']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Green Shard', amount: 40 }], ItemList.Leaf_stone, 1),
            new ShardDeal([{ shardTypeString: 'Red Shard', amount: 40 }], ItemList.Fire_stone, 1),
            new ShardDeal([{ shardTypeString: 'Blue Shard', amount: 40 }], ItemList.Water_stone, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Accumula Town']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Crimson Shard', amount: 30 },
            ], ItemList.Shiny_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Crimson Shard', amount: 30 },
            ], ItemList.Dusk_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Crimson Shard', amount: 30 },
            ], ItemList.Dawn_stone, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Nuvema Town']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'White Shard', amount: 30 },
            ], ItemList.Electirizer, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'White Shard', amount: 30 },
            ], ItemList.Magmarizer, 1),
        ]);
    }
    static generateKalosDeals() {
        ShardDeal.list[GameConstants.ShardTraderLocations['Camphrier Town']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Yellow Shard', amount: 20 }], ItemList.Electric_egg, 1),
            new ShardDeal([{ shardTypeString: 'Yellow Shard', amount: 40 }], ItemList.Thunder_stone, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Ambrette Town']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Blue Shard', amount: 20 }], ItemList.Water_egg, 1),
            new ShardDeal([{ shardTypeString: 'Blue Shard', amount: 40 }], ItemList.Water_stone, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Cyllage City']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Purple Shard', amount: 30 },
            ], ItemList.Upgrade, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Ochre Shard', amount: 30 },
            ], ItemList.Prism_scale, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Geosenge Town']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Red Shard', amount: 20 }], ItemList.Fire_egg, 1),
            new ShardDeal([{ shardTypeString: 'Red Shard', amount: 40 }], ItemList.Fire_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Kings_rock, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Shalour City']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 10 },
                { shardTypeString: 'Blue Shard', amount: 10 },
            ], ItemList.Fighting_egg, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Yellow Shard', amount: 20 },
            ], ItemList.Linking_cord, 1),
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Metal_coat, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Coumarine City']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Green Shard', amount: 20 }], ItemList.Grass_egg, 1),
            new ShardDeal([{ shardTypeString: 'Green Shard', amount: 40 }], ItemList.Leaf_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'White Shard', amount: 30 },
            ], ItemList.Electirizer, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'White Shard', amount: 30 },
            ], ItemList.Magmarizer, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Laverre City']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Ochre Shard', amount: 30 },
            ], ItemList.Deepsea_tooth, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Ochre Shard', amount: 30 },
            ], ItemList.Deepsea_scale, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Pink Shard', amount: 30 },
            ], ItemList.Sachet, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Pink Shard', amount: 30 },
            ], ItemList.Whipped_dream, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Dendemille Town']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Crimson Shard', amount: 30 },
            ], ItemList.Shiny_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Crimson Shard', amount: 30 },
            ], ItemList.Dusk_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Crimson Shard', amount: 30 },
            ], ItemList.Dawn_stone, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Anistar City']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Blue Shard', amount: 20 },
            ], ItemList.Moon_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Sun_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Lime Shard', amount: 30 },
            ], ItemList.Razor_claw, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Lime Shard', amount: 30 },
            ], ItemList.Razor_fang, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Couriway Town']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 5 },
                { shardTypeString: 'Yellow Shard', amount: 5 },
                { shardTypeString: 'Green Shard', amount: 5 },
                { shardTypeString: 'Blue Shard', amount: 5 },
            ], ItemList.Dragon_egg, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Purple Shard', amount: 30 },
            ], ItemList.Dragon_scale, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Snowbelle City']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Black Shard', amount: 30 },
            ], ItemList.Protector, 1),
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Black Shard', amount: 30 },
            ], ItemList.Dubious_disc, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Black Shard', amount: 30 },
            ], ItemList.Reaper_cloth, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Parfum Palace']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 5000 },
                { shardTypeString: 'Yellow Shard', amount: 5000 },
                { shardTypeString: 'Green Shard', amount: 5000 },
                { shardTypeString: 'Blue Shard', amount: 5000 },
                { shardTypeString: 'Grey Shard', amount: 2000 },
                { shardTypeString: 'Purple Shard', amount: 2000 },
                { shardTypeString: 'Ochre Shard', amount: 2000 },
                { shardTypeString: 'Black Shard', amount: 1000 },
                { shardTypeString: 'Crimson Shard', amount: 1000 },
                { shardTypeString: 'Lime Shard', amount: 1000 },
                { shardTypeString: 'White Shard', amount: 1000 },
                { shardTypeString: 'Pink Shard', amount: 500 },
            ], ItemList['Furfrou (Star)'], 1),
        ]);
    }
    static generateAlolaDeals() {
        ShardDeal.list[GameConstants.ShardTraderLocations['Hau\'oli City']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Crimson Shard', amount: 30 },
            ], ItemList.Shiny_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Crimson Shard', amount: 30 },
            ], ItemList.Dusk_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Crimson Shard', amount: 30 },
            ], ItemList.Dawn_stone, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Heahea City']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Blue Shard', amount: 40 }], ItemList.Water_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Kings_rock, 1),
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Metal_coat, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Paniola Town']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Green Shard', amount: 20 }], ItemList.Grass_egg, 1),
            new ShardDeal([{ shardTypeString: 'Red Shard', amount: 20 }], ItemList.Fire_egg, 1),
            new ShardDeal([{ shardTypeString: 'Blue Shard', amount: 20 }], ItemList.Water_egg, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Konikoni City']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Red Shard', amount: 40 }], ItemList.Fire_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Yellow Shard', amount: 20 },
            ], ItemList.Linking_cord, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Soothe_bell, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Aether Paradise']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Purple Shard', amount: 30 },
            ], ItemList.Upgrade, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Malie City']] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Yellow Shard', amount: 20 }], ItemList.Electric_egg, 1),
            new ShardDeal([{ shardTypeString: 'Yellow Shard', amount: 40 }], ItemList.Thunder_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'White Shard', amount: 30 },
            ], ItemList.Electirizer, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'White Shard', amount: 30 },
            ], ItemList.Magmarizer, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Tapu Village']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Lime Shard', amount: 30 },
            ], ItemList.Razor_claw, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Lime Shard', amount: 30 },
            ], ItemList.Razor_fang, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Cyan Shard', amount: 30 },
            ], ItemList.Ice_stone, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Seafolk Village']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 10 },
                { shardTypeString: 'Blue Shard', amount: 10 },
            ], ItemList.Fighting_egg, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Ochre Shard', amount: 30 },
            ], ItemList.Deepsea_tooth, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Ochre Shard', amount: 30 },
            ], ItemList.Deepsea_scale, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Ochre Shard', amount: 30 },
            ], ItemList.Prism_scale, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Pink Shard', amount: 30 },
            ], ItemList.Sachet, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Pink Shard', amount: 30 },
            ], ItemList.Whipped_dream, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Exeggutor Island']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 5 },
                { shardTypeString: 'Yellow Shard', amount: 5 },
                { shardTypeString: 'Green Shard', amount: 5 },
                { shardTypeString: 'Blue Shard', amount: 5 },
            ], ItemList.Dragon_egg, 1),
            new ShardDeal([{ shardTypeString: 'Green Shard', amount: 40 }], ItemList.Leaf_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Purple Shard', amount: 30 },
            ], ItemList.Dragon_scale, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Black Shard', amount: 30 },
            ], ItemList.Protector, 1),
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Black Shard', amount: 30 },
            ], ItemList.Dubious_disc, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Black Shard', amount: 30 },
            ], ItemList.Reaper_cloth, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Altar of the Sunne and Moone']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Blue Shard', amount: 20 },
            ], ItemList.Moon_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Sun_stone, 1),
        ]);
    }
    static generateGalarDeals() {
        ShardDeal.list[GameConstants.ShardTraderLocations.Turffield] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Green Shard', amount: 20 }], ItemList.Grass_egg, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Rose Shard', amount: 30 },
            ], ItemList.Sweet_apple, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Rose Shard', amount: 30 },
            ], ItemList.Tart_apple, 1),
            new ShardDeal([{ shardTypeString: 'Green Shard', amount: 40 }], ItemList.Leaf_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Sun_stone, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations.Hulbury] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Blue Shard', amount: 20 }], ItemList.Water_egg, 1),
            new ShardDeal([{ shardTypeString: 'Blue Shard', amount: 40 }], ItemList.Water_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Kings_rock, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Ochre Shard', amount: 30 },
            ], ItemList.Prism_scale, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Ochre Shard', amount: 30 },
            ], ItemList.Deepsea_tooth, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Ochre Shard', amount: 30 },
            ], ItemList.Deepsea_scale, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations.Motostoke] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Red Shard', amount: 20 }], ItemList.Fire_egg, 1),
            new ShardDeal([{ shardTypeString: 'Red Shard', amount: 40 }], ItemList.Fire_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Yellow Shard', amount: 20 },
            ], ItemList.Linking_cord, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'White Shard', amount: 30 },
            ], ItemList.Magmarizer, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations.Hammerlocke] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 5 },
                { shardTypeString: 'Yellow Shard', amount: 5 },
                { shardTypeString: 'Green Shard', amount: 5 },
                { shardTypeString: 'Blue Shard', amount: 5 },
            ], ItemList.Dragon_egg, 1),
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Metal_coat, 1),
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Purple Shard', amount: 30 },
            ], ItemList.Upgrade, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Purple Shard', amount: 30 },
            ], ItemList.Dragon_scale, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Route 6']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Fossilized Bird', amount: 1 },
                { shardTypeString: 'Fossilized Drake', amount: 1 },
            ], ItemList.Dracozolt, 1),
            new ShardDeal([
                { shardTypeString: 'Fossilized Bird', amount: 1 },
                { shardTypeString: 'Fossilized Dino', amount: 1 },
            ], ItemList.Arctozolt, 1),
            new ShardDeal([
                { shardTypeString: 'Fossilized Fish', amount: 1 },
                { shardTypeString: 'Fossilized Drake', amount: 1 },
            ], ItemList.Dracovish, 1),
            new ShardDeal([
                { shardTypeString: 'Fossilized Fish', amount: 1 },
                { shardTypeString: 'Fossilized Dino', amount: 1 },
            ], ItemList.Arctovish, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Stow-on-Side']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 10 },
                { shardTypeString: 'Blue Shard', amount: 10 },
            ], ItemList.Fighting_egg, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Grey Shard', amount: 30 },
            ], ItemList.Soothe_bell, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Crimson Shard', amount: 30 },
            ], ItemList.Dawn_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Black Shard', amount: 30 },
            ], ItemList.Dubious_disc, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Black Shard', amount: 30 },
            ], ItemList.Reaper_cloth, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations.Ballonlea] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Brown Shard', amount: 30 },
            ], ItemList.Cracked_pot, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Blue Shard', amount: 20 },
            ], ItemList.Moon_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Crimson Shard', amount: 30 },
            ], ItemList.Shiny_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Pink Shard', amount: 30 },
            ], ItemList.Sachet, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Pink Shard', amount: 30 },
            ], ItemList.Whipped_dream, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations.Circhester] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Red Shard', amount: 20 },
                { shardTypeString: 'Lime Shard', amount: 20 },
            ], ItemList.Razor_claw, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Lime Shard', amount: 30 },
            ], ItemList.Razor_fang, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Black Shard', amount: 30 },
            ], ItemList.Protector, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Cyan Shard', amount: 30 },
            ], ItemList.Ice_stone, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations.Spikemuth] = ko.observableArray([
            new ShardDeal([{ shardTypeString: 'Yellow Shard', amount: 20 }], ItemList.Electric_egg, 1),
            new ShardDeal([{ shardTypeString: 'Yellow Shard', amount: 20 }], ItemList.Thunder_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Blue Shard', amount: 20 },
                { shardTypeString: 'Crimson Shard', amount: 30 },
            ], ItemList.Dusk_stone, 1),
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'White Shard', amount: 30 },
            ], ItemList.Electirizer, 1),
        ]);
        ShardDeal.list[GameConstants.ShardTraderLocations['Master Dojo']] = ko.observableArray([
            new ShardDeal([
                { shardTypeString: 'Yellow Shard', amount: 20 },
                { shardTypeString: 'Brown Shard', amount: 30 },
            ], ItemList.Galarica_cuff, 1),
            new ShardDeal([
                { shardTypeString: 'Green Shard', amount: 20 },
                { shardTypeString: 'Brown Shard', amount: 30 },
            ], ItemList.Galarica_wreath, 1),
        ]);
    }
}
ShardDeal.list = {};
class UndergroundUpgrade extends Upgrade {
    constructor(name, displayName, maxLevel, costList, bonusList, increasing = true) {
        super(name, displayName, maxLevel, costList, bonusList, increasing);
    }
    canBuy() {
        return super.canBuy() && App.game.keyItems.hasKeyItem(KeyItemType.Explorer_kit);
    }
}
(function (UndergroundUpgrade) {
    let Upgrades;
    (function (Upgrades) {
        Upgrades[Upgrades["Energy_Max"] = 0] = "Energy_Max";
        Upgrades[Upgrades["Items_Max"] = 1] = "Items_Max";
        Upgrades[Upgrades["Items_Min"] = 2] = "Items_Min";
        Upgrades[Upgrades["Energy_Gain"] = 3] = "Energy_Gain";
        Upgrades[Upgrades["Energy_Regen_Time"] = 4] = "Energy_Regen_Time";
        Upgrades[Upgrades["Daily_Deals_Max"] = 5] = "Daily_Deals_Max";
        Upgrades[Upgrades["Bomb_Efficiency"] = 6] = "Bomb_Efficiency";
        Upgrades[Upgrades["Survey_Cost"] = 7] = "Survey_Cost";
        Upgrades[Upgrades["Survey_Efficiency"] = 8] = "Survey_Efficiency";
        Upgrades[Upgrades["NewYLayer"] = 9] = "NewYLayer";
    })(Upgrades = UndergroundUpgrade.Upgrades || (UndergroundUpgrade.Upgrades = {}));
})(UndergroundUpgrade || (UndergroundUpgrade = {}));
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/underground/UndergroundItem.d.ts" />
/// <reference path="../../declarations/underground/UndergroundItems.d.ts" />
///<reference path="../underground/UndergroundUpgrade.ts"/>
class Underground {
    constructor() {
        this.name = 'Underground';
        this.saveKey = 'underground';
        this._energy = ko.observable(Underground.BASE_ENERGY_MAX);
        this.upgradeList = [];
    }
    initialize() {
        this.upgradeList = [
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Energy_Max, 'Max Energy', 10, AmountFactory.createArray(GameHelper.createArray(50, 500, 50), GameConstants.Currency.diamond), GameHelper.createArray(0, 100, 10)),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Items_Max, 'Max items', 4, AmountFactory.createArray(GameHelper.createArray(200, 800, 200), GameConstants.Currency.diamond), GameHelper.createArray(0, 4, 1)),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Items_Min, 'Min Items', 4, AmountFactory.createArray(GameHelper.createArray(500, 5000, 1500), GameConstants.Currency.diamond), GameHelper.createArray(0, 4, 1)),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Energy_Gain, 'Energy restored', 17, AmountFactory.createArray(GameHelper.createArray(100, 1700, 100), GameConstants.Currency.diamond), GameHelper.createArray(0, 17, 1)),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Energy_Regen_Time, 'Energy regen time', 20, AmountFactory.createArray(GameHelper.createArray(20, 400, 20), GameConstants.Currency.diamond), GameHelper.createArray(0, 20, 1), false),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Daily_Deals_Max, 'Daily deals', 2, AmountFactory.createArray(GameHelper.createArray(150, 300, 150), GameConstants.Currency.diamond), GameHelper.createArray(0, 2, 1)),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Bomb_Efficiency, 'Bomb Efficiency', 5, AmountFactory.createArray(GameHelper.createArray(50, 250, 50), GameConstants.Currency.diamond), GameHelper.createArray(0, 10, 2)),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Survey_Cost, 'Survey Cost', 5, AmountFactory.createArray(GameHelper.createArray(50, 250, 50), GameConstants.Currency.diamond), GameHelper.createArray(0, 5, 1), false),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.Survey_Efficiency, 'Survey Efficiency', 4, AmountFactory.createArray(GameHelper.createArray(100, 400, 100), GameConstants.Currency.diamond), GameHelper.createArray(0, 4, 1)),
            new UndergroundUpgrade(UndergroundUpgrade.Upgrades.NewYLayer, 'Larger underground, +1 Max Item', 1, AmountFactory.createArray(GameHelper.createArray(3000, 3000, 3000), GameConstants.Currency.diamond), GameHelper.createArray(0, 1, 1)),
        ];
    }
    update(delta) {
    }
    getMaxEnergy() {
        return Underground.BASE_ENERGY_MAX + this.getUpgrade(UndergroundUpgrade.Upgrades.Energy_Max).calculateBonus();
    }
    getMaxItems() {
        return Underground.BASE_ITEMS_MAX + this.getUpgrade(UndergroundUpgrade.Upgrades.Items_Max).calculateBonus() + this.getUpgrade(UndergroundUpgrade.Upgrades.NewYLayer).calculateBonus();
    }
    getEnergyGain() {
        return Math.round(Underground.BASE_ENERGY_GAIN + this.getUpgrade(UndergroundUpgrade.Upgrades.Energy_Gain).calculateBonus());
    }
    getEnergyRegenTime() {
        return Math.round(Underground.BASE_ENERGY_REGEN_TIME - this.getUpgrade(UndergroundUpgrade.Upgrades.Energy_Regen_Time).calculateBonus());
    }
    getDailyDealsMax() {
        return Underground.BASE_DAILY_DEALS_MAX + this.getUpgrade(UndergroundUpgrade.Upgrades.Daily_Deals_Max).calculateBonus();
    }
    getBombEfficiency() {
        return Underground.BASE_BOMB_EFFICIENCY + this.getUpgrade(UndergroundUpgrade.Upgrades.Bomb_Efficiency).calculateBonus();
    }
    getSurvey_Cost() {
        return Underground.SURVEY_ENERGY - this.getUpgrade(UndergroundUpgrade.Upgrades.Survey_Cost).calculateBonus();
    }
    getSurvey_Efficiency() {
        return Underground.BASE_SURVEY_CHARGE_EFFICIENCY + this.getUpgrade(UndergroundUpgrade.Upgrades.Survey_Efficiency).calculateBonus();
    }
    getSizeY() {
        return Underground.sizeY + this.getUpgrade(UndergroundUpgrade.Upgrades.NewYLayer).calculateBonus();
    }
    getMinItems() {
        return Underground.BASE_ITEMS_MIN + this.getUpgrade(UndergroundUpgrade.Upgrades.Items_Min).calculateBonus();
    }
    getUpgrade(upgrade) {
        for (let i = 0; i < this.upgradeList.length; i++) {
            if (this.upgradeList[i].name == upgrade) {
                return this.upgradeList[i];
            }
        }
    }
    static showMine() {
        let html = '';
        for (let i = 0; i < Mine.grid.length; i++) {
            html += '<div class="row">';
            for (let j = 0; j < Mine.grid[0].length; j++) {
                html += Underground.mineSquare(Mine.grid[i][j](), i, j);
            }
            html += '</div>';
        }
        $('#mineBody').html(html);
    }
    static mineSquare(amount, i, j) {
        if (Mine.rewardGrid[i][j] != 0 && Mine.grid[i][j]() == 0) {
            Mine.rewardGrid[i][j].revealed = 1;
            const image = UndergroundItems.getById(Mine.rewardGrid[i][j].value).undergroundImage;
            return `<div data-bind='css: Underground.calculateCssClass(${i},${j})' data-i='${i}' data-j='${j}'><div class="mineReward size-${Mine.rewardGrid[i][j].sizeX}-${Mine.rewardGrid[i][j].sizeY} pos-${Mine.rewardGrid[i][j].x}-${Mine.rewardGrid[i][j].y} rotations-${Mine.rewardGrid[i][j].rotations}" style="background-image: url('${image}');"></div></div>`;
        }
        else {
            return `<div data-bind='css: Underground.calculateCssClass(${i},${j})' data-i='${i}' data-j='${j}'></div>`;
        }
    }
    static calculateCssClass(i, j) {
        return `col-sm-1 rock${Math.max(Mine.grid[i][j](), 0)} mineSquare ${Mine.Tool[Mine.toolSelected()]}Selected`;
    }
    static gainMineItem(id, num = 1) {
        const index = player.mineInventoryIndex(id);
        const item = UndergroundItems.getById(id);
        if (item.valueType == UndergroundItemValueType.EvolutionItem) {
            const evostone = ItemList[GameConstants.StoneType[item.type]];
            evostone.gain(num);
            return;
        }
        if (index == -1) {
            const tempItem = {
                name: item.name,
                amount: ko.observable(num),
                id: id,
                value: item.value,
                valueType: item.valueType,
                sellLocked: ko.observable(false),
            };
            player.mineInventory.push(tempItem);
        }
        else {
            const amt = player.mineInventory()[index].amount();
            player.mineInventory()[index].amount(amt + num);
            this.sortMineItems(this.lastPropSort, false);
        }
    }
    static getDiamondNetWorth() {
        let diamondNetWorth = 0;
        player.mineInventory().forEach(mineItem => {
            if (mineItem.valueType == UndergroundItemValueType.Diamond) {
                diamondNetWorth += mineItem.value * mineItem.amount();
            }
        });
        return diamondNetWorth + App.game.wallet.currencies[GameConstants.Currency.diamond]();
    }
    static getCumulativeValues() {
        const cumulativeValues = {};
        player.mineInventory().forEach(item => {
            if (
            // Cannot sell Shards or Fossils
            item.valueType !== UndergroundItemValueType.Fossil
                && item.valueType !== UndergroundItemValueType.Shard
                && item.valueType != UndergroundItemValueType.FossilPiece
                && item.amount() > 0
                && !item.sellLocked()) {
                let valueType;
                switch (item.valueType) {
                    case UndergroundItemValueType.Gem:
                        valueType = `${PokemonType[UndergroundItems.getById(item.id).type]} Gems`;
                        break;
                    case UndergroundItemValueType.Diamond:
                    default:
                        valueType = `${UndergroundItemValueType[item.valueType]}s`;
                }
                let cumulativeValueOfType = cumulativeValues[valueType];
                if (!cumulativeValueOfType) {
                    cumulativeValueOfType = { cumulativeValue: 0 };
                    // Set image source
                    if (item.valueType == UndergroundItemValueType.Diamond) {
                        cumulativeValueOfType.imgSrc = 'assets/images/underground/diamond.svg';
                    }
                    else {
                        cumulativeValueOfType.imgSrc = UndergroundItems.getById(item.id).image;
                    }
                    cumulativeValues[valueType] = cumulativeValueOfType;
                }
                cumulativeValueOfType.cumulativeValue += item.value * item.amount();
            }
        });
        return cumulativeValues;
    }
    gainEnergy() {
        if (this.energy < this.getMaxEnergy()) {
            const oakMultiplier = App.game.oakItems.calculateBonus(OakItemType.Cell_Battery);
            this.energy = Math.min(this.getMaxEnergy(), this.energy + (oakMultiplier * this.getEnergyGain()));
            if (this.energy === this.getMaxEnergy()) {
                Notifier.notify({
                    message: 'Your mining energy has reached maximum capacity!',
                    type: NotificationConstants.NotificationOption.success,
                    timeout: 1e4,
                    sound: NotificationConstants.NotificationSound.General.underground_energy_full,
                    setting: NotificationConstants.NotificationSetting.Underground.underground_energy_full,
                });
            }
        }
    }
    gainEnergyThroughItem(item) {
        // Restore a percentage of maximum energy
        const effect = GameConstants.EnergyRestoreEffect[GameConstants.EnergyRestoreSize[item]];
        const gain = Math.min(this.getMaxEnergy() - this.energy, effect * this.getMaxEnergy());
        this.energy = this.energy + gain;
        Notifier.notify({
            message: `You restored ${gain} mining energy!`,
            type: NotificationConstants.NotificationOption.success,
            setting: NotificationConstants.NotificationSetting.Underground.underground_energy_restore,
        });
    }
    static sortMineItems(prop, flip = true) {
        const prevEl = document.querySelector(`[data-undergroundsort=${Underground.lastPropSort}]`);
        const nextEl = prop == this.lastPropSort ? prevEl : document.querySelector(`[data-undergroundsort=${prop}]`);
        // If new sort by, update old sort by
        if (prop != this.lastPropSort) {
            // Remove sort direction from previous element
            if (prevEl) {
                prevEl.textContent = this.lastPropSort;
            }
            this.lastPropSort = prop;
        }
        else if (flip) {
            // Flip sort direction
            this.sortDirection *= -1;
        }
        // Update element text to dispaly sort direction
        if (nextEl) {
            nextEl.textContent = `${prop} ${this.sortDirection > 0 ? '▴' : '▾'}`;
        }
        player.mineInventory.sort((a, b) => {
            let result = 0;
            switch (prop) {
                case 'Amount':
                    result = (a.amount() - b.amount()) * this.sortDirection;
                    break;
                case 'Value':
                    result = (a.value - b.value) * this.sortDirection;
                    break;
                case 'Item':
                    result = a.name > b.name ? 1 * this.sortDirection : -1 * this.sortDirection;
                    break;
            }
            if (result == 0) {
                return a.id - b.id;
            }
            return result;
        });
    }
    static sellMineItem(id, amount = 1) {
        for (let i = 0; i < player.mineInventory().length; i++) {
            const item = player.mineInventory()[i];
            if (item.id == id) {
                if (item.sellLocked()) {
                    Notifier.notify({
                        message: 'Item is locked for selling, you first have to unlock it.',
                        type: NotificationConstants.NotificationOption.warning,
                    });
                    return;
                }
                if (item.valueType == UndergroundItemValueType.Fossil) {
                    amount = 1;
                }
                const curAmt = item.amount();
                if (curAmt > 0) {
                    const sellAmt = Math.min(curAmt, amount);
                    const success = Underground.gainProfit(item, sellAmt);
                    if (success) {
                        player.mineInventory()[i].amount(curAmt - sellAmt);
                        this.sortMineItems(this.lastPropSort, false);
                    }
                    return;
                }
            }
        }
    }
    static sellAllMineItems() {
        for (let i = 0; i < player.mineInventory().length; i++) {
            const item = player.mineInventory()[i];
            if (!item.sellLocked()
                && item.valueType != UndergroundItemValueType.Fossil
                && item.valueType != UndergroundItemValueType.Shard
                && item.valueType != UndergroundItemValueType.FossilPiece) {
                Underground.sellMineItem(item.id, Infinity);
            }
        }
        $('#mineSellAllTreasuresModal').modal('hide');
    }
    static setSellLockOfMineItem(id, sellLocked) {
        for (let i = 0; i < player.mineInventory().length; i++) {
            const item = player.mineInventory()[i];
            if (item.id == id) {
                player.mineInventory()[i].sellLocked(sellLocked);
                return;
            }
        }
    }
    static gainProfit(item, amount) {
        let success = true;
        const uItem = UndergroundItems.getById(item.id);
        switch (item.valueType) {
            case UndergroundItemValueType.Diamond:
                App.game.wallet.gainDiamonds(item.value * amount);
                break;
            case UndergroundItemValueType.Fossil:
                if (!App.game.breeding.hasFreeEggSlot()) {
                    return false;
                }
                success = App.game.breeding.gainEgg(App.game.breeding.createFossilEgg(item.name));
                break;
            case UndergroundItemValueType.Gem:
                const type = uItem.type;
                App.game.gems.gainGems(GameConstants.PLATE_VALUE * amount, type);
                break;
            // Nothing else can be sold
            default:
                return false;
        }
        return success;
    }
    openUndergroundModal() {
        if (this.canAccess()) {
            $('#mineModal').modal('show');
        }
        else {
            Notifier.notify({
                message: 'You need the Explorer Kit to access this location.\n<i>Check out the shop at Cinnabar Island.</i>',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    openUndergroundSellAllModal() {
        if (this.canAccess()) {
            if (Object.keys(Underground.getCumulativeValues()).length == 0) {
                Notifier.notify({
                    message: 'You have no items selected for selling.',
                    type: NotificationConstants.NotificationOption.warning,
                });
                return;
            }
            $('#mineSellAllTreasuresModal').modal('show');
        }
        else {
            Notifier.notify({
                message: 'You need the Explorer Kit to access this location.\n<i>Check out the shop at Cinnabar Island.</i>',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    canAccess() {
        return MapHelper.accessToRoute(11, 0) && App.game.keyItems.hasKeyItem(KeyItemType.Explorer_kit);
    }
    calculateItemEffect(item) {
        const effect = GameConstants.EnergyRestoreEffect[GameConstants.EnergyRestoreSize[item]];
        return effect * this.getMaxEnergy();
    }
    fromJSON(json) {
        if (!json) {
            console.warn('Underground not loaded.');
            return;
        }
        const upgrades = json.upgrades;
        for (const item in UndergroundUpgrade.Upgrades) {
            if (isNaN(Number(item))) {
                this.getUpgrade(UndergroundUpgrade.Upgrades[item]).level = upgrades[item] || 0;
            }
        }
        this.energy = json.energy || 0;
        const mine = json.mine;
        if (mine) {
            Mine.loadSavedMine(mine);
        }
        else {
            Mine.loadMine();
        }
    }
    toJSON() {
        const undergroundSave = {};
        const upgradesSave = {};
        for (const item in UndergroundUpgrade.Upgrades) {
            if (isNaN(Number(item))) {
                upgradesSave[item] = this.getUpgrade(UndergroundUpgrade.Upgrades[item]).level;
            }
        }
        undergroundSave.upgrades = upgradesSave;
        undergroundSave.energy = this.energy;
        undergroundSave.mine = Mine.save();
        return undergroundSave;
    }
    // Knockout getters/setters
    get energy() {
        return this._energy();
    }
    set energy(value) {
        this._energy(value);
    }
}
Underground.energyTick = ko.observable(60);
Underground.counter = 0;
Underground.sortDirection = -1;
Underground.lastPropSort = 'none';
Underground.rewardCssClass = ko.pureComputed(() => {
    return `col-sm-1 mineReward mineSquare ${Mine.Tool[Mine.toolSelected()]}Selected`;
});
Underground.netWorthTooltip = ko.pureComputed(() => {
    let nMineItems = 0;
    let nFossils = 0;
    let nPlates = 0;
    let nShards = 0;
    player.mineInventory().forEach(mineItem => {
        if (mineItem.valueType == UndergroundItemValueType.Diamond) {
            nMineItems += mineItem.amount();
        }
        else if (mineItem.valueType == UndergroundItemValueType.Fossil) {
            nFossils += mineItem.amount();
        }
        else if (mineItem.valueType == UndergroundItemValueType.Gem) {
            nPlates += mineItem.amount();
        }
        else if (mineItem.valueType == UndergroundItemValueType.Shard) {
            nShards += mineItem.amount();
        }
    });
    return `<u>Owned:</u><br>Mine items: ${nMineItems.toLocaleString('en-US')}<br>Fossils: ${nFossils.toLocaleString('en-US')}<br>Plates: ${nPlates.toLocaleString('en-US')}<br>Shards: ${nShards.toLocaleString('en-US')}`;
});
$(document).ready(() => {
    $('body').on('click', '.mineSquare', function () {
        Mine.click(parseInt(this.dataset.i, 10), parseInt(this.dataset.j, 10));
    });
});
(function (Underground) {
    Underground.BASE_ENERGY_MAX = 50;
    Underground.BASE_ITEMS_MAX = 3;
    Underground.BASE_ITEMS_MIN = 1;
    Underground.BASE_ENERGY_GAIN = 3;
    Underground.BASE_ENERGY_REGEN_TIME = 60;
    Underground.BASE_DAILY_DEALS_MAX = 3;
    Underground.BASE_BOMB_EFFICIENCY = 10;
    Underground.BASE_SURVEY_CHARGE_EFFICIENCY = 1;
    Underground.sizeX = 25;
    Underground.sizeY = 12;
    Underground.CHISEL_ENERGY = 1;
    Underground.HAMMER_ENERGY = 3;
    Underground.BOMB_ENERGY = 10;
    Underground.SURVEY_ENERGY = 15;
})(Underground || (Underground = {}));
class Preload {
    static itemLoading(item = 0) {
        this.itemsToLoad.push(item);
        this.updateProgressBar();
    }
    static itemLoaded(item = 0) {
        this.itemsLoaded.push(item);
        this.updateProgressBar();
    }
    static itemErrored(item = 0) {
        this.itemsErrored.push(item);
        this.updateProgressBar();
    }
    static updateProgressBar() {
        const toLoad = this.itemsToLoad.length;
        const loaded = this.itemsLoaded.length;
        const errored = this.itemsErrored.length;
        // Update the progress bar
        const progressBarEl = document.getElementById('preload-progress-bar');
        progressBarEl.style.width = `${(loaded + errored) / toLoad * 100}%`;
        // Update the text
        const progressTextEl = document.getElementById('preload-progress-text');
        progressTextEl.innerText = `${loaded + errored} / ${toLoad}`;
    }
    static hideSplashScreen(fast = false) {
        $('#game').removeClass('loading');
        if (fast) {
            $('#loader').hide();
        }
        else {
            $('#loader').fadeOut('slow');
        }
        // Remove the splash screen
        setTimeout(() => {
            $('#loader').remove();
        }, 1000);
    }
    static load(skipWait = false) {
        console.log(`[${GameConstants.formatDate(new Date())}] %cPreloading Images..`, 'color:#8e44ad;font-weight:900;');
        if (skipWait) {
            return new Promise(resolve => {
                //If you want to skip waiting, resolve immediately
                resolve();
                // Preload.loadTowns();
                // Preload.loadUndergroundItems();
                // Preload.loadMap();
                // Preload.loadPokemon(),
                Preload.hideSplashScreen(true);
            });
        }
        else {
            return new Promise(resolve => {
                // Incase something is taking too long to load
                const forceLoad = setTimeout(() => {
                    console.log(`[${GameConstants.formatDate(new Date())}] %cPreloading images taking too long, Skipping..`, 'color:#c0392b;font-weight:900;');
                    resolve();
                }, GameConstants.MAX_LOAD_TIME);
                Promise.all([
                    // Preload.loadTowns(),
                    // Preload.loadUndergroundItems(),
                    // Preload.loadMap(),
                    // Preload.loadPokemon(),
                    Preload.minimumTime(),
                ]).then(() => {
                    clearTimeout(forceLoad);
                    console.log(`[${GameConstants.formatDate(new Date())}] %cPreloaded images`, 'color:#2ecc71;font-weight:900;');
                    // Give the progress bar a little bit of time to finish the animation
                    setTimeout(() => {
                        resolve();
                    }, 600);
                }).catch((reason => {
                    console.log(`[${GameConstants.formatDate(new Date())}] %cPreload images failed..`, 'color:#c0392b;font-weight:900;');
                    console.error('Preload images failed:', reason);
                    clearTimeout(forceLoad);
                    resolve();
                }));
            });
        }
    }
    static loadTowns() {
        var _a;
        const p = Array();
        for (const name in TownList) {
            // Skip unreleased towns unless a feature flag has enabled them
            if (!((_a = window.featureFlags) === null || _a === void 0 ? void 0 : _a.preloadUnreleasedTowns) && TownList[name].region > GameConstants.MAX_AVAILABLE_REGION) {
                continue;
            }
            // Skip fake towns that exist for the Elite
            if (name.includes('Elite') || name.includes('Champion')) {
                continue;
            }
            Preload.itemLoading(name);
            p.push(new Promise(resolve => {
                const img = new Image();
                img.onload = () => {
                    Preload.itemLoaded(`town-${name}`);
                    resolve();
                };
                img.onerror = () => {
                    Preload.itemErrored(`town-${name}`);
                    console.warn('Failed to load town image:', name);
                    resolve();
                };
                img.src = `assets/images/towns/${name}.png`;
            }));
        }
        return Promise.all(p);
    }
    static loadPokemon() {
        const p = Array();
        for (let i = 1; i <= GameConstants.MaxIDPerRegion[GameConstants.MAX_AVAILABLE_REGION]; i++) {
            Preload.itemLoading(i);
            p.push(new Promise(resolve => {
                const img = new Image();
                img.onload = () => {
                    Preload.itemLoaded(i);
                    resolve();
                };
                img.onerror = () => {
                    Preload.itemErrored(i);
                    console.warn('Failed to load image for pokemon:', i);
                    resolve();
                };
                img.src = `assets/images/pokemon/${i}.png`;
            }));
        }
        return Promise.all(p);
    }
    static loadUndergroundItems() {
        const p = Array();
        UndergroundItems.list.forEach(item => {
            Preload.itemLoading(item.id);
            p.push(new Promise(resolve => {
                const img = new Image();
                img.onload = () => {
                    Preload.itemLoaded(item.id);
                    resolve();
                };
                img.onerror = () => {
                    Preload.itemErrored(item.id);
                    console.warn('Failed to load image for Underground item:', item.name);
                    resolve();
                };
                img.src = item.undergroundImage;
            }));
        });
        return Promise.all(p);
    }
    static minimumTime() {
        return new Promise(resolve => {
            setTimeout(() => {
                resolve();
            }, GameConstants.MIN_LOAD_TIME);
        });
    }
    static loadMap() {
        // TODO: preload the map background images?
        /*
        return new Promise<number>(resolve => {
            let img = new Image();
            img.onload = () => {
                document.querySelector('image')
                    .setAttributeNS('http://www.w3.org/1999/xlink', 'href', 'assets/images/kanto.png');
                resolve();
            };
            img.onerror = () => {
                console.log('Failed to load map image:', name);
                resolve();
            }
            img.src = 'assets/images/kanto.png';
        })
        */
    }
}
Preload.itemsToLoad = [];
Preload.itemsLoaded = [];
Preload.itemsErrored = [];
/// <reference path="../../declarations/routes/Routes.d.ts"/>
/// <reference path="../../declarations/enums/Badges.d.ts"/>
/// <reference path="../../declarations/weather/WeatherType.d.ts"/>
/// <reference path="../../declarations/requirements/WeatherRequirement.d.ts"/>
/// <reference path="../../declarations/subRegion/SubRegions.d.ts"/>
/*
KANTO
*/
Routes.add(new RegionRoute('Kanto Route 1', GameConstants.Region.kanto, 1, new RoutePokemon({
    land: ['Pidgey', 'Rattata'],
}), undefined, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Kanto Route 22', GameConstants.Region.kanto, 22, new RoutePokemon({
    land: ['Rattata', 'Spearow', 'Mankey'],
    water: ['Psyduck', 'Poliwag', 'Slowpoke', 'Goldeen', 'Magikarp'],
}), [new RouteKillRequirement(10, GameConstants.Region.kanto, 1)], 1.1, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Kanto Route 2', GameConstants.Region.kanto, 2, new RoutePokemon({
    land: ['Pidgey', 'Rattata', 'Caterpie', 'Weedle'],
}), [new RouteKillRequirement(10, GameConstants.Region.kanto, 1)], undefined, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Kanto Route 3', GameConstants.Region.kanto, 3, new RoutePokemon({
    land: ['Pidgey', 'Spearow', 'Nidoran(F)', 'Nidoran(M)', 'Jigglypuff', 'Mankey'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 2),
    new GymBadgeRequirement(BadgeEnums.Boulder),
], undefined, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Kanto Route 4', GameConstants.Region.kanto, 4, new RoutePokemon({
    land: ['Rattata', 'Spearow', 'Ekans', 'Sandshrew', 'Mankey'],
    water: ['Tentacool', 'Krabby', 'Horsea', 'Magikarp'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 3),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Moon')),
], undefined, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Kanto Route 24', GameConstants.Region.kanto, 24, new RoutePokemon({
    land: ['Caterpie', 'Metapod', 'Weedle', 'Kakuna', 'Pidgey', 'Oddish', 'Abra', 'Bellsprout'],
    water: ['Tentacool', 'Krabby', 'Horsea', 'Magikarp'],
}), [new RouteKillRequirement(10, GameConstants.Region.kanto, 4)], 4.1, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Kanto Route 25', GameConstants.Region.kanto, 25, new RoutePokemon({
    land: ['Caterpie', 'Metapod', 'Weedle', 'Kakuna', 'Pidgey', 'Oddish', 'Abra', 'Bellsprout'],
    water: ['Psyduck', 'Poliwag', 'Tentacool', 'Slowpoke', 'Goldeen', 'Magikarp'],
}), [new RouteKillRequirement(10, GameConstants.Region.kanto, 24)], 4.2, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Kanto Route 5', GameConstants.Region.kanto, 5, new RoutePokemon({
    land: ['Pidgey', 'Meowth', 'Oddish', 'Bellsprout'],
}), [
    // Need to reach bills house
    new RouteKillRequirement(10, GameConstants.Region.kanto, 25),
], undefined, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Kanto Route 6', GameConstants.Region.kanto, 6, new RoutePokemon({
    land: ['Pidgey', 'Meowth', 'Oddish', 'Bellsprout'],
    water: ['Psyduck', 'Poliwag', 'Slowpoke', 'Goldeen', 'Magikarp'],
}), [new RouteKillRequirement(10, GameConstants.Region.kanto, 5)], undefined, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Kanto Route 11', GameConstants.Region.kanto, 11, new RoutePokemon({
    land: ['Spearow', 'Ekans', 'Sandshrew', 'Drowzee'],
    water: ['Tentacool', 'Krabby', 'Horsea', 'Magikarp'],
}), [new RouteKillRequirement(10, GameConstants.Region.kanto, 6)], 6.1, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Kanto Route 9', GameConstants.Region.kanto, 9, new RoutePokemon({
    land: ['Rattata', 'Spearow', 'Ekans', 'Sandshrew'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 6),
    new GymBadgeRequirement(BadgeEnums.Cascade),
], undefined, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Kanto Route 10', GameConstants.Region.kanto, 10, new RoutePokemon({
    land: ['Spearow', 'Ekans', 'Sandshrew', 'Voltorb'],
    water: ['Tentacool', 'Krabby', 'Horsea', 'Magikarp'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 9),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rock Tunnel')),
], undefined, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Kanto Route 8', GameConstants.Region.kanto, 8, new RoutePokemon({
    land: ['Pidgey', 'Ekans', 'Sandshrew', 'Vulpix', 'Meowth', 'Growlithe'],
}), [new RouteKillRequirement(10, GameConstants.Region.kanto, 10)], 10.1, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Kanto Route 7', GameConstants.Region.kanto, 7, new RoutePokemon({
    land: ['Pidgey', 'Vulpix', 'Oddish', 'Meowth', 'Growlithe', 'Bellsprout'],
}), [new RouteKillRequirement(10, GameConstants.Region.kanto, 8)], 10.2, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Kanto Route 12', GameConstants.Region.kanto, 12, new RoutePokemon({
    land: ['Pidgey', 'Oddish', 'Gloom', 'Venonat', 'Bellsprout', 'Weepinbell', 'Farfetch\'d'],
    water: ['Poliwag', 'Slowpoke', 'Slowbro', 'Goldeen', 'Magikarp'],
}), [new RouteKillRequirement(10, GameConstants.Region.kanto, 10)], undefined, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Kanto Route 13', GameConstants.Region.kanto, 13, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Oddish', 'Gloom', 'Venonat', 'Bellsprout', 'Weepinbell', 'Farfetch\'d', 'Ditto'],
    water: ['Tentacool', 'Krabby', 'Horsea', 'Magikarp'],
}), [
    new OneFromManyRequirement([
        new TemporaryBattleRequirement('Snorlax route 12'),
        new RouteKillRequirement(10, GameConstants.Region.kanto, 14),
    ]),
], undefined, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Kanto Route 14', GameConstants.Region.kanto, 14, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Oddish', 'Gloom', 'Venonat', 'Bellsprout', 'Weepinbell', 'Ditto'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.kanto, 13),
        new RouteKillRequirement(10, GameConstants.Region.kanto, 15),
    ]),
], undefined, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Kanto Route 15', GameConstants.Region.kanto, 15, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Oddish', 'Gloom', 'Venonat', 'Bellsprout', 'Weepinbell', 'Ditto'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.kanto, 18),
        new RouteKillRequirement(10, GameConstants.Region.kanto, 14),
    ]),
], undefined, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Kanto Route 16', GameConstants.Region.kanto, 16, new RoutePokemon({
    land: ['Rattata', 'Raticate', 'Spearow', 'Doduo'],
}), [
    new OneFromManyRequirement([
        new TemporaryBattleRequirement('Snorlax route 16'),
        new RouteKillRequirement(10, GameConstants.Region.kanto, 17),
    ]),
], undefined, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Kanto Route 17', GameConstants.Region.kanto, 17, new RoutePokemon({
    land: ['Rattata', 'Raticate', 'Spearow', 'Fearow', 'Doduo'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.kanto, 16),
        new RouteKillRequirement(10, GameConstants.Region.kanto, 18),
    ]),
], undefined, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Kanto Route 18', GameConstants.Region.kanto, 18, new RoutePokemon({
    land: ['Rattata', 'Raticate', 'Spearow', 'Fearow', 'Doduo'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.kanto, 17),
        new RouteKillRequirement(10, GameConstants.Region.kanto, 15),
    ]),
], undefined, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Kanto Route 19', GameConstants.Region.kanto, 19, new RoutePokemon({
    water: ['Tentacool', 'Krabby', 'Horsea', 'Magikarp'],
}), [new GymBadgeRequirement(BadgeEnums.Soul)], undefined, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Kanto Route 20', GameConstants.Region.kanto, 20, new RoutePokemon({
    water: ['Tentacool', 'Krabby', 'Horsea', 'Shellder', 'Staryu', 'Magikarp'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.kanto, 21),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Seafoam Islands')),
    ]),
], undefined, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Kanto Route 21', GameConstants.Region.kanto, 21, new RoutePokemon({
    land: ['Tangela'],
    water: ['Tentacool', 'Krabby', 'Horsea', 'Shellder', 'Staryu', 'Magikarp'],
}), [new GymBadgeRequirement(BadgeEnums.Soul)], undefined, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Kanto Route 23', GameConstants.Region.kanto, 23, new RoutePokemon({
    land: ['Spearow', 'Fearow', 'Ekans', 'Arbok', 'Sandshrew', 'Sandslash', 'Mankey', 'Primeape'],
    water: ['Psyduck', 'Poliwag', 'Slowpoke', 'Goldeen', 'Magikarp'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 22),
    new GymBadgeRequirement(BadgeEnums.Earth),
], undefined, GameConstants.KantoSubRegions.Kanto));
Routes.add(new RegionRoute('Treasure Beach', GameConstants.Region.kanto, 26, new RoutePokemon({
    land: ['Spearow', 'Fearow', 'Meowth', 'Persian', 'Psyduck', 'Slowpoke', 'Tangela'],
    water: ['Tentacool', 'Tentacruel', 'Krabby', 'Horsea', 'Magikarp'],
}), [new GymBadgeRequirement(BadgeEnums.Volcano)], 21.1, GameConstants.KantoSubRegions.Sevii123, true, 37487));
Routes.add(new RegionRoute('Kindle Road', GameConstants.Region.kanto, 27, new RoutePokemon({
    land: ['Spearow', 'Fearow', 'Meowth', 'Persian', 'Psyduck', 'Geodude', 'Ponyta', 'Rapidash', 'Slowpoke'],
    water: ['Tentacool', 'Tentacruel', 'Krabby', 'Horsea', 'Magikarp'],
}), [new GymBadgeRequirement(BadgeEnums.Volcano)], 21.2, GameConstants.KantoSubRegions.Sevii123, true, 37487));
Routes.add(new RegionRoute('Cape Brink', GameConstants.Region.kanto, 28, new RoutePokemon({
    land: ['Spearow', 'Fearow', 'Oddish', 'Gloom', 'Meowth', 'Persian', 'Psyduck', 'Golduck', 'Bellsprout', 'Weepinbell', 'Slowpoke', 'Slowbro'],
    water: ['Psyduck', 'Golduck', 'Poliwag', 'Slowpoke', 'Slowbro', 'Goldeen', 'Magikarp'],
}), [new QuestLineStepCompletedRequirement('Bill\'s Errand', 0)], 21.3, GameConstants.KantoSubRegions.Sevii123, true, 37487));
Routes.add(new RegionRoute('Bond Bridge', GameConstants.Region.kanto, 29, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Oddish', 'Gloom', 'Venonat', 'Meowth', 'Persian', 'Psyduck', 'Bellsprout', 'Weepinbell', 'Slowpoke'],
    water: ['Tentacool', 'Tentacruel', 'Krabby', 'Horsea', 'Magikarp'],
}), [new QuestLineStepCompletedRequirement('Bill\'s Errand', 3)], 21.4, GameConstants.KantoSubRegions.Sevii123, true, 37487));
Routes.add(new RegionRoute('Five Isle Meadow', GameConstants.Region.kanto, 30, new RoutePokemon({
    land: ['Sentret', 'Pidgey', 'Pidgeotto', 'Hoppip', 'Meowth', 'Persian', 'Psyduck', 'Slowpoke'],
    water: ['Tentacool', 'Tentacruel', 'Magikarp', 'Horsea', 'Krabby', 'Qwilfish', 'Remoraid', 'Gyarados', 'Seadra', 'Kingler'],
}), [new QuestLineStepCompletedRequirement('Celio\'s Errand', 5)], undefined, GameConstants.KantoSubRegions.Sevii4567, true, 1050000));
Routes.add(new RegionRoute('Memorial Pillar', GameConstants.Region.kanto, 31, new RoutePokemon({
    water: ['Hoppip', 'Tentacool', 'Tentacruel', 'Magikarp', 'Horsea', 'Krabby', 'Qwilfish', 'Remoraid', 'Gyarados', 'Seadra', 'Kingler', 'Psyduck', 'Slowpoke'],
}), [new RouteKillRequirement(10, GameConstants.Region.kanto, 30)], undefined, GameConstants.KantoSubRegions.Sevii4567, true, 1050000));
Routes.add(new RegionRoute('Water Labyrinth', GameConstants.Region.kanto, 32, new RoutePokemon({
    water: ['Hoppip', 'Tentacool', 'Tentacruel', 'Magikarp', 'Horsea', 'Krabby', 'Qwilfish', 'Remoraid', 'Gyarados', 'Seadra', 'Kingler', 'Psyduck', 'Slowpoke'],
}), [new QuestLineStepCompletedRequirement('Celio\'s Errand', 5)], undefined, GameConstants.KantoSubRegions.Sevii4567, true, 1050000));
Routes.add(new RegionRoute('Resort Gorgeous', GameConstants.Region.kanto, 33, new RoutePokemon({
    water: ['Hoppip', 'Tentacool', 'Tentacruel', 'Magikarp', 'Horsea', 'Krabby', 'Qwilfish', 'Remoraid', 'Gyarados', 'Seadra', 'Kingler', 'Psyduck', 'Slowpoke'],
}), [new RouteKillRequirement(10, GameConstants.Region.kanto, 32)], undefined, GameConstants.KantoSubRegions.Sevii4567, true, 1050000));
Routes.add(new RegionRoute('Water Path', GameConstants.Region.kanto, 34, new RoutePokemon({
    land: ['Sentret', 'Spearow', 'Fearow', 'Oddish', 'Bellsprout', 'Meowth', 'Gloom', 'Weepinbell', 'Persian', 'Psyduck', 'Slowpoke'],
    water: ['Tentacool', 'Tentacruel', 'Magikarp', 'Horsea', 'Krabby', 'Qwilfish', 'Remoraid', 'Gyarados', 'Seadra', 'Kingler'],
}), [new QuestLineStepCompletedRequirement('Celio\'s Errand', 5)], undefined, GameConstants.KantoSubRegions.Sevii4567, true, 1050000));
Routes.add(new RegionRoute('Green Path', GameConstants.Region.kanto, 35, new RoutePokemon({
    water: ['Tentacool', 'Tentacruel', 'Magikarp', 'Horsea', 'Krabby', 'Qwilfish', 'Remoraid', 'Gyarados', 'Seadra', 'Kingler', 'Psyduck', 'Slowpoke'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pattern Bush'))], undefined, GameConstants.KantoSubRegions.Sevii4567, true, 1050000));
Routes.add(new RegionRoute('Outcast Island', GameConstants.Region.kanto, 36, new RoutePokemon({
    water: ['Tentacool', 'Tentacruel', 'Magikarp', 'Horsea', 'Krabby', 'Qwilfish', 'Remoraid', 'Gyarados', 'Seadra', 'Kingler', 'Psyduck', 'Slowpoke'],
}), [new RouteKillRequirement(10, GameConstants.Region.kanto, 35)], undefined, GameConstants.KantoSubRegions.Sevii4567, true, 1050000));
Routes.add(new RegionRoute('Ruin Valley', GameConstants.Region.kanto, 37, new RoutePokemon({
    land: ['Natu', 'Spearow', 'Fearow', 'Meowth', 'Yanma', 'Wooper', 'Marill', 'Persian', 'Psyduck', 'Slowpoke', 'Wobbuffet'],
    water: ['Magikarp', 'Poliwag', 'Goldeen', 'Poliwhirl', 'Gyarados'],
}), [new RouteKillRequirement(10, GameConstants.Region.kanto, 34)], undefined, GameConstants.KantoSubRegions.Sevii4567, true, 1050000));
Routes.add(new RegionRoute('Canyon Entrance', GameConstants.Region.kanto, 38, new RoutePokemon({
    land: ['Sentret', 'Spearow', 'Fearow', 'Phanpy', 'Meowth', 'Persian', 'Psyduck', 'Slowpoke'],
}), [new QuestLineStepCompletedRequirement('Celio\'s Errand', 5)], undefined, GameConstants.KantoSubRegions.Sevii4567, true, 1050000));
Routes.add(new RegionRoute('Sevault Canyon', GameConstants.Region.kanto, 39, new RoutePokemon({
    land: ['Geodude', 'Phanpy', 'Fearow', 'Meowth', 'Cubone', 'Marowak', 'Persian', 'Onix', 'Skarmory', 'Larvitar'],
    headbutt: ['Graveler'],
}), [new RouteKillRequirement(10, GameConstants.Region.kanto, 38)], undefined, GameConstants.KantoSubRegions.Sevii4567, true, 1050000));
Routes.add(new RegionRoute('Valencia Island', GameConstants.Region.kanto, 40, new RoutePokemon({
    land: ['Valencian Butterfree', 'Valencian Raticate', 'Valencian Vileplume', 'Valencian Paras', 'Valencian Weepinbell', 'Nidoran(M)', 'Nidoran(F)', 'Nidorina'],
    water: ['Gyarados', 'Cloyster', 'Poliwhirl'],
}), [new GymBadgeRequirement(BadgeEnums.Jade_Star)], undefined, GameConstants.KantoSubRegions.Sevii4567, true, 1250000));
Routes.add(new RegionRoute('Pinkan Forest', GameConstants.Region.kanto, 41, new RoutePokemon({
    land: ['Pinkan Caterpie', 'Pinkan Weedle', 'Pinkan Pidgey', 'Pinkan Vileplume', 'Pinkan Paras', 'Pinkan Venonat', 'Pinkan Mankey', 'Pinkan Exeggutor'],
}), [
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Altering Cave')),
    new QuestLineCompletedRequirement('Celio\'s Errand'),
], undefined, GameConstants.KantoSubRegions.Sevii4567, true, 1250000));
Routes.add(new RegionRoute('Pinkan Plains', GameConstants.Region.kanto, 42, new RoutePokemon({
    land: ['Pinkan Pidgey', 'Pinkan Rattata', 'Pinkan Nidoran(M)', 'Pinkan Nidoran(F)', 'Pinkan Diglett', 'Pinkan Bellsprout'],
}), [new RouteKillRequirement(10, GameConstants.Region.kanto, 41)], undefined, GameConstants.KantoSubRegions.Sevii4567, true, 1250000));
/*
JOHTO
*/
Routes.add(new RegionRoute('Johto Route 29', GameConstants.Region.johto, 29, new RoutePokemon({
    land: ['Pidgey', 'Rattata', 'Sentret', 'Hoothoot'],
    headbutt: ['Exeggcute', 'Ledyba', 'Spinarak', 'Hoothoot', 'Pineco'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_KantoChampion)]));
Routes.add(new RegionRoute('Johto Route 30', GameConstants.Region.johto, 30, new RoutePokemon({
    land: ['Pidgey', 'Rattata', 'Caterpie', 'Metapod', 'Weedle', 'Kakuna', 'Zubat', 'Hoothoot', 'Ledyba', 'Spinarak'],
    water: ['Poliwag', 'Poliwhirl', 'Magikarp'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 29)]));
Routes.add(new RegionRoute('Johto Route 31', GameConstants.Region.johto, 31, new RoutePokemon({
    land: ['Pidgey', 'Rattata', 'Caterpie', 'Metapod', 'Weedle', 'Kakuna', 'Zubat', 'Poliwag', 'Hoothoot', 'Ledyba', 'Spinarak', 'Bellsprout'],
    water: ['Poliwag', 'Poliwhirl', 'Magikarp'],
    headbutt: ['Spearow', 'Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Aipom', 'Pineco', 'Heracross'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 30)]));
Routes.add(new RegionRoute('Johto Route 32', GameConstants.Region.johto, 32, new RoutePokemon({
    land: ['Rattata', 'Ekans', 'Zubat', 'Bellsprout', 'Mareep', 'Hoppip', 'Wooper'],
    water: ['Tentacool', 'Tentacruel', 'Quagsire', 'Magikarp', 'Qwilfish'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Pineco'],
}), [new GymBadgeRequirement(BadgeEnums.Zephyr)]));
Routes.add(new RegionRoute('Johto Route 33', GameConstants.Region.johto, 33, new RoutePokemon({
    land: ['Spearow', 'Rattata', 'Ekans', 'Zubat', 'Hoppip'],
    headbutt: ['Spearow', 'Aipom', 'Heracross'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Union Cave'))]));
Routes.add(new RegionRoute('Johto Route 34', GameConstants.Region.johto, 34, new RoutePokemon({
    land: ['Rattata', 'Abra', 'Drowzee', 'Ditto'],
    water: ['Tentacool', 'Tentacruel', 'Krabby', 'Magikarp', 'Staryu', 'Corsola', 'Kingler'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Ilex Forest'))]));
Routes.add(new RegionRoute('Johto Route 35', GameConstants.Region.johto, 35, new RoutePokemon({
    land: ['Pidgey', 'Nidoran(F)', 'Nidoran(M)', 'Abra', 'Drowzee', 'Ditto', 'Hoothoot', 'Yanma'],
    water: ['Psyduck', 'Golduck', 'Poliwag', 'Magikarp'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 34)]));
Routes.add(new RegionRoute('Johto Route 36', GameConstants.Region.johto, 36, new RoutePokemon({
    land: ['Pidgey', 'Nidoran(M)', 'Nidoran(F)', 'Vulpix', 'Growlithe', 'Hoothoot', 'Stantler'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new GymBadgeRequirement(BadgeEnums.Plain)]));
Routes.add(new RegionRoute('Johto Route 37', GameConstants.Region.johto, 37, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Vulpix', 'Growlithe', 'Hoothoot', 'Ledyba', 'Spinarak', 'Stantler'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new TemporaryBattleRequirement('Sudowoodo')]));
Routes.add(new RegionRoute('Johto Route 38', GameConstants.Region.johto, 38, new RoutePokemon({
    land: ['Rattata', 'Raticate', 'Meowth', 'Magnemite', 'Farfetch\'d', 'Tauros', 'Snubbull', 'Miltank'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 37)]));
Routes.add(new RegionRoute('Johto Route 39', GameConstants.Region.johto, 39, new RoutePokemon({
    land: ['Rattata', 'Raticate', 'Meowth', 'Magnemite', 'Farfetch\'d', 'Tauros', 'Miltank'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 38)]));
Routes.add(new RegionRoute('Johto Route 40', GameConstants.Region.johto, 40, new RoutePokemon({
    water: ['Tentacool', 'Tentacruel', 'Krabby', 'Magikarp', 'Staryu', 'Corsola', 'Kingler'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.johto, 39),
    new GymBadgeRequirement(BadgeEnums.Fog),
]));
Routes.add(new RegionRoute('Johto Route 41', GameConstants.Region.johto, 41, new RoutePokemon({
    water: ['Tentacool', 'Tentacruel', 'Mantine', 'Magikarp', 'Chinchou', 'Shellder'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 40)]));
Routes.add(new RegionRoute('Johto Route 42', GameConstants.Region.johto, 42, new RoutePokemon({
    land: ['Spearow', 'Zubat', 'Mankey', 'Mareep', 'Flaaffy'],
    water: ['Goldeen', 'Seaking', 'Magikarp'],
    headbutt: ['Spearow', 'Aipom', 'Heracross'],
}), [new GymBadgeRequirement(BadgeEnums.Fog)]));
Routes.add(new RegionRoute('Johto Route 43', GameConstants.Region.johto, 43, new RoutePokemon({
    land: ['Pidgeotto', 'Venonat', 'Noctowl', 'Mareep', 'Flaaffy', 'Girafarig'],
    water: ['Magikarp', 'Poliwag'],
    headbutt: ['Venonat', 'Exeggcute', 'Hoothoot', 'Pineco'],
}), [
    new OneFromManyRequirement([
        new MultiRequirement([
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Mortar')),
            new GymBadgeRequirement(BadgeEnums.Fog),
        ]),
        new RouteKillRequirement(10, GameConstants.Region.johto, 42),
    ]),
]));
Routes.add(new RegionRoute('Johto Route 44', GameConstants.Region.johto, 44, new RoutePokemon({
    land: ['Bellsprout', 'Weepinbell', 'Lickitung', 'Tangela'],
    water: ['Poliwag', 'Poliwhirl', 'Magikarp', 'Remoraid'],
    headbutt: ['Spearow', 'Aipom', 'Heracross'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Radio Tower'))]));
Routes.add(new RegionRoute('Johto Route 45', GameConstants.Region.johto, 45, new RoutePokemon({
    land: ['Geodude', 'Graveler', 'Gligar', 'Teddiursa', 'Skarmory', 'Phanpy'],
    water: ['Magikarp', 'Poliwag', 'Dratini'],
    headbutt: ['Spearow', 'Aipom', 'Heracross'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Ice Path'))]));
Routes.add(new RegionRoute('Johto Route 46', GameConstants.Region.johto, 46, new RoutePokemon({
    land: ['Spearow', 'Rattata', 'Geodude'],
    headbutt: ['Spearow', 'Aipom', 'Heracross'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 29)], 29.1));
Routes.add(new RegionRoute('Johto Route 47', GameConstants.Region.johto, 47, new RoutePokemon({
    land: ['Raticate', 'Spearow', 'Fearow', 'Gloom', 'Farfetch\'d', 'Ditto', 'Noctowl', 'Miltank'],
    water: ['Tentacool', 'Seel', 'Staryu', 'Magikarp', 'Shellder', 'Chinchou', 'Lanturn'],
    headbutt: ['Metapod', 'Butterfree', 'Kakuna', 'Beedrill', 'Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco', 'Heracross'],
}), [new GymBadgeRequirement(BadgeEnums.Mineral)]));
Routes.add(new RegionRoute('Johto Route 48', GameConstants.Region.johto, 48, new RoutePokemon({
    land: ['Fearow', 'Vulpix', 'Gloom', 'Diglett', 'Growlithe', 'Farfetch\'d', 'Tauros', 'Hoppip', 'Girafarig'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 47)]));
Routes.add(new RegionRoute('Johto Route 26', GameConstants.Region.johto, 26, new RoutePokemon({
    land: ['Raticate', 'Arbok', 'Sandslash', 'Ponyta', 'Doduo', 'Dodrio', 'Quagsire'],
    water: ['Tentacool', 'Tentacruel', 'Magikarp', 'Shellder', 'Chinchou', 'Lanturn'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new RouteKillRequirement(10, GameConstants.Region.johto, 27)], 50));
Routes.add(new RegionRoute('Johto Route 27', GameConstants.Region.johto, 27, new RoutePokemon({
    land: ['Raticate', 'Arbok', 'Sandslash', 'Ponyta', 'Doduo', 'Dodrio', 'Quagsire'],
    water: ['Tentacool', 'Tentacruel', 'Magikarp', 'Shellder', 'Chinchou', 'Lanturn'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Tohjo Falls'))], 49));
Routes.add(new RegionRoute('Johto Route 28', GameConstants.Region.johto, 28, new RoutePokemon({
    land: ['Ponyta', 'Tangela', 'Donphan', 'Ursaring', 'Rapidash', 'Doduo', 'Dodrio', 'Sneasel', 'Murkrow'],
    water: ['Poliwag', 'Poliwhirl', 'Magikarp'],
    headbutt: ['Natu', 'Aipom', 'Heracross'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion)], 51));
/*
HOENN
*/
Routes.add(new RegionRoute('Hoenn Route 101', GameConstants.Region.hoenn, 101, new RoutePokemon({
    land: ['Wurmple', 'Poochyena', 'Zigzagoon'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion)]));
Routes.add(new RegionRoute('Hoenn Route 102', GameConstants.Region.hoenn, 102, new RoutePokemon({
    land: ['Surskit', 'Poochyena', 'Wurmple', 'Lotad', 'Zigzagoon', 'Ralts', 'Seedot'],
    water: ['Marill', 'Goldeen', 'Magikarp', 'Corphish'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 101)]));
Routes.add(new RegionRoute('Hoenn Route 103', GameConstants.Region.hoenn, 103, new RoutePokemon({
    land: ['Poochyena', 'Wingull', 'Zigzagoon'],
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 101)], 101.1));
Routes.add(new RegionRoute('Hoenn Route 104', GameConstants.Region.hoenn, 104, new RoutePokemon({
    land: ['Poochyena', 'Wurmple', 'Marill', 'Taillow', 'Wingull'],
    water: ['Wingull', 'Pelipper', 'Magikarp'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 102)]));
Routes.add(new RegionRoute('Hoenn Route 105', GameConstants.Region.hoenn, 105, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [new GymBadgeRequirement(BadgeEnums.Balance)], 115.1));
Routes.add(new RegionRoute('Hoenn Route 106', GameConstants.Region.hoenn, 106, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 105),
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 107),
    ]),
], 115.2));
Routes.add(new RegionRoute('Hoenn Route 107', GameConstants.Region.hoenn, 107, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 106),
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 108),
    ]),
], 115.3));
Routes.add(new RegionRoute('Hoenn Route 108', GameConstants.Region.hoenn, 108, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 107),
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 109),
    ]),
], 115.4));
Routes.add(new RegionRoute('Hoenn Route 109', GameConstants.Region.hoenn, 109, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [new GymBadgeRequirement(BadgeEnums.Balance)], 115.5));
Routes.add(new RegionRoute('Hoenn Route 110', GameConstants.Region.hoenn, 110, new RoutePokemon({
    land: ['Poochyena', 'Gulpin', 'Minun', 'Oddish', 'Wingull', 'Plusle'],
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Granite Cave'))]));
Routes.add(new RegionRoute('Hoenn Route 111', GameConstants.Region.hoenn, 111, new RoutePokemon({
    land: ['Sandshrew', 'Trapinch', 'Baltoy', 'Cacnea'],
    water: ['Marill', 'Goldeen', 'Magikarp', 'Barboach'],
    headbutt: ['Geodude'],
}), [new GymBadgeRequirement(BadgeEnums.Dynamo)]));
Routes.add(new RegionRoute('Hoenn Route 112', GameConstants.Region.hoenn, 112, new RoutePokemon({
    land: ['Numel', 'Marill'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 111)]));
Routes.add(new RegionRoute('Hoenn Route 113', GameConstants.Region.hoenn, 113, new RoutePokemon({
    land: ['Spinda', 'Slugma', 'Skarmory'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Fiery Path'))]));
Routes.add(new RegionRoute('Hoenn Route 114', GameConstants.Region.hoenn, 114, new RoutePokemon({
    land: ['Zangoose', 'Surskit', 'Swablu', 'Lotad', 'Lombre', 'Seviper', 'Nuzleaf'],
    water: ['Marill', 'Goldeen', 'Magikarp', 'Barboach'],
    headbutt: ['Geodude'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 113)]));
Routes.add(new RegionRoute('Hoenn Route 115', GameConstants.Region.hoenn, 115, new RoutePokemon({
    land: ['Swablu', 'Taillow', 'Swellow', 'Jigglypuff', 'Wingull'],
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Meteor Falls'))]));
Routes.add(new RegionRoute('Hoenn Route 116', GameConstants.Region.hoenn, 116, new RoutePokemon({
    land: ['Poochyena', 'Whismur', 'Nincada', 'Abra', 'Taillow', 'Skitty'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Petalburg Woods'))], 104.1));
Routes.add(new RegionRoute('Hoenn Route 117', GameConstants.Region.hoenn, 117, new RoutePokemon({
    land: ['Surskit', 'Poochyena', 'Oddish', 'Marill', 'Illumise', 'Volbeat', 'Seedot'],
    water: ['Marill', 'Goldeen', 'Magikarp', 'Corphish'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 110)], 110.1));
Routes.add(new RegionRoute('Hoenn Route 118', GameConstants.Region.hoenn, 118, new RoutePokemon({
    land: ['Zigzagoon', 'Linoone', 'Wingull', 'Kecleon'],
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Carvanha', 'Sharpedo'],
}), [new GymBadgeRequirement(BadgeEnums.Balance)]));
Routes.add(new RegionRoute('Hoenn Route 119', GameConstants.Region.hoenn, 119, new RoutePokemon({
    land: ['Zigzagoon', 'Linoone', 'Oddish', 'Tropius', 'Kecleon'],
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Carvanha'],
    special: [
        new SpecialRoutePokemon(['Castform (Sunny)'], new MultiRequirement([
            new ObtainedPokemonRequirement(pokemonMap.Castform),
            new WeatherRequirement([WeatherType.Sunny]),
        ])),
        new SpecialRoutePokemon(['Castform (Rainy)'], new MultiRequirement([
            new ObtainedPokemonRequirement(pokemonMap.Castform),
            new WeatherRequirement([WeatherType.Rain, WeatherType.Thunderstorm]),
        ])),
        new SpecialRoutePokemon(['Castform (Snowy)'], new MultiRequirement([
            new ObtainedPokemonRequirement(pokemonMap.Castform),
            new WeatherRequirement([WeatherType.Snow, WeatherType.Blizzard, WeatherType.Hail, WeatherType.Fog]),
        ])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 118)]));
Routes.add(new RegionRoute('Hoenn Route 120', GameConstants.Region.hoenn, 120, new RoutePokemon({
    land: ['Surskit', 'Poochyena', 'Mightyena', 'Oddish', 'Marill', 'Absol', 'Kecleon', 'Seedot'],
    water: ['Marill', 'Goldeen', 'Magikarp', 'Barboach'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 119),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Weather Institute')),
]));
Routes.add(new RegionRoute('Hoenn Route 121', GameConstants.Region.hoenn, 121, new RoutePokemon({
    land: ['Poochyena', 'Shuppet', 'Mightyena', 'Oddish', 'Gloom', 'Wingull', 'Kecleon'],
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 120)]));
Routes.add(new RegionRoute('Hoenn Route 122', GameConstants.Region.hoenn, 122, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 121)]));
Routes.add(new RegionRoute('Hoenn Route 123', GameConstants.Region.hoenn, 123, new RoutePokemon({
    land: ['Poochyena', 'Shuppet', 'Mightyena', 'Oddish', 'Gloom', 'Wingull', 'Kecleon'],
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 122)]));
Routes.add(new RegionRoute('Hoenn Route 124', GameConstants.Region.hoenn, 124, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo', 'Clamperl', 'Relicanth'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Aqua Hideout'))]));
Routes.add(new RegionRoute('Hoenn Route 125', GameConstants.Region.hoenn, 125, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 124)]));
Routes.add(new RegionRoute('Hoenn Route 126', GameConstants.Region.hoenn, 126, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo', 'Clamperl', 'Relicanth'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 124)]));
Routes.add(new RegionRoute('Hoenn Route 127', GameConstants.Region.hoenn, 127, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 125),
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 126),
    ]),
]));
Routes.add(new RegionRoute('Hoenn Route 128', GameConstants.Region.hoenn, 128, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Luvdisc', 'Wailmer', 'Corsola'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 127)]));
Routes.add(new RegionRoute('Hoenn Route 129', GameConstants.Region.hoenn, 129, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Wailord', 'Magikarp', 'Wailmer', 'Sharpedo'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 128)]));
Routes.add(new RegionRoute('Hoenn Route 130', GameConstants.Region.hoenn, 130, new RoutePokemon({
    land: ['Wynaut'],
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 129)]));
Routes.add(new RegionRoute('Hoenn Route 131', GameConstants.Region.hoenn, 131, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 130)]));
Routes.add(new RegionRoute('Hoenn Route 132', GameConstants.Region.hoenn, 132, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo', 'Horsea'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 131)]));
Routes.add(new RegionRoute('Hoenn Route 133', GameConstants.Region.hoenn, 133, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo', 'Horsea'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 132)]));
Routes.add(new RegionRoute('Hoenn Route 134', GameConstants.Region.hoenn, 134, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo', 'Horsea'],
}), [new RouteKillRequirement(10, GameConstants.Region.hoenn, 133)]));
/*
SINNOH
*/
Routes.add(new RegionRoute('Sinnoh Route 201', GameConstants.Region.sinnoh, 201, new RoutePokemon({
    land: ['Starly', 'Bidoof', 'Kricketot'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)]));
Routes.add(new RegionRoute('Sinnoh Route 202', GameConstants.Region.sinnoh, 202, new RoutePokemon({
    land: ['Starly', 'Bidoof', 'Kricketot', 'Shinx'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 201)]));
Routes.add(new RegionRoute('Sinnoh Route 203', GameConstants.Region.sinnoh, 203, new RoutePokemon({
    land: ['Zubat', 'Abra', 'Starly', 'Bidoof', 'Kricketot', 'Shinx'],
    water: ['Psyduck', 'Golduck', 'Magikarp', 'Goldeen', 'Seaking', 'Gyarados'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 202)]));
Routes.add(new RegionRoute('Sinnoh Route 204', GameConstants.Region.sinnoh, 204, new RoutePokemon({
    land: ['Zubat', 'Wurmple', 'Starly', 'Bidoof', 'Kricketot', 'Shinx', 'Budew'],
    water: ['Psyduck', 'Golduck', 'Magikarp', 'Goldeen', 'Seaking', 'Gyarados'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 202)]));
Routes.add(new RegionRoute('Sinnoh Route 205', GameConstants.Region.sinnoh, 205, new RoutePokemon({
    land: ['Hoothoot', 'Wurmple', 'Silcoon', 'Beautifly', 'Cascoon', 'Dustox', 'Bidoof', 'Kricketot', 'Budew', 'Buizel', 'Shellos (West)'],
    water: ['Psyduck', 'Golduck', 'Tentacool', 'Tentacruel', 'Shellder', 'Magikarp', 'Gyarados', 'Shellos (West)', 'Gastrodon (West)', 'Finneon', 'Lumineon', 'Barboach', 'Whiscash'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Valley Windworks'))]));
Routes.add(new RegionRoute('Sinnoh Route 206', GameConstants.Region.sinnoh, 206, new RoutePokemon({
    land: ['Zubat', 'Machop', 'Geodude', 'Ponyta', 'Gligar', 'Kricketune', 'Stunky'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Galactic Eterna Building'))]));
Routes.add(new RegionRoute('Sinnoh Route 207', GameConstants.Region.sinnoh, 207, new RoutePokemon({
    land: ['Zubat', 'Machop', 'Geodude', 'Ponyta', 'Kricketot'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 206)]));
Routes.add(new RegionRoute('Sinnoh Route 208', GameConstants.Region.sinnoh, 208, new RoutePokemon({
    land: ['Zubat', 'Ralts', 'Roselia', 'Bidoof', 'Bibarel', 'Budew'],
    water: ['Psyduck', 'Golduck', 'Goldeen', 'Seaking', 'Magikarp', 'Gyarados', 'Barboach', 'Whiscash'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Coronet South'))]));
Routes.add(new RegionRoute('Sinnoh Route 209', GameConstants.Region.sinnoh, 209, new RoutePokemon({
    land: ['Zubat', 'Chansey', 'Ralts', 'Roselia', 'Duskull', 'Staravia', 'Bibarel'],
    water: ['Psyduck', 'Golduck', 'Goldeen', 'Seaking', 'Magikarp', 'Gyarados'],
}), [new GymBadgeRequirement(BadgeEnums.Relic)]));
Routes.add(new RegionRoute('Sinnoh Route 210', GameConstants.Region.sinnoh, 210, new RoutePokemon({
    land: ['Psyduck', 'Machop', 'Machoke', 'Geodude', 'Ponyta', 'Chansey', 'Scyther', 'Hoothoot', 'Noctowl', 'Roselia', 'Meditite', 'Swablu', 'Bibarel', 'Staravia'],
    water: ['Psyduck', 'Golduck', 'Magikarp', 'Gyarados', 'Barboach', 'Whiscash'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 209)]));
Routes.add(new RegionRoute('Sinnoh Route 215', GameConstants.Region.sinnoh, 215, new RoutePokemon({
    land: ['Abra', 'Kadabra', 'Lickitung', 'Scyther', 'Marill', 'Staravia'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 210)], 210.1));
Routes.add(new RegionRoute('Sinnoh Route 214', GameConstants.Region.sinnoh, 214, new RoutePokemon({
    land: ['Zubat', 'Geodude', 'Graveler', 'Rhyhorn', 'Houndour', 'Stunky'],
    water: ['Psyduck', 'Golduck', 'Goldeen', 'Seaking', 'Magikarp', 'Gyarados'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 215)], 210.2));
Routes.add(new RegionRoute('Sinnoh Route 213', GameConstants.Region.sinnoh, 213, new RoutePokemon({
    land: ['Wingull', 'Buizel', 'Shellos (East)', 'Chatot'],
    water: ['Tentacool', 'Tentacruel', 'Magikarp', 'Gyarados', 'Remoraid', 'Octillery', 'Wingull', 'Shellos (East)', 'Gastrodon (East)'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 214)], 210.3));
Routes.add(new RegionRoute('Sinnoh Route 212', GameConstants.Region.sinnoh, 212, new RoutePokemon({
    land: ['Marill', 'Quagsire', 'Ralts', 'Kirlia', 'Roselia', 'Staravia', 'Buizel', 'Shellos (East)', 'Croagunk'],
    water: ['Psyduck', 'Golduck', 'Goldeen', 'Seaking', 'Magikarp', 'Gyarados', 'Remoraid', 'Octillery', 'Shellos (East)', 'Gastrodon (East)'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 213)], 210.4));
Routes.add(new RegionRoute('Sinnoh Route 211', GameConstants.Region.sinnoh, 211, new RoutePokemon({
    land: ['Zubat', 'Machop', 'Machoke', 'Graveler', 'Hoothoot', 'Noctowl', 'Meditite', 'Bidoof', 'Chingling', 'Bronzor'],
}), [new GymBadgeRequirement(BadgeEnums.Fen)], 210.5));
Routes.add(new RegionRoute('Sinnoh Route 218', GameConstants.Region.sinnoh, 218, new RoutePokemon({
    land: ['Mr. Mime', 'Floatzel', 'Gastrodon (West)', 'Glameow', 'Chatot'],
    water: ['Tentacool', 'Tentacruel', 'Magikarp', 'Gyarados', 'Shellos (West)', 'Gastrodon (West)', 'Finneon', 'Lumineon'],
}), [new TemporaryBattleRequirement('Galactic Boss Cyrus')], 210.6));
Routes.add(new RegionRoute('Sinnoh Route 216', GameConstants.Region.sinnoh, 216, new RoutePokemon({
    land: ['Zubat', 'Graveler', 'Sneasel', 'Meditite', 'Snorunt', 'Snover'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Coronet North'))]));
Routes.add(new RegionRoute('Sinnoh Route 217', GameConstants.Region.sinnoh, 217, new RoutePokemon({
    land: ['Sneasel', 'Swinub', 'Snorunt', 'Snover'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 216)]));
Routes.add(new RegionRoute('Sinnoh Route 219', GameConstants.Region.sinnoh, 219, new RoutePokemon({
    water: ['Tentacool', 'Tentacruel', 'Magikarp', 'Gyarados', 'Wingull', 'Pelipper', 'Clamperl', 'Finneon', 'Lumineon'],
}), [new TemporaryBattleRequirement('Galactic Boss Cyrus')]));
Routes.add(new RegionRoute('Sinnoh Route 220', GameConstants.Region.sinnoh, 220, new RoutePokemon({
    water: ['Tentacool', 'Tentacruel', 'Magikarp', 'Gyarados', 'Chinchou', 'Wingull', 'Pelipper', 'Finneon', 'Lumineon'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 219)]));
Routes.add(new RegionRoute('Sinnoh Route 221', GameConstants.Region.sinnoh, 221, new RoutePokemon({
    land: ['Sudowoodo', 'Girafarig', 'Roselia', 'Floatzel', 'Shellos (West)', 'Gastrodon (West)', 'Stunky', 'Skuntank'],
    water: ['Tentacool', 'Tentacruel', 'Magikarp', 'Gyarados', 'Pelipper', 'Clamperl', 'Finneon', 'Lumineon'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 220)]));
Routes.add(new RegionRoute('Sinnoh Route 222', GameConstants.Region.sinnoh, 222, new RoutePokemon({
    land: ['Magnemite', 'Magneton', 'Electabuzz', 'Wingull', 'Pelipper', 'Luxio', 'Floatzel', 'Gastrodon (East)', 'Glameow', 'Purugly', 'Chatot'],
    water: ['Tentacool', 'Tentacruel', 'Magikarp', 'Gyarados', 'Remoraid', 'Octillery', 'Wingull', 'Pelipper', 'Sharpedo'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Distortion World'))]));
Routes.add(new RegionRoute('Sinnoh Route 223', GameConstants.Region.sinnoh, 223, new RoutePokemon({
    water: ['Tentacruel', 'Magikarp', 'Gyarados', 'Remoraid', 'Octillery', 'Pelipper', 'Wailmer', 'Wailord', 'Mantyke'],
}), [new GymBadgeRequirement(BadgeEnums.Beacon)]));
Routes.add(new RegionRoute('Sinnoh Route 224', GameConstants.Region.sinnoh, 224, new RoutePokemon({
    land: ['Oddish', 'Gloom', 'Bellsprout', 'Weepinbell', 'Beautifly', 'Dustox', 'Roselia', 'Floatzel', 'Gastrodon (East)', 'Chatot'],
    water: ['Tentacruel', 'Magikarp', 'Gyarados', 'Remoraid', 'Octillery', 'Pelipper', 'Luvdisc', 'Gastrodon (East)'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)]));
Routes.add(new RegionRoute('Sinnoh Route 225', GameConstants.Region.sinnoh, 225, new RoutePokemon({
    land: ['Rattata', 'Raticate', 'Spearow', 'Fearow', 'Machoke', 'Graveler', 'Skuntank', 'Banette'],
    water: ['Psyduck', 'Golduck', 'Magikarp', 'Gyarados', 'Barboach', 'Whiscash'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)]));
Routes.add(new RegionRoute('Sinnoh Route 226', GameConstants.Region.sinnoh, 226, new RoutePokemon({
    land: ['Rattata', 'Raticate', 'Fearow', 'Machoke', 'Graveler', 'Wingull', 'Banette'],
    water: ['Tentacruel', 'Horsea', 'Seadra', 'Magikarp', 'Gyarados', 'Wingull', 'Pelipper', 'Relicanth'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 225)]));
Routes.add(new RegionRoute('Sinnoh Route 227', GameConstants.Region.sinnoh, 227, new RoutePokemon({
    land: ['Fearow', 'Golbat', 'Graveler', 'Weezing', 'Rhyhorn', 'Rhydon', 'Skarmory', 'Numel', 'Camerupt'],
    water: ['Poliwag', 'Poliwhirl', 'Magikarp', 'Gyarados', 'Barboach', 'Whiscash'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 226)]));
Routes.add(new RegionRoute('Sinnoh Route 228', GameConstants.Region.sinnoh, 228, new RoutePokemon({
    land: ['Diglett', 'Dugtrio', 'Rhydon', 'Cacnea', 'Cacturne', 'Hippowdon'],
    water: ['Poliwag', 'Poliwhirl', 'Magikarp', 'Gyarados', 'Barboach', 'Whiscash'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 226)]));
Routes.add(new RegionRoute('Sinnoh Route 229', GameConstants.Region.sinnoh, 229, new RoutePokemon({
    land: ['Pidgey', 'Ledian', 'Ariados', 'Beautifly', 'Dustox', 'Volbeat', 'Illumise', 'Roselia', 'Purugly'],
    water: ['Surskit', 'Masquerain', 'Goldeen', 'Seaking', 'Magikarp', 'Gyarados'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 228)]));
Routes.add(new RegionRoute('Sinnoh Route 230', GameConstants.Region.sinnoh, 230, new RoutePokemon({
    land: ['Oddish', 'Gloom', 'Bellsprout', 'Weepinbell', 'Wingull', 'Pelipper', 'Roselia', 'Floatzel'],
    water: ['Tentacruel', 'Magikarp', 'Gyarados', 'Remoraid', 'Octillery', 'Wingull', 'Pelipper', 'Wailmer', 'Wailord', 'Sealeo'],
}), [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 229)]));
/*
UNOVA
*/
Routes.add(new RegionRoute('Unova Route 19', GameConstants.Region.unova, 19, new RoutePokemon({
    land: ['Patrat', 'Purrloin'],
    water: ['Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)], 0.1));
Routes.add(new RegionRoute('Unova Route 20', GameConstants.Region.unova, 20, new RoutePokemon({
    land: ['Sunkern', 'Pidove', 'Venipede', 'Patrat', 'Purrloin', 'Sewaddle'],
    water: ['Azurill', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 19)], 0.2));
Routes.add(new RegionRoute('Unova Route 4', GameConstants.Region.unova, 4, new RoutePokemon({
    land: ['Sandile', 'Darumaka', 'Trubbish', 'Minccino', 'Scraggy'],
    water: ['Frillish'],
}), [
    new GymBadgeRequirement(BadgeEnums.Toxic),
    new TemporaryBattleRequirement('Team Plasma Grunt 1'),
    new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 1),
]));
Routes.add(new RegionRoute('Desert Resort', GameConstants.Region.unova, 25, new RoutePokemon({
    land: ['Sandshrew', 'Trapinch', 'Maractus', 'Darumaka', 'Dwebble', 'Scraggy', 'Sigilyph', 'Sandile'],
    water: [],
}), [
    new RouteKillRequirement(10, GameConstants.Region.unova, 4),
    new GymBadgeRequirement(BadgeEnums.Insect),
    new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 2),
], 4));
Routes.add(new RegionRoute('Unova Route 5', GameConstants.Region.unova, 5, new RoutePokemon({
    land: ['Gothita', 'Minccino', 'Trubbish', 'Liepard', 'Solosis'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.unova, 4),
    new GymBadgeRequirement(BadgeEnums.Insect),
    new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 2),
]));
Routes.add(new RegionRoute('Unova Route 16', GameConstants.Region.unova, 16, new RoutePokemon({
    land: ['Gothita', 'Minccino', 'Trubbish', 'Liepard', 'Solosis'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.unova, 4),
    new GymBadgeRequirement(BadgeEnums.Insect),
    new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 2),
], 5));
Routes.add(new RegionRoute('Unova Route 6', GameConstants.Region.unova, 6, new RoutePokemon({
    land: ['Marill', 'Deerling (Spring)', 'Deerling (Autumn)', 'Karrablast', 'Tranquill', 'Foongus', 'Swadloon', 'Vanillite', 'Shelmet'],
    water: ['Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.unova, 5),
    new GymBadgeRequirement(BadgeEnums.Bolt),
    new TemporaryBattleRequirement('Team Plasma Grunt 2'),
    new TemporaryBattleRequirement('Team Plasma Grunt 3'),
    new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 4),
]));
Routes.add(new RegionRoute('Unova Route 7', GameConstants.Region.unova, 7, new RoutePokemon({
    land: ['Zangoose', 'Seviper', 'Cubchoo', 'Deerling (Summer)', 'Deerling (Winter)', 'Watchog', 'Tranquill', 'Foongus'],
}), [
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Chargestone Cave')),
    new GymBadgeRequirement(BadgeEnums.Quake),
    new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 7),
]));
Routes.add(new RegionRoute('Unova Route 13', GameConstants.Region.unova, 13, new RoutePokemon({
    land: ['Tangela', 'Pelipper', 'Drifblim', 'Absol', 'Lunatone', 'Solrock'],
    water: ['Staryu', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)', 'Frillish'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Reversal Mountain'))]));
Routes.add(new RegionRoute('Undella Bay', GameConstants.Region.unova, 24, new RoutePokemon({
    land: [],
    water: ['Frillish', 'Mantyke', 'Spheal', 'Remoraid', 'Jellicent', 'Wailmer', 'Chinchou', 'Ducklett'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Reversal Mountain'))], 13));
Routes.add(new RegionRoute('Unova Route 14', GameConstants.Region.unova, 14, new RoutePokemon({
    land: ['Golduck', 'Swablu', 'Mienfoo', 'Drifblim', 'Absol', 'Altaria'],
    water: ['Buizel', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Reversal Mountain'))], 13));
Routes.add(new RegionRoute('Unova Route 12', GameConstants.Region.unova, 12, new RoutePokemon({
    land: ['Pinsir', 'Heracross', 'Roselia', 'Combee', 'Tranquill', 'Sewaddle'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.unova, 13),
    new TemporaryBattleRequirement('Zinzolin 1'),
    new QuestLineStepCompletedRequirement('Quest for the DNA Splicers', 10),
], 13.1));
Routes.add(new RegionRoute('Unova Route 11', GameConstants.Region.unova, 11, new RoutePokemon({
    land: ['Golduck', 'Marill', 'Gligar', 'Zangoose', 'Seviper', 'Karrablast', 'Amoonguss', 'Shelmet'],
    water: ['Buizel', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 12)], 13.2));
Routes.add(new RegionRoute('Unova Route 9', GameConstants.Region.unova, 9, new RoutePokemon({
    land: ['Muk', 'Liepard', 'Garbodor', 'Minccino', 'Gothorita', 'Duosion', 'Pawniard'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 11)], 13.3));
Routes.add(new RegionRoute('Unova Route 21', GameConstants.Region.unova, 21, new RoutePokemon({
    water: ['Mantyke', 'Remoraid', 'Spheal', 'Luvdisc'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Seaside Cave'))]));
Routes.add(new RegionRoute('Unova Route 22', GameConstants.Region.unova, 22, new RoutePokemon({
    land: ['Golduck', 'Marill', 'Delibird', 'Pelipper', 'Lunatone', 'Solrock', 'Amoonguss', 'Mienfoo'],
    water: ['Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 21)]));
Routes.add(new RegionRoute('Unova Route 23', GameConstants.Region.unova, 23, new RoutePokemon({
    land: ['Golduck', 'Gligar', 'Amoonguss', 'Mienfoo', 'Bouffalant', 'Rufflet', 'Vullaby'],
    water: ['Buizel', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Giant Chasm')),
    new TemporaryBattleRequirement('Ghetsis 2'),
    new QuestLineCompletedRequirement('Quest for the DNA Splicers'),
]));
Routes.add(new RegionRoute('Unova Route 8', GameConstants.Region.unova, 8, new RoutePokemon({
    land: ['Croagunk', 'Tympole', 'Palpitoad', 'Karrablast', 'Shelmet', 'Stunfisk'],
}), [
    new OneFromManyRequirement([
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Twist Mountain')),
        new MultiRequirement([
            new RouteKillRequirement(10, GameConstants.Region.unova, 9),
            new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion),
        ]),
    ]),
], 23.1));
Routes.add(new RegionRoute('Unova Route 15', GameConstants.Region.unova, 15, new RoutePokemon({
    land: ['Sandslash', 'Gligar', 'Pupitar'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.unova, 14),
        new RouteKillRequirement(10, GameConstants.Region.unova, 16),
    ]),
    new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion),
], 23.1));
Routes.add(new RegionRoute('Unova Route 3', GameConstants.Region.unova, 3, new RoutePokemon({
    land: ['Yanma', 'Watchog', 'Herdier', 'Purrloin', 'Tranquill'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pinwheel Forest'))], 23.1));
Routes.add(new RegionRoute('Unova Route 2', GameConstants.Region.unova, 2, new RoutePokemon({
    land: ['Jigglypuff', 'Lickitung', 'Watchog', 'Herdier', 'Liepard'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 3)], 23.2));
Routes.add(new RegionRoute('Unova Route 1', GameConstants.Region.unova, 1, new RoutePokemon({
    land: ['Jigglypuff', 'Watchog', 'Herdier', 'Scrafty'],
    water: ['Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 2)], 23.3));
Routes.add(new RegionRoute('Unova Route 17', GameConstants.Region.unova, 17, new RoutePokemon({
    land: ['Frillish', 'Alomomola'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 1)], 23.4));
Routes.add(new RegionRoute('Unova Route 18', GameConstants.Region.unova, 18, new RoutePokemon({
    land: ['Tropius', 'Carnivine', 'Watchog', 'Crustle', 'Scrafty'],
    water: ['Frillish', 'Alomomola'],
}), [new RouteKillRequirement(10, GameConstants.Region.unova, 17)], 23.5));
/*
KALOS
*/
Routes.add(new RegionRoute('Kalos Route 1', GameConstants.Region.kalos, 1, new RoutePokemon({
    land: ['Bunnelby', 'Fletchling'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion)]));
Routes.add(new RegionRoute('Kalos Route 2', GameConstants.Region.kalos, 2, new RoutePokemon({
    land: ['Caterpie', 'Weedle', 'Pidgey', 'Zigzagoon', 'Fletchling', 'Bunnelby', 'Scatterbug'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 1)]));
Routes.add(new RegionRoute('Kalos Route 3', GameConstants.Region.kalos, 3, new RoutePokemon({
    land: ['Pidgey', 'Pikachu', 'Dunsparce', 'Azurill', 'Bidoof', 'Burmy (Plant)', 'Bunnelby', 'Fletchling', 'Dunsparce'],
    water: ['Magikarp', 'Goldeen', 'Marill', 'Masquerain'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Santalune Forest'))]));
Routes.add(new RegionRoute('Kalos Route 22', GameConstants.Region.kalos, 22, new RoutePokemon({
    land: ['Psyduck', 'Farfetch\'d', 'Azumarill', 'Dunsparce', 'Azurill', 'Bidoof', 'Bibarel', 'Riolu', 'Bunnelby', 'Diggersby', 'Litleo'],
    water: ['Magikarp', 'Goldeen', 'Azumarill', 'Carvanha'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 3)], 3.1));
Routes.add(new RegionRoute('Kalos Route 4', GameConstants.Region.kalos, 4, new RoutePokemon({
    land: ['Ledyba', 'Ralts', 'Skitty', 'Budew', 'Combee', 'Flabébé (Red)', 'Flabébé (Orange)', 'Flabébé (White)'],
}), [new GymBadgeRequirement(BadgeEnums.Bug)]));
Routes.add(new RegionRoute('Kalos Route 5', GameConstants.Region.kalos, 5, new RoutePokemon({
    land: ['Abra', 'Doduo', 'Plusle', 'Minun', 'Gulpin', 'Bunnelby', 'Skiddo', 'Pancham', 'Furfrou'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 4)]));
Routes.add(new RegionRoute('Kalos Route 6', GameConstants.Region.kalos, 6, new RoutePokemon({
    land: ['Oddish', 'Sentret', 'Nincada', 'Kecleon', 'Espurr', 'Honedge'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 5)]));
Routes.add(new RegionRoute('Kalos Route 7', GameConstants.Region.kalos, 7, new RoutePokemon({
    land: ['Smeargle', 'Volbeat', 'Illumise', 'Roselia', 'Croagunk', 'Ducklett', 'Flabébé (Orange)', 'Flabébé (White)', 'Spritzee', 'Swirlix'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 6)]));
Routes.add(new RegionRoute('Kalos Route 8', GameConstants.Region.kalos, 8, new RoutePokemon({
    land: ['Spoink', 'Zangoose', 'Seviper', 'Absol', 'Bagon', 'Drifloon', 'Mienfoo', 'Inkay'],
    water: ['Tentacool', 'Shellder', 'Staryu', 'Wailmer', 'Luvdisc', 'Skrelp', 'Clauncher'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Connecting Cave'))]));
Routes.add(new RegionRoute('Kalos Route 9', GameConstants.Region.kalos, 9, new RoutePokemon({
    land: ['Hippopotas', 'Sandile', 'Helioptile'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 8)]));
Routes.add(new RegionRoute('Kalos Route 10', GameConstants.Region.kalos, 10, new RoutePokemon({
    land: ['Eevee', 'Snubbull', 'Houndour', 'Electrike', 'Sigilyph', 'Emolga', 'Golett', 'Hawlucha'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Glittering Cave'))]));
Routes.add(new RegionRoute('Kalos Route 11', GameConstants.Region.kalos, 11, new RoutePokemon({
    land: ['Nidorina', 'Nidorino', 'Hariyama', 'Staravia', 'Chingling', 'Stunky', 'Throh', 'Sawk', 'Dedenne'],
}), [
    new GymBadgeRequirement(BadgeEnums.Cliff),
    new RouteKillRequirement(10, GameConstants.Region.kalos, 10),
]));
Routes.add(new RegionRoute('Kalos Route 12', GameConstants.Region.kalos, 12, new RoutePokemon({
    land: ['Slowpoke', 'Exeggcute', 'Pinsir', 'Tauros', 'Heracross', 'Miltank', 'Pachirisu', 'Chatot'],
    water: ['Tentacool', 'Lapras', 'Remoraid', 'Clamperl', 'Mantyke'],
}), [new GymBadgeRequirement(BadgeEnums.Rumble)]
// Replace req with Tower of Mastery dungeon if implemented.
));
Routes.add(new RegionRoute('Kalos Route 13', GameConstants.Region.kalos, 13, new RoutePokemon({
    land: ['Dugtrio', 'Trapinch', 'Gible'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 12)]));
Routes.add(new RegionRoute('Kalos Route 14', GameConstants.Region.kalos, 14, new RoutePokemon({
    land: ['Weepinbell', 'Haunter', 'Quagsire', 'Skorupi', 'Carnivine', 'Karrablast', 'Shelmet', 'Goomy'],
    water: ['Poliwag', 'Poliwhirl', 'Barboach', 'Stunfisk'],
}), [new GymBadgeRequirement(BadgeEnums.Voltage)]));
Routes.add(new RegionRoute('Kalos Route 15', GameConstants.Region.kalos, 15, new RoutePokemon({
    land: ['Mightyena', 'Skorupi', 'Watchog', 'Liepard', 'Foongus', 'Pawniard', 'Klefki'],
    water: ['Poliwag', 'Poliwhirl', 'Lombre', 'Floatzel', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Poké Ball Factory'))]
// Replace req with Poké Ball Factory dungeon if implemented.
));
Routes.add(new RegionRoute('Kalos Route 16', GameConstants.Region.kalos, 16, new RoutePokemon({
    land: ['Weepinbell', 'Floatzel', 'Skorupi', 'Foongus', 'Klefki', 'Phantump', 'Pumpkaboo (Average)', 'Pumpkaboo (Small)', 'Pumpkaboo (Large)', 'Pumpkaboo (Super Size)'],
    water: ['Poliwag', 'Poliwhirl', 'Lombre', 'Floatzel', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 15)]));
Routes.add(new RegionRoute('Kalos Route 17', GameConstants.Region.kalos, 17, new RoutePokemon({
    land: ['Sneasel', 'Delibird', 'Snover', 'Abomasnow'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Frost Cavern'))]));
Routes.add(new RegionRoute('Kalos Route 18', GameConstants.Region.kalos, 18, new RoutePokemon({
    land: ['Sandslash', 'Graveler', 'Pupitar', 'Lairon', 'Torkoal', 'Gurdurr', 'Heatmor', 'Durant'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Flare Secret HQ'))]));
Routes.add(new RegionRoute('Kalos Route 19', GameConstants.Region.kalos, 19, new RoutePokemon({
    land: ['Weepinbell', 'Haunter', 'Quagsire', 'Drapion', 'Carnivine', 'Karrablast', 'Shelmet', 'Sliggoo'],
    water: ['Poliwag', 'Poliwhirl', 'Barboach', 'Stunfisk', 'Politoed'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 18)]));
Routes.add(new RegionRoute('Kalos Route 20', GameConstants.Region.kalos, 20, new RoutePokemon({
    land: ['Jigglypuff', 'Noctowl', 'Zoroark', 'Gothorita', 'Amoonguss', 'Trevenant'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 19)]));
Routes.add(new RegionRoute('Kalos Route 21', GameConstants.Region.kalos, 21, new RoutePokemon({
    land: ['Scyther', 'Ursaring', 'Spinda', 'Altaria', 'Floatzel'],
    water: ['Poliwag', 'Poliwhirl', 'Lombre', 'Floatzel', 'Basculin (Red-Striped)', 'Dratini'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 19)]));
Routes.add(new RegionRoute('Azure Bay', GameConstants.Region.kalos, 23, new RoutePokemon({
    land: ['Slowpoke', 'Exeggcute', 'Chatot', 'Inkay'],
    water: ['Tentacool', 'Lapras', 'Chinchou', 'Remoraid', 'Luvdisc', 'Mantyke'],
}), [new RouteKillRequirement(10, GameConstants.Region.kalos, 12)], 12));
// From here down :
// - No named routes
// - Missing numbered route
// - No requirements
/*
ALOLA
*/
Routes.add(new RegionRoute('Alola Route 1', GameConstants.Region.alola, 1, new RoutePokemon({
    land: ['Caterpie', 'Alolan Rattata', 'Ledyba', 'Spinarak', 'Pichu', 'Buneary', 'Pikipek', 'Yungoos', 'Grubbin'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion)], undefined, GameConstants.AlolaSubRegions.MelemeleIsland));
Routes.add(new RegionRoute('Route 1 Hau\'oli Outskirts', GameConstants.Region.alola, 18, new RoutePokemon({
    land: ['Slowpoke', 'Wingull', 'Inkay'],
    water: ['Tentacool', 'Mantyke', 'Finneon'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 1)], 1.1, GameConstants.AlolaSubRegions.MelemeleIsland));
Routes.add(new RegionRoute('Alola Route 2', GameConstants.Region.alola, 2, new RoutePokemon({
    land: ['Alolan Rattata', 'Spearow', 'Ekans', 'Alolan Meowth', 'Growlithe', 'Abra', 'Drowzee', 'Smeargle', 'Makuhita', 'Furfrou', 'Yungoos', 'Cutiefly'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Trainers\' School'))], undefined, GameConstants.AlolaSubRegions.MelemeleIsland));
Routes.add(new RegionRoute('Alola Route 3', GameConstants.Region.alola, 3, new RoutePokemon({
    land: ['Spearow', 'Mankey', 'Bagon', 'Rufflet', 'Vullaby', 'Hawlucha', 'Cutiefly'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Verdant Cavern'))], undefined, GameConstants.AlolaSubRegions.MelemeleIsland));
Routes.add(new RegionRoute('Melemele Sea', GameConstants.Region.alola, 19, new RoutePokemon({
    water: ['Tentacool', 'Magikarp', 'Corsola', 'Remoraid', 'Wingull', 'Clamperl', 'Luvdisc', 'Mantyke', 'Finneon', 'Wishiwashi (Solo)'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Brooklet Hill'))], 5.1, GameConstants.AlolaSubRegions.MelemeleIsland));
Routes.add(new RegionRoute('Kala\'e Bay', GameConstants.Region.alola, 20, new RoutePokemon({
    land: ['Alolan Rattata', 'Slowpoke', 'Wingull', 'Bagon', 'Yungoos'],
    water: ['Tentacool', 'Shellder', 'Magikarp', 'Remoraid', 'Wingull', 'Finneon', 'Mantyke', 'Wishiwashi (Solo)'],
}), [
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Seaward Cave')),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Brooklet Hill')),
], 5.2, GameConstants.AlolaSubRegions.MelemeleIsland));
Routes.add(new RegionRoute('Alola Route 4', GameConstants.Region.alola, 4, new RoutePokemon({
    land: ['Alolan Rattata', 'Eevee', 'Igglybuff', 'Lillipup', 'Pikipek', 'Yungoos', 'Grubbin', 'Mudbray'],
}), [new GymBadgeRequirement(BadgeEnums.FightiniumZ)], undefined, GameConstants.AlolaSubRegions.AkalaIsland));
Routes.add(new RegionRoute('Alola Route 5', GameConstants.Region.alola, 5, new RoutePokemon({
    land: ['Caterpie', 'Metapod', 'Butterfree', 'Bonsly', 'Lillipup', 'Pikipek', 'Trumbeak', 'Grubbin', 'Fomantis'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Paniola Ranch'))], undefined, GameConstants.AlolaSubRegions.AkalaIsland));
Routes.add(new RegionRoute('Alola Route 6', GameConstants.Region.alola, 6, new RoutePokemon({
    land: ['Alolan Rattata', 'Eevee', 'Igglybuff', 'Lillipup', 'Pikipek', 'Yungoos', 'Grubbin', 'Mudbray'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Brooklet Hill'))], undefined, GameConstants.AlolaSubRegions.AkalaIsland));
Routes.add(new RegionRoute('Alola Route 7', GameConstants.Region.alola, 7, new RoutePokemon({
    water: ['Tentacool', 'Staryu', 'Magikarp', 'Wingull', 'Finneon', 'Wishiwashi (Solo)', 'Pyukumuku'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 6)], undefined, GameConstants.AlolaSubRegions.AkalaIsland));
Routes.add(new RegionRoute('Alola Route 8', GameConstants.Region.alola, 8, new RoutePokemon({
    land: ['Alolan Rattata', 'Fletchling', 'Trumbeak', 'Yungoos', 'Stufful'],
    water: ['Tentacool', 'Magikarp', 'Chinchou', 'Remoraid', 'Finneon', 'Mantyke', 'Wishiwashi (Solo)'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Wela Volcano Park'))], undefined, GameConstants.AlolaSubRegions.AkalaIsland));
Routes.add(new RegionRoute('Alola Route 9', GameConstants.Region.alola, 9, new RoutePokemon({
    water: ['Magikarp', 'Corsola', 'Luvdisc', 'Wishiwashi (Solo)', 'Mareanie'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Diglett\'s Tunnel'))], undefined, GameConstants.AlolaSubRegions.AkalaIsland));
Routes.add(new RegionRoute('Akala Outskirts', GameConstants.Region.alola, 21, new RoutePokemon({
    land: ['Alolan Raticate', 'Natu', 'Wingull', 'Nosepass', 'Gumshoos', 'Stufful'],
    water: ['Magikarp', 'Chinchou', 'Wishiwashi (Solo)'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Memorial Hill'))], 9.1, GameConstants.AlolaSubRegions.AkalaIsland));
Routes.add(new RegionRoute('Alola Route 10', GameConstants.Region.alola, 10, new RoutePokemon({
    land: ['Alolan Raticate', 'Fearow', 'Ledian', 'Ariados', 'Skarmory', 'Pancham', 'Gumshoos'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Malie Garden'))], undefined, GameConstants.AlolaSubRegions.UlaulaIsland));
Routes.add(new RegionRoute('Mount Hokulani', GameConstants.Region.alola, 22, new RoutePokemon({
    land: ['Fearow', 'Ditto', 'Cleffa', 'Skarmory', 'Elekid', 'Beldum', 'Elgyem', 'Minior (Meteor)', 'Minior (Blue Core)', 'Minior (Green Core)', 'Minior (Indigo Core)', 'Minior (Orange Core)', 'Minior (Red Core)', 'Minior (Violet Core)', 'Minior (Yellow Core)'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 10)], 10.1, GameConstants.AlolaSubRegions.UlaulaIsland));
Routes.add(new RegionRoute('Alola Route 11', GameConstants.Region.alola, 11, new RoutePokemon({
    land: ['Parasect', 'Ledian', 'Ariados', 'Pancham', 'Trumbeak', 'Komala'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Malie Garden'))], undefined, GameConstants.AlolaSubRegions.UlaulaIsland));
Routes.add(new RegionRoute('Alola Route 12', GameConstants.Region.alola, 12, new RoutePokemon({
    land: ['Alolan Geodude', 'Alolan Graveler', 'Houndoom', 'Manectric', 'Torkoal', 'Mudbray'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.alola, 11),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Hokulani Observatory')),
], undefined, GameConstants.AlolaSubRegions.UlaulaIsland));
Routes.add(new RegionRoute('Alola Route 13', GameConstants.Region.alola, 13, new RoutePokemon({
    water: ['Magikarp', 'Wishiwashi (Solo)', 'Bruxish'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 12)], undefined, GameConstants.AlolaSubRegions.UlaulaIsland));
Routes.add(new RegionRoute('Alola Route 14', GameConstants.Region.alola, 14, new RoutePokemon({
    water: ['Tentacruel', 'Magikarp', 'Pelipper', 'Finneon', 'Frillish', 'Wishiwashi (Solo)', 'Bruxish'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 13)], undefined, GameConstants.AlolaSubRegions.UlaulaIsland));
Routes.add(new RegionRoute('Haina Desert', GameConstants.Region.alola, 23, new RoutePokemon({
    land: ['Alolan Dugtrio', 'Trapinch', 'Baltoy', 'Gabite', 'Krokorok', 'Golett'],
    special: [new SpecialRoutePokemon(['Celesteela'], new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 11))],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Thrifty Megamart'))], undefined, GameConstants.AlolaSubRegions.UlaulaIsland));
Routes.add(new RegionRoute('Alola Route 15', GameConstants.Region.alola, 15, new RoutePokemon({
    land: ['Alolan Raticate', 'Slowpoke', 'Pelipper', 'Gumshoos', 'Sandygast'],
    water: ['Tentacruel', 'Magikarp', 'Clamperl', 'Finneon', 'Wishiwashi (Solo)', 'Bruxish'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Thrifty Megamart'))], undefined, GameConstants.AlolaSubRegions.UlaulaIsland));
Routes.add(new RegionRoute('Alola Route 16', GameConstants.Region.alola, 16, new RoutePokemon({
    land: ['Alolan Raticate', 'Slowpoke', 'Pelipper', 'Scraggy', 'Gumshoos'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 15)], undefined, GameConstants.AlolaSubRegions.UlaulaIsland));
Routes.add(new RegionRoute('Alola Route 17', GameConstants.Region.alola, 17, new RoutePokemon({
    land: ['Alolan Raticate', 'Fearow', 'Alolan Graveler', 'Ledian', 'Ariados', 'Scraggy', 'Bisharp', 'Gumshoos'],
    special: [new SpecialRoutePokemon(['Kartana'], new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 11))],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Ula\'ula Meadow'))], undefined, GameConstants.AlolaSubRegions.UlaulaIsland));
Routes.add(new RegionRoute('Poni Wilds', GameConstants.Region.alola, 24, new RoutePokemon({
    land: ['Granbull', 'Pelipper', 'Gastrodon (East)', 'Furfrou', 'Inkay'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Aether Foundation'))], undefined, GameConstants.AlolaSubRegions.PoniIsland));
Routes.add(new RegionRoute('Ancient Poni Path', GameConstants.Region.alola, 25, new RoutePokemon({
    land: ['Granbull', 'Pelipper', 'Gastrodon (East)', 'Furfrou', 'Inkay'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 24)], undefined, GameConstants.AlolaSubRegions.PoniIsland));
Routes.add(new RegionRoute('Poni Breaker Coast', GameConstants.Region.alola, 26, new RoutePokemon({
    water: ['Tentacruel', 'Lapras', 'Magikarp', 'Pelipper', 'Carvanha', 'Wailmer', 'Relicanth', 'Gastrodon (East)', 'Lumineon'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 25)], undefined, GameConstants.AlolaSubRegions.PoniIsland));
Routes.add(new RegionRoute('Poni Grove', GameConstants.Region.alola, 27, new RoutePokemon({
    land: ['Pinsir', 'Heracross', 'Buneary', 'Riolu', 'Zoroark', 'Trumbeak'],
    special: [
        new SpecialRoutePokemon(['Blacephalon'], new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 15)),
        new SpecialRoutePokemon(['Stakataka'], new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 15)),
    ],
}), [new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion)], undefined, GameConstants.AlolaSubRegions.PoniIsland));
Routes.add(new RegionRoute('Poni Plains', GameConstants.Region.alola, 28, new RoutePokemon({
    land: ['Alolan Raticate', 'Fearow', 'Hypno', 'Tauros', 'Miltank', 'Pelipper', 'Hariyama', 'Cottonee', 'Petilil', 'Trumbeak', 'Gumshoos', 'Mudsdale'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 27)], undefined, GameConstants.AlolaSubRegions.PoniIsland));
Routes.add(new RegionRoute('Poni Coast', GameConstants.Region.alola, 29, new RoutePokemon({
    land: ['Alolan Dugtrio'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 28)], undefined, GameConstants.AlolaSubRegions.PoniIsland));
Routes.add(new RegionRoute('Poni Gauntlet', GameConstants.Region.alola, 30, new RoutePokemon({
    land: ['Pelipper', 'Lickitung', 'Golduck', 'Granbull', 'Inkay', 'Bewear'],
    water: ['Magikarp', 'Dratini', 'Barboach'],
}), [new RouteKillRequirement(10, GameConstants.Region.alola, 29)], undefined, GameConstants.AlolaSubRegions.PoniIsland));
/*
GALAR
*/
Routes.add(new RegionRoute('Galar Route 1', GameConstants.Region.galar, 1, new RoutePokemon({
    land: ['Skwovet', 'Rookidee', 'Blipbug', 'Wooloo', 'Nickit', 'Caterpie', 'Hoothoot', 'Grubbin'],
}), [new GymBadgeRequirement(BadgeEnums.Elite_AlolaChampion)], undefined, GameConstants.GalarSubRegions.SouthGalar));
Routes.add(new RegionRoute('Galar Route 2', GameConstants.Region.galar, 2, new RoutePokemon({
    land: ['Skwovet', 'Rookidee', 'Nickit', 'Chewtle', 'Yamper', 'Galarian Zigzagoon', 'Blipbug', 'Seedot', 'Hoothoot', 'Lotad', 'Purrloin'],
    water: ['Magikarp', 'Arrokuda'],
}), [
    new RouteKillRequirement(10, GameConstants.Region.galar, 1),
    new TemporaryBattleRequirement('Mirages'),
], undefined, GameConstants.GalarSubRegions.SouthGalar));
Routes.add(new RegionRoute('Rolling Fields', GameConstants.Region.galar, 3, new RoutePokemon({
    land: ['Diglett', 'Butterfree', 'Pidove', 'Roggenrola', 'Tyrogue', 'Metapod', 'Pancham', 'Bunnelby', 'Onix', 'Ninjask', 'Diggersby', 'Dubwool'],
    headbutt: ['Cherubi', 'Skwovet'],
    special: [
        new SpecialRoutePokemon(['Combee', 'Mudsdale', 'Pangoro', 'Roselia', 'Vespiquen', 'Bounsweet', 'Minccino'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Pangoro', 'Mudsdale', 'Roselia', 'Ralts', 'Budew', 'Oddish'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Roselia', 'Lotad', 'Nuzleaf', 'Wingull', 'Pelipper', 'Pangoro', 'Haunter'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Electrike', 'Haunter', 'Pangoro', 'Pikachu', 'Manectric', 'Wingull', 'Joltik'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Vanillite', 'Piloswine', 'Roselia', 'Minccino', 'Swinub'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Delibird', 'Swinub', 'Snorunt', 'Vanillite', 'Mime Jr.', 'Piloswine'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Vulpix', 'Growlithe', 'Baltoy', 'Mudbray', 'Roselia', 'Pangoro', 'Mudsdale'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Baltoy', 'Dwebble', 'Golett', 'Roselia', 'Crustle', 'Mudsdale'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Mudsdale', 'Natu', 'Munna', 'Ralts', 'Kirlia', 'Roselia', 'Gardevoir'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new TemporaryBattleRequirement('Hop2')], undefined, GameConstants.GalarSubRegions.SouthGalar));
Routes.add(new RegionRoute('Dappled Grove', GameConstants.Region.galar, 4, new RoutePokemon({
    land: ['Lombre', 'Nuzleaf', 'Orbeetle', 'Bewear'],
    headbutt: ['Cherubi', 'Skwovet'],
    special: [
        new SpecialRoutePokemon(['Shiftry', 'Ludicolo', 'Vileplume', 'Bunnelby', 'Hoothoot', 'Oddish', 'Bounsweet', 'Budew', 'Seedot', 'Lotad'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Shiftry', 'Ludicolo', 'Vileplume', 'Tyrogue', 'Hoothoot', 'Oddish', 'Stufful', 'Stunky', 'Budew', 'Seedot', 'Lotad'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Lotad', 'Seedot', 'Budew', 'Tympole', 'Grubbin', 'Oddish', 'Bunnelby', 'Seismitoad', 'Ludicolo', 'Shiftry'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Electrike', 'Tympole', 'Seismitoad', 'Shiftry', 'Ludicolo', 'Oddish', 'Lotad', 'Seedot', 'Joltik', 'Budew', 'Grubbin'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Snorunt', 'Snover', 'Vanillite', 'Bunnelby', 'Hoothoot', 'Delibird', 'Vanillish', 'Pangoro'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Delibird', 'Vanillish', 'Snorunt', 'Vanillite', 'Klink', 'Bunnelby', 'Pangoro'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Vulpix', 'Growlithe', 'Baltoy', 'Mudbray', 'Budew', 'Pangoro', 'Claydol', 'Bunnelby'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Baltoy', 'Golett', 'Bunnelby', 'Bounsweet', 'Hoothoot', 'Claydol', 'Pangoro'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Mudsdale', 'Natu', 'Munna', 'Ralts', 'Kirlia', 'Roselia', 'Gardevoir'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 3)], undefined, GameConstants.GalarSubRegions.SouthGalar));
Routes.add(new RegionRoute('West Lake Axwell', GameConstants.Region.galar, 5, new RoutePokemon({
    water: ['Goldeen', 'Magikarp', 'Remoraid', 'Wishiwashi (Solo)', 'Drednaw', 'Gyarados'],
    special: [
        new SpecialRoutePokemon(['Krabby', 'Wooper', 'Wingull', 'Bounsweet', 'Purrloin', 'Tympole', 'Frillish', 'Kingler', 'Quagsire', 'Pelipper', 'Cloyster', 'Lapras', 'Seaking'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Krabby', 'Wooper', 'Tyrogue', 'Pancham', 'Lotad', 'Seedot', 'Budew', 'Purrloin', 'Tympole', 'Frillish', 'Palpitoad', 'Quagsire', 'Pelipper', 'Jellicent', 'Seaking'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Krabby', 'Wooper', 'Wingull', 'Tympole', 'Frillish', 'Pelipper', 'Quagsire', 'Jellicent', 'Lapras'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Krabby', 'Electrike', 'Tympole', 'Joltik', 'Wooper', 'Wingull', 'Chinchou', 'Pelipper', 'Quagsire', 'Lanturn', 'Lapras'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Delibird', 'Wingull', 'Snorunt', 'Vanillite', 'Purrloin', 'Tympole', 'Shellder', 'Frillish', 'Palpitoad', 'Diggersby', 'Vanilluxe', 'Lapras'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Delibird', 'Vanillite', 'Klink', 'Bunnelby', 'Krabby', 'Tympole', 'Frillish', 'Palpitoad', 'Vanilluxe', 'Lapras'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Vulpix', 'Growlithe', 'Baltoy', 'Bunnelby', 'Pancham', 'Purrloin', 'Dwebble', 'Frillish', 'Diggersby', 'Pelipper'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Wooper', 'Nincada', 'Baltoy', 'Mudbray', 'Purrloin', 'Dwebble', 'Bunnelby', 'Frillish', 'Palpitoad', 'Diggersby', 'Seaking'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Krabby', 'Natu', 'Wingull', 'Ralts', 'Wooper', 'Purrloin', 'Tympole', 'Frillish', 'Palpitoad', 'Quagsire', 'Jellicent', 'Cloyster', 'Lapras'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 3)], undefined, GameConstants.GalarSubRegions.SouthGalar));
Routes.add(new RegionRoute('East Lake Axwell', GameConstants.Region.galar, 6, new RoutePokemon({
    land: ['Stufful', 'Butterfree', 'Pidove'],
    water: ['Shellder', 'Magikarp', 'Goldeen', 'Wishiwashi (Solo)', 'Gyarados', 'Wingull'],
    special: [
        new SpecialRoutePokemon(['Oddish', 'Bounsweet', 'Bunnelby', 'Frillish', 'Xatu', 'Garbodor', 'Jellicent', 'Seaking', 'Pelipper', 'Lanturn', 'Cloyster'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Oddish', 'Budew', 'Minccino', 'Pancham', 'Frillish', 'Xatu', 'Garbodor', 'Jellicent', 'Pelipper', 'Seaking'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Oddish', 'Grubbin', 'Frillish', 'Pelipper', 'Garbodor', 'Jellicent'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Oddish', 'Electrike', 'Joltik', 'Pancham', 'Chinchou', 'Pelipper', 'Garbodor', 'Jellicent', 'Lanturn'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Snorunt', 'Snover', 'Minccino', 'Pancham', 'Vanillite', 'Frillish', 'Xatu', 'Piloswine', 'Vanilluxe'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Snover', 'Minccino', 'Vanillite', 'Snorunt', 'Pancham', 'Xatu', 'Piloswine', 'Vanilluxe'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Vulpix', 'Growlithe', 'Onix', 'Minccino', 'Mudbray', 'Pancham', 'Frillish', 'Xatu', 'Mudsdale', 'Pelipper', 'Seaking'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Onix', 'Baltoy', 'Dwebble', 'Minccino', 'Pancham', 'Mudbray', 'Frillish', 'Xatu', 'Mudsdale', 'Seaking'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Purrloin', 'Munna', 'Minccino', 'Oddish', 'Frillish', 'Xatu', 'Bronzong', 'Jellicent', 'Lanturn', 'Cloyster'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 3)], undefined, GameConstants.GalarSubRegions.SouthGalar));
Routes.add(new RegionRoute('Giant\'s Seat', GameConstants.Region.galar, 7, new RoutePokemon({
    land: ['Bewear', 'Bronzor', 'Steelix', 'Duraludon', 'Bisharp'],
    water: ['Shellder', 'Cloyster', 'Gyarados', 'Pyukumuku'],
    headbutt: ['Cherubi', 'Greedent'],
    special: [
        new SpecialRoutePokemon(['Onix', 'Tranquill', 'Diggersby', 'Machop', 'Machoke', 'Lombre', 'Nuzleaf', 'Stufful', 'Rhydon', 'Vikavolt'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Machoke', 'Haunter', 'Onix', 'Machop', 'Gastly', 'Tyrogue', 'Bronzong', 'Vikavolt'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Quagsire', 'Lombre', 'Nuzleaf', 'Gastly', 'Wooper', 'Bronzong', 'Galvantula'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Crawdaunt', 'Manectric', 'Electrike', 'Palpitoad', 'Bronzong', 'Galvantula'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Swinub', 'Delibird', 'Machop', 'Snorunt', 'Snover', 'Abomasnow', 'Glalie'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Swinub', 'Delibird', 'Snorunt', 'Snover', 'Abomasnow', 'Glalie'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Onix', 'Dwebble', 'Mudsdale', 'Vulpix', 'Growlithe', 'Gastly', 'Mudbray', 'Vikavolt'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Onix', 'Dwebble', 'Mudsdale', 'Machop', 'Golett', 'Stufful', 'Golurk', 'Vikavolt'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Xatu', 'Liepard', 'Gastly', 'Natu', 'Duskull', 'Munna', 'Dusclops', 'Musharna'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 8),
        new RouteKillRequirement(10, GameConstants.Region.galar, 9),
    ]),
], undefined, GameConstants.GalarSubRegions.SouthGalar));
Routes.add(new RegionRoute('South Lake Miloch', GameConstants.Region.galar, 8, new RoutePokemon({
    land: ['Machop', 'Tyrogue', 'Galvantula', 'Machoke', 'Thievul', 'Wingull', 'Drifloon'],
    water: ['Magikarp', 'Remoraid', 'Barboach', 'Pyukumuku', 'Goldeen'],
    special: [
        new SpecialRoutePokemon(['Corphish', 'Tympole', 'Stunky', 'Krabby', 'Lombre', 'Nuzleaf', 'Skuntank', 'Kingler', 'Crawdaunt', 'Drifblim', 'Seaking', 'Gyarados', 'Octillery'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Tyrogue', 'Roselia', 'Corphish', 'Stunky', 'Krabby', 'Lombre', 'Nuzleaf', 'Skuntank', 'Machoke', 'Drifblim', 'Seaking', 'Gyarados', 'Pelipper'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Corphish', 'Tympole', 'Stunky', 'Krabby', 'Palpitoad', 'Pelipper', 'Seaking', 'Jellicent', 'Gyarados'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Electrike', 'Corphish', 'Joltik', 'Stunky', 'Krabby', 'Tympole', 'Pyukumuku', 'Palpitoad', 'Kingler', 'Crawdaunt', 'Seaking', 'Lanturn', 'Gyarados', 'Pelipper'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Corphish', 'Snorunt', 'Vanillite', 'Snover', 'Krabby', 'Skuntank', 'Machoke', 'Vanilluxe', 'Gyarados'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Snover', 'Klink', 'Vanillite', 'Delibird', 'Skuntank', 'Machoke', 'Vanilluxe', 'Drifblim', 'Gyarados'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Vulpix', 'Growlithe', 'Nincada', 'Roselia', 'Baltoy', 'Stunky', 'Mudbray', 'Crustle', 'Machoke', 'Whiscash', 'Pelipper', 'Gyarados', 'Octillery'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Wooper', 'Nincada', 'Baltoy', 'Tympole', 'Dwebble', 'Stunky', 'Mudbray', 'Skuntank', 'Machoke', 'Whiscash', 'Seaking', 'Gyarados', 'Octillery'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Natu', 'Ralts', 'Corphish', 'Bronzor', 'Drifloon', 'Skuntank', 'Drifblim', 'Jellicent', 'Milotic', 'Octillery'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 3)], undefined, GameConstants.GalarSubRegions.SouthGalar));
Routes.add(new RegionRoute('North Lake Miloch', GameConstants.Region.galar, 9, new RoutePokemon({
    land: ['Stunky', 'Boltund', 'Liepard', 'Corviknight'],
    headbutt: ['Skwovet', 'Cherubi'],
    water: ['Frillish', 'Magikarp', 'Basculin (Blue-Striped)', 'Basculin (Red-Striped)', 'Barboach'],
    special: [
        new SpecialRoutePokemon(['Pidove', 'Diggersby', 'Stufful', 'Bunnelby', 'Drifloon', 'Wingull', 'Lucario', 'Xatu', 'Lapras', 'Jellicent', 'Drifblim', 'Whiscash'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Machop', 'Gastly', 'Stufful', 'Purrloin', 'Drifloon', 'Wingull', 'Seismitoad', 'Xatu', 'Gyarados', 'Jellicent', 'Drifblim', 'Whiscash'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Tympole', 'Grubbin', 'Stufful', 'Purrloin', 'Palpitoad', 'Wingull', 'Skuntank', 'Pelipper', 'Lapras', 'Jellicent', 'Seaking'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Joltik', 'Grubbin', 'Stufful', 'Purrloin', 'Palpitoad', 'Drifloon', 'Seismitoad', 'Pelipper', 'Lapras', 'Jellicent', 'Seaking', 'Whiscash'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Delibird', 'Snorunt', 'Snover', 'Stufful', 'Purrloin', 'Vanillite', 'Drifloon', 'Wingull', 'Vanillish', 'Xatu', 'Lapras', 'Vanilluxe'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Delibird', 'Snorunt', 'Snover', 'Purrloin', 'Vanillite', 'Klink', 'Drifloon', 'Vanillish', 'Xatu', 'Lapras', 'Vanilluxe', 'Drifblim'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Baltoy', 'Dwebble', 'Mudbray', 'Stufful', 'Bunnelby', 'Drifloon', 'Wingull', 'Skuntank', 'Xatu', 'Gyarados', 'Pelipper', 'Whiscash'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Baltoy', 'Dwebble', 'Mudbray', 'Golett', 'Bunnelby', 'Drifloon', 'Skuntank', 'Xatu', 'Gyarados', 'Seaking', 'Whiscash'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Natu', 'Ralts', 'Stufful', 'Drifloon', 'Ralts', 'Purrloin', 'Wingull', 'Drifblim', 'Xatu', 'Lapras', 'Jellicent'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 6),
        new RouteKillRequirement(10, GameConstants.Region.galar, 7),
        new RouteKillRequirement(10, GameConstants.Region.galar, 8),
    ]),
], undefined, GameConstants.GalarSubRegions.SouthGalar));
Routes.add(new RegionRoute('Axew\'s Eye', GameConstants.Region.galar, 10, new RoutePokemon({
    land: ['Diggersby', 'Bewear'],
    headbutt: ['Greedent', 'Cherubi'],
    water: ['Octillery', 'Magikarp', 'Wishiwashi (Solo)', 'Gyarados'],
    special: [
        new SpecialRoutePokemon(['Kingler', 'Axew', 'Machoke', 'Unfezant', 'Steenee', 'Haxorus', 'Cramorant'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Machoke', 'Axew', 'Kingler', 'Roselia', 'Gloom', 'Unfezant', 'Haxorus', 'Cramorant'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Crawdaunt', 'Axew', 'Seismitoad', 'Pelipper', 'Charjabug', 'Unfezant', 'Haxorus', 'Cramorant (Gulping)'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Seismitoad', 'Crawdaunt', 'Kingler', 'Manectric', 'Unfezant', 'Cramorant (Gorging)'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Snover', 'Vanillish', 'Delibird', 'Unfezant', 'Abomasnow', 'Cramorant'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Cramorant'], new WeatherRequirement([WeatherType.Hail, WeatherType.Windy])),
        new SpecialRoutePokemon(['Snover', 'Bronzong', 'Vanillish', 'Klink', 'Delibird', 'Abomasnow', 'Cramorant'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Crustle', 'Mudsdale', 'Vulpix', 'Growlithe', 'Unfezant', 'Haxorus', 'Cramorant'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Mudsdale', 'Crustle', 'Claydol', 'Baltoy', 'Haxorus', 'Cramorant'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Drifblim', 'Claydol', 'Axew', 'Munna', 'Liepard', 'Unfezant', 'Haxorus', 'Cramorant'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [
    new MultiRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 6),
        new RouteKillRequirement(10, GameConstants.Region.galar, 25),
    ]),
], undefined, GameConstants.GalarSubRegions.SouthGalar));
Routes.add(new RegionRoute('Watchtower Ruins', GameConstants.Region.galar, 11, new RoutePokemon({
    land: ['Duskull', 'Corviknight', 'Woobat', 'Noibat'],
    headbutt: ['Skwovet', 'Cherubi'],
    special: [
        new SpecialRoutePokemon(['Golett', 'Drifloon', 'Bounsweet', 'Pidove', 'Drifblim', 'Golurk'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Gastly', 'Oddish', 'Drifloon', 'Machop', 'Bounsweet', 'Haunter', 'Dusclops'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Gastly', 'Wingull', 'Purrloin', 'Tympole', 'Pidove', 'Haunter', 'Dusclops'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Gastly', 'Drifloon', 'Purrloin', 'Electrike', 'Grubbin', 'Pidove', 'Haunter', 'Dusclops'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Drifloon', 'Delibird', 'Snorunt', 'Snover', 'Drifblim', 'Glalie'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Delibird', 'Gastly', 'Purrloin', 'Snover', 'Snorunt', 'Drifloon', 'Haunter', 'Glalie'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Drifloon', 'Vulpix', 'Growlithe', 'Shuckle', 'Golett', 'Drifblim', 'Golurk'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Gastly', 'Shuckle', 'Purrloin', 'Golett', 'Dwebble', 'Pidove', 'Haunter', 'Dusclops'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Gastly', 'Ralts', 'Purrloin', 'Pidove', 'Haunter', 'Golurk'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 4),
        new RouteKillRequirement(10, GameConstants.Region.galar, 5),
        new RouteKillRequirement(10, GameConstants.Region.galar, 6),
    ]),
], undefined, GameConstants.GalarSubRegions.SouthGalar));
Routes.add(new RegionRoute('Galar Route 3', GameConstants.Region.galar, 12, new RoutePokemon({
    land: ['Gossifleur', 'Corvisquire', 'Rookidee', 'Rolycoly', 'Sizzlipede', 'Vulpix', 'Growlithe', 'Tyrogue', 'Galarian Zigzagoon', 'Stunky', 'Trubbish', 'Cherubi', 'Mudbray', 'Pancham', 'Klink', 'Machop'],
    headbutt: ['Skwovet', 'Cherubi'],
}), [new TemporaryBattleRequirement('Hop3')], undefined, GameConstants.GalarSubRegions.SouthGalar));
Routes.add(new RegionRoute('Galar Route 4', GameConstants.Region.galar, 13, new RoutePokemon({
    land: ['Yamper', 'Cutiefly', 'Wooloo', 'Milcery', 'Galarian Meowth', 'Budew', 'Ferroseed', 'Joltik', 'Pikachu', 'Eevee', 'Electrike', 'Pumpkaboo (Average)', 'Pumpkaboo (Small)', 'Pumpkaboo (Large)', 'Pumpkaboo (Super Size)', 'Diglett'],
    water: ['Magikarp', 'Goldeen', 'Chewtle'],
    headbutt: ['Skwovet'],
}), [new TemporaryBattleRequirement('Bede1')], undefined, GameConstants.GalarSubRegions.SouthGalar));
Routes.add(new RegionRoute('Galar Route 5', GameConstants.Region.galar, 14, new RoutePokemon({
    land: ['Dottler', 'Drifloon', 'Applin', 'Eldegoss', 'Galarian Farfetch\'d', 'Wobbuffet', 'Minccino', 'Spritzee', 'Swirlix', 'Stufful', 'Espurr', 'Nincada', 'Dewpider', 'Nuzleaf', 'Lombre'],
    water: ['Magikarp', 'Chewtle', 'Goldeen'],
    headbutt: ['Skwovet'],
}), [new GymBadgeRequirement(BadgeEnums.Galar_Grass)], undefined, GameConstants.GalarSubRegions.SouthGalar));
Routes.add(new RegionRoute('Motostoke Outskirts', GameConstants.Region.galar, 15, new RoutePokemon({
    land: ['Impidimp', 'Chewtle', 'Koffing', 'Hatenna', 'Noctowl', 'Throh', 'Sawk', 'Sudowoodo', 'Salandit', 'Pawniard', 'Scraggy', 'Croagunk', 'Roggenrola'],
}), [new TemporaryBattleRequirement('Bede2')], undefined, GameConstants.GalarSubRegions.SouthGalar));
Routes.add(new RegionRoute('Motostoke Riverbank', GameConstants.Region.galar, 16, new RoutePokemon({
    land: ['Purrloin', 'Corvisquire', 'Eldegoss', 'Sigilyph'],
    water: ['Arrokuda', 'Barraskewda', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)', 'Mareanie', 'Mantyke', 'Wailmer'],
    headbutt: ['Greedent', 'Skwovet', 'Cherubi'],
    special: [
        new SpecialRoutePokemon(['Skorupi', 'Gossifleur', 'Wooloo', 'Munchlax', 'Noctowl', 'Dubwool', 'Snorlax', 'Drapion', 'Conkeldurr'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Koffing', 'Cutiefly', 'Rookidee', 'Sawk', 'Throh', 'Skorupi', 'Noctowl', 'Dubwool', 'Snorlax', 'Ribombee', 'Conkeldurr'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Skorupi', 'Wimpod', 'Chewtle', 'Dewpider', 'Karrablast', 'Shelmet', 'Binacle', 'Snorlax', 'Drapion', 'Conkeldurr'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Yamper', 'Skorupi', 'Mareanie', 'Chewtle', 'Shellos (East)', 'Wimpod', 'Boltund', 'Snorlax', 'Drapion', 'Conkeldurr'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Sneasel', 'Cutiefly', 'Vanillite', 'Wooloo', 'Noctowl', 'Snorlax', 'Ribombee', 'Conkeldurr'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Sneasel', 'Vanillite', 'Cutiefly', 'Pawniard', 'Ferroseed', 'Snorlax', 'Ribombee', 'Conkeldurr'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Rhyhorn', 'Skorupi', 'Salandit', 'Torkoal', 'Rolycoly', 'Litwick', 'Noctowl', 'Snorlax', 'Drapion', 'Rhydon'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Skorupi', 'Sudowoodo', 'Rolycoly', 'Rhyhorn', 'Onix', 'Noctowl', 'Snorlax', 'Ribombee', 'Rhydon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Clefairy', 'Wobbuffet', 'Cutiefly', 'Duskull', 'Espurr', 'Elgyem', 'Noctowl', 'Clefable', 'Ribombee', 'Conkeldurr'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [
    new MultiRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 9),
        new GymBadgeRequirement(BadgeEnums.Galar_Fire),
    ]),
], undefined, GameConstants.GalarSubRegions.SouthGalar));
Routes.add(new RegionRoute('Bridge Field', GameConstants.Region.galar, 17, new RoutePokemon({
    land: ['Galarian Zigzagoon', 'Noibat', 'Palpitoad', 'Ferroseed', 'Garbodor', 'Galarian Linoone', 'Ferrothorn', 'Obstagoon', 'Woobat', 'Tranquill'],
    water: ['Drednaw', 'Lanturn', 'Qwilfish', 'Gyarados', 'Magikarp', 'Goldeen', 'Inkay'],
    headbutt: ['Greedent', 'Cherubi'],
    special: [
        new SpecialRoutePokemon(['Cutiefly', 'Wobbuffet', 'Liepard', 'Togepi', 'Ribombee', 'Golisopod', 'Bewear', 'Seismitoad', 'Beheeyem', 'Noivern', 'Gallade', 'Seaking', 'Cufant'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Cutiefly', 'Scraggy', 'Croagunk', 'Sawk', 'Throh', 'Elgyem', 'Cufant', 'Karrablast', 'Thievul', 'Diggersby', 'Shelmet', 'Togepi', 'Ribombee', 'Drapion', 'Pangoro', 'Seismitoad', 'Beheeyem', 'Noivern', 'Gallade', 'Seaking'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Stufful', 'Cramorant (Gulping)', 'Bronzor', 'Binacle', 'Shellos (East)', 'Wimpod', 'Golisopod', 'Bewear', 'Seismitoad', 'Bronzong', 'Noivern', 'Gallade', 'Jellicent'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Stufful', 'Frillish', 'Bronzor', 'Binacle', 'Shellos (East)', 'Bewear', 'Golisopod', 'Seismitoad', 'Bronzong', 'Noivern', 'Gallade'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Cubchoo', 'Sneasel', 'Stufful', 'Thievul', 'Vanillite', 'Vanilluxe', 'Bewear', 'Beheeyem', 'Noctowl', 'Beartic'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Sneasel', 'Cubchoo', 'Cufant', 'Mawile', 'Vanillite', 'Vanilluxe', 'Bewear', 'Beheeyem', 'Noivern', 'Weavile'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Maractus', 'Cutiefly', 'Wobbuffet', 'Baltoy', 'Cufant', 'Litwick', 'Thievul', 'Carkol', 'Ribombee', 'Rhydon', 'Pangoro', 'Bewear', 'Beheeyem', 'Noivern', 'Gallade', 'Pelipper'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Bonsly', 'Stufful', 'Scraggy', 'Croagunk', 'Baltoy', 'Rhyhorn', 'Rufflet', 'Sudowoodo', 'Bewear', 'Rhydon', 'Claydol', 'Noivern', 'Gallade', 'Seaking'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Cutiefly', 'Munna', 'Stufful', 'Elgyem', 'Milcery', 'Litwick', 'Thievul', 'Togepi', 'Ribombee', 'Mimikyu', 'Bewear', 'Seismitoad', 'Beheeyem', 'Noivern', 'Musharna', 'Jellicent'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 16)], undefined, GameConstants.GalarSubRegions.SouthGalar));
Routes.add(new RegionRoute('Stony Wilderness', GameConstants.Region.galar, 18, new RoutePokemon({
    land: ['Baltoy', 'Golett', 'Rhydon', 'Dusknoir', 'Golurk', 'Grimmsnarl', 'Tranquill', 'Sigilyph'],
    special: [
        new SpecialRoutePokemon(['Galarian Zigzagoon', 'Ninjask', 'Tyrogue', 'Gurdurr', 'Boldore', 'Ribombee', 'Impidimp', 'Eldegoss', 'Claydol', 'Tsareena', 'Crustle'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Machoke', 'Scraggy', 'Croagunk', 'Galarian Zigzagoon', 'Cottonee', 'Swirlix', 'Spritzee', 'Ribombee', 'Impidimp', 'Claydol', 'Tsareena', 'Crustle', 'Unfezant'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Ninjask', 'Dewpider', 'Galarian Zigzagoon', 'Cramorant (Gulping)', 'Bronzor', 'Barboach', 'Shellos (East)', 'Impidimp', 'Pikachu', 'Bronzong', 'Araquanid'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Yamper', 'Dewpider', 'Pikachu', 'Bronzor', 'Gurdurr', 'Boldore', 'Impidimp', 'Applin', 'Bronzong', 'Araquanid'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Cubchoo', 'Galarian Zigzagoon', 'Sneasel', 'Bronzor', 'Impidimp', 'Gurdurr', 'Boldore', 'Bronzong', 'Tsareena', 'Crustle'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Sneasel', 'Cubchoo', 'Galarian Zigzagoon', 'Ferroseed', 'Bronzor', 'Pawniard', 'Impidimp', 'Bronzong', 'Tsareena', 'Crustle'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Maractus', 'Galarian Zigzagoon', 'Salandit', 'Carkol', 'Gurdurr', 'Boldore', 'Impidimp', 'Drilbur', 'Claydol', 'Tsareena', 'Crustle'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Bonsly', 'Galarian Zigzagoon', 'Dwebble', 'Rhyhorn', 'Boldore', 'Drilbur', 'Shuckle', 'Claydol', 'Tsareena', 'Crustle'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Hatenna', 'Munna', 'Galarian Zigzagoon', 'Nickit', 'Bronzor', 'Thievul', 'Dottler', 'Impidimp', 'Togetic', 'Bronzong', 'Tsareena', 'Crustle'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 17)], undefined, GameConstants.GalarSubRegions.SouthGalar));
Routes.add(new RegionRoute('Giant\'s Mirror', GameConstants.Region.galar, 19, new RoutePokemon({
    land: ['Koffing', 'Machop', 'Steelix', 'Perrserker', 'Shellos (East)', 'Gastrodon (East)', 'Dugtrio', 'Galarian Corsola', 'Boldore', 'Excadrill', 'Tranquill', 'Corvisquire'],
    water: ['Drednaw', 'Mareanie', 'Chinchou', 'Gyarados'],
    headbutt: ['Greedent', 'Cherubi'],
    special: [
        new SpecialRoutePokemon(['Woobat', 'Pumpkaboo (Average)', 'Pumpkaboo (Small)', 'Pumpkaboo (Large)', 'Pumpkaboo (Super Size)', 'Nickit', 'Gloom', 'Skorupi', 'Dottler', 'Budew', 'Machamp', 'Bellossom', 'Unfezant', 'Frillish'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Butterfree', 'Sawk', 'Throh', 'Galarian Farfetch\'d', 'Gloom', 'Skorupi', 'Roselia', 'Dottler', 'Machamp', 'Vileplume', 'Unfezant', 'Frillish'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Wimpod', 'Palpitoad', 'Natu', 'Chewtle', 'Gloom', 'Skorupi', 'Dottler', 'Seismitoad', 'Vileplume', 'Xatu', 'Frillish'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Helioptile', 'Joltik', 'Yamper', 'Natu', 'Gloom', 'Applin', 'Skorupi', 'Machamp', 'Vileplume', 'Xatu', 'Frillish'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Vanillite', 'Cubchoo', 'Natu', 'Delibird', 'Swinub', 'Snover', 'Abomasnow', 'Vileplume', 'Xatu', 'Vikavolt', 'Inkay'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Pawniard', 'Vanillite', 'Cubchoo', 'Natu', 'Swinub', 'Snover', 'Machamp', 'Vileplume', 'Xatu', 'Vikavolt', 'Frillish'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Durant', 'Heatmor', 'Gloom', 'Diglett', 'Skorupi', 'Torkoal', 'Machamp', 'Sudowoodo', 'Unfezant', 'Vikavolt', 'Frillish'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Rhyhorn', 'Drilbur', 'Hippowdon', 'Diggersby', 'Dottler', 'Machamp', 'Vileplume', 'Xatu', 'Vikavolt', 'Frillish'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Swirlix', 'Spritzee', 'Morelull', 'Natu', 'Cutiefly', 'Gloom', 'Impidimp', 'Milcery', 'Mimikyu', 'Machamp', 'Sudowoodo', 'Xatu', 'Vikavolt', 'Frillish'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 18),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Dusty Bowl')),
    ]),
], undefined, GameConstants.GalarSubRegions.SouthGalar));
Routes.add(new RegionRoute('Giant\'s Cap', GameConstants.Region.galar, 20, new RoutePokemon({
    land: ['Minccino', 'Drednaw', 'Orbeetle', 'Corviknight', 'Coalossal', 'Rolycoly', 'Boldore', 'Rhydon'],
    water: ['Goldeen', 'Krabby', 'Corphish', 'Gyarados'],
    headbutt: ['Greedent', 'Cherubi'],
    special: [
        new SpecialRoutePokemon(['Noctowl', 'Galarian Linoone', 'Liepard', 'Scraggy', 'Croagunk', 'Nuzleaf', 'Lombre', 'Dottler', 'Eldegoss', 'Stunky', 'Doublade', 'Cinccino', 'Gengar'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Galarian Linoone', 'Scraggy', 'Croagunk', 'Gloom', 'Noctowl', 'Eldegoss', 'Dottler', 'Munna', 'Karrablast', 'Shelmet', 'Doublade', 'Cinccino', 'Gengar'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Quagsire', 'Noctowl', 'Galarian Linoone', 'Palpitoad', 'Shellos (East)', 'Dottler', 'Eldegoss', 'Doublade', 'Seismitoad', 'Golisopod'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Quagsire', 'Manectric', 'Noctowl', 'Joltik', 'Shellos (East)', 'Dottler', 'Doublade', 'Galvantula', 'Gengar'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Vanillite', 'Sneasel', 'Galarian Linoone', 'Noctowl', 'Snover', 'Snorunt', 'Delibird', 'Dottler', 'Doublade', 'Glalie', 'Beartic'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Sneasel', 'Vanillite', 'Galarian Linoone', 'Riolu', 'Snorunt', 'Pawniard', 'Delibird', 'Dottler', 'Doublade', 'Glalie', 'Gengar'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Carkol', 'Diggersby', 'Torkoal', 'Noctowl', 'Golett', 'Baltoy', 'Drilbur', 'Dugtrio', 'Doublade', 'Excadrill', 'Gengar'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Carkol', 'Diggersby', 'Noctowl', 'Shuckle', 'Golett', 'Drilbur', 'Mudbray', 'Dottler', 'Doublade', 'Excadrill', 'Gengar'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Gothita', 'Solosis', 'Clefairy', 'Noctowl', 'Galarian Linoone', 'Munna', 'Dottler', 'Duskull', 'Eldegoss', 'Aegislash (Shield)', 'Cinccino', 'Gengar'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 18),
        new RouteKillRequirement(10, GameConstants.Region.galar, 21),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Dusty Bowl')),
    ]),
], undefined, GameConstants.GalarSubRegions.SouthGalar));
Routes.add(new RegionRoute('Lake of Outrage', GameConstants.Region.galar, 21, new RoutePokemon({
    land: ['Golurk', 'Ditto', 'Corviknight', 'Hatterene'],
    water: ['Mantyke', 'Mantine', 'Barraskewda', 'Lanturn', 'Qwilfish', 'Gyarados'],
    headbutt: ['Greedent', 'Cherubi'],
    special: [
        new SpecialRoutePokemon(['Beheeyem', 'Braviary', 'Mandibuzz', 'Sigilyph', 'Obstagoon', 'Bewear', 'Orbeetle', 'Leafeon', 'Gardevoir', 'Seaking', 'Lapras', 'Jellicent'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Garbodor', 'Drapion', 'Galarian Weezing', 'Hitmontop', 'Skuntank', 'Grimmsnarl', 'Pangoro', 'Falinks', 'Jangmo-o', 'Espeon', 'Shiinotic', 'Seaking', 'Jellicent'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Seismitoad', 'Araquanid', 'Golisopod', 'Rotom', 'Pelipper', 'Cramorant (Gulping)', 'Quagsire', 'Barbaracle', 'Deino', 'Goomy', 'Vaporeon', 'Shiinotic', 'Lapras', 'Jellicent'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Galvantula', 'Noivern', 'Haxorus', 'Morpeko', 'Rotom', 'Boltund', 'Jellicent', 'Zweilous', 'Drampa', 'Sliggoo', 'Hakamo-o', 'Jolteon', 'Gardevoir', 'Shiinotic', 'Seaking', 'Lapras', 'Jellicent'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Glalie', 'Vanilluxe', 'Abomasnow', 'Bergmite', 'Snom', 'Piloswine', 'Galarian Mr. Mime', 'Obstagoon', 'Eiscue (Ice Face)', 'Glaceon', 'Avalugg', 'Lapras'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Klinklang', 'Bisharp', 'Vanilluxe', 'Copperajah', 'Perrserker', 'Doublade', 'Togedemaru', 'Duraludon', 'Eiscue (Ice Face)', 'Glaceon', 'Avalugg', 'Lapras'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Ninetales', 'Arcanine', 'Durant', 'Heatmor', 'Lampent', 'Flygon', 'Rhydon', 'Coalossal', 'Sandaconda', 'Turtonator', 'Stonjourner', 'Jangmo-o', 'Larvitar', 'Flareon', 'Chandelure', 'Seaking', 'Pelipper', 'Jellicent'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Excadrill', 'Boldore', 'Zweilous', 'Pupitar', 'Dugtrio', 'Hippowdon', 'Obstagoon', 'Stonjourner', 'Umbreon', 'Rhydon', 'Seaking'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Wobbuffet', 'Gothitelle', 'Reuniclus', 'Claydol', 'Bronzong', 'Gardevoir', 'Sylveon', 'Milotic', 'Lapras', 'Seaking'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [
    new MultiRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 20),
        new RouteKillRequirement(10, GameConstants.Region.galar, 25),
    ]),
], undefined, GameConstants.GalarSubRegions.SouthGalar));
Routes.add(new RegionRoute('Hammerlocke Hills', GameConstants.Region.galar, 22, new RoutePokemon({
    land: ['Pumpkaboo (Average)', 'Pumpkaboo (Small)', 'Pumpkaboo (Large)', 'Pumpkaboo (Super Size)', 'Klink', 'Unfezant', 'Corvisquire', 'Hawlucha', 'Corviknight', 'Copperajah', 'Gourgeist (Average)', 'Gourgeist (Small)', 'Gourgeist (Large)', 'Gourgeist (Super Size)'],
    special: [
        new SpecialRoutePokemon(['Espurr', 'Inkay', 'Dubwool', 'Machoke', 'Sudowoodo', 'Wobbuffet', 'Stufful', 'Vileplume', 'Klang'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Machoke', 'Espurr', 'Inkay', 'Hawlucha', 'Thievul', 'Wobbuffet', 'Stufful', 'Roserade', 'Klang'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Klang', 'Vileplume', 'Palpitoad', 'Wobbuffet', 'Machoke', 'Inkay', 'Shelmet', 'Karrablast', 'Pelipper'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Karrablast', 'Shelmet', 'Espurr', 'Charjabug', 'Machoke', 'Wobbuffet', 'Wimpod', 'Vileplume', 'Klinklang'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Espurr', 'Inkay', 'Wobbuffet', 'Sneasel', 'Snorunt', 'Cubchoo', 'Abomasnow', 'Klang'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Klinklang', 'Abomasnow', 'Snorunt', 'Sneasel', 'Wobbuffet', 'Machoke', 'Inkay', 'Honedge', 'Vanillite'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Vulpix', 'Growlithe', 'Baltoy', 'Espurr', 'Inkay', 'Machoke', 'Sudowoodo', 'Wobbuffet', 'Maractus', 'Vileplume', 'Klinklang'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Dugtrio', 'Drilbur', 'Dwebble', 'Espurr', 'Machoke', 'Sudowoodo', 'Trapinch', 'Axew', 'Wobbuffet', 'Vileplume', 'Klinklang'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Klinklang', 'Roserade', 'Morelull', 'Honedge', 'Gastly', 'Impidimp', 'Hatenna', 'Inkay', 'Espurr'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 19),
        new RouteKillRequirement(10, GameConstants.Region.galar, 20),
    ]),
], undefined, GameConstants.GalarSubRegions.SouthGalar));
Routes.add(new RegionRoute('Galar Route 6', GameConstants.Region.galar, 23, new RoutePokemon({
    land: ['Silicobra', 'Torkoal', 'Duskull', 'Hippopotas', 'Skorupi', 'Heatmor', 'Durant', 'Hawlucha', 'Dugtrio', 'Trapinch', 'Axew', 'Maractus', 'Galarian Yamask', 'Helioptile'],
    water: ['Goldeen', 'Magikarp', 'Drednaw'],
    headbutt: ['Greedent'],
}), [new GymBadgeRequirement(BadgeEnums.Galar_Fire)], undefined, GameConstants.GalarSubRegions.NorthGalar));
Routes.add(new RegionRoute('Galar Route 7', GameConstants.Region.galar, 24, new RoutePokemon({
    land: ['Thievul', 'Corviknight', 'Perrserker', 'Morpeko', 'Liepard', 'Seismitoad', 'Karrablast', 'Shelmet', 'Meowstic', 'Galvantula', 'Inkay'],
    headbutt: ['Greedent'],
}), [new TemporaryBattleRequirement('Hop6')], undefined, GameConstants.GalarSubRegions.NorthGalar));
Routes.add(new RegionRoute('Galar Route 8', GameConstants.Region.galar, 25, new RoutePokemon({
    land: ['Sandaconda', 'Haunter', 'Rhyhorn', 'Dusclops', 'Bronzong', 'Hippowdon', 'Drapion', 'Solrock', 'Lunatone', 'Boldore', 'Gurdurr', 'Golett', 'Pawniard', 'Rufflet', 'Vullaby', 'Togedemaru', 'Crustle', 'Falinks'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 24)], undefined, GameConstants.GalarSubRegions.NorthGalar));
Routes.add(new RegionRoute('Steamdrift Way', GameConstants.Region.galar, 26, new RoutePokemon({
    land: ['Sneasel', 'Delibird', 'Snover', 'Galarian Darumaka', 'Snorunt', 'Snom', 'Throh', 'Sawk', 'Vanillish'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 25)], undefined, GameConstants.GalarSubRegions.NorthGalar));
Routes.add(new RegionRoute('Galar Route 2 Lakeside', GameConstants.Region.galar, 27, new RoutePokemon({
    land: ['Lotad', 'Seedot', 'Purrloin', 'Blipbug', 'Gossifleur', 'Chewtle', 'Galarian Zigzagoon', 'Nickit', 'Yamper', 'Obstagoon'],
    water: ['Lapras', 'Drednaw', 'Gyarados', 'Arrokuda', 'Barraskewda', 'Magikarp', 'Feebas'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 25)], undefined, GameConstants.GalarSubRegions.SouthGalar));
Routes.add(new RegionRoute('Galar Route 9', GameConstants.Region.galar, 28, new RoutePokemon({
    land: ['Octillery', 'Kingler', 'Pyukumuku', 'Gastrodon (East)', 'Jellicent', 'Mareanie', 'Glalie', 'Pelipper', 'Pincurchin'],
    water: ['Wishiwashi (Solo)', 'Qwilfish', 'Mantyke'],
    special: [
        new SpecialRoutePokemon(['Cramorant'], new WeatherRequirement([WeatherType.Clear, WeatherType.Overcast, WeatherType.Snow, WeatherType.Hail, WeatherType.Blizzard, WeatherType.Sunny, WeatherType.Sandstorm, WeatherType.Fog, WeatherType.Windy])),
        new SpecialRoutePokemon(['Cramorant (Gulping)'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Cramorant (Gorging)'], new WeatherRequirement([WeatherType.Thunderstorm])),
    ],
}), [new QuestLineStepCompletedRequirement('The Darkest Day', 5)], undefined, GameConstants.GalarSubRegions.NorthGalar));
Routes.add(new RegionRoute('Circhester Bay', GameConstants.Region.galar, 29, new RoutePokemon({
    land: ['Gastrodon (East)', 'Inkay', 'Octillery', 'Barbaracle', 'Bergmite', 'Toxapex', 'Dhelmise', 'Pincurchin'],
    water: ['Lapras', 'Mantine', 'Mantyke', 'Wailmer', 'Wailord', 'Remoraid'],
    special: [
        new SpecialRoutePokemon(['Cramorant'], new WeatherRequirement([WeatherType.Clear, WeatherType.Overcast, WeatherType.Snow, WeatherType.Hail, WeatherType.Blizzard, WeatherType.Sunny, WeatherType.Sandstorm, WeatherType.Fog, WeatherType.Windy])),
        new SpecialRoutePokemon(['Cramorant (Gulping)'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Cramorant (Gorging)'], new WeatherRequirement([WeatherType.Thunderstorm])),
    ],
    headbutt: ['Greedent'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 28)], undefined, GameConstants.GalarSubRegions.NorthGalar));
Routes.add(new RegionRoute('Outer Spikemuth', GameConstants.Region.galar, 30, new RoutePokemon({
    land: ['Liepard', 'Thievul', 'Perrserker', 'Morpeko', 'Jellicent', 'Bergmite', 'Mareanie', 'Toxapex', 'Dhelmise'],
    headbutt: ['Greedent'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 29)], undefined, GameConstants.GalarSubRegions.NorthGalar));
Routes.add(new RegionRoute('Winter Hill Station', GameConstants.Region.galar, 31, new RoutePokemon({
    land: ['Snom', 'Rhydon', 'Galarian Darumaka', 'Galarian Mr. Mime', 'Vanillish', 'Klang', 'Glalie', 'Snover', 'Vanilluxe', 'Cubchoo'],
}), [new GymBadgeRequirement(BadgeEnums.Galar_Dragon)], undefined, GameConstants.GalarSubRegions.NorthGalar));
Routes.add(new RegionRoute('Galar Route 10', GameConstants.Region.galar, 32, new RoutePokemon({
    land: ['Snom', 'Duraludon', 'Stonjourner', 'Beartic', 'Vanillish', 'Abomasnow', 'Galarian Darumaka', 'Galarian Mr. Mime', 'Sneasel', 'Snover', 'Cubchoo'],
    special: [
        new SpecialRoutePokemon(['Eiscue (Ice Face)'], new WeatherRequirement([WeatherType.Clear, WeatherType.Overcast, WeatherType.Rain, WeatherType.Thunderstorm, WeatherType.Snow, WeatherType.Hail, WeatherType.Blizzard, WeatherType.Sandstorm, WeatherType.Fog, WeatherType.Windy])),
        new SpecialRoutePokemon(['Eiscue (No Ice Face)'], new WeatherRequirement([WeatherType.Sunny])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 31)], undefined, GameConstants.GalarSubRegions.NorthGalar));
/*
ISLE OF ARMOR
*/
Routes.add(new RegionRoute('Fields of Honour', GameConstants.Region.galar, 33, new RoutePokemon({
    land: ['Galarian Slowpoke', 'Buneary', 'Jigglypuff', 'Abra', 'Klefki', 'Blipbug', 'Happiny'],
    water: ['Magikarp', 'Remoraid', 'Octillery', 'Tentacool', 'Wingull', 'Mantyke', 'Starmie'],
    special: [
        new SpecialRoutePokemon(['Chansey', 'Kingler', 'Rockruff', 'Lopunny', 'Toxapex', 'Comfey'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Inkay', 'Chansey', 'Toxapex', 'Zorua', 'Malamar', 'Kingler', 'Tentacruel'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Krabby', 'Chansey', 'Marill', 'Malamar', 'Kingler', 'Pelipper'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Krabby', 'Chansey', 'Pikachu', 'Luxio', 'Kingler', 'Pelipper'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Fomantis', 'Chansey', 'Kingler', 'Rockruff', 'Lopunny', 'Drednaw', 'Fletchinder'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Chansey', 'Comfey', 'Lopunny', 'Kingler'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Ralts', 'Blissey', 'Zorua', 'Wigglytuff', 'Toxapex', 'Kadabra', 'Drifloon'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Applin'],
}), [
    new MultiRequirement([
        new TemporaryBattleRequirement('Klara1'),
        new TemporaryBattleRequirement('Avery1'),
    ]),
], undefined, GameConstants.GalarSubRegions.IsleofArmor));
Routes.add(new RegionRoute('Soothing Wetlands', GameConstants.Region.galar, 34, new RoutePokemon({
    land: ['Skorupi', 'Dunsparce', 'Bouffalant', 'Lickitung', 'Shelmet', 'Happiny'],
    water: ['Magikarp', 'Barboach', 'Whiscash', 'Wooper', 'Chewtle'],
    special: [
        new SpecialRoutePokemon(['Chansey', 'Lickilicky', 'Lopunny', 'Rockruff', 'Quagsire', 'Drapion', 'Drednaw', 'Comfey'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Chansey', 'Pawniard', 'Croagunk', 'Drapion', 'Malamar', 'Zorua', 'Quagsire', 'Drednaw', 'Scraggy'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Chansey', 'Corphish', 'Goomy', 'Drapion', 'Malamar', 'Quagsire', 'Lickilicky', 'Marill', 'Poliwhirl', 'Politoed'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Chansey', 'Corphish', 'Goomy', 'Luxray', 'Luxio', 'Raichu', 'Pikachu', 'Poliwhirl', 'Politoed'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Chansey', 'Fomantis', 'Talonflame', 'Lilligant', 'Fletchinder', 'Comfey', 'Drednaw', 'Quagsire'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Chansey', 'Lickilicky', 'Lopunny', 'Comfey', 'Quagsire', 'Drapion', 'Drednaw'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Blissey', 'Kadabra', 'Wigglytuff', 'Zorua', 'Quagsire', 'Azumarill', 'Comfey', 'Poliwhirl'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Applin'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 33)], undefined, GameConstants.GalarSubRegions.IsleofArmor));
Routes.add(new RegionRoute('Forest of Focus', GameConstants.Region.galar, 35, new RoutePokemon({
    land: ['Venipede', 'Foongus', 'Tangela', 'Pikachu', 'Passimian', 'Oranguru', 'Happiny', 'Karrablast'],
    water: ['Magikarp', 'Goldeen', 'Arrokuda', 'Corphish', 'Cramorant'],
    special: [
        new SpecialRoutePokemon(['Chansey', 'Tangrowth', 'Amoonguss', 'Whiscash', 'Cramorant'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Chansey', 'Pawniard', 'Croagunk', 'Amoonguss', 'Scolipede', 'Crawdaunt', 'Whiscash', 'Cramorant'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Chansey', 'Corphish', 'Crawdaunt', 'Shelmet', 'Accelgor', 'Goomy', 'Golduck', 'Amoonguss', 'Barraskewda', 'Cramorant (Gulping)'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Chansey', 'Corphish', 'Goomy', 'Raichu', 'Luxray', 'Pichu', 'Shelmet', 'Crawdaunt', 'Barraskewda', 'Cramorant (Gorging)'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Chansey', 'Fomantis', 'Pinsir', 'Heracross', 'Tangrowth', 'Lurantis', 'Larvesta', 'Comfey', 'Amoonguss', 'Whiscash', 'Cramorant'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Cramorant'], new WeatherRequirement([WeatherType.Snow, WeatherType.Hail, WeatherType.Blizzard, WeatherType.Windy])),
        new SpecialRoutePokemon(['Chansey', 'Silicobra', 'Sandslash', 'Escavalier', 'Cubone', 'Whiscash', 'Cramorant'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Blissey', 'Zorua', 'Wigglytuff', 'Comfey', 'Azumarill', 'Gardevoir', 'Jigglypuff', 'Barraskewda', 'Cramorant'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Applin', 'Emolga'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 34),
        new RouteKillRequirement(10, GameConstants.Region.galar, 36),
        new RouteKillRequirement(10, GameConstants.Region.galar, 38),
    ]),
], undefined, GameConstants.GalarSubRegions.IsleofArmor));
Routes.add(new RegionRoute('Challenge Beach', GameConstants.Region.galar, 36, new RoutePokemon({
    land: ['Magnemite', 'Psyduck', 'Dedenne', 'Morpeko', 'Blipbug', 'Buneary', 'Jigglypuff', 'Happiny'],
    water: ['Magikarp', 'Wishiwashi (Solo)', 'Dhelmise', 'Staryu', 'Pelipper', 'Tentacool', 'Wingull'],
    special: [
        new SpecialRoutePokemon(['Chansey', 'Lopunny', 'Comfey', 'Drednaw', 'Marill', 'Cramorant', 'Kingler', 'Starmie', 'Tentacruel', 'Gyarados', 'Octillery', 'Barraskewda'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Chansey', 'Inkay', 'Drapion', 'Malamar', 'Drednaw', 'Crawdaunt', 'Drifblim', 'Swoobat', 'Cramorant (Gulping)', 'Toxapex', 'Starmie', 'Tentacruel', 'Jellicent'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Chansey', 'Shinx', 'Malamar', 'Crawdaunt', 'Golisopod', 'Cramorant', 'Drapion', 'Starmie', 'Kingler', 'Toxapex', 'Tentacruel', 'Cloyster', 'Gyarados', 'Jellicent', 'Barraskewda'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Chansey', 'Shinx', 'Magneton', 'Raichu', 'Drednaw', 'Golduck', 'Luxray', 'Magnezone', 'Starmie', 'Toxapex', 'Lanturn', 'Barraskewda', 'Cramorant (Gorging)'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Cramorant'], new WeatherRequirement([WeatherType.Snow, WeatherType.Hail, WeatherType.Blizzard, WeatherType.Windy])),
        new SpecialRoutePokemon(['Chansey', 'Fomantis', 'Lilligant', 'Lurantis', 'Fletchinder', 'Drednaw', 'Golduck', 'Volcarona', 'Cramorant', 'Kingler', 'Starmie', 'Tentacruel', 'Gyarados', 'Octillery', 'Barraskewda'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Chansey', 'Lopunny', 'Drednaw', 'Cramorant', 'Marill', 'Kingler', 'Starmie', 'Tentacruel', 'Gyarados', 'Octillery', 'Barraskewda'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Blissey', 'Wigglytuff', 'Comfey', 'Lopunny', 'Drifblim', 'Azumarill', 'Cramorant', 'Starmie', 'Toxapex', 'Cloyster', 'Lanturn', 'Jellicent', 'Barraskewda'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Applin'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 34),
        new RouteKillRequirement(10, GameConstants.Region.galar, 35),
        new RouteKillRequirement(10, GameConstants.Region.galar, 42),
        new RouteKillRequirement(10, GameConstants.Region.galar, 44),
    ]),
], undefined, GameConstants.GalarSubRegions.IsleofArmor));
Routes.add(new RegionRoute('Loop Lagoon', GameConstants.Region.galar, 37, new RoutePokemon({
    land: ['Sandygast', 'Wingull', 'Mareanie', 'Pincurchin', 'Dwebble', 'Blipbug', 'Happiny'],
    water: ['Magikarp', 'Shellder', 'Cloyster'],
    special: [
        new SpecialRoutePokemon(['Chansey', 'Drednaw', 'Alakazam', 'Rockruff', 'Gyarados', 'Tentacruel', 'Octillery'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Chansey', 'Inkay', 'Malamar', 'Toxapex', 'Palossand', 'Zoroark', 'Tentacruel', 'Jellicent'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Chansey', 'Krabby', 'Malamar', 'Toxapex', 'Alakazam', 'Pelipper', 'Tentacruel', 'Gyarados'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Chansey', 'Krabby', 'Luxio', 'Magnezone', 'Luxray', 'Lanturn', 'Gyarados'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Chansey', 'Fletchling', 'Drednaw', 'Larvesta', 'Talonflame', 'Tentacruel', 'Octillery', 'Gyarados'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Chansey', 'Drednaw', 'Palossand', 'Alakazam', 'Larvesta', 'Tentacruel', 'Octillery', 'Gyarados'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Blissey', 'Drifloon', 'Wigglytuff', 'Toxapex', 'Palossand', 'Zoroark', 'Jellicent'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Applin'],
}), [
    new OneFromManyRequirement([
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Courageous Cavern')),
        new RouteKillRequirement(10, GameConstants.Region.galar, 42),
    ]),
], undefined, GameConstants.GalarSubRegions.IsleofArmor));
Routes.add(new RegionRoute('Training Lowlands', GameConstants.Region.galar, 38, new RoutePokemon({
    land: ['Lillipup', 'Tauros', 'Miltank', 'Scyther', 'Pinsir', 'Heracross', 'Blipbug', 'Happiny'],
    water: ['Magikarp', 'Carvanha', 'Sharpedo', 'Corphish', 'Arrokuda', 'Staryu'],
    special: [
        new SpecialRoutePokemon(['Chansey', 'Stoutland', 'Kangaskhan', 'Herdier', 'Golduck', 'Kingler', 'Barraskewda', 'Cramorant'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Chansey', 'Inkay', 'Bisharp', 'Drapion', 'Swoobat', 'Kangaskhan', 'Karrablast', 'Golduck', 'Malamar', 'Kingler', 'Crawdaunt', 'Cramorant'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Chansey', 'Shinx', 'Kingler', 'Pelipper', 'Malamar', 'Shelmet', 'Scrafty', 'Toxicroak', 'Golduck', 'Barraskewda', 'Cramorant (Gulping)'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Chansey', 'Shinx', 'Luxray', 'Luxio', 'Magneton', 'Accelgor', 'Scrafty', 'Toxicroak', 'Golduck', 'Kingler', 'Barraskewda', 'Cramorant (Gorging)'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Cramorant'], new WeatherRequirement([WeatherType.Snow, WeatherType.Hail, WeatherType.Blizzard, WeatherType.Windy])),
        new SpecialRoutePokemon(['Chansey', 'Fomantis', 'Lilligant', 'Fletchinder', 'Talonflame', 'Drapion', 'Golduck', 'Kingler', 'Barraskewda', 'Cramorant'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Chansey', 'Silicobra', 'Scizor', 'Crustle', 'Skarmory', 'Escavalier', 'Jangmo-o', 'Kingler', 'Barraskewda', 'Cramorant'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Blissey', 'Wigglytuff', 'Comfey', 'Drifblim', 'Herdier', 'Azumarill', 'Gardevoir', 'Barraskewda', 'Cramorant'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Applin'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 35),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Brawlers Cave')),
        new RouteKillRequirement(10, GameConstants.Region.galar, 44),
    ]),
], undefined, GameConstants.GalarSubRegions.IsleofArmor));
Routes.add(new RegionRoute('Potbottom Desert', GameConstants.Region.galar, 39, new RoutePokemon({
    land: ['Sandile', 'Rhyhorn', 'Torkoal', 'Rufflet', 'Vullaby', 'Braviary', 'Mandibuzz'],
    special: [
        new SpecialRoutePokemon(['Chansey', 'Rhyperior', 'Marowak', 'Rhydon', 'Sandaconda'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Chansey', 'Pawniard', 'Jangmo-o', 'Krookodile', 'Krokorok'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Chansey', 'Shinx', 'Krookodile', 'Krokorok'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Chansey', 'Krookodile', 'Krokorok'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Chansey', 'Fletchling', 'Rhyperior', 'Marowak', 'Sandaconda', 'Rhydon', 'Volcarona'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Chansey', 'Silicobra', 'Scraggy', 'Rhyperior', 'Sandslash', 'Rhydon'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Blissey', 'Rhyperior', 'Marowak', 'Sandaconda'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Warm-Up Tunnel'))], undefined, GameConstants.GalarSubRegions.IsleofArmor));
Routes.add(new RegionRoute('Challenge Road', GameConstants.Region.galar, 40, new RoutePokemon({
    land: ['Skorupi', 'Dunsparce', 'Bouffalant', 'Lickitung', 'Shelmet', 'Happiny'],
    water: ['Magikarp', 'Barboach', 'Whiscash', 'Wooper', 'Chewtle'],
    special: [
        new SpecialRoutePokemon(['Chansey', 'Lickilicky', 'Lopunny', 'Rockruff', 'Quagsire', 'Drapion', 'Drednaw', 'Comfey'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Chansey', 'Pawniard', 'Croagunk', 'Drapion', 'Malamar', 'Zorua', 'Quagsire', 'Drednaw', 'Scraggy'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Chansey', 'Corphish', 'Goomy', 'Drapion', 'Malamar', 'Quagsire', 'Lickilicky', 'Marill', 'Poliwhirl', 'Politoed'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Chansey', 'Corphish', 'Goomy', 'Luxray', 'Luxio', 'Raichu', 'Pikachu', 'Poliwhirl', 'Politoed'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Chansey', 'Fomantis', 'Talonflame', 'Lilligant', 'Fletchinder', 'Comfey', 'Drednaw', 'Quagsire'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Chansey', 'Lickilicky', 'Lopunny', 'Comfey', 'Quagsire', 'Drapion', 'Drednaw'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Blissey', 'Kadabra', 'Wigglytuff', 'Zorua', 'Quagsire', 'Azumarill', 'Comfey', 'Poliwhirl'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Applin'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 38),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Brawlers Cave')),
    ]),
], undefined, GameConstants.GalarSubRegions.IsleofArmor));
Routes.add(new RegionRoute('Workout Sea', GameConstants.Region.galar, 41, new RoutePokemon({
    land: ['Blipbug', 'Ditto', 'Exeggcute', 'Happiny'],
    water: ['Magikarp', 'Remoraid', 'Octillery', 'Sharpedo', 'Mantyke', 'Wingull', 'Tentacool', 'Clauncher', 'Skrelp', 'Gyarados', 'Clawitzer', 'Dragalge'],
    special: [
        new SpecialRoutePokemon(['Chansey', 'Exeggutor', 'Rotom (Mow)'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Chansey', 'Rotom (Fan)', 'Tentacruel', 'Jellicent'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Chansey', 'Rotom (Frost)', 'Pelipper'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Chansey', 'Rotom (Wash)', 'Pelipper', 'Chinchou', 'Lanturn'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Chansey', 'Exeggutor', 'Rotom (Heat)', 'Fletchinder'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Chansey', 'Rotom'], new WeatherRequirement([WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Blissey', 'Rotom', 'Drifloon', 'Jellicent', 'Wailord'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Applin'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 33)], undefined, GameConstants.GalarSubRegions.IsleofArmor));
Routes.add(new RegionRoute('Stepping-Stone Sea', GameConstants.Region.galar, 42, new RoutePokemon({
    land: ['Blipbug', 'Exeggcute', 'Happiny', 'Wingull'],
    water: ['Magikarp', 'Wishiwashi (Solo)', 'Sharpedo', 'Tentacool', 'Frillish', 'Gyarados', 'Clauncher', 'Skrelp', 'Clawitzer', 'Dragalge'],
    special: [
        new SpecialRoutePokemon(['Chansey', 'Mantyke'], new WeatherRequirement([WeatherType.Clear, WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Chansey', 'Tentacruel', 'Jellicent'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Chansey', 'Pelipper'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Chansey', 'Pelipper', 'Chinchou', 'Lanturn'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Chansey', 'Fletchinder'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Blissey', 'Drifloon', 'Jellicent'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Applin'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 36),
        new RouteKillRequirement(10, GameConstants.Region.galar, 37),
        new RouteKillRequirement(10, GameConstants.Region.galar, 41),
        new RouteKillRequirement(10, GameConstants.Region.galar, 43),
        new RouteKillRequirement(10, GameConstants.Region.galar, 44),
    ]),
], undefined, GameConstants.GalarSubRegions.IsleofArmor));
Routes.add(new RegionRoute('Insular Sea', GameConstants.Region.galar, 43, new RoutePokemon({
    land: ['Blipbug', 'Wingull', 'Exeggcute', 'Happiny'],
    water: ['Magikarp', 'Wishiwashi (Solo)', 'Sharpedo', 'Tentacool', 'Horsea', 'Gyarados', 'Clauncher', 'Skrelp', 'Clawitzer', 'Dragalge'],
    special: [
        new SpecialRoutePokemon(['Exeggutor', 'Mantyke'], new WeatherRequirement([WeatherType.Clear, WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Zoroark', 'Pelipper', 'Tentacruel', 'Jellicent'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Exeggutor', 'Pelipper'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Magnezone', 'Pelipper', 'Chinchou', 'Lanturn'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Volcarona', 'Exeggutor', 'Fletchinder'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Alakazam', 'Comfey', 'Drifloon', 'Jellicent'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Applin'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 42),
        new RouteKillRequirement(10, GameConstants.Region.galar, 44),
    ]),
], undefined, GameConstants.GalarSubRegions.IsleofArmor));
Routes.add(new RegionRoute('Honeycalm Sea', GameConstants.Region.galar, 44, new RoutePokemon({
    water: ['Tentacool', 'Magikarp', 'Wishiwashi (Solo)', 'Sharpedo', 'Wingull', 'Wailmer', 'Clauncher', 'Skrelp', 'Gyarados', 'Clawitzer', 'Dragalge'],
    special: [
        new SpecialRoutePokemon(['Mantyke', 'Seadra'], new WeatherRequirement([WeatherType.Clear, WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Tentacruel', 'Jellicent', 'Seadra'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Pelipper', 'Seadra'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Pelipper', 'Chinchou', 'Lanturn', 'Kingdra'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Fletchinder', 'Seadra'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Drifloon', 'Jellicent', 'Seadra'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 36),
        new RouteKillRequirement(10, GameConstants.Region.galar, 38),
        new RouteKillRequirement(10, GameConstants.Region.galar, 42),
        new RouteKillRequirement(10, GameConstants.Region.galar, 43),
    ]),
], undefined, GameConstants.GalarSubRegions.IsleofArmor));
Routes.add(new RegionRoute('Honeycalm Island', GameConstants.Region.galar, 45, new RoutePokemon({
    land: ['Blipbug', 'Combee', 'Petilil', 'Happiny'],
    water: ['Magikarp', 'Wishiwashi (Solo)', 'Wingull', 'Tentacool', 'Wailmer', 'Gyarados', 'Clauncher', 'Skrelp', 'Clawitzer', 'Dragalge'],
    special: [
        new SpecialRoutePokemon(['Chansey', 'Lilligant', 'Mantyke'], new WeatherRequirement([WeatherType.Clear, WeatherType.Sandstorm])),
        new SpecialRoutePokemon(['Chansey', 'Tentacruel', 'Jellicent'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Chansey', 'Pelipper'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Chansey', 'Pelipper', 'Chinchou', 'Lanturn'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Chansey', 'Lilligant', 'Fletchinder'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Blissey', 'Comfey', 'Drifloon', 'Jellicent'], new WeatherRequirement([WeatherType.Fog])),
    ],
    headbutt: ['Skwovet', 'Applin'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 44)], undefined, GameConstants.GalarSubRegions.IsleofArmor));
//Crown Tundra
Routes.add(new RegionRoute('Slippery Slope', GameConstants.Region.galar, 46, new RoutePokemon({
    land: ['Snom', 'Piloswine', 'Jynx', 'Audino', 'Mime Jr.', 'Smoochum', 'Swinub'],
    special: [
        new SpecialRoutePokemon(['Dubwool', 'Wooloo', 'Mamoswine', 'Snorlax'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Swablu', 'Sneasel', 'Phantump', 'Trevenant', 'Weavile', 'Mamoswine'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Cryogonal', 'Mamoswine', 'Abomasnow', 'Swablu'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Cryogonal', 'Mamoswine', 'Glalie', 'Froslass'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Dubwool', 'Magmar', 'Wooloo', 'Magby', 'Snorlax', 'Magmar', 'Mamoswine', 'Magmortar'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Hatenna', 'Impidimp', 'Gothorita', 'Mimikyu', 'Duosion', 'Gothita', 'Solosis', 'Hattrem', 'Grimmsnarl', 'Gothitelle', 'Reuniclus'], new WeatherRequirement([WeatherType.Fog])),
        new SpecialRoutePokemon(['Amaura'], new ObtainedPokemonRequirement(pokemonMap.Amaura)),
    ],
    headbutt: ['Skwovet', 'Greedent'],
}), [new TemporaryBattleRequirement('Peony')], undefined, GameConstants.GalarSubRegions.CrownTundra));
Routes.add(new RegionRoute('Frostpoint Field', GameConstants.Region.galar, 47, new RoutePokemon({
    land: ['Abomasnow', 'Jynx', 'Audino', 'Mime Jr.', 'Snover', 'Smoochum'],
    special: [
        new SpecialRoutePokemon(['Dubwool', 'Wooloo', 'Nidoran(M)', 'Nidoran(F)', 'Snorlax'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Swablu', 'Sneasel', 'Nidoran(M)', 'Nidoran(F)', 'Weavile', 'Snorlax'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Cryogonal', 'Vanillish', 'Vanillite', 'Nidoran(M)', 'Nidoran(F)', 'Vanilluxe'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Cryogonal', 'Vanillish', 'Vanillite', 'Nidoran(M)', 'Nidoran(F)', 'Vanilluxe', 'Absol', 'Eevee'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Dubwool', 'Magmar', 'Magby', 'Nidoran(M)', 'Nidoran(F)', 'Snorlax', 'Magmar'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Hattrem', 'Gothorita', 'Duosion', 'Mimikyu', 'Hatenna', 'Gothita', 'Solosis', 'Hatterene', 'Gothitelle', 'Reuniclus'], new WeatherRequirement([WeatherType.Fog])),
        new SpecialRoutePokemon(['Amaura'], new ObtainedPokemonRequirement(pokemonMap.Amaura)),
    ],
    headbutt: ['Skwovet', 'Greedent'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 46)], undefined, GameConstants.GalarSubRegions.CrownTundra));
Routes.add(new RegionRoute('Giants Bed', GameConstants.Region.galar, 48, new RoutePokemon({
    land: ['Nidoran(M)', 'Nidoran(F)', 'Stonjourner', 'Bronzong', 'Audino', 'Mime Jr.', 'Shelmet', 'Nidorino', 'Nidorina'],
    water: ['Magikarp', 'Barboach', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)', 'Gyarados', 'Whiscash', 'Feebas'],
    special: [
        new SpecialRoutePokemon(['Dubwool', 'Gurdurr', 'Eevee', 'Wooloo', 'Nidoking', 'Nidoqueen', 'Conkeldurr', 'Leafeon', 'Snorlax'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Swablu', 'Galarian Linoone', 'Lampent', 'Nidoking', 'Nidoqueen', 'Obstagoon', 'Umbreon', 'Snorlax', 'Chandelure', 'Altaria'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Araquanid', 'Dewpider', 'Nidoking', 'Nidoqueen', 'Obstagoon', 'Vaporeon', 'Snorlax'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Araquanid', 'Galvantula', 'Electabuzz', 'Dewpider', 'Elekid', 'Electivire', 'Jolteon', 'Nidoking', 'Snorlax'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Snorunt', 'Cryogonal', 'Vanillish', 'Vanillite', 'Nidoking', 'Nidoqueen', 'Vanilluxe', 'Espeon', 'Glalie', 'Froslass', 'Snorlax'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Snorunt', 'Cryogonal', 'Vanillish', 'Absol', 'Vanillite', 'Glalie', 'Froslass', 'Glaceon', 'Greedent', 'Nidoking', 'Nidoqueen', 'Vanilluxe', 'Snorlax'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Dubwool', 'Magmar', 'Heatmor', 'Durant', 'Wooloo', 'Magby', 'Nidoqueen', 'Flareon', 'Magmortar', 'Snorlax'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Hattrem', 'Morgrem', 'Lampent', 'Clefairy', 'Mimikyu', 'Hatenna', 'Nidoking', 'Nidoqueen', 'Grimmsnarl', 'Hatterene', 'Clefable', 'Snorlax', 'Sylveon', 'Chandelure', 'Milotic'], new WeatherRequirement([WeatherType.Fog])),
        new SpecialRoutePokemon(['Aerodactyl'], new ObtainedPokemonRequirement(pokemonMap.Aerodactyl)),
        new SpecialRoutePokemon(['Lileep'], new ObtainedPokemonRequirement(pokemonMap.Lileep)),
    ],
    headbutt: ['Skwovet', 'Greedent'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 47)], undefined, GameConstants.GalarSubRegions.CrownTundra));
Routes.add(new RegionRoute('Old Cemetery', GameConstants.Region.galar, 49, new RoutePokemon({
    land: ['Nidoran(M)', 'Nidoran(F)', 'Sinistea', 'Audino', 'Mime Jr.', 'Karrablast'],
    special: [
        new SpecialRoutePokemon(['Lampent', 'Phantump', 'Trevenant'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Araquanid', 'Dewpider'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Araquanid', 'Galvantula', 'Electabuzz', 'Elekid'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Cryogonal', 'Vanillish', 'Vanillite', 'Froslass'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Cryogonal', 'Vanillish', 'Absol', 'Vanillite', 'Froslass'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Magmar', 'Heatmor', 'Durant', 'Magby'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Hattrem', 'Lampent', 'Galarian Ponyta', 'Mimikyu', 'Hatenna', 'Galarian Rapidash'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 48)], undefined, GameConstants.GalarSubRegions.CrownTundra));
Routes.add(new RegionRoute('Giants Foot', GameConstants.Region.galar, 50, new RoutePokemon({
    land: ['Copperajah', 'Bronzong', 'Stonjourner', 'Audino', 'Claydol', 'Mime Jr.', 'Cufant', 'Bronzor'],
    water: ['Magikarp', 'Barboach', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)', 'Gyarados', 'Whiscash', 'Feebas'],
    special: [
        new SpecialRoutePokemon(['Centiskorch', 'Gurdurr', 'Sizzlipede'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Swablu', 'Phantump', 'Altaria'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Araquanid', 'Dewpider'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Araquanid', 'Dewpider', 'Electabuzz', 'Galvantula', 'Elekid'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Snorunt', 'Cryogonal', 'Vanillish', 'Vanillite'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Snorunt', 'Cryogonal', 'Vanillish', 'Vanillite', 'Absol'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Centiskorch', 'Magmar', 'Sizzlipede', 'Magby'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Hattrem', 'Morgrem', 'Mimikyu', 'Hatenna'], new WeatherRequirement([WeatherType.Fog])),
        new SpecialRoutePokemon(['Omanyte'], new ObtainedPokemonRequirement(pokemonMap.Omanyte)),
        new SpecialRoutePokemon(['Kabuto'], new ObtainedPokemonRequirement(pokemonMap.Kabuto)),
        new SpecialRoutePokemon(['Lileep'], new ObtainedPokemonRequirement(pokemonMap.Lileep)),
        new SpecialRoutePokemon(['Archen'], new ObtainedPokemonRequirement(pokemonMap.Archen)),
    ],
    headbutt: ['Skwovet', 'Greedent'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 48)], undefined, GameConstants.GalarSubRegions.CrownTundra));
Routes.add(new RegionRoute('Frigid Sea', GameConstants.Region.galar, 51, new RoutePokemon({
    land: ['Bergmite', 'Mime Jr.', 'Audino'],
    water: ['Magikarp', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)', 'Wailmer', 'Gyarados', 'Dhelmise', 'Spheal', 'Avalugg', 'Wailmer'],
    special: [
        new SpecialRoutePokemon(['Sealeo', 'Walrein', 'Eiscue (Ice Face)'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Swablu', 'Sneasel', 'Altaria', 'Sealeo', 'Walrein', 'Eiscue (Ice Face)'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Araquanid', 'Dewpider', 'Sealeo', 'Eiscue (Ice Face)'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Araquanid', 'Electabuzz', 'Pincurchin', 'Dewpider', 'Elekid', 'Electivire', 'Sealeo', 'Eiscue (Ice Face)'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Vanillish', 'Beartic', 'Vanillite', 'Sealeo', 'Walrein', 'Cryogonal', 'Lapras', 'Eiscue (Ice Face)'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Eiscue (Ice Face)'], new WeatherRequirement([WeatherType.Hail, WeatherType.Sandstorm, WeatherType.Windy])),
        new SpecialRoutePokemon(['Vanillish', 'Beartic', 'Vanillite', 'Sealeo', 'Walrein', 'Cryogonal', 'Lapras', 'Beartic', 'Lapras', 'Absol', 'Eiscue (Ice Face)'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Hattrem', 'Mimikyu', 'Hatenna', 'Hatterene', 'Sealeo', 'Walrein', 'Eiscue (Ice Face)'], new WeatherRequirement([WeatherType.Fog])),
        new SpecialRoutePokemon(['Tirtouga'], new ObtainedPokemonRequirement(pokemonMap.Tirtouga)),
        new SpecialRoutePokemon(['Carracosta'], new MultiRequirement([new ObtainedPokemonRequirement(pokemonMap.Carracosta), new WeatherRequirement([WeatherType.Clear, WeatherType.Rain, WeatherType.Thunderstorm])])),
    ],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Roaring-Sea Caves'))], undefined, GameConstants.GalarSubRegions.CrownTundra));
Routes.add(new RegionRoute('Three-Point Pass', GameConstants.Region.galar, 52, new RoutePokemon({
    land: ['Bronzong', 'Avalugg', 'Claydol', 'Golurk', 'Audino', 'Mime Jr.', 'Bronzor', 'Bergmite'],
    special: [
        new SpecialRoutePokemon(['Dubwool', 'Wooloo'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Swablu', 'Phantump'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Araquanid', 'Dewpider'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Araquanid', 'Galvantula', 'Electabuzz', 'Dewpider', 'Elekid', 'Electivire'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Cryogonal', 'Vanillish', 'Vanillite'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Cryogonal', 'Vanillish', 'Absol', 'Vanillite'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Dubwool', 'Magmar', 'Druddigon', 'Heatmor', 'Durant', 'Wooloo', 'Magby'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Hattrem', 'Mimikyu', 'Hatenna'], new WeatherRequirement([WeatherType.Fog])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 51)], undefined, GameConstants.GalarSubRegions.CrownTundra));
Routes.add(new RegionRoute('Ballimere Lake', GameConstants.Region.galar, 53, new RoutePokemon({
    land: ['Boltund', 'Audino', 'Skwovet', 'Yamper', 'Mime Jr.', 'Aron'],
    water: ['Magikarp', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)', 'Barboach', 'Gyarados', 'Whiscash', 'Feebas', 'Dratini', 'Relicanth'],
    special: [
        new SpecialRoutePokemon(['Gossifleur', 'Cottonee', 'Corvisquire', 'Shuckle', 'Eevee', 'Corviknight', 'Whimsicott', 'Coalossal'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Swablu', 'Galarian Linoone', 'Morpeko', 'Noivern', 'Altaria', 'Obstagoon'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Araquanid', 'Cottonee', 'Noivern', 'Dewpider', 'Whimsicott', 'Dragonite', 'Eldegoss'], new WeatherRequirement([WeatherType.Rain])),
        new SpecialRoutePokemon(['Araquanid', 'Galvantula', 'Electabuzz', 'Morpeko', 'Dewpider', 'Elekid', 'Electivire', 'Dragonite', 'Coalossal', 'Dragonair'], new WeatherRequirement([WeatherType.Thunderstorm])),
        new SpecialRoutePokemon(['Cryogonal', 'Vanillish', 'Corvisquire', 'Vanillite', 'Vanilluxe', 'Coalossal'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Carkol', 'Magmar', 'Gossifleur', 'Shuckle', 'Magby', 'Magmortar'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Hattrem', 'Mimikyu', 'Hatenna', 'Hatterene', 'Coalossal', 'Dragonair'], new WeatherRequirement([WeatherType.Fog])),
        new SpecialRoutePokemon(['Anorith'], new ObtainedPokemonRequirement(pokemonMap.Anorith)),
        new SpecialRoutePokemon(['Armaldo'], new MultiRequirement([new ObtainedPokemonRequirement(pokemonMap.Armaldo), new WeatherRequirement([WeatherType.Rain, WeatherType.Thunderstorm])])),
        new SpecialRoutePokemon(['Tyrunt'], new ObtainedPokemonRequirement(pokemonMap.Tyrunt)),
        new SpecialRoutePokemon(['Tyrantrum'], new ObtainedPokemonRequirement(pokemonMap.Tyrantrum)),
    ],
    headbutt: ['Skwovet', 'Greedent', 'Munchlax'],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 48)], undefined, GameConstants.GalarSubRegions.CrownTundra));
Routes.add(new RegionRoute('Snowslide Slope', GameConstants.Region.galar, 54, new RoutePokemon({
    land: ['Snom', 'Beldum', 'Audino', 'Mime Jr.', 'Metang', 'Metagross'],
    water: ['Magikarp', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)', 'Gyarados'],
    special: [
        new SpecialRoutePokemon(['Dubwool', 'Druddigon', 'Wooloo'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Phantump', 'Sneasel', 'Weavile', 'Trevenant'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Cryogonal', 'Snorunt', 'Vanillish', 'Beartic', 'Delibird', 'Vanillite', 'Glalie', 'Vanilluxe', 'Froslass'], new WeatherRequirement([WeatherType.Snow])),
        new SpecialRoutePokemon(['Cryogonal', 'Snorunt', 'Vanillish', 'Beartic', 'Delibird', 'Vanillite', 'Glalie', 'Vanilluxe', 'Froslass', 'Galarian Darumaka', 'Absol'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Dubwool', 'Magmar', 'Wooloo', 'Magby', 'Magmortar'], new WeatherRequirement([WeatherType.Sunny])),
        new SpecialRoutePokemon(['Morgrem', 'Mimikyu', 'Clefairy', 'Clefable', 'Grimmsnarl'], new WeatherRequirement([WeatherType.Fog])),
        new SpecialRoutePokemon(['Amaura'], new ObtainedPokemonRequirement(pokemonMap.Amaura)),
        new SpecialRoutePokemon(['Aurorus'], new MultiRequirement([new ObtainedPokemonRequirement(pokemonMap.Aurorus), new WeatherRequirement([WeatherType.Clear, WeatherType.Overcast, WeatherType.Snow, WeatherType.Blizzard, WeatherType.Fog])])),
    ],
}), [new RouteKillRequirement(10, GameConstants.Region.galar, 48)], undefined, GameConstants.GalarSubRegions.CrownTundra));
Routes.add(new RegionRoute('Path to the Peak', GameConstants.Region.galar, 55, new RoutePokemon({
    land: ['Snom', 'Frosmoth', 'Audino'],
    special: [
        new SpecialRoutePokemon(['Druddigon'], new WeatherRequirement([WeatherType.Clear])),
        new SpecialRoutePokemon(['Swablu', 'Altaria'], new WeatherRequirement([WeatherType.Overcast])),
        new SpecialRoutePokemon(['Absol'], new WeatherRequirement([WeatherType.Blizzard])),
        new SpecialRoutePokemon(['Druddigon', 'Salamence', 'Garchomp'], new WeatherRequirement([WeatherType.Sunny])),
    ],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Tunnel to the Top'))], undefined, GameConstants.GalarSubRegions.CrownTundra));
///<reference path="../../declarations/routes/Routes.d.ts"/>
///<reference path="../../declarations/routes/RoutePokemon.d.ts"/>
/**
 * Helper class to retrieve information from RoutePokemon
 */
class RouteHelper {
    /**
     * Retrieves a list of all Pokémon that can be caught on that route.
     * @param route
     * @param region
     * @param includeHeadbutt
     * @returns {string[]} list of all Pokémon that can be caught
     */
    static getAvailablePokemonList(route, region, includeHeadbutt = true) {
        var _a;
        // If the route is somehow higher than allowed, use the first route to generateWildPokemon Pokémon
        const possiblePokemons = (_a = Routes.getRoute(region, route)) === null || _a === void 0 ? void 0 : _a.pokemon;
        if (!possiblePokemons) {
            return ['Rattata'];
        }
        // Land Pokémon
        let pokemonList = possiblePokemons.land;
        // Water Pokémon
        if (App.game.keyItems.hasKeyItem(KeyItemType.Super_rod) || possiblePokemons.land.length == 0) {
            pokemonList = pokemonList.concat(possiblePokemons.water);
        }
        // Headbutt Pokémon
        if (includeHeadbutt) {
            pokemonList = pokemonList.concat(possiblePokemons.headbutt);
        }
        // Special requirement Pokémon
        pokemonList = pokemonList.concat(...possiblePokemons.special.filter(p => p.isAvailable()).map(p => p.pokemon));
        return pokemonList;
    }
    /**
     * Checks if all Pokémon on this route are caught by the player.
     * @param route
     * @param region
     * @param includeShiny
     * @param includeHeadbutt
     * @returns {boolean} true if all Pokémon on this route are caught.
     */
    static routeCompleted(route, region, includeShiny, includeHeadbutt = true) {
        return RouteHelper.listCompleted(RouteHelper.getAvailablePokemonList(route, region, includeHeadbutt), includeShiny);
    }
    static listCompleted(possiblePokemon, includeShiny) {
        for (let i = 0; i < possiblePokemon.length; i++) {
            if (!App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(possiblePokemon[i]).id)) {
                return false;
            }
            if (includeShiny && !App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(possiblePokemon[i]).id, true)) {
                return false;
            }
        }
        return true;
    }
    static minPokerus(possiblePokemon) {
        var _a;
        let pokerus = 3;
        for (let i = 0; i < possiblePokemon.length; i++) {
            const pokerusStatus = (_a = App.game.party.getPokemonByName(possiblePokemon[i])) === null || _a === void 0 ? void 0 : _a.pokerus;
            pokerus = Math.min(pokerus, pokerusStatus);
        }
        return pokerus;
    }
    static minPokerusCheck(possiblePokemon) {
        if (possiblePokemon.length == 0) {
            return false;
        }
        return this.minPokerus(possiblePokemon) > 0;
    }
    static isAchievementsComplete(route, region) {
        return AchievementHandler.achievementList.every(achievement => {
            return !(achievement.property instanceof RouteKillRequirement && achievement.property.region === region && achievement.property.route === route && !achievement.isCompleted());
        });
    }
    static isThereQuestAtLocation(route, region) {
        return App.game.quests.currentQuests().some(q => {
            return q instanceof DefeatPokemonsQuest && q.route == route && q.region == region;
        });
    }
}
/// <reference path="../../declarations/DataStore/StatisticStore/index.d.ts" />
/// <reference path="../GameConstants.d.ts" />
var areaStatus;
(function (areaStatus) {
    areaStatus[areaStatus["locked"] = 0] = "locked";
    areaStatus[areaStatus["unlockedUnfinished"] = 1] = "unlockedUnfinished";
    areaStatus[areaStatus["questAtLocation"] = 2] = "questAtLocation";
    areaStatus[areaStatus["uncaughtPokemon"] = 3] = "uncaughtPokemon";
    areaStatus[areaStatus["uncaughtShinyPokemonAndMissingAchievement"] = 4] = "uncaughtShinyPokemonAndMissingAchievement";
    areaStatus[areaStatus["uncaughtShinyPokemon"] = 5] = "uncaughtShinyPokemon";
    areaStatus[areaStatus["missingAchievement"] = 6] = "missingAchievement";
    areaStatus[areaStatus["completed"] = 7] = "completed";
})(areaStatus || (areaStatus = {}));
class MapHelper {
    static routeExist(route, region) {
        return !!Routes.getRoute(region, route);
    }
    static normalizeRoute(route, region, skipIgnoredRoutes = true) {
        return Routes.normalizedNumber(region, route, skipIgnoredRoutes);
    }
    static getCurrentEnvironment() {
        var _a, _b, _c, _d, _e;
        const area = player.route() ||
            (App.game.gameState == GameConstants.GameState.temporaryBattle ? (_c = (_b = (_a = TemporaryBattleRunner.battleObservable()) === null || _a === void 0 ? void 0 : _a.parent) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : (_d = TemporaryBattleRunner.battleObservable()) === null || _d === void 0 ? void 0 : _d.optionalArgs.returnTown : undefined) || ((_e = player.town()) === null || _e === void 0 ? void 0 : _e.name) ||
            undefined;
        const [env] = Object.entries(GameConstants.Environments).find(([, regions]) => { var _a; return (_a = regions[player.region]) === null || _a === void 0 ? void 0 : _a.has(area); }) || [];
        return env;
    }
    static calculateBattleCssClass() {
        return GameConstants.EnvironmentCssClass[this.getCurrentEnvironment()];
    }
    static calculateRouteCssClass(route, region) {
        var _a;
        let cls = '';
        if (!MapHelper.accessToRoute(route, region)) {
            cls = areaStatus[areaStatus.locked];
        }
        else if (App.game.statistics.routeKills[region][route]() < GameConstants.ROUTE_KILLS_NEEDED) {
            cls = areaStatus[areaStatus.unlockedUnfinished];
        }
        else if (RouteHelper.isThereQuestAtLocation(route, region)) {
            cls = areaStatus[areaStatus.questAtLocation];
        }
        else if (!RouteHelper.routeCompleted(route, region, false)) {
            cls = areaStatus[areaStatus.uncaughtPokemon];
        }
        else if (!RouteHelper.routeCompleted(route, region, true) && !RouteHelper.isAchievementsComplete(route, region)) {
            cls = areaStatus[areaStatus.uncaughtShinyPokemonAndMissingAchievement];
        }
        else if (!RouteHelper.routeCompleted(route, region, true)) {
            cls = areaStatus[areaStatus.uncaughtShinyPokemon];
        }
        else if (!RouteHelper.isAchievementsComplete(route, region)) {
            cls = areaStatus[areaStatus.missingAchievement];
        }
        else {
            cls = areaStatus[areaStatus.completed];
        }
        // Water routes
        if ((_a = GameConstants.Environments.Water[region]) === null || _a === void 0 ? void 0 : _a.has(route)) {
            cls = `${cls} waterRoute`;
        }
        return cls;
    }
    static isRouteCurrentLocation(route, region) {
        return player.route() == route && player.region == region;
    }
    static isTownCurrentLocation(townName) {
        if (App.game.gameState == GameConstants.GameState.temporaryBattle) {
            return TemporaryBattleRunner.battleObservable().getTown().name == townName;
        }
        return !player.route() && player.town().name == townName;
    }
    static calculateTownCssClass(townName) {
        // Check if this location is locked
        if (!MapHelper.accessToTown(townName)) {
            return areaStatus[areaStatus.locked];
        }
        const states = [];
        // Is this location a dungeon
        if (dungeonList[townName]) {
            if (!App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(townName)]()) {
                states.push(areaStatus.unlockedUnfinished);
            }
            else if (DungeonRunner.isThereQuestAtLocation(dungeonList[townName])) {
                states.push(areaStatus.questAtLocation);
            }
            else if (!DungeonRunner.dungeonCompleted(dungeonList[townName], false)) {
                states.push(areaStatus.uncaughtPokemon);
            }
            else if (!DungeonRunner.dungeonCompleted(dungeonList[townName], true) && !DungeonRunner.isAchievementsComplete(dungeonList[townName])) {
                states.push(areaStatus.uncaughtShinyPokemonAndMissingAchievement);
            }
            else if (!DungeonRunner.dungeonCompleted(dungeonList[townName], true)) {
                states.push(areaStatus.uncaughtShinyPokemon);
            }
            else if (!DungeonRunner.isAchievementsComplete(dungeonList[townName])) {
                states.push(areaStatus.missingAchievement);
            }
        }
        const town = TownList[townName];
        town.content.forEach(c => {
            // If the town itself is not locked, it should never show locked
            if (c.areaStatus() != areaStatus.locked) {
                states.push(c.areaStatus());
            }
        });
        if (states.length) {
            const importantState = Math.min(...states);
            if (importantState >= areaStatus.uncaughtShinyPokemon && states.includes(areaStatus.uncaughtShinyPokemon) && states.includes(areaStatus.missingAchievement)) {
                return areaStatus[areaStatus.uncaughtShinyPokemonAndMissingAchievement];
            }
            return areaStatus[importantState];
        }
        return areaStatus[areaStatus.completed];
    }
    static accessToTown(townName) {
        const town = TownList[townName];
        if (!town) {
            return false;
        }
        return town.isUnlocked();
    }
    static moveToTown(townName) {
        var _a;
        if (MapHelper.accessToTown(townName)) {
            App.game.gameState = GameConstants.GameState.idle;
            player.route(0);
            Battle.route = 0;
            Battle.catching(false);
            const town = TownList[townName];
            player.town(town);
            Battle.enemyPokemon(null);
            //this should happen last, so all the values all set beforehand
            App.game.gameState = GameConstants.GameState.town;
        }
        else {
            const town = TownList[townName];
            const reqsList = [];
            (_a = town.requirements) === null || _a === void 0 ? void 0 : _a.forEach(requirement => {
                if (!requirement.isCompleted()) {
                    reqsList.push(requirement.hint());
                }
            });
            Notifier.notify({
                message: `You don't have access to that location yet.\n<i>${reqsList.join('\n')}</i>`,
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static validRoute(route = 0, region = 0) {
        return !!Routes.getRoute(region, route);
    }
    static openShipModal() {
        const openModal = () => {
            $('#ShipModal').modal('show');
        };
        if (player.highestRegion() > 0 && (TownList[GameConstants.DockTowns[player.region]].isUnlocked())) {
            openModal();
        }
        else {
            Notifier.notify({
                message: 'You cannot access this dock yet!\n<i>Progress further to return to previous regions!</i>',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static ableToTravel() {
        var _a, _b;
        // If player already reached highest region, they can't move on
        if (player.highestRegion() >= GameConstants.MAX_AVAILABLE_REGION) {
            return false;
        }
        const challengeActive = App.game.challenges.list.requireCompletePokedex.active();
        const nextStartingTownUnlocked = (_b = (_a = TownList[GameConstants.StartingTowns[player.highestRegion() + 1]]) === null || _a === void 0 ? void 0 : _a.isUnlocked()) !== null && _b !== void 0 ? _b : false;
        const fullDex = AchievementHandler.findByName(`${GameConstants.camelCaseToString(GameConstants.Region[player.highestRegion()])} Master`).isCompleted();
        return nextStartingTownUnlocked && (fullDex || !challengeActive);
    }
    static travelToNextRegion() {
        if (MapHelper.ableToTravel()) {
            // Gain queue slots based on highest region
            App.game.breeding.gainQueueSlot(App.game.breeding.queueSlotsGainedFromRegion(player.highestRegion()));
            GameHelper.incrementObservable(player.highestRegion);
            player.highestSubRegion(0);
            MapHelper.moveToTown(GameConstants.StartingTowns[player.highestRegion()]);
            player.region = player.highestRegion();
            // Track when users move region and how long it took in seconds
            LogEvent('new region', 'new region', GameConstants.Region[player.highestRegion()], App.game.statistics.secondsPlayed());
            // Gather users attack when they moved regions
            LogEvent('attack measurement', 'new region', GameConstants.Region[player.highestRegion()], App.game.party.calculatePokemonAttack(undefined, undefined, true, undefined, true, false, WeatherType.Clear));
            $('#pickStarterModal').modal('show');
        }
    }
}
MapHelper.moveToRoute = function (route, region) {
    var _a;
    if (isNaN(route)) {
        return;
    }
    const routeData = Routes.getRoute(region, route);
    let genNewEnemy = false;
    if (route != Battle.route) {
        genNewEnemy = true;
    }
    if (this.accessToRoute(route, region)) {
        player.route(route);
        player._subregion(routeData.subRegion != undefined ? routeData.subRegion : 0);
        if (player.region != region) {
            player.region = region;
        }
        if (genNewEnemy && !Battle.catching()) {
            Battle.generateNewEnemy();
        }
        App.game.gameState = GameConstants.GameState.fighting;
    }
    else {
        if (!MapHelper.routeExist(route, region)) {
            return Notifier.notify({
                message: `${Routes.getName(route, region)} does not exist in the ${GameConstants.Region[region]} region.`,
                type: NotificationConstants.NotificationOption.danger,
            });
        }
        const reqsList = [];
        (_a = routeData.requirements) === null || _a === void 0 ? void 0 : _a.forEach(requirement => {
            if (!requirement.isCompleted()) {
                reqsList.push(requirement.hint());
            }
        });
        Notifier.notify({
            message: `You don't have access to that route yet.\n<i>${reqsList.join('\n')}</i>`,
            type: NotificationConstants.NotificationOption.warning,
        });
    }
};
MapHelper.accessToRoute = function (route, region) {
    return this.routeExist(route, region) && Routes.getRoute(region, route).isUnlocked();
};
